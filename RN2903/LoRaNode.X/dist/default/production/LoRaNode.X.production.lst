

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Oct 04 16:22:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1,group=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1,group=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1,group=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1,group=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1,group=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	text194,global,reloc=2,class=CODE,delta=1
   218                           	psect	text195,global,reloc=2,class=CODE,delta=1,group=1
   219                           	psect	text196,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	text215,global,reloc=2,class=CODE,delta=1
   239                           	psect	text216,global,reloc=2,class=CODE,delta=1
   240                           	psect	text217,global,reloc=2,class=CODE,delta=1
   241                           	psect	text218,global,reloc=2,class=CODE,delta=1
   242                           	psect	text219,global,reloc=2,class=CODE,delta=1
   243                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   244                           	psect	text220,global,reloc=2,class=CODE,delta=1
   245                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   246                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   247  0000                     
   248                           ; Version 1.45
   249                           ; Generated 16/11/2017 GMT
   250                           ; 
   251                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   252                           ; All rights reserved.
   253                           ; 
   254                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   255                           ; 
   256                           ; Redistribution and use in source and binary forms, with or without modification, are
   257                           ; permitted provided that the following conditions are met:
   258                           ; 
   259                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   260                           ;        conditions and the following disclaimer.
   261                           ; 
   262                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   263                           ;        of conditions and the following disclaimer in the documentation and/or other
   264                           ;        materials provided with the distribution.
   265                           ; 
   266                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   267                           ;        software without specific prior written permission.
   268                           ; 
   269                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   270                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   271                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   272                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   273                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   274                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   275                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   276                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   277                           ; 
   278                           ; 
   279                           ; Code-generator required, PIC18LF46K22 Definitions
   280                           ; 
   281                           ; SFR Addresses
   282  0000                     
   283 ;; Function _DIO5_ISR_Lora is unused but had its address taken
   284  0000                     
   285 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   286 ;;TransmissionErrorCallback@param	offset=-1 (param)
   287 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   288 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   289 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   290 ;;_param	offset=-1 (param)
   291 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   292 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   293 ;;_LORAWAN_LinkCheckCallback$1110	offset	0
   294 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   295 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   296 ;;AutomaticReplyCallback@param	offset=-1 (param)
   297 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   298 ;;AckRetransmissionCallback@param	offset=-1 (param)
   299 ;;_UpdateJoinSuccessState$1127	offset	0
   300 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   301                           
   302                           	psect	idataCOMRAM
   303  0000'                    __pidataCOMRAM:
   304                           	opt stack 0
   305                           
   306                           ;initializer for _ticksToScheduledInterrupt
   307  0000' FFFF               	dw	65535
   308  0002' FFFF               	dw	65535
   309                           
   310                           	psect	idataBANK1
   311  0000'                    __pidataBANK1:
   312                           	opt stack 0
   313                           
   314                           ;initializer for GenerateSubkey@F7103
   315  0000' 00                 	db	0
   316  0001' 00                 	db	0
   317  0002' 00                 	db	0
   318  0003' 00                 	db	0
   319  0004' 00                 	db	0
   320  0005' 00                 	db	0
   321  0006' 00                 	db	0
   322  0007' 00                 	db	0
   323  0008' 00                 	db	0
   324  0009' 00                 	db	0
   325  000A' 00                 	db	0
   326  000B' 00                 	db	0
   327  000C' 00                 	db	0
   328  000D' 00                 	db	0
   329  000E' 00                 	db	0
   330  000F' 87                 	db	135
   331                           
   332                           ;initializer for _randx
   333  0010' 0001               	dw	1
   334  0012' 0000               	dw	0
   335                           
   336                           ;initializer for _deviceEuiNew
   337  0014' AD                 	db	173
   338  0015' 75                 	db	117
   339  0016' 45                 	db	69
   340  0017' 44                 	db	68
   341  0018' 66                 	db	102
   342  0019' CD                 	db	205
   343  001A' EF                 	db	239
   344  001B' AB                 	db	171
   345                           
   346                           ;initializer for _applicationEuiNew
   347  001C' 70                 	db	112
   348  001D' B3                 	db	179
   349  001E' D5                 	db	213
   350  001F' 7E                 	db	126
   351  0020' D0                 	db	208
   352  0021' 00                 	db	0
   353  0022' B7                 	db	183
   354  0023' 7B                 	db	123
   355                           
   356                           	psect	idataBANK2
   357  0000'                    __pidataBANK2:
   358                           	opt stack 0
   359                           
   360                           ;initializer for _applicationKeyNew
   361  0000' D7                 	db	215
   362  0001' A0                 	db	160
   363  0002' E5                 	db	229
   364  0003' B6                 	db	182
   365  0004' A0                 	db	160
   366  0005' 75                 	db	117
   367  0006' B4                 	db	180
   368  0007' 2A                 	db	42
   369  0008' C9                 	db	201
   370  0009' DF                 	db	223
   371  000A' 8F                 	db	143
   372  000B' D5                 	db	213
   373  000C' 00                 	db	0
   374  000D' 08                 	db	8
   375  000E' A7                 	db	167
   376  000F' 89                 	db	137
   377                           
   378                           	psect	mediumconst
   379  0000'                    __pmediumconst:
   380                           	opt stack 0
   381  0000' 00                 	db	0
   382  0001'                    _STable:
   383                           	opt stack 0
   384  0001' 63                 	db	99
   385  0002' 7C                 	db	124
   386  0003' 77                 	db	119
   387  0004' 7B                 	db	123
   388  0005' F2                 	db	242
   389  0006' 6B                 	db	107
   390  0007' 6F                 	db	111
   391  0008' C5                 	db	197
   392  0009' 30                 	db	48
   393  000A' 01                 	db	1
   394  000B' 67                 	db	103
   395  000C' 2B                 	db	43
   396  000D' FE                 	db	254
   397  000E' D7                 	db	215
   398  000F' AB                 	db	171
   399  0010' 76                 	db	118
   400  0011' CA                 	db	202
   401  0012' 82                 	db	130
   402  0013' C9                 	db	201
   403  0014' 7D                 	db	125
   404  0015' FA                 	db	250
   405  0016' 59                 	db	89
   406  0017' 47                 	db	71
   407  0018' F0                 	db	240
   408  0019' AD                 	db	173
   409  001A' D4                 	db	212
   410  001B' A2                 	db	162
   411  001C' AF                 	db	175
   412  001D' 9C                 	db	156
   413  001E' A4                 	db	164
   414  001F' 72                 	db	114
   415  0020' C0                 	db	192
   416  0021' B7                 	db	183
   417  0022' FD                 	db	253
   418  0023' 93                 	db	147
   419  0024' 26                 	db	38
   420  0025' 36                 	db	54
   421  0026' 3F                 	db	63
   422  0027' F7                 	db	247
   423  0028' CC                 	db	204
   424  0029' 34                 	db	52
   425  002A' A5                 	db	165
   426  002B' E5                 	db	229
   427  002C' F1                 	db	241
   428  002D' 71                 	db	113
   429  002E' D8                 	db	216
   430  002F' 31                 	db	49
   431  0030' 15                 	db	21
   432  0031' 04                 	db	4
   433  0032' C7                 	db	199
   434  0033' 23                 	db	35
   435  0034' C3                 	db	195
   436  0035' 18                 	db	24
   437  0036' 96                 	db	150
   438  0037' 05                 	db	5
   439  0038' 9A                 	db	154
   440  0039' 07                 	db	7
   441  003A' 12                 	db	18
   442  003B' 80                 	db	128
   443  003C' E2                 	db	226
   444  003D' EB                 	db	235
   445  003E' 27                 	db	39
   446  003F' B2                 	db	178
   447  0040' 75                 	db	117
   448  0041' 09                 	db	9
   449  0042' 83                 	db	131
   450  0043' 2C                 	db	44
   451  0044' 1A                 	db	26
   452  0045' 1B                 	db	27
   453  0046' 6E                 	db	110
   454  0047' 5A                 	db	90
   455  0048' A0                 	db	160
   456  0049' 52                 	db	82
   457  004A' 3B                 	db	59
   458  004B' D6                 	db	214
   459  004C' B3                 	db	179
   460  004D' 29                 	db	41
   461  004E' E3                 	db	227
   462  004F' 2F                 	db	47
   463  0050' 84                 	db	132
   464  0051' 53                 	db	83
   465  0052' D1                 	db	209
   466  0053' 00                 	db	0
   467  0054' ED                 	db	237
   468  0055' 20                 	db	32
   469  0056' FC                 	db	252
   470  0057' B1                 	db	177
   471  0058' 5B                 	db	91
   472  0059' 6A                 	db	106
   473  005A' CB                 	db	203
   474  005B' BE                 	db	190
   475  005C' 39                 	db	57
   476  005D' 4A                 	db	74
   477  005E' 4C                 	db	76
   478  005F' 58                 	db	88
   479  0060' CF                 	db	207
   480  0061' D0                 	db	208
   481  0062' EF                 	db	239
   482  0063' AA                 	db	170
   483  0064' FB                 	db	251
   484  0065' 43                 	db	67
   485  0066' 4D                 	db	77
   486  0067' 33                 	db	51
   487  0068' 85                 	db	133
   488  0069' 45                 	db	69
   489  006A' F9                 	db	249
   490  006B' 02                 	db	2
   491  006C' 7F                 	db	127
   492  006D' 50                 	db	80
   493  006E' 3C                 	db	60
   494  006F' 9F                 	db	159
   495  0070' A8                 	db	168
   496  0071' 51                 	db	81
   497  0072' A3                 	db	163
   498  0073' 40                 	db	64
   499  0074' 8F                 	db	143
   500  0075' 92                 	db	146
   501  0076' 9D                 	db	157
   502  0077' 38                 	db	56
   503  0078' F5                 	db	245
   504  0079' BC                 	db	188
   505  007A' B6                 	db	182
   506  007B' DA                 	db	218
   507  007C' 21                 	db	33
   508  007D' 10                 	db	16
   509  007E' FF                 	db	255
   510  007F' F3                 	db	243
   511  0080' D2                 	db	210
   512  0081' CD                 	db	205
   513  0082' 0C                 	db	12
   514  0083' 13                 	db	19
   515  0084' EC                 	db	236
   516  0085' 5F                 	db	95
   517  0086' 97                 	db	151
   518  0087' 44                 	db	68
   519  0088' 17                 	db	23
   520  0089' C4                 	db	196
   521  008A' A7                 	db	167
   522  008B' 7E                 	db	126
   523  008C' 3D                 	db	61
   524  008D' 64                 	db	100
   525  008E' 5D                 	db	93
   526  008F' 19                 	db	25
   527  0090' 73                 	db	115
   528  0091' 60                 	db	96
   529  0092' 81                 	db	129
   530  0093' 4F                 	db	79
   531  0094' DC                 	db	220
   532  0095' 22                 	db	34
   533  0096' 2A                 	db	42
   534  0097' 90                 	db	144
   535  0098' 88                 	db	136
   536  0099' 46                 	db	70
   537  009A' EE                 	db	238
   538  009B' B8                 	db	184
   539  009C' 14                 	db	20
   540  009D' DE                 	db	222
   541  009E' 5E                 	db	94
   542  009F' 0B                 	db	11
   543  00A0' DB                 	db	219
   544  00A1' E0                 	db	224
   545  00A2' 32                 	db	50
   546  00A3' 3A                 	db	58
   547  00A4' 0A                 	db	10
   548  00A5' 49                 	db	73
   549  00A6' 06                 	db	6
   550  00A7' 24                 	db	36
   551  00A8' 5C                 	db	92
   552  00A9' C2                 	db	194
   553  00AA' D3                 	db	211
   554  00AB' AC                 	db	172
   555  00AC' 62                 	db	98
   556  00AD' 91                 	db	145
   557  00AE' 95                 	db	149
   558  00AF' E4                 	db	228
   559  00B0' 79                 	db	121
   560  00B1' E7                 	db	231
   561  00B2' C8                 	db	200
   562  00B3' 37                 	db	55
   563  00B4' 6D                 	db	109
   564  00B5' 8D                 	db	141
   565  00B6' D5                 	db	213
   566  00B7' 4E                 	db	78
   567  00B8' A9                 	db	169
   568  00B9' 6C                 	db	108
   569  00BA' 56                 	db	86
   570  00BB' F4                 	db	244
   571  00BC' EA                 	db	234
   572  00BD' 65                 	db	101
   573  00BE' 7A                 	db	122
   574  00BF' AE                 	db	174
   575  00C0' 08                 	db	8
   576  00C1' BA                 	db	186
   577  00C2' 78                 	db	120
   578  00C3' 25                 	db	37
   579  00C4' 2E                 	db	46
   580  00C5' 1C                 	db	28
   581  00C6' A6                 	db	166
   582  00C7' B4                 	db	180
   583  00C8' C6                 	db	198
   584  00C9' E8                 	db	232
   585  00CA' DD                 	db	221
   586  00CB' 74                 	db	116
   587  00CC' 1F                 	db	31
   588  00CD' 4B                 	db	75
   589  00CE' BD                 	db	189
   590  00CF' 8B                 	db	139
   591  00D0' 8A                 	db	138
   592  00D1' 70                 	db	112
   593  00D2' 3E                 	db	62
   594  00D3' B5                 	db	181
   595  00D4' 66                 	db	102
   596  00D5' 48                 	db	72
   597  00D6' 03                 	db	3
   598  00D7' F6                 	db	246
   599  00D8' 0E                 	db	14
   600  00D9' 61                 	db	97
   601  00DA' 35                 	db	53
   602  00DB' 57                 	db	87
   603  00DC' B9                 	db	185
   604  00DD' 86                 	db	134
   605  00DE' C1                 	db	193
   606  00DF' 1D                 	db	29
   607  00E0' 9E                 	db	158
   608  00E1' E1                 	db	225
   609  00E2' F8                 	db	248
   610  00E3' 98                 	db	152
   611  00E4' 11                 	db	17
   612  00E5' 69                 	db	105
   613  00E6' D9                 	db	217
   614  00E7' 8E                 	db	142
   615  00E8' 94                 	db	148
   616  00E9' 9B                 	db	155
   617  00EA' 1E                 	db	30
   618  00EB' 87                 	db	135
   619  00EC' E9                 	db	233
   620  00ED' CE                 	db	206
   621  00EE' 55                 	db	85
   622  00EF' 28                 	db	40
   623  00F0' DF                 	db	223
   624  00F1' 8C                 	db	140
   625  00F2' A1                 	db	161
   626  00F3' 89                 	db	137
   627  00F4' 0D                 	db	13
   628  00F5' BF                 	db	191
   629  00F6' E6                 	db	230
   630  00F7' 42                 	db	66
   631  00F8' 68                 	db	104
   632  00F9' 41                 	db	65
   633  00FA' 99                 	db	153
   634  00FB' 2D                 	db	45
   635  00FC' 0F                 	db	15
   636  00FD' B0                 	db	176
   637  00FE' 54                 	db	84
   638  00FF' BB                 	db	187
   639  0100' 16                 	db	22
   640  0101'                    __end_of_STable:
   641                           	opt stack 0
   642  0101'                    _dpowers:
   643                           	opt stack 0
   644  0101' 0001               	dw	1
   645  0103' 0000               	dw	0
   646  0105' 000A               	dw	10
   647  0107' 0000               	dw	0
   648  0109' 0064               	dw	100
   649  010B' 0000               	dw	0
   650  010D' 03E8               	dw	1000
   651  010F' 0000               	dw	0
   652  0111' 2710               	dw	10000
   653  0113' 0000               	dw	0
   654  0115' 86A0               	dw	34464
   655  0117' 0001               	dw	1
   656  0119' 4240               	dw	16960
   657  011B' 000F               	dw	15
   658  011D' 9680               	dw	38528
   659  011F' 0098               	dw	152
   660  0121' E100               	dw	57600
   661  0123' 05F5               	dw	1525
   662  0125' CA00               	dw	51712
   663  0127' 3B9A               	dw	15258
   664  0129'                    __end_of_dpowers:
   665                           	opt stack 0
   666  0129'                    _spreadingFactor:
   667                           	opt stack 0
   668  0129' 0A                 	db	10
   669  012A' 09                 	db	9
   670  012B' 08                 	db	8
   671  012C' 07                 	db	7
   672  012D' 08                 	db	8
   673  012E' 00                 	db	0
   674  012F' 00                 	db	0
   675  0130' 00                 	db	0
   676  0131' 0C                 	db	12
   677  0132' 0B                 	db	11
   678  0133' 0A                 	db	10
   679  0134' 09                 	db	9
   680  0135' 08                 	db	8
   681  0136' 07                 	db	7
   682  0137'                    __end_of_spreadingFactor:
   683                           	opt stack 0
   684  0137'                    _rxWindowOffset:
   685                           	opt stack 0
   686  0137' 0C                 	db	12
   687  0138' 06                 	db	6
   688  0139' 01                 	db	1
   689  013A' FE                 	db	254
   690  013B' FC                 	db	252
   691  013C' 00                 	db	0
   692  013D' 00                 	db	0
   693  013E' 00                 	db	0
   694  013F' 0C                 	db	12
   695  0140' 06                 	db	6
   696  0141' 01                 	db	1
   697  0142' FE                 	db	254
   698  0143' FC                 	db	252
   699  0144' FC                 	db	252
   700  0145'                    __end_of_rxWindowOffset:
   701                           	opt stack 0
   702  0145'                    _maxPayloadSize:
   703                           	opt stack 0
   704  0145' 0B                 	db	11
   705  0146' 35                 	db	53
   706  0147' 81                 	db	129
   707  0148' F2                 	db	242
   708  0149' F2                 	db	242
   709  014A' 00                 	db	0
   710  014B' 00                 	db	0
   711  014C' 00                 	db	0
   712  014D' 35                 	db	53
   713  014E' 81                 	db	129
   714  014F' F2                 	db	242
   715  0150' F2                 	db	242
   716  0151' F2                 	db	242
   717  0152' F2                 	db	242
   718  0153'                    __end_of_maxPayloadSize:
   719                           	opt stack 0
   720  0153'                    _rxWindowSize:
   721                           	opt stack 0
   722  0153' 05                 	db	5
   723  0154' 05                 	db	5
   724  0155' 07                 	db	7
   725  0156' 0C                 	db	12
   726  0157' 16                 	db	22
   727  0158' 00                 	db	0
   728  0159' 00                 	db	0
   729  015A' 00                 	db	0
   730  015B' 05                 	db	5
   731  015C' 05                 	db	5
   732  015D' 07                 	db	7
   733  015E' 0C                 	db	12
   734  015F' 16                 	db	22
   735  0160' 2A                 	db	42
   736  0161'                    __end_of_rxWindowSize:
   737                           	opt stack 0
   738  0161'                    _txPower915:
   739                           	opt stack 0
   740  0161' 1E                 	db	30
   741  0162' 1C                 	db	28
   742  0163' 1A                 	db	26
   743  0164' 18                 	db	24
   744  0165' 16                 	db	22
   745  0166' 14                 	db	20
   746  0167' 12                 	db	18
   747  0168' 10                 	db	16
   748  0169' 0E                 	db	14
   749  016A' 0C                 	db	12
   750  016B' 0A                 	db	10
   751  016C'                    __end_of_txPower915:
   752                           	opt stack 0
   753  016C'                    _macEndDevCmdReplyLen:
   754                           	opt stack 0
   755  016C' 01                 	db	1
   756  016D' 02                 	db	2
   757  016E' 01                 	db	1
   758  016F' 02                 	db	2
   759  0170' 03                 	db	3
   760  0171' 02                 	db	2
   761  0172' 01                 	db	1
   762  0173'                    __end_of_macEndDevCmdReplyLen:
   763                           	opt stack 0
   764  0173'                    _DefaultChannels915:
   765                           	opt stack 0
   766  0173' 01                 	db	1
   767  0174' 30                 	db	48
   768  0175' 01                 	db	1
   769  0176' 30                 	db	48
   770  0177' 01                 	db	1
   771  0178' 30                 	db	48
   772  0179' 01                 	db	1
   773  017A' 30                 	db	48
   774  017B' 01                 	db	1
   775  017C' 30                 	db	48
   776  017D' 01                 	db	1
   777  017E' 30                 	db	48
   778  017F' 01                 	db	1
   779  0180' 30                 	db	48
   780  0181' 01                 	db	1
   781  0182' 30                 	db	48
   782  0183' 00                 	db	0
   783  0184' 30                 	db	48
   784  0185' 00                 	db	0
   785  0186' 30                 	db	48
   786  0187' 00                 	db	0
   787  0188' 30                 	db	48
   788  0189' 00                 	db	0
   789  018A' 30                 	db	48
   790  018B' 00                 	db	0
   791  018C' 30                 	db	48
   792  018D' 00                 	db	0
   793  018E' 30                 	db	48
   794  018F' 00                 	db	0
   795  0190' 30                 	db	48
   796  0191' 00                 	db	0
   797  0192' 30                 	db	48
   798  0193' 00                 	db	0
   799  0194' 30                 	db	48
   800  0195' 00                 	db	0
   801  0196' 30                 	db	48
   802  0197' 00                 	db	0
   803  0198' 30                 	db	48
   804  0199' 00                 	db	0
   805  019A' 30                 	db	48
   806  019B' 00                 	db	0
   807  019C' 30                 	db	48
   808  019D' 00                 	db	0
   809  019E' 30                 	db	48
   810  019F' 00                 	db	0
   811  01A0' 30                 	db	48
   812  01A1' 00                 	db	0
   813  01A2' 30                 	db	48
   814  01A3' 00                 	db	0
   815  01A4' 30                 	db	48
   816  01A5' 00                 	db	0
   817  01A6' 30                 	db	48
   818  01A7' 00                 	db	0
   819  01A8' 30                 	db	48
   820  01A9' 00                 	db	0
   821  01AA' 30                 	db	48
   822  01AB' 00                 	db	0
   823  01AC' 30                 	db	48
   824  01AD' 00                 	db	0
   825  01AE' 30                 	db	48
   826  01AF' 00                 	db	0
   827  01B0' 30                 	db	48
   828  01B1' 00                 	db	0
   829  01B2' 30                 	db	48
   830  01B3' 00                 	db	0
   831  01B4' 30                 	db	48
   832  01B5' 00                 	db	0
   833  01B6' 30                 	db	48
   834  01B7' 00                 	db	0
   835  01B8' 30                 	db	48
   836  01B9' 00                 	db	0
   837  01BA' 30                 	db	48
   838  01BB' 00                 	db	0
   839  01BC' 30                 	db	48
   840  01BD' 00                 	db	0
   841  01BE' 30                 	db	48
   842  01BF' 00                 	db	0
   843  01C0' 30                 	db	48
   844  01C1' 00                 	db	0
   845  01C2' 30                 	db	48
   846  01C3' 00                 	db	0
   847  01C4' 30                 	db	48
   848  01C5' 00                 	db	0
   849  01C6' 30                 	db	48
   850  01C7' 00                 	db	0
   851  01C8' 30                 	db	48
   852  01C9' 00                 	db	0
   853  01CA' 30                 	db	48
   854  01CB' 00                 	db	0
   855  01CC' 30                 	db	48
   856  01CD' 00                 	db	0
   857  01CE' 30                 	db	48
   858  01CF' 00                 	db	0
   859  01D0' 30                 	db	48
   860  01D1' 00                 	db	0
   861  01D2' 30                 	db	48
   862  01D3' 00                 	db	0
   863  01D4' 30                 	db	48
   864  01D5' 00                 	db	0
   865  01D6' 30                 	db	48
   866  01D7' 00                 	db	0
   867  01D8' 30                 	db	48
   868  01D9' 00                 	db	0
   869  01DA' 30                 	db	48
   870  01DB' 00                 	db	0
   871  01DC' 30                 	db	48
   872  01DD' 00                 	db	0
   873  01DE' 30                 	db	48
   874  01DF' 00                 	db	0
   875  01E0' 30                 	db	48
   876  01E1' 00                 	db	0
   877  01E2' 30                 	db	48
   878  01E3' 00                 	db	0
   879  01E4' 30                 	db	48
   880  01E5' 00                 	db	0
   881  01E6' 30                 	db	48
   882  01E7' 00                 	db	0
   883  01E8' 30                 	db	48
   884  01E9' 00                 	db	0
   885  01EA' 30                 	db	48
   886  01EB' 00                 	db	0
   887  01EC' 30                 	db	48
   888  01ED' 00                 	db	0
   889  01EE' 30                 	db	48
   890  01EF' 00                 	db	0
   891  01F0' 30                 	db	48
   892  01F1' 00                 	db	0
   893  01F2' 30                 	db	48
   894  01F3' 00                 	db	0
   895  01F4' 44                 	db	68
   896  01F5' 00                 	db	0
   897  01F6' 44                 	db	68
   898  01F7' 00                 	db	0
   899  01F8' 44                 	db	68
   900  01F9' 00                 	db	0
   901  01FA' 44                 	db	68
   902  01FB' 00                 	db	0
   903  01FC' 44                 	db	68
   904  01FD' 00                 	db	0
   905  01FE' 44                 	db	68
   906  01FF' 00                 	db	0
   907  0200' 44                 	db	68
   908  0201' 00                 	db	0
   909  0202' 44                 	db	68
   910  0203'                    __end_of_DefaultChannels915:
   911                           	opt stack 0
   912  0000                     _ANSELA	set	3896
   913  0000                     _ANSELE	set	3900
   914  0000                     _ANSELB	set	3897
   915  0000                     _ANSELC	set	3898
   916  0000                     _ANSELD	set	3899
   917  0000                     _TMR1	set	4046
   918  0000                     _TXREG1	set	4013
   919  0000                     _RCREG1	set	4014
   920  0000                     _RCSTA1bits	set	4011
   921  0000                     _TXSTA1bits	set	4012
   922  0000                     _SPBRGH1	set	4016
   923  0000                     _SPBRG1	set	4015
   924  0000                     _TXSTA1	set	4012
   925  0000                     _RCSTA1	set	4011
   926  0000                     _BAUDCON1	set	4024
   927  0000                     _SSP2STATbits	set	3949
   928  0000                     _SSP2BUF	set	3951
   929  0000                     _SSP2CON1bits	set	3948
   930  0000                     _SSP2ADD	set	3950
   931  0000                     _SSP2CON1	set	3948
   932  0000                     _SSP2STAT	set	3949
   933  0000                     _INTCON3bits	set	4080
   934  0000                     _RCONbits	set	4048
   935  0000                     _IOCBbits	set	3938
   936  0000                     _WPUB	set	3937
   937  0000                     _TRISD	set	3989
   938  0000                     _TRISC	set	3988
   939  0000                     _TRISB	set	3987
   940  0000                     _TRISA	set	3986
   941  0000                     _TRISE	set	3990
   942  0000                     _LATC	set	3979
   943  0000                     _LATB	set	3978
   944  0000                     _LATA	set	3977
   945  0000                     _LATD	set	3980
   946  0000                     _LATE	set	3981
   947  0000                     _T1GCONbits	set	4044
   948  0000                     _T1CONbits	set	4045
   949  0000                     _T1CON	set	4045
   950  0000                     _PIE1bits	set	3997
   951  0000                     _PIR1bits	set	3998
   952  0000                     _TMR1L	set	4046
   953  0000                     _TMR1H	set	4047
   954  0000                     _T1GCON	set	4044
   955  0000                     _INTCON2bits	set	4081
   956  0000                     _PORTBbits	set	3969
   957  0000                     _INTCONbits	set	4082
   958  0000                     _OSCTUNE	set	3995
   959  0000                     _OSCCON2	set	4050
   960  0000                     _OSCCON	set	4051
   961  0000                     _WPUB3	set	31499
   962  0000                     _TRISB3	set	31899
   963  0000                     _LATB3	set	31827
   964  0000                     _LATD3	set	31843
   965  0000                     _LATC2	set	31834
   966  0000                     _TRISC2	set	31906
   967  0203'                    STR_3:
   968                           
   969                           ; BSR set to: 1
   970  0203' 43                 	db	67	;'C'
   971  0204' 68                 	db	104	;'h'
   972  0205' 61                 	db	97	;'a'
   973  0206' 6E                 	db	110	;'n'
   974  0207' 6E                 	db	110	;'n'
   975  0208' 65                 	db	101	;'e'
   976  0209' 6C                 	db	108	;'l'
   977  020A' 20                 	db	32
   978  020B' 25                 	db	37
   979  020C' 30                 	db	48	;'0'
   980  020D' 32                 	db	50	;'2'
   981  020E' 64                 	db	100	;'d'
   982  020F' 20                 	db	32
   983  0210' 45                 	db	69	;'E'
   984  0211' 6E                 	db	110	;'n'
   985  0212' 61                 	db	97	;'a'
   986  0213' 62                 	db	98	;'b'
   987  0214' 6C                 	db	108	;'l'
   988  0215' 65                 	db	101	;'e'
   989  0216' 64                 	db	100	;'d'
   990  0217' 3A                 	db	58	;':'
   991  0218' 20                 	db	32
   992  0219' 25                 	db	37
   993  021A' 6C                 	db	108	;'l'
   994  021B' 64                 	db	100	;'d'
   995  021C' 48                 	db	72	;'H'
   996  021D' 7A                 	db	122	;'z'
   997  021E' 0D                 	db	13
   998  021F' 0A                 	db	10
   999  0220' 00                 	db	0
  1000  0221'                    STR_2:
  1001                           
  1002                           ; BSR set to: 1
  1003  0221' 0D                 	db	13
  1004  0222' 0A                 	db	10
  1005  0223' 52                 	db	82	;'R'
  1006  0224' 4E                 	db	78	;'N'
  1007  0225' 32                 	db	50	;'2'
  1008  0226' 39                 	db	57	;'9'
  1009  0227' 30                 	db	48	;'0'
  1010  0228' 33                 	db	51	;'3'
  1011  0229' 20                 	db	32
  1012  022A' 54                 	db	84	;'T'
  1013  022B' 65                 	db	101	;'e'
  1014  022C' 73                 	db	115	;'s'
  1015  022D' 74                 	db	116	;'t'
  1016  022E' 20                 	db	32
  1017  022F' 50                 	db	80	;'P'
  1018  0230' 72                 	db	114	;'r'
  1019  0231' 6F                 	db	111	;'o'
  1020  0232' 67                 	db	103	;'g'
  1021  0233' 72                 	db	114	;'r'
  1022  0234' 61                 	db	97	;'a'
  1023  0235' 6D                 	db	109	;'m'
  1024  0236' 0D                 	db	13
  1025  0237' 0A                 	db	10
  1026  0238' 00                 	db	0
  1027  0239'                    STR_4:
  1028                           
  1029                           ; BSR set to: 1
  1030  0239' 4C                 	db	76	;'L'
  1031  023A' 6F                 	db	111	;'o'
  1032  023B' 52                 	db	82	;'R'
  1033  023C' 61                 	db	97	;'a'
  1034  023D' 00                 	db	0
  1035  0000                     
  1036                           ; #config settings
  1037  023E' 00                 	db	0	; dummy byte at the end
  1038  0000                     
  1039                           	psect	cinit
  1040  0000'                    __pcinit:
  1041                           	opt stack 0
  1042  0000'                    start_initialization:
  1043                           	opt stack 0
  1044  0000'                    __initialization:
  1045                           	opt stack 0
  1046                           
  1047                           ; Initialize objects allocated to BANK2 (16 bytes)
  1048                           ; load TBLPTR registers with __pidataBANK2
  1049  0000' 0E00'              	movlw	low __pidataBANK2
  1050  0002' 6EF6               	movwf	tblptrl,c
  1051  0004' 0E00'              	movlw	high __pidataBANK2
  1052  0006' 6EF7               	movwf	tblptrh,c
  1053  0008' 0E00'              	movlw	low (__pidataBANK2 shr (0+16))
  1054  000A' 6EF8               	movwf	tblptru,c
  1055  000C' EE00' F000'        	lfsr	0,__pdataBANK2
  1056  0010' EE20 F010          	lfsr	2,16
  1057  0014'                    copy_data0:
  1058  0014' 0009               	tblrd		*+
  1059  0016' CFF5 FFEE          	movff	tablat,postinc0
  1060  001A' 50DD               	movf	postdec2,w,c
  1061  001C' 50D9               	movf	fsr2l,w,c
  1062  001E' E1FA               	bnz	copy_data0
  1063                           
  1064                           ; Initialize objects allocated to BANK1 (36 bytes)
  1065                           ; load TBLPTR registers with __pidataBANK1
  1066  0020' 0E00'              	movlw	low __pidataBANK1
  1067  0022' 6EF6               	movwf	tblptrl,c
  1068  0024' 0E00'              	movlw	high __pidataBANK1
  1069  0026' 6EF7               	movwf	tblptrh,c
  1070  0028' 0E00'              	movlw	low (__pidataBANK1 shr (0+16))
  1071  002A' 6EF8               	movwf	tblptru,c
  1072  002C' EE00' F000'        	lfsr	0,__pdataBANK1
  1073  0030' EE20 F024          	lfsr	2,36
  1074  0034'                    copy_data1:
  1075  0034' 0009               	tblrd		*+
  1076  0036' CFF5 FFEE          	movff	tablat,postinc0
  1077  003A' 50DD               	movf	postdec2,w,c
  1078  003C' 50D9               	movf	fsr2l,w,c
  1079  003E' E1FA               	bnz	copy_data1
  1080                           
  1081                           ; Initialize objects allocated to COMRAM (4 bytes)
  1082                           ; load TBLPTR registers with __pidataCOMRAM
  1083  0040' 0E00'              	movlw	low __pidataCOMRAM
  1084  0042' 6EF6               	movwf	tblptrl,c
  1085  0044' 0E00'              	movlw	high __pidataCOMRAM
  1086  0046' 6EF7               	movwf	tblptrh,c
  1087  0048' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
  1088  004A' 6EF8               	movwf	tblptru,c
  1089  004C' EE00' F000'        	lfsr	0,__pdataCOMRAM
  1090  0050' EE20 F004          	lfsr	2,4
  1091  0054'                    copy_data2:
  1092  0054' 0009               	tblrd		*+
  1093  0056' CFF5 FFEE          	movff	tablat,postinc0
  1094  005A' 50DD               	movf	postdec2,w,c
  1095  005C' 50D9               	movf	fsr2l,w,c
  1096  005E' E1FA               	bnz	copy_data2
  1097                           
  1098                           ; Clear objects allocated to BIGRAM (542 bytes)
  1099  0060' EE00' F000'        	lfsr	0,__pbssBIGRAM
  1100  0064' EE22 F01E          	lfsr	2,542
  1101  0068'                    clear_0:
  1102  0068' 6AEE               	clrf	postinc0,c
  1103  006A' 50DD               	movf	postdec2,w,c
  1104  006C' 50D9               	movf	fsr2l,w,c
  1105  006E' E1FC               	bnz	clear_0
  1106  0070' 50DA               	movf	fsr2h,w,c
  1107  0072' E1FA               	bnz	clear_0
  1108                           
  1109                           ; Clear objects allocated to BANK4 (144 bytes)
  1110  0074' EE00' F000'        	lfsr	0,__pbssBANK4
  1111  0078' 0E90               	movlw	144
  1112  007A'                    clear_1:
  1113  007A' 6AEE               	clrf	postinc0,c
  1114  007C' 06E8               	decf	wreg,f,c
  1115  007E' E1FD               	bnz	clear_1
  1116                           
  1117                           ; Clear objects allocated to BANK3 (160 bytes)
  1118  0080' EE00' F000'        	lfsr	0,__pbssBANK3
  1119  0084' 0EA0               	movlw	160
  1120  0086'                    clear_2:
  1121  0086' 6AEE               	clrf	postinc0,c
  1122  0088' 06E8               	decf	wreg,f,c
  1123  008A' E1FD               	bnz	clear_2
  1124                           
  1125                           ; Clear objects allocated to BANK2 (231 bytes)
  1126  008C' EE00' F000'        	lfsr	0,__pbssBANK2
  1127  0090' 0EE7               	movlw	231
  1128  0092'                    clear_3:
  1129  0092' 6AEE               	clrf	postinc0,c
  1130  0094' 06E8               	decf	wreg,f,c
  1131  0096' E1FD               	bnz	clear_3
  1132                           
  1133                           ; Clear objects allocated to BANK1 (93 bytes)
  1134  0098' EE00' F000'        	lfsr	0,__pbssBANK1
  1135  009C' 0E5D               	movlw	93
  1136  009E'                    clear_4:
  1137  009E' 6AEE               	clrf	postinc0,c
  1138  00A0' 06E8               	decf	wreg,f,c
  1139  00A2' E1FD               	bnz	clear_4
  1140                           
  1141                           ; Clear objects allocated to BANK0 (5 bytes)
  1142  00A4' 0100               	movlb	0
  1143  00A6' 6B00'              	clrf	(__pbssBANK0+4)& (0+255),b
  1144  00A8' 6B00'              	clrf	(__pbssBANK0+3)& (0+255),b
  1145  00AA' 6B00'              	clrf	(__pbssBANK0+2)& (0+255),b
  1146  00AC' 6B00'              	clrf	(__pbssBANK0+1)& (0+255),b
  1147  00AE' 6B00'              	clrf	__pbssBANK0& (0+255),b
  1148                           
  1149                           ; Clear objects allocated to COMRAM (12 bytes)
  1150  00B0' EE00' F000'        	lfsr	0,__pbssCOMRAM
  1151  00B4' 0E0C               	movlw	12
  1152  00B6'                    clear_5:
  1153  00B6' 6AEE               	clrf	postinc0,c
  1154  00B8' 06E8               	decf	wreg,f,c
  1155  00BA' E1FD               	bnz	clear_5
  1156  00BC'                    end_of_initialization:
  1157                           	opt stack 0
  1158  00BC'                    __end_of__initialization:
  1159                           	opt stack 0
  1160  00BC' 0100               	movlb	0
  1161  00BE' EF00' F000'        	goto	_main	;jump to C main() function
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           postdec2	equ	0xFDD
  1169                           fsr2h	equ	0xFDA
  1170                           fsr2l	equ	0xFD9
  1171                           
  1172                           	psect	bssCOMRAM
  1173  0000'                    __pbssCOMRAM:
  1174                           	opt stack 0
  1175  0000'                    _ticksAccounted:
  1176                           	opt stack 0
  1177  0000'                    	ds	4
  1178  0004'                    _ticksAdded:
  1179                           	opt stack 0
  1180  0004'                    	ds	4
  1181  0008'                    _reloadVal:
  1182                           	opt stack 0
  1183  0008'                    	ds	2
  1184  000A'                    _timerOverflow:
  1185                           	opt stack 0
  1186  000A'                    	ds	1
  1187  000B'                    __rcon:
  1188                           	opt stack 0
  1189  000B'                    	ds	1
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           postdec2	equ	0xFDD
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           
  1200                           	psect	dataCOMRAM
  1201  0000'                    __pdataCOMRAM:
  1202                           	opt stack 0
  1203  0000'                    _ticksToScheduledInterrupt:
  1204                           	opt stack 0
  1205  0000'                    	ds	4
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           postdec2	equ	0xFDD
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           
  1216                           	psect	bssBANK0
  1217  0000'                    __pbssBANK0:
  1218                           	opt stack 0
  1219  0000'                    _rxPayload:
  1220                           	opt stack 0
  1221  0000'                    	ds	4
  1222  0004'                    _allocatedTimers:
  1223                           	opt stack 0
  1224  0004'                    	ds	1
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           postdec2	equ	0xFDD
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           
  1235                           	psect	bssBANK1
  1236  0000'                    __pbssBANK1:
  1237                           	opt stack 0
  1238  0000'                    TMR_GetDeltaTime@retVal:
  1239                           	opt stack 0
  1240  0000'                    	ds	4
  1241  0004'                    _INT2_InterruptHandler:
  1242                           	opt stack 0
  1243  0004'                    	ds	2
  1244  0006'                    _INT1_InterruptHandler:
  1245                           	opt stack 0
  1246  0006'                    	ds	2
  1247  0008'                    _IOCB4_InterruptHandler:
  1248                           	opt stack 0
  1249  0008'                    	ds	2
  1250  000A'                    _TMR1_InterruptHandler:
  1251                           	opt stack 0
  1252  000A'                    	ds	2
  1253  000C'                    _timer1ReloadVal:
  1254                           	opt stack 0
  1255  000C'                    	ds	2
  1256  000E'                    TMR_SwapTimer@retVal:
  1257                           	opt stack 0
  1258  000E'                    	ds	2
  1259  0010'                    TMR_SwapTimer@oldVal:
  1260                           	opt stack 0
  1261  0010'                    	ds	2
  1262  0012'                    TMR_GetDeltaTime@tmrVal:
  1263                           	opt stack 0
  1264  0012'                    	ds	2
  1265  0014'                    _localDioStatus:
  1266                           	opt stack 0
  1267  0014'                    	ds	1
  1268  0015'                    __roundCounter:
  1269                           	opt stack 0
  1270  0015'                    	ds	1
  1271  0016'                    _dioStatus:
  1272                           	opt stack 0
  1273  0016'                    	ds	1
  1274  0017'                    _RadioConfiguration:
  1275                           	opt stack 0
  1276  0017'                    	ds	54
  1277  004D'                    _aesBuffer:
  1278                           	opt stack 0
  1279  004D'                    	ds	16
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec2	equ	0xFDD
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           
  1290                           	psect	dataBANK1
  1291  0000'                    __pdataBANK1:
  1292                           	opt stack 0
  1293  0000'                    GenerateSubkey@F7103:
  1294                           	opt stack 0
  1295  0000'                    	ds	16
  1296  0010'                    _randx:
  1297                           	opt stack 0
  1298  0010'                    	ds	4
  1299  0014'                    _deviceEuiNew:
  1300                           	opt stack 0
  1301  0014'                    	ds	8
  1302  001C'                    _applicationEuiNew:
  1303                           	opt stack 0
  1304  001C'                    	ds	8
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           postdec2	equ	0xFDD
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           
  1315                           	psect	bssBANK2
  1316  0000'                    __pbssBANK2:
  1317                           	opt stack 0
  1318  0000'                    _loRa:
  1319                           	opt stack 0
  1320  0000'                    	ds	231
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec2	equ	0xFDD
  1328                           fsr2h	equ	0xFDA
  1329                           fsr2l	equ	0xFD9
  1330                           
  1331                           	psect	dataBANK2
  1332  0000'                    __pdataBANK2:
  1333                           	opt stack 0
  1334  0000'                    _applicationKeyNew:
  1335                           	opt stack 0
  1336  0000'                    	ds	16
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec2	equ	0xFDD
  1344                           fsr2h	equ	0xFDA
  1345                           fsr2l	equ	0xFD9
  1346                           
  1347                           	psect	bssBANK3
  1348  0000'                    __pbssBANK3:
  1349                           	opt stack 0
  1350  0000'                    _swTimers:
  1351                           	opt stack 0
  1352  0000'                    	ds	160
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           
  1363                           	psect	bssBANK4
  1364  0000'                    __pbssBANK4:
  1365                           	opt stack 0
  1366  0000'                    _Channels:
  1367                           	opt stack 0
  1368  0000'                    	ds	144
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec2	equ	0xFDD
  1376                           fsr2h	equ	0xFDA
  1377                           fsr2l	equ	0xFD9
  1378                           
  1379                           	psect	bssBIGRAM
  1380  0000'                    __pbssBIGRAM:
  1381                           	opt stack 0
  1382  0000'                    _radioBuffer:
  1383                           	opt stack 0
  1384  0000'                    	ds	271
  1385  010F'                    _macBuffer:
  1386                           	opt stack 0
  1387  010F'                    	ds	271
  1388                           tblptru	equ	0xFF8
  1389                           tblptrh	equ	0xFF7
  1390                           tblptrl	equ	0xFF6
  1391                           tablat	equ	0xFF5
  1392                           postinc0	equ	0xFEE
  1393                           wreg	equ	0xFE8
  1394                           postdec2	equ	0xFDD
  1395                           fsr2h	equ	0xFDA
  1396                           fsr2l	equ	0xFD9
  1397                           
  1398                           	psect	cstackBANK1
  1399  0000'                    __pcstackBANK1:
  1400                           	opt stack 0
  1401  0000'                    AESCmac@k2:
  1402                           	opt stack 0
  1403                           
  1404                           ; 16 bytes @ 0x0
  1405  0000'                    	ds	16
  1406  0010'                    AESCmac@k1:
  1407                           	opt stack 0
  1408                           
  1409                           ; 16 bytes @ 0x10
  1410  0010'                    	ds	16
  1411  0020'                    AESCmac@mLast:
  1412                           	opt stack 0
  1413                           
  1414                           ; 16 bytes @ 0x20
  1415  0020'                    	ds	16
  1416  0030'                    AESCmac@padded:
  1417                           	opt stack 0
  1418                           
  1419                           ; 16 bytes @ 0x30
  1420  0030'                    	ds	16
  1421  0040'                    AESCmac@y:
  1422                           	opt stack 0
  1423                           
  1424                           ; 16 bytes @ 0x40
  1425  0040'                    	ds	16
  1426  0050'                    AESCmac@x:
  1427                           	opt stack 0
  1428                           
  1429                           ; 16 bytes @ 0x50
  1430  0050'                    	ds	16
  1431  0060'                    AESCmac@ptr:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x60
  1435  0060'                    	ds	2
  1436  0062'                    AESCmac@flag:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x62
  1440  0062'                    	ds	1
  1441  0063'                    AESCmac@n:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x63
  1445  0063'                    	ds	1
  1446  0064'                    AESCmac@j:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x64
  1450  0064'                    	ds	1
  1451  0065'                    AESCmac@i:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x65
  1455  0065'                    	ds	1
  1456  0066'                    LORAWAN_RxDone@buffer:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x66
  1460  0066'                    	ds	2
  1461  0068'                    LORAWAN_RxDone@bufferLength:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x68
  1465  0068'                    	ds	1
  1466  0069'                    main@freq:
  1467                           	opt stack 0
  1468                           
  1469                           ; 4 bytes @ 0x69
  1470  0069'                    	ds	4
  1471  006D'                    main@enable:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x6D
  1475  006D'                    	ds	1
  1476  006E'                    main@ch:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x6E
  1480  006E'                    	ds	2
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec2	equ	0xFDD
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           
  1491                           	psect	cstackBANK0
  1492  0000'                    __pcstackBANK0:
  1493                           	opt stack 0
  1494  0000'                    ??_FindSmallestDataRate:
  1495  0000'                    ??_CountfOptsLength:
  1496  0000'                    ??_isdigit:
  1497  0000'                    ??_UpdateMinMaxChDataRate:
  1498  0000'                    ?_ExecuteLinkCheck:
  1499                           	opt stack 0
  1500  0000'                    ?_ExecuteDutyCycle:
  1501                           	opt stack 0
  1502  0000'                    ?_ExecuteDevStatus:
  1503                           	opt stack 0
  1504  0000'                    ?_TMR1_ReadTimer:
  1505                           	opt stack 0
  1506  0000'                    ?_INT0_SetInterruptHandler:
  1507                           	opt stack 0
  1508  0000'                    ?___wmul:
  1509                           	opt stack 0
  1510  0000'                    ?___awdiv:
  1511                           	opt stack 0
  1512  0000'                    ?___lldiv:
  1513                           	opt stack 0
  1514  0000'                    INTERRUPT_GetDioStatus@a:
  1515                           	opt stack 0
  1516  0000'                    UpdateCurrentDataRate@valueNew:
  1517                           	opt stack 0
  1518  0000'                    UpdateTxPower@txPowerNew:
  1519                           	opt stack 0
  1520  0000'                    UpdateJoinInProgress@state:
  1521                           	opt stack 0
  1522  0000'                    HALResetPinOutputValue@value:
  1523                           	opt stack 0
  1524  0000'                    SwTimerCreate@retVal:
  1525                           	opt stack 0
  1526  0000'                    SwTimerStop@timerId:
  1527                           	opt stack 0
  1528  0000'                    ValidateDataRate@dataRate:
  1529                           	opt stack 0
  1530  0000'                    UpdateDLSettings@dlRx1DrOffset:
  1531                           	opt stack 0
  1532  0000'                    UpdateDataRange@dataRangeNew:
  1533                           	opt stack 0
  1534  0000'                    ValidateRxOffset@rxOffset:
  1535                           	opt stack 0
  1536  0000'                    ValidateChannelId@channelId:
  1537                           	opt stack 0
  1538  0000'                    ValidateDataRateReception@result:
  1539                           	opt stack 0
  1540  0000'                    RADIO_SetLoRaSyncWord@syncWord:
  1541                           	opt stack 0
  1542  0000'                    RADIO_SetSpreadingFactor@spreadingFactor:
  1543                           	opt stack 0
  1544  0000'                    RADIO_SetOutputPower@power:
  1545                           	opt stack 0
  1546  0000'                    RADIO_SetCRC@crc:
  1547                           	opt stack 0
  1548  0000'                    RADIO_SetIQInverted@iqInverted:
  1549                           	opt stack 0
  1550  0000'                    RADIO_SetBandwidth@bandwidth:
  1551                           	opt stack 0
  1552  0000'                    RADIO_SetPABoost@paBoost:
  1553                           	opt stack 0
  1554  0000'                    RADIO_SetModulation@modulation:
  1555                           	opt stack 0
  1556  0000'                    SPI2_Exchange8bit@data:
  1557                           	opt stack 0
  1558  0000'                    EUSART1_Write@txData:
  1559                           	opt stack 0
  1560  0000'                    ___abdiv@divisor:
  1561                           	opt stack 0
  1562  0000'                    EncKeySchedule@key:
  1563                           	opt stack 0
  1564  0000'                    EncodeShiftRow@stateTable:
  1565                           	opt stack 0
  1566  0000'                    ExecuteLinkCheck@ptr:
  1567                           	opt stack 0
  1568  0000'                    IncludeMacCommandsResponse@macBuffer:
  1569                           	opt stack 0
  1570  0000'                    CheckFlags@hdr:
  1571                           	opt stack 0
  1572  0000'                    CheckMcastFlags@hdr:
  1573                           	opt stack 0
  1574  0000'                    FillSubKey@source:
  1575                           	opt stack 0
  1576  0000'                    SwTimerSetCallback@callback:
  1577                           	opt stack 0
  1578  0000'                    ExecuteDutyCycle@ptr:
  1579                           	opt stack 0
  1580  0000'                    ExecuteDevStatus@ptr:
  1581                           	opt stack 0
  1582  0000'                    UpdateCfList@joinAccept:
  1583                           	opt stack 0
  1584  0000'                    ValidateChannelMaskCntl@channelMask:
  1585                           	opt stack 0
  1586  0000'                    RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1587                           	opt stack 0
  1588  0000'                    TMR1_WriteTimer@timerVal:
  1589                           	opt stack 0
  1590  0000'                    TMR1_SetInterruptHandler@InterruptHandler:
  1591                           	opt stack 0
  1592  0000'                    IOCB4_SetInterruptHandler@InterruptHandler:
  1593                           	opt stack 0
  1594  0000'                    INT1_SetInterruptHandler@InterruptHandler:
  1595                           	opt stack 0
  1596  0000'                    INT2_SetInterruptHandler@InterruptHandler:
  1597                           	opt stack 0
  1598  0000'                    RxData@pData:
  1599                           	opt stack 0
  1600  0000'                    ___wmul@multiplier:
  1601                           	opt stack 0
  1602  0000'                    ___awdiv@dividend:
  1603                           	opt stack 0
  1604  0000'                    memcpy@d1:
  1605                           	opt stack 0
  1606  0000'                    memset@p1:
  1607                           	opt stack 0
  1608  0000'                    UpdateReceiveWindow2Parameters@frequency:
  1609                           	opt stack 0
  1610  0000'                    SystemBlockingWaitMs@ms:
  1611                           	opt stack 0
  1612  0000'                    RADIO_SetChannelFrequency@frequency:
  1613                           	opt stack 0
  1614  0000'                    ___lldiv@dividend:
  1615                           	opt stack 0
  1616                           
  1617                           ; 4 bytes @ 0x0
  1618  0000'                    	ds	1
  1619  0001'                    ??___abdiv:
  1620  0001'                    UpdateMinMaxChDataRate@i:
  1621                           	opt stack 0
  1622  0001'                    FindSmallestDataRate@found:
  1623                           	opt stack 0
  1624  0001'                    HALSPISend@data:
  1625                           	opt stack 0
  1626  0001'                    ValidateDataRate@result:
  1627                           	opt stack 0
  1628  0001'                    UpdateDLSettings@dlRx2Dr:
  1629                           	opt stack 0
  1630  0001'                    UpdateDataRange@channelId:
  1631                           	opt stack 0
  1632  0001'                    ValidateRxOffset@result:
  1633                           	opt stack 0
  1634  0001'                    ValidateChannelId@result:
  1635                           	opt stack 0
  1636  0001'                    ValidateDataRateReception@dataRate:
  1637                           	opt stack 0
  1638  0001'                    putch@txData:
  1639                           	opt stack 0
  1640  0001'                    _isdigit$4395:
  1641                           	opt stack 0
  1642                           
  1643                           ; 1 bytes @ 0x1
  1644  0001'                    	ds	1
  1645  0002'                    ??_EncKeySchedule:
  1646  0002'                    ??_TMR1_ReadTimer:
  1647  0002'                    EncodeShiftRow@temp:
  1648                           	opt stack 0
  1649  0002'                    FindSmallestDataRate@i:
  1650                           	opt stack 0
  1651  0002'                    SwTimerSetCallback@callbackParameter:
  1652                           	opt stack 0
  1653  0002'                    LORAWAN_GetChannelIdStatus@result:
  1654                           	opt stack 0
  1655  0002'                    ExecuteDutyCycle@maxDCycle:
  1656                           	opt stack 0
  1657  0002'                    UpdateChannelIdStatus@statusNew:
  1658                           	opt stack 0
  1659  0002'                    ValidateDataRange@dataRangeNew:
  1660                           	opt stack 0
  1661  0002'                    ValidateChannelMaskCntl@result:
  1662                           	opt stack 0
  1663  0002'                    RADIO_RegisterWrite@value:
  1664                           	opt stack 0
  1665  0002'                    RADIO_RegisterRead@reg:
  1666                           	opt stack 0
  1667  0002'                    RxData@dataLength:
  1668                           	opt stack 0
  1669  0002'                    isdigit@c:
  1670                           	opt stack 0
  1671  0002'                    IncludeMacCommandsResponse@pBufferIndex:
  1672                           	opt stack 0
  1673  0002'                    FillSubKey@key:
  1674                           	opt stack 0
  1675  0002'                    ___wmul@multiplicand:
  1676                           	opt stack 0
  1677  0002'                    ___awdiv@divisor:
  1678                           	opt stack 0
  1679  0002'                    memcpy@s1:
  1680                           	opt stack 0
  1681  0002'                    memset@c:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2
  1685  0002'                    	ds	1
  1686  0003'                    FindSmallestDataRate@dataRate:
  1687                           	opt stack 0
  1688  0003'                    SwTimerSetCallback@timerId:
  1689                           	opt stack 0
  1690  0003'                    LORAWAN_GetChannelIdStatus@channelId:
  1691                           	opt stack 0
  1692  0003'                    UpdateChannelIdStatus@channelId:
  1693                           	opt stack 0
  1694  0003'                    ValidateDataRange@result:
  1695                           	opt stack 0
  1696  0003'                    ValidateChannelMaskCntl@channelMaskCntl:
  1697                           	opt stack 0
  1698  0003'                    RADIO_RegisterWrite@reg:
  1699                           	opt stack 0
  1700  0003'                    RADIO_RegisterRead@readValue:
  1701                           	opt stack 0
  1702  0003'                    RxData@status:
  1703                           	opt stack 0
  1704  0003'                    ___abdiv@counter:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x3
  1708  0003'                    	ds	1
  1709  0004'                    ??_SystemBlockingWaitMs:
  1710  0004'                    UpdateReceiveWindow2Parameters@dataRate:
  1711                           	opt stack 0
  1712  0004'                    IncludeMacCommandsResponse@bIncludeInFopts:
  1713                           	opt stack 0
  1714  0004'                    FillSubKey@size:
  1715                           	opt stack 0
  1716  0004'                    LORAWAN_SetChannelIdStatus@statusNew:
  1717                           	opt stack 0
  1718  0004'                    ValidateDataRange@dataRateMax:
  1719                           	opt stack 0
  1720  0004'                    EnableChannels2@endIndex:
  1721                           	opt stack 0
  1722  0004'                    RADIO_WritePower@ocp:
  1723                           	opt stack 0
  1724  0004'                    RADIO_UnhandledInterrupt@modulation:
  1725                           	opt stack 0
  1726  0004'                    ___abdiv@sign:
  1727                           	opt stack 0
  1728  0004'                    ___awdiv@counter:
  1729                           	opt stack 0
  1730  0004'                    _EncKeySchedule$86:
  1731                           	opt stack 0
  1732  0004'                    TMR1_ReadTimer@readVal:
  1733                           	opt stack 0
  1734  0004'                    ___wmul@product:
  1735                           	opt stack 0
  1736  0004'                    memcpy@n:
  1737                           	opt stack 0
  1738  0004'                    memset@n:
  1739                           	opt stack 0
  1740  0004'                    ConfigureRadio@freq:
  1741                           	opt stack 0
  1742  0004'                    ___lldiv@divisor:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x4
  1746  0004'                    	ds	1
  1747  0005'                    ??_IncludeMacCommandsResponse:
  1748  0005'                    ??_RADIO_DIO3:
  1749  0005'                    ??_RADIO_DIO4:
  1750  0005'                    ??_RADIO_DIO5:
  1751  0005'                    ??_FillSubKey:
  1752  0005'                    LORAWAN_SetChannelIdStatus@result:
  1753                           	opt stack 0
  1754  0005'                    ValidateDataRange@dataRateMin:
  1755                           	opt stack 0
  1756  0005'                    RADIO_WriteMode@newModulation:
  1757                           	opt stack 0
  1758  0005'                    RADIO_WritePower@paDac:
  1759                           	opt stack 0
  1760  0005'                    ___abdiv@quotient:
  1761                           	opt stack 0
  1762  0005'                    ___awdiv@sign:
  1763                           	opt stack 0
  1764  0005'                    EnableChannels2@channelMask:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x5
  1768  0005'                    	ds	1
  1769  0006'                    UpdateReceiveDelays@delay:
  1770                           	opt stack 0
  1771  0006'                    CountfOptsLength@macCommandLength:
  1772                           	opt stack 0
  1773  0006'                    FillSubKey@carry:
  1774                           	opt stack 0
  1775  0006'                    LORAWAN_SetChannelIdStatus@channelId:
  1776                           	opt stack 0
  1777  0006'                    ValidateDataRange@channelId:
  1778                           	opt stack 0
  1779  0006'                    RADIO_WriteMode@blocking:
  1780                           	opt stack 0
  1781  0006'                    RADIO_WritePower@power:
  1782                           	opt stack 0
  1783  0006'                    RADIO_DIO3@dioMapping:
  1784                           	opt stack 0
  1785  0006'                    RADIO_DIO5@dioMapping:
  1786                           	opt stack 0
  1787  0006'                    TMR1_ReadTimer@readValHigh:
  1788                           	opt stack 0
  1789  0006'                    ___abdiv@dividend:
  1790                           	opt stack 0
  1791  0006'                    AESEncode@block:
  1792                           	opt stack 0
  1793  0006'                    ___awdiv@quotient:
  1794                           	opt stack 0
  1795  0006'                    memcpy@d:
  1796                           	opt stack 0
  1797  0006'                    memset@p:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x6
  1801  0006'                    	ds	1
  1802  0007'                    ??_EnableChannels2:
  1803  0007'                    ?_ExecuteRxTimingSetup:
  1804                           	opt stack 0
  1805  0007'                    CountfOptsLength@i:
  1806                           	opt stack 0
  1807  0007'                    FillSubKey@i:
  1808                           	opt stack 0
  1809  0007'                    LORAWAN_SetDataRange@dataRangeNew:
  1810                           	opt stack 0
  1811  0007'                    RADIO_WriteMode@currentModulation:
  1812                           	opt stack 0
  1813  0007'                    RADIO_DIO4@dioMapping:
  1814                           	opt stack 0
  1815  0007'                    TMR1_ReadTimer@readValLow:
  1816                           	opt stack 0
  1817  0007'                    ExecuteRxTimingSetup@ptr:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x7
  1821  0007'                    	ds	1
  1822  0008'                    ??_LORAWAN_GetMaxPayloadSize:
  1823  0008'                    ?_TMR_SwapTimer:
  1824                           	opt stack 0
  1825  0008'                    ?_TMR_GetDeltaTime:
  1826                           	opt stack 0
  1827  0008'                    LORAWAN_SetDataRange@result:
  1828                           	opt stack 0
  1829  0008'                    ConfigureRadio@dataRate:
  1830                           	opt stack 0
  1831  0008'                    RADIO_WriteMode@dioMapping:
  1832                           	opt stack 0
  1833  0008'                    AESEncode@key:
  1834                           	opt stack 0
  1835  0008'                    TMR_SwapTimer@timerVal:
  1836                           	opt stack 0
  1837  0008'                    memcpy@s:
  1838                           	opt stack 0
  1839  0008'                    ___lldiv@quotient:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x8
  1843  0008'                    	ds	1
  1844  0009'                    LORAWAN_GetMaxPayloadSize@macCommandsLength:
  1845                           	opt stack 0
  1846  0009'                    ExecuteRxTimingSetup@delay:
  1847                           	opt stack 0
  1848  0009'                    LORAWAN_SetDataRange@channelId:
  1849                           	opt stack 0
  1850  0009'                    EnableChannels2@startIndex:
  1851                           	opt stack 0
  1852  0009'                    RADIO_WriteMode@currentMode:
  1853                           	opt stack 0
  1854  0009'                    ConfigureRadioRx@freq:
  1855                           	opt stack 0
  1856                           
  1857                           ; 4 bytes @ 0x9
  1858  0009'                    	ds	1
  1859  000A'                    ??_AESEncode:
  1860  000A'                    LORAWAN_GetMaxPayloadSize@result:
  1861                           	opt stack 0
  1862  000A'                    EnableChannels2@i:
  1863                           	opt stack 0
  1864  000A'                    RADIO_WriteMode@newMode:
  1865                           	opt stack 0
  1866  000A'                    memcpy@tmp:
  1867                           	opt stack 0
  1868  000A'                    TMR_OverrideRemaining@ticksRemaining:
  1869                           	opt stack 0
  1870                           
  1871                           ; 4 bytes @ 0xA
  1872  000A'                    	ds	1
  1873  000B'                    ?_ExtractMic:
  1874                           	opt stack 0
  1875  000B'                    RADIO_WriteMode@opMode:
  1876                           	opt stack 0
  1877  000B'                    LORAWAN_SetDeviceEui@deviceEuiNew:
  1878                           	opt stack 0
  1879  000B'                    LORAWAN_SetApplicationEui@applicationEuiNew:
  1880                           	opt stack 0
  1881  000B'                    LORAWAN_SetApplicationKey@applicationKeyNew:
  1882                           	opt stack 0
  1883  000B'                    PrepareSessionKeys@sessionKey:
  1884                           	opt stack 0
  1885  000B'                    ExtractMic@buffer:
  1886                           	opt stack 0
  1887  000B'                    EnableChannels@channelMask:
  1888                           	opt stack 0
  1889  000B'                    AssembleEncryptionBlock@frameCounter:
  1890                           	opt stack 0
  1891                           
  1892                           ; 4 bytes @ 0xB
  1893  000B'                    	ds	1
  1894  000C'                    ??_TMR_GetDeltaTime:
  1895  000C'                    ?_RADIO_ReadRandom:
  1896                           	opt stack 0
  1897  000C'                    ___lldiv@counter:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0xC
  1901  000C'                    	ds	1
  1902  000D'                    ?___llmod:
  1903                           	opt stack 0
  1904  000D'                    IncludeMacCommandsResponse@i:
  1905                           	opt stack 0
  1906  000D'                    ConfigureRadioRx@dataRate:
  1907                           	opt stack 0
  1908  000D'                    ExtractMic@bufferLength:
  1909                           	opt stack 0
  1910  000D'                    EnableChannels@channelMaskCntl:
  1911                           	opt stack 0
  1912  000D'                    PrepareSessionKeys@appNonce:
  1913                           	opt stack 0
  1914  000D'                    SwTimerSetTimeout@timeout:
  1915                           	opt stack 0
  1916  000D'                    RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  1917                           	opt stack 0
  1918  000D'                    RADIO_WriteFSKBitRate@bitRate:
  1919                           	opt stack 0
  1920  000D'                    ___llmod@dividend:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0xD
  1924  000D'                    	ds	1
  1925  000E'                    ??_RADIO_ReadRandom:
  1926  000E'                    ??_TMR_OverrideRemaining:
  1927  000E'                    IncludeMacCommandsResponse@bufferIndex:
  1928                           	opt stack 0
  1929  000E'                    EnableChannels@channel:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0xE
  1933  000E'                    	ds	1
  1934  000F'                    ??_ExtractMic:
  1935  000F'                    AssembleEncryptionBlock@blockId:
  1936                           	opt stack 0
  1937  000F'                    EnableChannels@i:
  1938                           	opt stack 0
  1939  000F'                    PrepareSessionKeys@networkId:
  1940                           	opt stack 0
  1941  000F'                    RADIO_ReadRandom@retVal:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0xF
  1945  000F'                    	ds	1
  1946  0010'                    ?_ExecuteLinkAdr:
  1947                           	opt stack 0
  1948  0010'                    AssembleEncryptionBlock@firstByte:
  1949                           	opt stack 0
  1950  0010'                    TMR_OverrideRemaining@tmrVal:
  1951                           	opt stack 0
  1952  0010'                    ExecuteLinkAdr@ptr:
  1953                           	opt stack 0
  1954                           
  1955                           ; 2 bytes @ 0x10
  1956  0010'                    	ds	1
  1957  0011'                    ??_SwTimerSetTimeout:
  1958  0011'                    PrepareSessionKeys@index:
  1959                           	opt stack 0
  1960  0011'                    AssembleEncryptionBlock@multicastStatus:
  1961                           	opt stack 0
  1962  0011'                    RADIO_ReadRandom@i:
  1963                           	opt stack 0
  1964  0011'                    RADIO_WriteFSKFrequencyDeviation@num:
  1965                           	opt stack 0
  1966  0011'                    RADIO_WriteFSKBitRate@num:
  1967                           	opt stack 0
  1968  0011'                    ___llmod@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 4 bytes @ 0x11
  1972  0011'                    	ds	1
  1973  0012'                    ??_ExecuteLinkAdr:
  1974  0012'                    AssembleEncryptionBlock@dir:
  1975                           	opt stack 0
  1976  0012'                    _AESEncode$81:
  1977                           	opt stack 0
  1978  0012'                    TMR_OverrideRemaining@oldReloadVal:
  1979                           	opt stack 0
  1980  0012'                    srand@x:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0x12
  1984  0012'                    	ds	1
  1985  0013'                    AssembleEncryptionBlock@bufferIndex:
  1986                           	opt stack 0
  1987  0013'                    ExtractMic@mic:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x13
  1991  0013'                    	ds	1
  1992  0014'                    ExecuteLinkAdr@endingIndex:
  1993                           	opt stack 0
  1994  0014'                    _AESEncode$82:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x14
  1998  0014'                    	ds	1
  1999  0015'                    SwTimerSetTimeout@timerId:
  2000                           	opt stack 0
  2001  0015'                    ExecuteLinkAdr@txPowerNew:
  2002                           	opt stack 0
  2003  0015'                    ___llmod@counter:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x15
  2007  0015'                    	ds	1
  2008  0016'                    ?_printf:
  2009                           	opt stack 0
  2010  0016'                    ExecuteLinkAdr@startingIndex:
  2011                           	opt stack 0
  2012  0016'                    _AESEncode$83:
  2013                           	opt stack 0
  2014  0016'                    printf@f:
  2015                           	opt stack 0
  2016  0016'                    ValidateFrequency@frequencyNew:
  2017                           	opt stack 0
  2018  0016'                    RADIO_WriteFrequency@frequency:
  2019                           	opt stack 0
  2020                           
  2021                           ; 4 bytes @ 0x16
  2022  0016'                    	ds	1
  2023  0017'                    ExecuteLinkAdr@channelMask:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x17
  2027  0017'                    	ds	1
  2028  0018'                    AESEncode@aux:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x18
  2032  0018'                    	ds	1
  2033  0019'                    AESEncode@aux2:
  2034                           	opt stack 0
  2035  0019'                    ExecuteLinkAdr@auxMinDataRate:
  2036                           	opt stack 0
  2037                           
  2038                           ; 1 bytes @ 0x19
  2039  0019'                    	ds	1
  2040  001A'                    AESEncode@aux1:
  2041                           	opt stack 0
  2042  001A'                    ExecuteLinkAdr@txPower:
  2043                           	opt stack 0
  2044  001A'                    ValidateFrequency@result:
  2045                           	opt stack 0
  2046  001A'                    RADIO_WriteFrequency@num_mod:
  2047                           	opt stack 0
  2048                           
  2049                           ; 4 bytes @ 0x1A
  2050  001A'                    	ds	1
  2051  001B'                    AESEncode@aux3:
  2052                           	opt stack 0
  2053  001B'                    ExecuteLinkAdr@dataRate:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x1B
  2057  001B'                    	ds	1
  2058  001C'                    AESEncode@i:
  2059                           	opt stack 0
  2060  001C'                    ExecuteLinkAdr@auxMaxDataRate:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x1C
  2064  001C'                    	ds	1
  2065  001D'                    AESEncodeLoRa@block:
  2066                           	opt stack 0
  2067  001D'                    ExecuteLinkAdr@auxChannelMask:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x1D
  2071  001D'                    	ds	1
  2072  001E'                    ??_printf:
  2073  001E'                    RADIO_WriteFrequency@num:
  2074                           	opt stack 0
  2075                           
  2076                           ; 4 bytes @ 0x1E
  2077  001E'                    	ds	1
  2078  001F'                    AESEncodeLoRa@key:
  2079                           	opt stack 0
  2080  001F'                    ExecuteLinkAdr@redundancy:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x1F
  2084  001F'                    	ds	1
  2085  0020'                    ?_SwTimersInterrupt:
  2086                           	opt stack 0
  2087                           
  2088                           ; 4 bytes @ 0x20
  2089  0020'                    	ds	1
  2090  0021'                    ExecuteLinkAdr@i:
  2091                           	opt stack 0
  2092  0021'                    AESEncodeLoRa@useKey:
  2093                           	opt stack 0
  2094                           
  2095                           ; 16 bytes @ 0x21
  2096  0021'                    	ds	1
  2097  0022'                    RADIO_FHSSChangeChannel@irqFlags:
  2098                           	opt stack 0
  2099  0022'                    RADIO_Init@radioBuffer:
  2100                           	opt stack 0
  2101  0022'                    printf@prec:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x22
  2105  0022'                    	ds	1
  2106  0023'                    ??_RADIO_DIO2:
  2107                           
  2108                           ; 1 bytes @ 0x23
  2109  0023'                    	ds	1
  2110  0024'                    RADIO_DIO2@opMode:
  2111                           	opt stack 0
  2112  0024'                    printf@ap:
  2113                           	opt stack 0
  2114  0024'                    RADIO_Init@frequency:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x24
  2118  0024'                    	ds	1
  2119  0025'                    RADIO_DIO2@dioMapping:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x25
  2123  0025'                    	ds	1
  2124  0026'                    printf@val:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x26
  2128  0026'                    	ds	2
  2129  0028'                    ??_RADIO_Init:
  2130  0028'                    SwTimersInterrupt@timeElapsed:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x28
  2134  0028'                    	ds	1
  2135  0029'                    RADIO_Init@cnt:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x29
  2139  0029'                    	ds	1
  2140  002A'                    printf@flag:
  2141                           	opt stack 0
  2142                           
  2143                           ; 1 bytes @ 0x2A
  2144  002A'                    	ds	1
  2145  002B'                    printf@width:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x2B
  2149  002B'                    	ds	1
  2150  002C'                    SwTimersInterrupt@ticksToNextTimerEvent:
  2151                           	opt stack 0
  2152                           
  2153                           ; 4 bytes @ 0x2C
  2154  002C'                    	ds	1
  2155  002D'                    printf@c:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x2D
  2159  002D'                    	ds	3
  2160  0030'                    SwTimersInterrupt@i:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x30
  2164  0030'                    	ds	1
  2165  0031'                    ?_SwTimerReadValue:
  2166                           	opt stack 0
  2167  0031'                    ComputeSessionKeys@joinAcceptBuffer:
  2168                           	opt stack 0
  2169  0031'                    EncryptFRMPayload@buffer:
  2170                           	opt stack 0
  2171  0031'                    GenerateSubkey@key:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0x31
  2175  0031'                    	ds	2
  2176  0033'                    EncryptFRMPayload@bufferLength:
  2177                           	opt stack 0
  2178  0033'                    GenerateSubkey@k1:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x33
  2182  0033'                    	ds	1
  2183  0034'                    EncryptFRMPayload@dir:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0x34
  2187  0034'                    	ds	1
  2188  0035'                    GenerateSubkey@k2:
  2189                           	opt stack 0
  2190  0035'                    EncryptFRMPayload@frameCounter:
  2191                           	opt stack 0
  2192  0035'                    SwTimerReadValue@ticksCount:
  2193                           	opt stack 0
  2194  0035'                    SwTimerStart@ticksRemaining:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0x35
  2198  0035'                    	ds	2
  2199  0037'                    ??_GenerateSubkey:
  2200                           
  2201                           ; 1 bytes @ 0x37
  2202  0037'                    	ds	1
  2203  0038'                    GenerateSubkey@const_Rb:
  2204                           	opt stack 0
  2205                           
  2206                           ; 16 bytes @ 0x38
  2207  0038'                    	ds	1
  2208  0039'                    SwTimerReadValue@timerId:
  2209                           	opt stack 0
  2210  0039'                    SwTimerStart@timerId:
  2211                           	opt stack 0
  2212  0039'                    EncryptFRMPayload@key:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x39
  2216  0039'                    	ds	1
  2217  003A'                    ??_UpdateRetransmissionAckTimeoutState:
  2218  003A'                    ?___lmul:
  2219                           	opt stack 0
  2220  003A'                    LORAWAN_TxDone@timeOnAir:
  2221                           	opt stack 0
  2222  003A'                    ___lmul@multiplier:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0x3A
  2226  003A'                    	ds	1
  2227  003B'                    EncryptFRMPayload@macBufferIndex:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x3B
  2231  003B'                    	ds	1
  2232  003C'                    ??_LORAWAN_TxDone:
  2233  003C'                    EncryptFRMPayload@bufferToBeEncrypted:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x3C
  2237  003C'                    	ds	2
  2238  003E'                    EncryptFRMPayload@multicastStatus:
  2239                           	opt stack 0
  2240  003E'                    ___lmul@multiplicand:
  2241                           	opt stack 0
  2242                           
  2243                           ; 4 bytes @ 0x3E
  2244  003E'                    	ds	1
  2245  003F'                    ??_EncryptFRMPayload:
  2246                           
  2247                           ; 1 bytes @ 0x3F
  2248  003F'                    	ds	2
  2249  0041'                    LORAWAN_TxDone@delta:
  2250                           	opt stack 0
  2251                           
  2252                           ; 4 bytes @ 0x41
  2253  0041'                    	ds	1
  2254  0042'                    ___lmul@product:
  2255                           	opt stack 0
  2256                           
  2257                           ; 4 bytes @ 0x42
  2258  0042'                    	ds	3
  2259  0045'                    LORAWAN_TxDone@i:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x45
  2263  0045'                    	ds	1
  2264  0046'                    ??_RADIO_TxDone:
  2265  0046'                    ??_RADIO_FSKPacketSent:
  2266  0046'                    ?_rand:
  2267                           	opt stack 0
  2268  0046'                    ?_ExecuteRxParamSetupReq:
  2269                           	opt stack 0
  2270  0046'                    ?_GenerateUSFrequency1:
  2271                           	opt stack 0
  2272  0046'                    ?_GenerateUSFrequency2:
  2273                           	opt stack 0
  2274  0046'                    ?_GenerateUSFrequencyReception:
  2275                           	opt stack 0
  2276  0046'                    EncryptFRMPayload@k:
  2277                           	opt stack 0
  2278  0046'                    LORAWAN_LinkCheckConfigure@period:
  2279                           	opt stack 0
  2280  0046'                    ExecuteRxParamSetupReq@ptr:
  2281                           	opt stack 0
  2282  0046'                    RADIO_WriteConfiguration@symbolTimeout:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x46
  2286  0046'                    	ds	1
  2287  0047'                    EncryptFRMPayload@i:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x47
  2291  0047'                    	ds	1
  2292  0048'                    ??_ExecuteRxParamSetupReq:
  2293  0048'                    ??_LORAWAN_LinkCheckConfigure:
  2294  0048'                    ??_RADIO_WriteConfiguration:
  2295  0048'                    ?___lwmod:
  2296                           	opt stack 0
  2297  0048'                    EncryptFRMPayload@j:
  2298                           	opt stack 0
  2299  0048'                    ___lwmod@dividend:
  2300                           	opt stack 0
  2301  0048'                    GenerateSubkey@l:
  2302                           	opt stack 0
  2303                           
  2304                           ; 16 bytes @ 0x48
  2305  0048'                    	ds	2
  2306  004A'                    ??_GenerateUSFrequency2:
  2307  004A'                    ___lwmod@divisor:
  2308                           	opt stack 0
  2309  004A'                    ExecuteRxParamSetupReq@frequency:
  2310                           	opt stack 0
  2311  004A'                    GenerateUSFrequency1@channelFrequency:
  2312                           	opt stack 0
  2313  004A'                    GenerateUSFrequencyReception@channelFrequency:
  2314                           	opt stack 0
  2315  004A'                    RADIO_TxDone@timeOnAir:
  2316                           	opt stack 0
  2317  004A'                    RADIO_FSKPacketSent@timeOnAir:
  2318                           	opt stack 0
  2319                           
  2320                           ; 4 bytes @ 0x4A
  2321  004A'                    	ds	1
  2322  004B'                    RADIO_WriteConfiguration@i:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x4B
  2326  004B'                    	ds	1
  2327  004C'                    ___lwmod@counter:
  2328                           	opt stack 0
  2329  004C'                    _LORAWAN_LinkCheckConfigure$1092:
  2330                           	opt stack 0
  2331  004C'                    RADIO_WriteConfiguration@tempValue:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0x4C
  2335  004C'                    	ds	1
  2336  004D'                    ?_Random:
  2337                           	opt stack 0
  2338  004D'                    Random@max:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x4D
  2342  004D'                    	ds	1
  2343  004E'                    ExecuteRxParamSetupReq@dlSettings:
  2344                           	opt stack 0
  2345  004E'                    GenerateUSFrequency1@channelIndex:
  2346                           	opt stack 0
  2347  004E'                    GenerateUSFrequencyReception@channelIndex:
  2348                           	opt stack 0
  2349  004E'                    GenerateUSFrequency2@channelFrequency:
  2350                           	opt stack 0
  2351  004E'                    _RADIO_TxDone$2846:
  2352                           	opt stack 0
  2353  004E'                    _RADIO_FSKPacketSent$2851:
  2354                           	opt stack 0
  2355                           
  2356                           ; 4 bytes @ 0x4E
  2357  004E'                    	ds	1
  2358  004F'                    ?_GetRx1Freq:
  2359                           	opt stack 0
  2360  004F'                    SearchAvailableChannel@transmissionType:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x4F
  2364  004F'                    	ds	1
  2365  0050'                    LORAWAN_LinkCheckConfigure@iCtr:
  2366                           	opt stack 0
  2367  0050'                    RADIO_WriteConfiguration@regValue:
  2368                           	opt stack 0
  2369  0050'                    SearchAvailableChannel@channelIndex:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x50
  2373  0050'                    	ds	1
  2374  0051'                    ?_RADIO_Transmit:
  2375                           	opt stack 0
  2376  0051'                    ?_RADIO_ReceiveStart:
  2377                           	opt stack 0
  2378  0051'                    LORAWAN_Init@RxPayload:
  2379                           	opt stack 0
  2380  0051'                    RADIO_Transmit@buffer:
  2381                           	opt stack 0
  2382  0051'                    RADIO_ReceiveStart@rxWindowSize:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x51
  2386  0051'                    	ds	1
  2387  0052'                    ??_SearchAvailableChannel:
  2388  0052'                    GenerateUSFrequency2@channelIndex:
  2389                           	opt stack 0
  2390  0052'                    RADIO_FSKPacketSent@irqFlags:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x52
  2394  0052'                    	ds	1
  2395  0053'                    ??_RADIO_ReceiveStart:
  2396  0053'                    ?_ExecuteNewChannel:
  2397                           	opt stack 0
  2398  0053'                    ?_LORAWAN_GetFrequency:
  2399                           	opt stack 0
  2400  0053'                    GetRx1Freq@channelIndex:
  2401                           	opt stack 0
  2402  0053'                    RADIO_Transmit@bufferLen:
  2403                           	opt stack 0
  2404  0053'                    LORAWAN_Init@RxJoinResponse:
  2405                           	opt stack 0
  2406  0053'                    ExecuteNewChannel@ptr:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x53
  2410  0053'                    	ds	1
  2411  0054'                    ??_RADIO_Transmit:
  2412                           
  2413                           ; 1 bytes @ 0x54
  2414  0054'                    	ds	1
  2415  0055'                    ??_ExecuteNewChannel:
  2416  0055'                    
  2417                           ; 1 bytes @ 0x55
  2418  0055'                    	ds	2
  2419  0057'                    ExecuteNewChannel@drRange:
  2420                           	opt stack 0
  2421  0057'                    SearchAvailableChannel@randomNumberCopy:
  2422                           	opt stack 0
  2423  0057'                    LORAWAN_GetFrequency@result:
  2424                           	opt stack 0
  2425  0057'                    _RADIO_ReceiveStart$2833:
  2426                           	opt stack 0
  2427                           
  2428                           ; 4 bytes @ 0x57
  2429  0057'                    	ds	1
  2430  0058'                    GenerateSubkey@i:
  2431                           	opt stack 0
  2432  0058'                    SearchAvailableChannel@result:
  2433                           	opt stack 0
  2434  0058'                    ExecuteNewChannel@frequency:
  2435                           	opt stack 0
  2436  0058'                    _RADIO_Transmit$2829:
  2437                           	opt stack 0
  2438                           
  2439                           ; 4 bytes @ 0x58
  2440  0058'                    	ds	1
  2441  0059'                    SearchAvailableChannel@startingIndex:
  2442                           	opt stack 0
  2443  0059'                    AESCmac@key:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x59
  2447  0059'                    	ds	1
  2448  005A'                    SearchAvailableChannel@maxChannels:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0x5A
  2452  005A'                    	ds	1
  2453  005B'                    LORAWAN_GetFrequency@channelId:
  2454                           	opt stack 0
  2455  005B'                    SearchAvailableChannel@randomNumber:
  2456                           	opt stack 0
  2457  005B'                    AESCmac@output:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x5B
  2461  005B'                    	ds	1
  2462  005C'                    ExecuteNewChannel@channelIndex:
  2463                           	opt stack 0
  2464  005C'                    SearchAvailableChannel@i:
  2465                           	opt stack 0
  2466  005C'                    _RADIO_Transmit$2830:
  2467                           	opt stack 0
  2468                           
  2469                           ; 4 bytes @ 0x5C
  2470  005C'                    	ds	1
  2471  005D'                    ??_SelectChannelForTransmission:
  2472  005D'                    ?_MacExecuteCommands:
  2473                           	opt stack 0
  2474  005D'                    MacExecuteCommands@buffer:
  2475                           	opt stack 0
  2476  005D'                    AESCmac@input:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x5D
  2480  005D'                    	ds	1
  2481  005E'                    SelectChannelForTransmission@frequency:
  2482                           	opt stack 0
  2483                           
  2484                           ; 4 bytes @ 0x5E
  2485  005E'                    	ds	1
  2486  005F'                    MacExecuteCommands@fOptsLen:
  2487                           	opt stack 0
  2488  005F'                    AESCmac@size:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x5F
  2492  005F'                    	ds	1
  2493  0060'                    ??_AESCmac:
  2494  0060'                    ??_MacExecuteCommands:
  2495  0060'                    RADIO_Transmit@regValue:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x60
  2499  0060'                    	ds	1
  2500  0061'                    RADIO_Transmit@i:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x61
  2504  0061'                    	ds	1
  2505  0062'                    MacExecuteCommands@done:
  2506                           	opt stack 0
  2507  0062'                    SelectChannelForTransmission@lastDataRate:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x62
  2511  0062'                    	ds	1
  2512  0063'                    SelectChannelForTransmission@result:
  2513                           	opt stack 0
  2514  0063'                    MacExecuteCommands@ptr:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x63
  2518  0063'                    	ds	1
  2519  0064'                    SelectChannelForTransmission@transmissionType:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x64
  2523  0064'                    	ds	1
  2524  0065'                    SelectChannelForTransmission@channelIndex:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x65
  2528  0065'                    	ds	1
  2529  0066'                    _Retransmissions$2475:
  2530                           	opt stack 0
  2531                           
  2532                           ; 4 bytes @ 0x66
  2533  0066'                    	ds	1
  2534  0067'                    ?_ComputeMic:
  2535                           	opt stack 0
  2536  0067'                    AssemblePacket@port:
  2537                           	opt stack 0
  2538  0067'                    ComputeMic@key:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x67
  2542  0067'                    	ds	1
  2543  0068'                    AssemblePacket@buffer:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x68
  2547  0068'                    	ds	1
  2548  0069'                    ComputeMic@buffer:
  2549                           	opt stack 0
  2550                           
  2551                           ; 2 bytes @ 0x69
  2552  0069'                    	ds	1
  2553  006A'                    ??_RADIO_DIO1:
  2554  006A'                    AssemblePacket@bufferLength:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x6A
  2558  006A'                    	ds	1
  2559  006B'                    ComputeMic@bufferLength:
  2560                           	opt stack 0
  2561  006B'                    RADIO_DIO1@dioMapping:
  2562                           	opt stack 0
  2563                           
  2564                           ; 1 bytes @ 0x6B
  2565  006B'                    	ds	1
  2566  006C'                    ??_AssemblePacket:
  2567  006C'                    ComputeMic@mic:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0x6C
  2571  006C'                    	ds	2
  2572  006E'                    AssemblePacket@confirmed:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x6E
  2576  006E'                    	ds	1
  2577  006F'                    AssemblePacket@mhdr:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x6F
  2581  006F'                    	ds	1
  2582  0070'                    ??_PrepareJoinRequestFrame:
  2583  0070'                    AssemblePacket@fCtrl:
  2584                           	opt stack 0
  2585                           
  2586                           ; 1 bytes @ 0x70
  2587  0070'                    	ds	1
  2588  0071'                    AssemblePacket@macCmdIdx:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x71
  2592  0071'                    	ds	1
  2593  0072'                    AssemblePacket@bufferIndex:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x72
  2597  0072'                    	ds	1
  2598  0073'                    LORAWAN_Send@port:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x73
  2602  0073'                    	ds	1
  2603  0074'                    LORAWAN_Send@buffer:
  2604                           	opt stack 0
  2605  0074'                    PrepareJoinRequestFrame@mic:
  2606                           	opt stack 0
  2607                           
  2608                           ; 4 bytes @ 0x74
  2609  0074'                    	ds	2
  2610  0076'                    LORAWAN_Send@bufferLength:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x76
  2614  0076'                    	ds	1
  2615  0077'                    ??_LORAWAN_Send:
  2616                           
  2617                           ; 1 bytes @ 0x77
  2618  0077'                    	ds	1
  2619  0078'                    LORAWAN_Send@result:
  2620                           	opt stack 0
  2621  0078'                    PrepareJoinRequestFrame@mhdr:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x78
  2625  0078'                    	ds	1
  2626  0079'                    LORAWAN_Send@confirmed:
  2627                           	opt stack 0
  2628  0079'                    PrepareJoinRequestFrame@iCtr:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x79
  2632  0079'                    	ds	1
  2633  007A'                    ??_SwTimersExecute:
  2634  007A'                    ??_LORAWAN_RxDone:
  2635  007A'                    PrepareJoinRequestFrame@bufferIndex:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x7A
  2639  007A'                    	ds	1
  2640  007B'                    LORAWAN_Join@bufferIndex:
  2641                           	opt stack 0
  2642                           
  2643                           ; 1 bytes @ 0x7B
  2644  007B'                    	ds	1
  2645  007C'                    LORAWAN_Join@result:
  2646                           	opt stack 0
  2647                           
  2648                           ; 1 bytes @ 0x7C
  2649  007C'                    	ds	1
  2650  007D'                    LORAWAN_Join@activationTypeNew:
  2651                           	opt stack 0
  2652                           
  2653                           ; 1 bytes @ 0x7D
  2654  007D'                    	ds	1
  2655  007E'                    SwTimersExecute@i:
  2656                           	opt stack 0
  2657                           
  2658                           ; 1 bytes @ 0x7E
  2659  007E'                    	ds	1
  2660  007F'                    LORAWAN_RxDone@fPort:
  2661                           	opt stack 0
  2662                           
  2663                           ; 1 bytes @ 0x7F
  2664  007F'                    	ds	1
  2665  0080'                    LORAWAN_RxDone@channelIndex:
  2666                           	opt stack 0
  2667                           
  2668                           ; 1 bytes @ 0x80
  2669  0080'                    	ds	1
  2670  0081'                    LORAWAN_RxDone@mhdr:
  2671                           	opt stack 0
  2672                           
  2673                           ; 1 bytes @ 0x81
  2674  0081'                    	ds	1
  2675  0082'                    LORAWAN_RxDone@extractedMic:
  2676                           	opt stack 0
  2677                           
  2678                           ; 4 bytes @ 0x82
  2679  0082'                    	ds	4
  2680  0086'                    LORAWAN_RxDone@bufferIndex:
  2681                           	opt stack 0
  2682                           
  2683                           ; 1 bytes @ 0x86
  2684  0086'                    	ds	1
  2685  0087'                    LORAWAN_RxDone@temp:
  2686                           	opt stack 0
  2687                           
  2688                           ; 1 bytes @ 0x87
  2689  0087'                    	ds	1
  2690  0088'                    LORAWAN_RxDone@packet:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x88
  2694  0088'                    	ds	2
  2695  008A'                    LORAWAN_RxDone@computedMic:
  2696                           	opt stack 0
  2697                           
  2698                           ; 4 bytes @ 0x8A
  2699  008A'                    	ds	4
  2700  008E'                    LORAWAN_RxDone@joinAccept:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x8E
  2704  008E'                    	ds	2
  2705  0090'                    LORAWAN_RxDone@frmPayloadLength:
  2706                           	opt stack 0
  2707                           
  2708                           ; 1 bytes @ 0x90
  2709  0090'                    	ds	1
  2710  0091'                    LORAWAN_RxDone@hdr:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x91
  2714  0091'                    	ds	2
  2715  0093'                    RADIO_RxDone@irqFlags:
  2716                           	opt stack 0
  2717  0093'                    RADIO_FSKPayloadReady@irqFlags:
  2718                           	opt stack 0
  2719                           
  2720                           ; 1 bytes @ 0x93
  2721  0093'                    	ds	1
  2722  0094'                    RADIO_RxDone@i:
  2723                           	opt stack 0
  2724  0094'                    RADIO_FSKPayloadReady@i:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0x94
  2728  0094'                    	ds	1
  2729  0095'                    ??_RADIO_DIO0:
  2730                           
  2731                           ; 1 bytes @ 0x95
  2732  0095'                    	ds	2
  2733  0097'                    RADIO_DIO0@dioMapping:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x97
  2737  0097'                    	ds	1
  2738  0098'                    RADIO_DIO0@opMode:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x98
  2742  0098'                    	ds	1
  2743  0099'                    ??_main:
  2744                           
  2745                           ; 1 bytes @ 0x99
  2746  0099'                    	ds	2
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           postinc0	equ	0xFEE
  2752                           wreg	equ	0xFE8
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           
  2757                           	psect	cstackCOMRAM
  2758  0000'                    __pcstackCOMRAM:
  2759                           	opt stack 0
  2760  0000'                    ?i2_TMR1_ReadTimer:
  2761                           	opt stack 0
  2762  0000'                    i2TMR1_WriteTimer@timerVal:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x0
  2766  0000'                    	ds	2
  2767  0002'                    ??i2_TMR1_ReadTimer:
  2768  0002'                    
  2769                           ; 1 bytes @ 0x2
  2770  0002'                    	ds	2
  2771  0004'                    i2TMR1_ReadTimer@readVal:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x4
  2775  0004'                    	ds	2
  2776  0006'                    i2TMR1_ReadTimer@readValHigh:
  2777                           	opt stack 0
  2778                           
  2779                           ; 1 bytes @ 0x6
  2780  0006'                    	ds	1
  2781  0007'                    i2TMR1_ReadTimer@readValLow:
  2782                           	opt stack 0
  2783                           
  2784                           ; 1 bytes @ 0x7
  2785  0007'                    	ds	1
  2786  0008'                    ?i2_TMR_SwapTimer:
  2787                           	opt stack 0
  2788  0008'                    ?i2_TMR_GetDeltaTime:
  2789                           	opt stack 0
  2790  0008'                    i2TMR_SwapTimer@timerVal:
  2791                           	opt stack 0
  2792                           
  2793                           ; 2 bytes @ 0x8
  2794  0008'                    	ds	2
  2795  000A'                    
  2796                           ; 1 bytes @ 0xA
  2797  000A'                    	ds	2
  2798  000C'                    ??i2_TMR_GetDeltaTime:
  2799                           
  2800                           ; 1 bytes @ 0xC
  2801  000C'                    	ds	20
  2802  0020'                    ?i2_SwTimersInterrupt:
  2803                           	opt stack 0
  2804                           
  2805                           ; 4 bytes @ 0x20
  2806  0020'                    	ds	4
  2807  0024'                    
  2808                           ; 1 bytes @ 0x24
  2809  0024'                    	ds	4
  2810  0028'                    i2SwTimersInterrupt@timeElapsed:
  2811                           	opt stack 0
  2812                           
  2813                           ; 4 bytes @ 0x28
  2814  0028'                    	ds	4
  2815  002C'                    i2SwTimersInterrupt@ticksToNextTimerEvent:
  2816                           	opt stack 0
  2817                           
  2818                           ; 4 bytes @ 0x2C
  2819  002C'                    	ds	4
  2820  0030'                    i2SwTimersInterrupt@i:
  2821                           	opt stack 0
  2822                           
  2823                           ; 1 bytes @ 0x30
  2824  0030'                    	ds	1
  2825  0031'                    ??_TMR_ISR_lora:
  2826                           
  2827                           ; 1 bytes @ 0x31
  2828  0031'                    	ds	2
  2829  0033'                    ??_INTERRUPT_InterruptManager:
  2830                           
  2831                           ; 1 bytes @ 0x33
  2832  0033'                    	ds	8
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           postdec2	equ	0xFDD
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           
  2843 ;;
  2844 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2845 ;;
  2846 ;; *************** function _main *****************
  2847 ;; Defined at:
  2848 ;;		line 69 in file "main.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  ch              2  110[BANK1 ] int 
  2853 ;;  freq            4  105[BANK1 ] unsigned long 
  2854 ;;  enable          1  109[BANK1 ] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+3, btemp+
      +4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, bsr, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Totals:         0       2       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;Total ram usage:        9 bytes
  2869 ;; Hardware stack levels required when called:   19
  2870 ;; This function calls:
  2871 ;;		_LORAWAN_GetChannelIdStatus
  2872 ;;		_LORAWAN_GetFrequency
  2873 ;;		_LORAWAN_Init
  2874 ;;		_LORAWAN_Join
  2875 ;;		_LORAWAN_Mainloop
  2876 ;;		_LORAWAN_Reset
  2877 ;;		_LORAWAN_Send
  2878 ;;		_LORAWAN_SetApplicationEui
  2879 ;;		_LORAWAN_SetApplicationKey
  2880 ;;		_LORAWAN_SetDeviceEui
  2881 ;;		_SYSTEM_Initialize
  2882 ;;		_printf
  2883 ;; This function is called by:
  2884 ;;		Startup code after reset
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text0
  2889  0000'                    __ptext0:
  2890                           	opt stack 0
  2891  0000'                    _main:
  2892                           	opt stack 12
  2893                           
  2894                           ;main.c: 71: printf("\r\n");
  2895                           
  2896                           ;incstack = 0
  2897  0000' 0E00'              	movlw	low (STR_2+21)
  2898  0002' 0100               	movlb	0	; () banked
  2899  0004' 6F00'              	movwf	printf@f& (0+255),b
  2900  0006' 0E00'              	movlw	high (STR_2+21)
  2901  0008' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2902  000A' EC00' F000'        	call	_printf	;wreg free
  2903                           
  2904                           ;main.c: 72: _delay((unsigned long)((1000)*(16000000/4000.0)));
  2905  000E' 0E15               	movlw	21
  2906  0010' 0100               	movlb	0	; () banked
  2907  0012' 6F00'              	movwf	(??_main+1)& (0+255),b
  2908  0014' 0E4B               	movlw	75
  2909  0016' 6F00'              	movwf	??_main& (0+255),b
  2910  0018' 0EBE               	movlw	190
  2911  001A'                    u14987:
  2912  001A' 2EE8               	decfsz	wreg,f,c
  2913  001C' D7FE               	bra	u14987
  2914  001E' 2F00'              	decfsz	??_main& (0+255),f,b
  2915  0020' D7FC               	bra	u14987
  2916  0022' 2F00'              	decfsz	(??_main+1)& (0+255),f,b
  2917  0024' D7FA               	bra	u14987
  2918  0026' F000               	nop	
  2919                           
  2920                           ;main.c: 73: printf("\r\nRN2903 Test Program\r\n");
  2921  0028' 0E00'              	movlw	low STR_2
  2922  002A' 0100               	movlb	0	; () banked
  2923  002C' 6F00'              	movwf	printf@f& (0+255),b
  2924  002E' 0E00'              	movlw	high STR_2
  2925  0030' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2926  0032' EC00' F000'        	call	_printf	;wreg free
  2927                           
  2928                           ;main.c: 75: uint32_t freq;
  2929                           ;main.c: 76: bool enable;
  2930                           ;main.c: 78: SYSTEM_Initialize();
  2931  0036' EC00' F000'        	call	_SYSTEM_Initialize	;wreg free
  2932                           
  2933                           ;main.c: 85: (INTCONbits.GIE = 1);
  2934  003A' 8EF2               	bsf	intcon,7,c	;volatile
  2935                           
  2936                           ;main.c: 91: (INTCONbits.PEIE = 1);
  2937  003C' 8CF2               	bsf	intcon,6,c	;volatile
  2938                           
  2939                           ;main.c: 96: LORAWAN_Reset();
  2940  003E' EC00' F000'        	call	_LORAWAN_Reset	;wreg free
  2941                           
  2942                           ;main.c: 97: LORAWAN_Init(RxData, RxJoinResponse);
  2943  0042' 0E00'              	movlw	low _RxData
  2944  0044' 0100               	movlb	0	; () banked
  2945  0046' 6F00'              	movwf	LORAWAN_Init@RxPayload& (0+255),b
  2946  0048' 0E00'              	movlw	high _RxData
  2947  004A' 6F00'              	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  2948  004C' 0E00'              	movlw	low _RxJoinResponse
  2949  004E' 6F00'              	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  2950  0050' 0E00'              	movlw	high _RxJoinResponse
  2951  0052' 6F00'              	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  2952  0054' EC00' F000'        	call	_LORAWAN_Init	;wreg free
  2953                           
  2954                           ;main.c: 100: for (int ch = 0; ch <= 71; ch++) {
  2955  0058' 0E00               	movlw	0
  2956  005A' 0101               	movlb	1	; () banked
  2957  005C' 6F00'              	movwf	(main@ch+1)& (0+255),b
  2958  005E' 0E00               	movlw	0
  2959  0060' 6F00'              	movwf	main@ch& (0+255),b
  2960  0062'                    l13162:
  2961                           
  2962                           ; BSR set to: 1
  2963  0062' BF00'              	btfsc	(main@ch+1)& (0+255),7,b
  2964  0064' D006               	goto	l2562
  2965  0066' 5100'              	movf	(main@ch+1)& (0+255),w,b
  2966  0068' E12F               	bnz	l13178
  2967  006A' 0E48               	movlw	72
  2968  006C' 5D00'              	subwf	main@ch& (0+255),w,b
  2969  006E' B0D8               	btfsc	status,0,c
  2970  0070' D02B               	goto	u14970
  2971  0072'                    l2562:
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 101: enable = LORAWAN_GetChannelIdStatus(ch);
  2975                           
  2976                           ; BSR set to: 1
  2977  0072' 5100'              	movf	main@ch& (0+255),w,b
  2978  0074' EC00' F000'        	call	_LORAWAN_GetChannelIdStatus
  2979  0078' 0101               	movlb	1	; () banked
  2980  007A' 6F00'              	movwf	main@enable& (0+255),b
  2981                           
  2982                           ; BSR set to: 1
  2983                           ;main.c: 102: freq = LORAWAN_GetFrequency(ch);
  2984  007C' 5100'              	movf	main@ch& (0+255),w,b
  2985  007E' EC00' F000'        	call	_LORAWAN_GetFrequency
  2986  0082' C053' F069'        	movff	?_LORAWAN_GetFrequency,main@freq
  2987  0086' C054' F06A'        	movff	?_LORAWAN_GetFrequency+1,main@freq+1
  2988  008A' C055' F06B'        	movff	?_LORAWAN_GetFrequency+2,main@freq+2
  2989  008E' C056' F06C'        	movff	?_LORAWAN_GetFrequency+3,main@freq+3
  2990                           
  2991                           ;main.c: 103: if (enable) printf("Channel %02d Enabled: %ldHz\r\n",ch, freq);
  2992  0092' 0101               	movlb	1	; () banked
  2993  0094' 5100'              	movf	main@enable& (0+255),w,b
  2994  0096' B4D8               	btfsc	status,2,c
  2995  0098' D013               	goto	l2564
  2996                           
  2997                           ; BSR set to: 1
  2998  009A' 0E00'              	movlw	low STR_3
  2999  009C' 0100               	movlb	0	; () banked
  3000  009E' 6F00'              	movwf	printf@f& (0+255),b
  3001  00A0' 0E00'              	movlw	high STR_3
  3002  00A2' 6F00'              	movwf	(printf@f+1)& (0+255),b
  3003  00A4' C06E' F018'        	movff	main@ch,?_printf+2
  3004  00A8' C06F' F019'        	movff	main@ch+1,?_printf+3
  3005  00AC' C069' F01A'        	movff	main@freq,?_printf+4
  3006  00B0' C06A' F01B'        	movff	main@freq+1,?_printf+5
  3007  00B4' C06B' F01C'        	movff	main@freq+2,?_printf+6
  3008  00B8' C06C' F01D'        	movff	main@freq+3,?_printf+7
  3009  00BC' EC00' F000'        	call	_printf	;wreg free
  3010  00C0'                    l2564:
  3011  00C0' 0101               	movlb	1	; () banked
  3012  00C2' 4B00'              	infsnz	main@ch& (0+255),f,b
  3013  00C4' 2B00'              	incf	(main@ch+1)& (0+255),f,b
  3014  00C6' D7CD               	goto	l13162
  3015  00C8'                    u14970:
  3016  00C8'                    l13178:
  3017                           
  3018                           ; BSR set to: 1
  3019                           ;main.c: 104: }
  3020                           ;main.c: 106: LORAWAN_SetApplicationEui(applicationEuiNew);
  3021  00C8' 0E00'              	movlw	low _applicationEuiNew
  3022  00CA' 0100               	movlb	0	; () banked
  3023  00CC' 6F00'              	movwf	LORAWAN_SetApplicationEui@applicationEuiNew& (0+255),b
  3024  00CE' 0E00'              	movlw	high _applicationEuiNew
  3025  00D0' 6F00'              	movwf	(LORAWAN_SetApplicationEui@applicationEuiNew+1)& (0+255),b
  3026  00D2' EC00' F000'        	call	_LORAWAN_SetApplicationEui	;wreg free
  3027                           
  3028                           ;main.c: 107: LORAWAN_SetDeviceEui(deviceEuiNew);
  3029  00D6' 0E00'              	movlw	low _deviceEuiNew
  3030  00D8' 0100               	movlb	0	; () banked
  3031  00DA' 6F00'              	movwf	LORAWAN_SetDeviceEui@deviceEuiNew& (0+255),b
  3032  00DC' 0E00'              	movlw	high _deviceEuiNew
  3033  00DE' 6F00'              	movwf	(LORAWAN_SetDeviceEui@deviceEuiNew+1)& (0+255),b
  3034  00E0' EC00' F000'        	call	_LORAWAN_SetDeviceEui	;wreg free
  3035                           
  3036                           ;main.c: 108: LORAWAN_SetApplicationKey(applicationKeyNew);
  3037  00E4' 0E00'              	movlw	low _applicationKeyNew
  3038  00E6' 0100               	movlb	0	; () banked
  3039  00E8' 6F00'              	movwf	LORAWAN_SetApplicationKey@applicationKeyNew& (0+255),b
  3040  00EA' 0E00'              	movlw	high _applicationKeyNew
  3041  00EC' 6F00'              	movwf	(LORAWAN_SetApplicationKey@applicationKeyNew+1)& (0+255),b
  3042  00EE' EC00' F000'        	call	_LORAWAN_SetApplicationKey	;wreg free
  3043                           
  3044                           ;main.c: 109: LORAWAN_Join(OTAA);
  3045  00F2' 0E00               	movlw	0
  3046  00F4' EC00' F000'        	call	_LORAWAN_Join
  3047  00F8'                    
  3048                           ;main.c: 130: {
  3049                           ;main.c: 132: LORAWAN_Mainloop();
  3050  00F8' EC00' F000'        	call	_LORAWAN_Mainloop	;wreg free
  3051                           
  3052                           ;main.c: 136: LORAWAN_Send(UNCNF, 2, "LoRa", 4);
  3053  00FC' 0E02               	movlw	2
  3054  00FE' 0100               	movlb	0	; () banked
  3055  0100' 6F00'              	movwf	LORAWAN_Send@port& (0+255),b
  3056  0102' 0E00'              	movlw	low STR_4
  3057  0104' 6F00'              	movwf	LORAWAN_Send@buffer& (0+255),b
  3058  0106' 0E00'              	movlw	high STR_4
  3059  0108' 6F00'              	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3060  010A' 0E04               	movlw	4
  3061  010C' 6F00'              	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3062  010E' 0E00               	movlw	0
  3063  0110' EC00' F000'        	call	_LORAWAN_Send
  3064  0114' D7F1               	goto	l2565
  3065  0116'                    __end_of_main:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           intcon	equ	0xFF2
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postdec2	equ	0xFDD
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _printf *****************
  3080 ;; Defined at:
  3081 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  3084 ;;		 -> STR_3(30), STR_2(24), STR_1(3), 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  val             4   38[BANK0 ] unsigned long 
  3087 ;;  tmpval          4    0        struct .
  3088 ;;  cp              3    0        PTR const unsigned char 
  3089 ;;  width           2   43[BANK0 ] int 
  3090 ;;  ap              2   36[BANK0 ] PTR void [1]
  3091 ;;		 -> ?_printf(2), 
  3092 ;;  prec            2   34[BANK0 ] int 
  3093 ;;  len             2    0        unsigned int 
  3094 ;;  c               1   45[BANK0 ] char 
  3095 ;;  flag            1   42[BANK0 ] unsigned char 
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  2   22[BANK0 ] int 
  3098 ;; Registers used:
  3099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3105 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;Total ram usage:       24 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    9
  3112 ;; This function calls:
  3113 ;;		___lldiv
  3114 ;;		___llmod
  3115 ;;		___wmul
  3116 ;;		_isdigit
  3117 ;;		_putch
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text1
  3124  0000'                    __ptext1:
  3125                           	opt stack 0
  3126  0000'                    _printf:
  3127                           	opt stack 21
  3128                           
  3129                           ;doprnt.c: 466: va_list ap;
  3130                           ;doprnt.c: 499: signed char c;
  3131                           ;doprnt.c: 501: int width;
  3132                           ;doprnt.c: 504: int prec;
  3133                           ;doprnt.c: 508: unsigned char flag;
  3134                           ;doprnt.c: 523: union {
  3135                           ;doprnt.c: 524: unsigned long vd;
  3136                           ;doprnt.c: 525: double integ;
  3137                           ;doprnt.c: 526: } tmpval;
  3138                           ;doprnt.c: 528: unsigned long val;
  3139                           ;doprnt.c: 529: unsigned len;
  3140                           ;doprnt.c: 530: const char * cp;
  3141                           ;doprnt.c: 533: *ap = __va_start();
  3142                           
  3143                           ;incstack = 0
  3144  0000' 0E00'              	movlw	low (?_printf+2)
  3145  0002' 0100               	movlb	0	; () banked
  3146  0004' 6F00'              	movwf	printf@ap& (0+255),b
  3147  0006' 0E00'              	movlw	high (?_printf+2)
  3148  0008' 6F00'              	movwf	(printf@ap+1)& (0+255),b
  3149                           
  3150                           ;doprnt.c: 536: while(c = *f++) {
  3151  000A' D170               	goto	u13060
  3152  000C'                    
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 538: if(c != '%')
  3155                           
  3156                           ; BSR set to: 0
  3157  000C' 0E25               	movlw	37
  3158  000E' 1900'              	xorwf	printf@c& (0+255),w,b
  3159  0010' B4D8               	btfsc	status,2,c
  3160  0012' D004               	goto	l2583
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 540: {
  3164                           ;doprnt.c: 541: (putch(c) );
  3165  0014' 5100'              	movf	printf@c& (0+255),w,b
  3166  0016' EC00' F000'        	call	_putch
  3167                           
  3168                           ;doprnt.c: 542: continue;
  3169  001A' D168               	goto	u13060
  3170  001C'                    l2583:
  3171                           
  3172                           ;doprnt.c: 543: }
  3173                           ;doprnt.c: 546: width = 0;
  3174  001C' 0E00               	movlw	0
  3175  001E' 0100               	movlb	0	; () banked
  3176  0020' 6F00'              	movwf	(printf@width+1)& (0+255),b
  3177  0022' 0E00               	movlw	0
  3178  0024' 6F00'              	movwf	printf@width& (0+255),b
  3179                           
  3180                           ;doprnt.c: 548: flag = 0;
  3181  0026' 0E00               	movlw	0
  3182  0028' 6F00'              	movwf	printf@flag& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;doprnt.c: 551: switch(*f) {
  3186                           
  3187                           ;doprnt.c: 550: for(;;) {
  3188  002A' D004               	goto	l2585
  3189  002C'                    
  3190                           ;doprnt.c: 580: flag |= 0x04;
  3191                           
  3192                           ; BSR set to: 0
  3193  002C' 0100               	movlb	0	; () banked
  3194  002E' 8500'              	bsf	printf@flag& (0+255),2,b
  3195                           
  3196                           ;doprnt.c: 581: f++;
  3197  0030' 4B00'              	infsnz	printf@f& (0+255),f,b
  3198  0032' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  3199  0034'                    l2585:
  3200                           
  3201                           ; BSR set to: 0
  3202  0034' C016' FFF6         	movff	printf@f,tblptrl
  3203  0038' C017' FFF7         	movff	printf@f+1,tblptrh
  3204  003C'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3205  003C' 6AF8               	clrf	tblptru,c
  3206  003E'                    	endif
  3207  003E'                    	if	0	;tblptru may be non-zero
  3208  003E'                    	endif
  3209  003E' 0008               	tblrd		*
  3210  0040' 50F5               	movf	tablat,w,c
  3211                           
  3212                           ; Switch size 1, requested type "space"
  3213                           ; Number of cases is 1, Range of values is 48 to 48
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte            4     3 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218  0042' 0A30               	xorlw	48	; case 48
  3219  0044' B4D8               	btfsc	status,2,c
  3220  0046' D7F2               	goto	l2586
  3221                           
  3222                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3223                           
  3224                           ;doprnt.c: 586: }
  3225                           
  3226                           ;doprnt.c: 585: break;
  3227  0048' C016' FFF6         	movff	printf@f,tblptrl
  3228  004C' C017' FFF7         	movff	printf@f+1,tblptrh
  3229  0050'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3230  0050' 6AF8               	clrf	tblptru,c
  3231  0052'                    	endif
  3232  0052'                    	if	0	;tblptru may be non-zero
  3233  0052'                    	endif
  3234  0052' 0008               	tblrd		*
  3235  0054' 50F5               	movf	tablat,w,c
  3236  0056' EC00' F000'        	call	_isdigit
  3237  005A' A0D8               	btfss	status,0,c
  3238  005C' D03A               	goto	l2594
  3239                           
  3240                           ;doprnt.c: 598: width = 0;
  3241  005E' 0E00               	movlw	0
  3242  0060' 0100               	movlb	0	; () banked
  3243  0062' 6F00'              	movwf	(printf@width+1)& (0+255),b
  3244  0064' 0E00               	movlw	0
  3245  0066' 6F00'              	movwf	printf@width& (0+255),b
  3246  0068'                    
  3247                           ;doprnt.c: 600: width *= 10;
  3248                           
  3249                           ; BSR set to: 0
  3250  0068' C02B' F000'        	movff	printf@width,___wmul@multiplier
  3251  006C' C02C' F001'        	movff	printf@width+1,___wmul@multiplier+1
  3252  0070' 0E00               	movlw	0
  3253  0072' 0100               	movlb	0	; () banked
  3254  0074' 6F00'              	movwf	(___wmul@multiplicand+1)& (0+255),b
  3255  0076' 0E0A               	movlw	10
  3256  0078' 6F00'              	movwf	___wmul@multiplicand& (0+255),b
  3257  007A' EC00' F000'        	call	___wmul	;wreg free
  3258  007E' C000' F02B'        	movff	?___wmul,printf@width
  3259  0082' C001' F02C'        	movff	?___wmul+1,printf@width+1
  3260                           
  3261                           ;doprnt.c: 601: width += *f++ - '0';
  3262  0086' 0ED0               	movlw	208
  3263  0088' 0100               	movlb	0	; () banked
  3264  008A' 6F00'              	movwf	??_printf& (0+255),b
  3265  008C' 0EFF               	movlw	255
  3266  008E' 6F00'              	movwf	(??_printf+1)& (0+255),b
  3267  0090' C016' FFF6         	movff	printf@f,tblptrl
  3268  0094' C017' FFF7         	movff	printf@f+1,tblptrh
  3269  0098'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3270  0098' 6AF8               	clrf	tblptru,c
  3271  009A'                    	endif
  3272  009A'                    	if	0	;tblptru may be non-zero
  3273  009A'                    	endif
  3274  009A' 0008               	tblrd		*
  3275  009C' 50F5               	movf	tablat,w,c
  3276  009E' 6F00'              	movwf	(??_printf+2)& (0+255),b
  3277  00A0' 6B00'              	clrf	(??_printf+3)& (0+255),b
  3278  00A2' 5100'              	movf	??_printf& (0+255),w,b
  3279  00A4' 2700'              	addwf	(??_printf+2)& (0+255),f,b
  3280  00A6' 5100'              	movf	(??_printf+1)& (0+255),w,b
  3281  00A8' 2300'              	addwfc	(??_printf+3)& (0+255),f,b
  3282  00AA' 5100'              	movf	(??_printf+2)& (0+255),w,b
  3283  00AC' 2700'              	addwf	printf@width& (0+255),f,b
  3284  00AE' 5100'              	movf	(??_printf+3)& (0+255),w,b
  3285  00B0' 2300'              	addwfc	(printf@width+1)& (0+255),f,b
  3286                           
  3287                           ; BSR set to: 0
  3288  00B2' 4B00'              	infsnz	printf@f& (0+255),f,b
  3289  00B4' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3293  00B6' C016' FFF6         	movff	printf@f,tblptrl
  3294  00BA' C017' FFF7         	movff	printf@f+1,tblptrh
  3295  00BE'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3296  00BE' 6AF8               	clrf	tblptru,c
  3297  00C0'                    	endif
  3298  00C0'                    	if	0	;tblptru may be non-zero
  3299  00C0'                    	endif
  3300  00C0' 0008               	tblrd		*
  3301  00C2' 50F5               	movf	tablat,w,c
  3302  00C4' EC00' F000'        	call	_isdigit
  3303  00C8' A0D8               	btfss	status,0,c
  3304  00CA' D003               	goto	l2594
  3305  00CC' D7CD               	goto	l2591
  3306  00CE'                    
  3307                           ;doprnt.c: 643: flag |= 0x10;
  3308  00CE' 0100               	movlb	0	; () banked
  3309  00D0' 8900'              	bsf	printf@flag& (0+255),4,b
  3310  00D2'                    l2594:
  3311                           
  3312                           ; BSR set to: 0
  3313  00D2' C016' FFF6         	movff	printf@f,tblptrl
  3314  00D6' C017' FFF7         	movff	printf@f+1,tblptrh
  3315  00DA' 0100               	movlb	0	; () banked
  3316  00DC' 4B00'              	infsnz	printf@f& (0+255),f,b
  3317  00DE' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  3318  00E0'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3319  00E0' 6AF8               	clrf	tblptru,c
  3320  00E2'                    	endif
  3321  00E2'                    	if	0	;tblptru may be non-zero
  3322  00E2'                    	endif
  3323  00E2' 0008               	tblrd		*
  3324  00E4' CFF5 F02D'         	movff	tablat,printf@c
  3325  00E8' 5100'              	movf	printf@c& (0+255),w,b
  3326                           
  3327                           ; Switch size 1, requested type "space"
  3328                           ; Number of cases is 4, Range of values is 0 to 108
  3329                           ; switch strategies available:
  3330                           ; Name         Instructions Cycles
  3331                           ; simple_byte           13     7 (average)
  3332                           ;	Chosen strategy is simple_byte
  3333  00EA' 0A00               	xorlw	0	; case 0
  3334  00EC' B4D8               	btfsc	status,2,c
  3335  00EE' 0012               	return	
  3336  00F0' 0A64               	xorlw	100	; case 100
  3337  00F2' B4D8               	btfsc	status,2,c
  3338  00F4' D007               	goto	l2600
  3339  00F6' 0A0D               	xorlw	13	; case 105
  3340  00F8' B4D8               	btfsc	status,2,c
  3341  00FA' D004               	goto	l2600
  3342  00FC' 0A05               	xorlw	5	; case 108
  3343  00FE' B4D8               	btfsc	status,2,c
  3344  0100' D7E6               	goto	l2597
  3345  0102' D0F4               	goto	u13060
  3346  0104'                    l2600:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;doprnt.c: 1253: {
  3350                           ;doprnt.c: 1255: if(flag & 0x10)
  3351  0104' A900'              	btfss	printf@flag& (0+255),4,b
  3352  0106' D00E               	goto	l2602
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3356  0108' C024' FFD9         	movff	printf@ap,fsr2l
  3357  010C' C025' FFDA         	movff	printf@ap+1,fsr2h
  3358  0110' CFDE F026'         	movff	postinc2,printf@val
  3359  0114' CFDE F027'         	movff	postinc2,printf@val+1
  3360  0118' CFDE F028'         	movff	postinc2,printf@val+2
  3361  011C' CFDE F029'         	movff	postinc2,printf@val+3
  3362                           
  3363                           ; BSR set to: 0
  3364  0120' 0E04               	movlw	4
  3365  0122' D00E               	goto	L1
  3366  0124'                    l2602:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;doprnt.c: 1257: else
  3370                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3371                           
  3372                           ; BSR set to: 0
  3373  0124' C024' FFD9         	movff	printf@ap,fsr2l
  3374  0128' C025' FFDA         	movff	printf@ap+1,fsr2h
  3375  012C' CFDE F026'         	movff	postinc2,printf@val
  3376  0130' CFDD F027'         	movff	postdec2,printf@val+1
  3377  0134' 0E00               	movlw	0
  3378  0136' BF00'              	btfsc	(printf@val+1)& (0+255),7,b
  3379  0138' 0EFF               	movlw	-1
  3380  013A' 6F00'              	movwf	(printf@val+2)& (0+255),b
  3381  013C' 6F00'              	movwf	(printf@val+3)& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384  013E' 0E02               	movlw	2
  3385  0140'                    L1:
  3386  0140' 2700'              	addwf	printf@ap& (0+255),f,b
  3387  0142' 0E00               	movlw	0
  3388  0144' 2300'              	addwfc	(printf@ap+1)& (0+255),f,b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 1261: if((long)val < 0) {
  3392                           
  3393                           ; BSR set to: 0
  3394  0146' AF00'              	btfss	(printf@val+3)& (0+255),7,b
  3395  0148' D00A               	goto	l2604
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;doprnt.c: 1262: flag |= 0x03;
  3399  014A' 0E03               	movlw	3
  3400  014C' 1300'              	iorwf	printf@flag& (0+255),f,b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;doprnt.c: 1263: val = -val;
  3404  014E' 1F00'              	comf	(printf@val+3)& (0+255),f,b
  3405  0150' 1F00'              	comf	(printf@val+2)& (0+255),f,b
  3406  0152' 1F00'              	comf	(printf@val+1)& (0+255),f,b
  3407  0154' 6D00'              	negf	printf@val& (0+255),b
  3408  0156' 0E00               	movlw	0
  3409  0158' 2300'              	addwfc	(printf@val+1)& (0+255),f,b
  3410  015A' 2300'              	addwfc	(printf@val+2)& (0+255),f,b
  3411  015C' 2300'              	addwfc	(printf@val+3)& (0+255),f,b
  3412  015E'                    l2604:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 1264: }
  3416                           ;doprnt.c: 1266: }
  3417                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3418                           
  3419                           ; BSR set to: 0
  3420  015E' 0E01               	movlw	1
  3421  0160' 6F00'              	movwf	printf@c& (0+255),b
  3422  0162'                    l12146:
  3423                           
  3424                           ; BSR set to: 0
  3425  0162' 0E0A               	movlw	10
  3426  0164' 1900'              	xorwf	printf@c& (0+255),w,b
  3427  0166' B4D8               	btfsc	status,2,c
  3428  0168' D01B               	goto	u12950
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;doprnt.c: 1306: if(val < dpowers[c])
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ; BSR set to: 0
  3436  016A' 5100'              	movf	printf@c& (0+255),w,b
  3437  016C' 0D04               	mullw	4
  3438  016E' 0E00'              	movlw	low _dpowers
  3439  0170' 24F3               	addwf	prodl,w,c
  3440  0172' 6EF6               	movwf	tblptrl,c
  3441  0174' 0E00'              	movlw	high _dpowers
  3442  0176' 20F4               	addwfc	prodh,w,c
  3443  0178' 6EF7               	movwf	tblptrh,c
  3444  017A'                    	if	1	;There are 3 active tblptr bytes
  3445  017A' 6AF8               	clrf	tblptru,c
  3446  017C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3447  017E' 22F8               	addwfc	tblptru,f,c
  3448  0180'                    	endif
  3449  0180' 0009               	tblrd		*+
  3450  0182' 50F5               	movf	tablat,w,c
  3451  0184' 5D00'              	subwf	printf@val& (0+255),w,b
  3452  0186' 0009               	tblrd		*+
  3453  0188' 50F5               	movf	tablat,w,c
  3454  018A' 5900'              	subwfb	(printf@val+1)& (0+255),w,b
  3455  018C' 0009               	tblrd		*+
  3456  018E' 50F5               	movf	tablat,w,c
  3457  0190' 5900'              	subwfb	(printf@val+2)& (0+255),w,b
  3458  0192' 0009               	tblrd		*+
  3459  0194' 50F5               	movf	tablat,w,c
  3460  0196' 5900'              	subwfb	(printf@val+3)& (0+255),w,b
  3461  0198' A0D8               	btfss	status,0,c
  3462  019A' D002               	goto	u12950
  3463                           
  3464                           ; BSR set to: 0
  3465                           
  3466                           ; BSR set to: 0
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;doprnt.c: 1307: break;
  3470  019C' 2B00'              	incf	printf@c& (0+255),f,b
  3471  019E' D7E1               	goto	l12146
  3472  01A0'                    u12950:
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3476                           
  3477                           ; BSR set to: 0
  3478  01A0' 5100'              	movf	printf@width& (0+255),w,b
  3479  01A2' 1100'              	iorwf	(printf@width+1)& (0+255),w,b
  3480  01A4' B4D8               	btfsc	status,2,c
  3481  01A6' D009               	goto	l2608
  3482                           
  3483                           ; BSR set to: 0
  3484  01A8' C02A' F01E'        	movff	printf@flag,??_printf
  3485  01AC' 0E03               	movlw	3
  3486  01AE' 1700'              	andwf	??_printf& (0+255),f,b
  3487  01B0' B4D8               	btfsc	status,2,c
  3488  01B2' D003               	goto	l2608
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;doprnt.c: 1346: width--;
  3492  01B4' 0700'              	decf	printf@width& (0+255),f,b
  3493  01B6' A0D8               	btfss	status,0,c
  3494  01B8' 0700'              	decf	(printf@width+1)& (0+255),f,b
  3495  01BA'                    l2608:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 1381: if(width > c)
  3499                           
  3500                           ; BSR set to: 0
  3501  01BA' 0E80               	movlw	128
  3502  01BC' BF00'              	btfsc	printf@c& (0+255),7,b
  3503  01BE' 0E7F               	movlw	127
  3504  01C0' 6F00'              	movwf	??_printf& (0+255),b
  3505  01C2' 5100'              	movf	printf@width& (0+255),w,b
  3506  01C4' 5D00'              	subwf	printf@c& (0+255),w,b
  3507  01C6' 5100'              	movf	(printf@width+1)& (0+255),w,b
  3508  01C8' 0A80               	xorlw	128
  3509  01CA' 5900'              	subwfb	??_printf& (0+255),w,b
  3510  01CC' B0D8               	btfsc	status,0,c
  3511  01CE' D007               	goto	l2609
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;doprnt.c: 1382: width -= c;
  3515  01D0' 5100'              	movf	printf@c& (0+255),w,b
  3516  01D2' 5F00'              	subwf	printf@width& (0+255),f,b
  3517  01D4' 0E00               	movlw	0
  3518  01D6' BF00'              	btfsc	printf@c& (0+255),7,b
  3519  01D8' 0EFF               	movlw	255
  3520  01DA' 5B00'              	subwfb	(printf@width+1)& (0+255),f,b
  3521  01DC' D004               	goto	l2610
  3522  01DE'                    l2609:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1383: else
  3526                           ;doprnt.c: 1384: width = 0;
  3527                           
  3528                           ; BSR set to: 0
  3529  01DE' 0E00               	movlw	0
  3530  01E0' 6F00'              	movwf	(printf@width+1)& (0+255),b
  3531  01E2' 0E00               	movlw	0
  3532  01E4' 6F00'              	movwf	printf@width& (0+255),b
  3533  01E6'                    l2610:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;doprnt.c: 1387: if(flag & 0x04) {
  3537                           
  3538                           ; BSR set to: 0
  3539  01E6' A500'              	btfss	printf@flag& (0+255),2,b
  3540  01E8' D016               	goto	l2611
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;doprnt.c: 1392: if(flag & 0x03)
  3544  01EA' C02A' F01E'        	movff	printf@flag,??_printf
  3545  01EE' 0E03               	movlw	3
  3546  01F0' 1700'              	andwf	??_printf& (0+255),f,b
  3547  01F2' B4D8               	btfsc	status,2,c
  3548  01F4' D003               	goto	l2612
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;doprnt.c: 1393: (putch('-') );
  3552  01F6' 0E2D               	movlw	45
  3553  01F8' EC00' F000'        	call	_putch
  3554  01FC'                    l2612:
  3555                           
  3556                           ;doprnt.c: 1415: if(width)
  3557  01FC' 0100               	movlb	0	; () banked
  3558  01FE' 5100'              	movf	printf@width& (0+255),w,b
  3559  0200' 1100'              	iorwf	(printf@width+1)& (0+255),w,b
  3560  0202' B4D8               	btfsc	status,2,c
  3561  0204' D020               	goto	l2620
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 1417: (putch('0') );
  3565                           
  3566                           ; BSR set to: 0
  3567                           
  3568                           ;doprnt.c: 1416: do
  3569  0206' 0E30               	movlw	48
  3570  0208' EC00' F000'        	call	_putch
  3571                           
  3572                           ;doprnt.c: 1418: while(--width);
  3573  020C' 0100               	movlb	0	; () banked
  3574  020E' 0700'              	decf	printf@width& (0+255),f,b
  3575  0210' A0D8               	btfss	status,0,c
  3576  0212' 0700'              	decf	(printf@width+1)& (0+255),f,b
  3577  0214' D7F4               	goto	L26
  3578  0216'                    l2611:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1422: {
  3582                           ;doprnt.c: 1424: if(width
  3583                           ;doprnt.c: 1428: )
  3584                           
  3585                           ; BSR set to: 0
  3586  0216' 5100'              	movf	printf@width& (0+255),w,b
  3587  0218' 1100'              	iorwf	(printf@width+1)& (0+255),w,b
  3588  021A' B4D8               	btfsc	status,2,c
  3589  021C' D00B               	goto	u13040
  3590  021E'                    u13030:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;doprnt.c: 1430: (putch(' ') );
  3594                           
  3595                           ; BSR set to: 0
  3596                           
  3597                           ;doprnt.c: 1429: do
  3598  021E' 0E20               	movlw	32
  3599  0220' EC00' F000'        	call	_putch
  3600                           
  3601                           ;doprnt.c: 1431: while(--width);
  3602  0224' 0100               	movlb	0	; () banked
  3603  0226' 0700'              	decf	printf@width& (0+255),f,b
  3604  0228' A0D8               	btfss	status,0,c
  3605  022A' 0700'              	decf	(printf@width+1)& (0+255),f,b
  3606  022C' 5100'              	movf	printf@width& (0+255),w,b
  3607  022E' 1100'              	iorwf	(printf@width+1)& (0+255),w,b
  3608  0230' A4D8               	btfss	status,2,c
  3609  0232' D7F5               	goto	u13030
  3610  0234'                    u13040:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 1438: if(flag & 0x03)
  3614                           
  3615                           ; BSR set to: 0
  3616                           
  3617                           ; BSR set to: 0
  3618  0234' C02A' F01E'        	movff	printf@flag,??_printf
  3619  0238' 0E03               	movlw	3
  3620  023A' 1700'              	andwf	??_printf& (0+255),f,b
  3621  023C' B4D8               	btfsc	status,2,c
  3622  023E' D003               	goto	l2620
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;doprnt.c: 1439: (putch('-') );
  3626  0240' 0E2D               	movlw	45
  3627  0242' EC00' F000'        	call	_putch
  3628  0246'                    l2620:
  3629                           
  3630                           ;doprnt.c: 1469: }
  3631                           ;doprnt.c: 1472: prec = c;
  3632  0246' 0100               	movlb	0	; () banked
  3633  0248' 5100'              	movf	printf@c& (0+255),w,b
  3634  024A' 6F00'              	movwf	printf@prec& (0+255),b
  3635  024C' 6B00'              	clrf	(printf@prec+1)& (0+255),b
  3636  024E' BF00'              	btfsc	printf@prec& (0+255),7,b
  3637  0250' 0700'              	decf	(printf@prec+1)& (0+255),f,b
  3638                           
  3639                           ;doprnt.c: 1474: while(prec--) {
  3640  0252' D043               	goto	l2621
  3641  0254'                    l12194:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;doprnt.c: 1478: {
  3645                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3646  0254' C022' F01E'        	movff	printf@prec,??_printf
  3647  0258' C023' F01F'        	movff	printf@prec+1,??_printf+1
  3648  025C' 90D8               	bcf	status,0,c
  3649  025E' 3700'              	rlcf	??_printf& (0+255),f,b
  3650  0260' 3700'              	rlcf	(??_printf+1)& (0+255),f,b
  3651  0262' 90D8               	bcf	status,0,c
  3652  0264' 3700'              	rlcf	??_printf& (0+255),f,b
  3653  0266' 3700'              	rlcf	(??_printf+1)& (0+255),f,b
  3654  0268' 0E00'              	movlw	low _dpowers
  3655  026A' 2500'              	addwf	??_printf& (0+255),w,b
  3656  026C' 6EF6               	movwf	tblptrl,c
  3657  026E' 0E00'              	movlw	high _dpowers
  3658  0270' 2100'              	addwfc	(??_printf+1)& (0+255),w,b
  3659  0272' 6EF7               	movwf	tblptrh,c
  3660  0274'                    	if	1	;There are 3 active tblptr bytes
  3661  0274' 6AF8               	clrf	tblptru,c
  3662  0276' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3663  0278' 22F8               	addwfc	tblptru,f,c
  3664  027A'                    	endif
  3665  027A' 0009               	tblrd		*+
  3666  027C' CFF5 F004'         	movff	tablat,___lldiv@divisor
  3667  0280' 0009               	tblrd		*+
  3668  0282' CFF5 F005'         	movff	tablat,___lldiv@divisor+1
  3669  0286' 0009               	tblrd		*+
  3670  0288' CFF5 F006'         	movff	tablat,___lldiv@divisor+2
  3671  028C' 000A               	tblrd		*-
  3672  028E' CFF5 F007'         	movff	tablat,___lldiv@divisor+3
  3673  0292' C026' F000'        	movff	printf@val,___lldiv@dividend
  3674  0296' C027' F001'        	movff	printf@val+1,___lldiv@dividend+1
  3675  029A' C028' F002'        	movff	printf@val+2,___lldiv@dividend+2
  3676  029E' C029' F003'        	movff	printf@val+3,___lldiv@dividend+3
  3677  02A2' EC00' F000'        	call	___lldiv	;wreg free
  3678  02A6' C000' F00D'        	movff	?___lldiv,___llmod@dividend
  3679  02AA' C001' F00E'        	movff	?___lldiv+1,___llmod@dividend+1
  3680  02AE' C002' F00F'        	movff	?___lldiv+2,___llmod@dividend+2
  3681  02B2' C003' F010'        	movff	?___lldiv+3,___llmod@dividend+3
  3682  02B6' 0E0A               	movlw	10
  3683  02B8' 0100               	movlb	0	; () banked
  3684  02BA' 6F00'              	movwf	___llmod@divisor& (0+255),b
  3685  02BC' 0E00               	movlw	0
  3686  02BE' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
  3687  02C0' 0E00               	movlw	0
  3688  02C2' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
  3689  02C4' 0E00               	movlw	0
  3690  02C6' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
  3691  02C8' EC00' F000'        	call	___llmod	;wreg free
  3692  02CC' 0100               	movlb	0	; () banked
  3693  02CE' 5100'              	movf	?___llmod& (0+255),w,b
  3694  02D0' 0F30               	addlw	48
  3695  02D2' 6F00'              	movwf	printf@c& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1523: }
  3699                           ;doprnt.c: 1524: (putch(c) );
  3700  02D4' 5100'              	movf	printf@c& (0+255),w,b
  3701  02D6' EC00' F000'        	call	_putch
  3702  02DA'                    l2621:
  3703  02DA' 0100               	movlb	0	; () banked
  3704  02DC' 0700'              	decf	printf@prec& (0+255),f,b
  3705  02DE' A0D8               	btfss	status,0,c
  3706  02E0' 0700'              	decf	(printf@prec+1)& (0+255),f,b
  3707  02E2' 2900'              	incf	printf@prec& (0+255),w,b
  3708  02E4' E1B7               	bnz	l12194
  3709  02E6' 2900'              	incf	(printf@prec+1)& (0+255),w,b
  3710  02E8' A4D8               	btfss	status,2,c
  3711  02EA' D7B4               	goto	l2622
  3712  02EC'                    u13060:
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717  02EC' C016' FFF6         	movff	printf@f,tblptrl
  3718  02F0' C017' FFF7         	movff	printf@f+1,tblptrh
  3719  02F4' 0100               	movlb	0	; () banked
  3720  02F6' 4B00'              	infsnz	printf@f& (0+255),f,b
  3721  02F8' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  3722  02FA'                    	if	1	;Program memory is < 0x10000, tblptru is always zero
  3723  02FA' 6AF8               	clrf	tblptru,c
  3724  02FC'                    	endif
  3725  02FC'                    	if	0	;tblptru may be non-zero
  3726  02FC'                    	endif
  3727  02FC' 0008               	tblrd		*
  3728  02FE' CFF5 F02D'         	movff	tablat,printf@c
  3729  0302' 5100'              	movf	printf@c& (0+255),w,b
  3730  0304' B4D8               	btfsc	status,2,c
  3731  0306' 0012               	return	
  3732  0308' D681               	goto	l2582
  3733  030A'                    __end_of_printf:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _putch *****************
  3751 ;; Defined at:
  3752 ;;		line 125 in file "mcc_generated_files/eusart1.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  txData          1    wreg     unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  txData          1    1[BANK0 ] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:        1 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    8
  3773 ;; This function calls:
  3774 ;;		_EUSART1_Write
  3775 ;; This function is called by:
  3776 ;;		_printf
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text2
  3781  0000'                    __ptext2:
  3782                           	opt stack 0
  3783  0000'                    _putch:
  3784                           	opt stack 21
  3785                           
  3786                           ;incstack = 0
  3787                           ;putch@txData stored from wreg
  3788  0000' 0100               	movlb	0	; () banked
  3789  0002' 6F00'              	movwf	putch@txData& (0+255),b
  3790                           
  3791                           ;eusart1.c: 127: EUSART1_Write(txData);
  3792  0004' 0100               	movlb	0	; () banked
  3793  0006' 5100'              	movf	putch@txData& (0+255),w,b
  3794  0008' EC00' F000'        	call	_EUSART1_Write
  3795  000C' 0012               	return		;funcret
  3796  000E'                    __end_of_putch:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           prodh	equ	0xFF4
  3803                           prodl	equ	0xFF3
  3804                           intcon	equ	0xFF2
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postinc2	equ	0xFDE
  3808                           postdec2	equ	0xFDD
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _EUSART1_Write *****************
  3814 ;; Defined at:
  3815 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  txData          1    wreg     unsigned char 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  txData          1    0[BANK0 ] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      void 
  3822 ;; Registers used:
  3823 ;;		wreg
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;Total ram usage:        1 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    7
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_putch
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text3
  3844  0000'                    __ptext3:
  3845                           	opt stack 0
  3846  0000'                    _EUSART1_Write:
  3847                           	opt stack 21
  3848                           
  3849                           ;incstack = 0
  3850                           ;EUSART1_Write@txData stored from wreg
  3851  0000' 0100               	movlb	0	; () banked
  3852  0002' 6F00'              	movwf	EUSART1_Write@txData& (0+255),b
  3853  0004'                    
  3854                           ;eusart1.c: 114: {
  3855                           
  3856                           ;eusart1.c: 113: while(0 == PIR1bits.TX1IF)
  3857  0004' A89E               	btfss	3998,4,c	;volatile
  3858  0006' D7FE               	goto	l11532
  3859                           
  3860                           ;eusart1.c: 115: }
  3861                           ;eusart1.c: 117: TXREG1 = txData;
  3862  0008' C000' FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3863  000C' 0012               	return		;funcret
  3864  000E'                    __end_of_EUSART1_Write:
  3865                           	opt stack 0
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon	equ	0xFF2
  3873                           postinc0	equ	0xFEE
  3874                           wreg	equ	0xFE8
  3875                           postinc2	equ	0xFDE
  3876                           postdec2	equ	0xFDD
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _isdigit *****************
  3882 ;; Defined at:
  3883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  c               1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  c               1    2[BANK0 ] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;		None               void
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;Total ram usage:        3 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    7
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_printf
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text4
  3912  0000'                    __ptext4:
  3913                           	opt stack 0
  3914  0000'                    _isdigit:
  3915                           	opt stack 22
  3916                           
  3917                           ;incstack = 0
  3918                           ;isdigit@c stored from wreg
  3919  0000' 0100               	movlb	0	; () banked
  3920  0002' 6F00'              	movwf	isdigit@c& (0+255),b
  3921  0004' 0E00               	movlw	0
  3922  0006' 0100               	movlb	0	; () banked
  3923  0008' 6F00'              	movwf	_isdigit$4395& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926  000A' 0E3A               	movlw	58
  3927  000C' 6100'              	cpfslt	isdigit@c& (0+255),b
  3928  000E' D005               	goto	l2955
  3929                           
  3930                           ; BSR set to: 0
  3931  0010' 0E2F               	movlw	47
  3932  0012' 6500'              	cpfsgt	isdigit@c& (0+255),b
  3933  0014' D002               	goto	l2955
  3934                           
  3935                           ; BSR set to: 0
  3936  0016' 0E01               	movlw	1
  3937  0018' 6F00'              	movwf	_isdigit$4395& (0+255),b
  3938  001A'                    l2955:
  3939                           
  3940                           ; BSR set to: 0
  3941                           
  3942                           ; BSR set to: 0
  3943  001A' C001' F000'        	movff	_isdigit$4395,??_isdigit
  3944  001E' 3100'              	rrcf	??_isdigit& (0+255),w,b
  3945  0020' 0012               	return	
  3946  0022'                    __end_of_isdigit:
  3947                           	opt stack 0
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           intcon	equ	0xFF2
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _SYSTEM_Initialize *****************
  3964 ;; Defined at:
  3965 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      void 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+3, btemp+
      +4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, bsr, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:        0 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:   10
  3986 ;; This function calls:
  3987 ;;		_EUSART1_Initialize
  3988 ;;		_EXT_INT_Initialize
  3989 ;;		_INTERRUPT_Initialize
  3990 ;;		_LORAWAN_PlatformInit
  3991 ;;		_OSCILLATOR_Initialize
  3992 ;;		_PIN_MANAGER_Initialize
  3993 ;;		_SPI2_Initialize
  3994 ;;		_TMR1_Initialize
  3995 ;; This function is called by:
  3996 ;;		_main
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text5
  4001  0000'                    __ptext5:
  4002                           	opt stack 0
  4003  0000'                    _SYSTEM_Initialize:
  4004                           	opt stack 20
  4005                           
  4006                           ;mcc.c: 53: INTERRUPT_Initialize();
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;incstack = 0
  4010  0000' EC00' F000'        	call	_INTERRUPT_Initialize	;wreg free
  4011                           
  4012                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4013  0004' EC00' F000'        	call	_PIN_MANAGER_Initialize	;wreg free
  4014                           
  4015                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4016  0008' EC00' F000'        	call	_OSCILLATOR_Initialize	;wreg free
  4017                           
  4018                           ;mcc.c: 56: SPI2_Initialize();
  4019  000C' EC00' F000'        	call	_SPI2_Initialize	;wreg free
  4020                           
  4021                           ;mcc.c: 57: TMR1_Initialize();
  4022  0010' EC00' F000'        	call	_TMR1_Initialize	;wreg free
  4023                           
  4024                           ;mcc.c: 58: EXT_INT_Initialize();
  4025  0014' EC00' F000'        	call	_EXT_INT_Initialize	;wreg free
  4026                           
  4027                           ;mcc.c: 59: EUSART1_Initialize();
  4028  0018' EC00' F000'        	call	_EUSART1_Initialize	;wreg free
  4029                           
  4030                           ;mcc.c: 60: LORAWAN_PlatformInit();
  4031  001C' EC00' F000'        	call	_LORAWAN_PlatformInit	;wreg free
  4032  0020' 0012               	return		;funcret
  4033  0022'                    __end_of_SYSTEM_Initialize:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _TMR1_Initialize *****************
  4051 ;; Defined at:
  4052 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    8
  4073 ;; This function calls:
  4074 ;;		_TMR1_SetInterruptHandler
  4075 ;; This function is called by:
  4076 ;;		_SYSTEM_Initialize
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text6
  4081  0000'                    __ptext6:
  4082                           	opt stack 0
  4083  0000'                    _TMR1_Initialize:
  4084                           	opt stack 21
  4085                           
  4086                           ;tmr1.c: 69: T1GCON = 0x00;
  4087                           
  4088                           ;incstack = 0
  4089  0000' 0E00               	movlw	0
  4090  0002' 6ECC               	movwf	4044,c	;volatile
  4091                           
  4092                           ;tmr1.c: 72: TMR1H = 0x00;
  4093  0004' 0E00               	movlw	0
  4094  0006' 6ECF               	movwf	4047,c	;volatile
  4095                           
  4096                           ;tmr1.c: 75: TMR1L = 0x00;
  4097  0008' 0E00               	movlw	0
  4098  000A' 6ECE               	movwf	4046,c	;volatile
  4099                           
  4100                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
  4101  000C' CFCE F00C'         	movff	4046,_timer1ReloadVal	;volatile
  4102  0010' CFCF F00D'         	movff	4047,_timer1ReloadVal+1	;volatile
  4103                           
  4104                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  4105  0014' 909E               	bcf	3998,0,c	;volatile
  4106                           
  4107                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  4108  0016' 809D               	bsf	3997,0,c	;volatile
  4109                           
  4110                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  4111  0018' 0E00'              	movlw	low _TMR1_DefaultInterruptHandler
  4112  001A' 0100               	movlb	0	; () banked
  4113  001C' 6F00'              	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4114  001E' 0E00'              	movlw	high _TMR1_DefaultInterruptHandler
  4115  0020' 6F00'              	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4116  0022' EC00' F000'        	call	_TMR1_SetInterruptHandler	;wreg free
  4117                           
  4118                           ;tmr1.c: 90: T1CON = 0x8D;
  4119  0026' 0E8D               	movlw	141
  4120  0028' 6ECD               	movwf	4045,c	;volatile
  4121  002A' 0012               	return		;funcret
  4122  002C'                    __end_of_TMR1_Initialize:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _SPI2_Initialize *****************
  4140 ;; Defined at:
  4141 ;;		line 65 in file "mcc_generated_files/spi2.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;Total ram usage:        0 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    7
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_SYSTEM_Initialize
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text7
  4170  0000'                    __ptext7:
  4171                           	opt stack 0
  4172  0000'                    _SPI2_Initialize:
  4173                           	opt stack 22
  4174                           
  4175                           ;spi2.c: 70: SSP2STAT = 0x40;
  4176                           
  4177                           ;incstack = 0
  4178  0000' 0E40               	movlw	64
  4179  0002' 6E6D               	movwf	3949,c	;volatile
  4180                           
  4181                           ;spi2.c: 73: SSP2CON1 = 0x20;
  4182  0004' 0E20               	movlw	32
  4183  0006' 6E6C               	movwf	3948,c	;volatile
  4184                           
  4185                           ;spi2.c: 76: SSP2ADD = 0x00;
  4186  0008' 0E00               	movlw	0
  4187  000A' 6E6E               	movwf	3950,c	;volatile
  4188  000C' 0012               	return		;funcret
  4189  000E'                    __end_of_SPI2_Initialize:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postinc2	equ	0xFDE
  4201                           postdec2	equ	0xFDD
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _PIN_MANAGER_Initialize *****************
  4207 ;; Defined at:
  4208 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;Total ram usage:        0 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    8
  4229 ;; This function calls:
  4230 ;;		_IOCB4_SetInterruptHandler
  4231 ;; This function is called by:
  4232 ;;		_SYSTEM_Initialize
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text8
  4237  0000'                    __ptext8:
  4238                           	opt stack 0
  4239  0000'                    _PIN_MANAGER_Initialize:
  4240                           	opt stack 21
  4241                           
  4242                           ;pin_manager.c: 64: LATE = 0x00;
  4243                           
  4244                           ;incstack = 0
  4245  0000' 0E00               	movlw	0
  4246  0002' 6E8D               	movwf	3981,c	;volatile
  4247                           
  4248                           ;pin_manager.c: 65: LATD = 0x00;
  4249  0004' 0E00               	movlw	0
  4250  0006' 6E8C               	movwf	3980,c	;volatile
  4251                           
  4252                           ;pin_manager.c: 66: LATA = 0x00;
  4253  0008' 0E00               	movlw	0
  4254  000A' 6E89               	movwf	3977,c	;volatile
  4255                           
  4256                           ;pin_manager.c: 67: LATB = 0x00;
  4257  000C' 0E00               	movlw	0
  4258  000E' 6E8A               	movwf	3978,c	;volatile
  4259                           
  4260                           ;pin_manager.c: 68: LATC = 0x00;
  4261  0010' 0E00               	movlw	0
  4262  0012' 6E8B               	movwf	3979,c	;volatile
  4263                           
  4264                           ;pin_manager.c: 73: TRISE = 0x07;
  4265  0014' 0E07               	movlw	7
  4266  0016' 6E96               	movwf	3990,c	;volatile
  4267                           
  4268                           ;pin_manager.c: 74: TRISA = 0xFF;
  4269  0018' 6892               	setf	3986,c	;volatile
  4270                           
  4271                           ;pin_manager.c: 75: TRISB = 0xF7;
  4272  001A' 0EF7               	movlw	247
  4273  001C' 6E93               	movwf	3987,c	;volatile
  4274                           
  4275                           ;pin_manager.c: 76: TRISC = 0xBE;
  4276  001E' 0EBE               	movlw	190
  4277  0020' 6E94               	movwf	3988,c	;volatile
  4278                           
  4279                           ;pin_manager.c: 77: TRISD = 0xE6;
  4280  0022' 0EE6               	movlw	230
  4281  0024' 6E95               	movwf	3989,c	;volatile
  4282                           
  4283                           ;pin_manager.c: 82: ANSELD = 0xE4;
  4284  0026' 0EE4               	movlw	228
  4285  0028' 010F               	movlb	15	; () banked
  4286  002A' 6F3B               	movwf	59,b	;volatile
  4287                           
  4288                           ;pin_manager.c: 83: ANSELC = 0xB8;
  4289  002C' 0EB8               	movlw	184
  4290  002E' 6F3A               	movwf	58,b	;volatile
  4291                           
  4292                           ;pin_manager.c: 84: ANSELB = 0x20;
  4293  0030' 0E20               	movlw	32
  4294  0032' 6F39               	movwf	57,b	;volatile
  4295                           
  4296                           ;pin_manager.c: 85: ANSELE = 0x07;
  4297  0034' 0E07               	movlw	7
  4298  0036' 6F3C               	movwf	60,b	;volatile
  4299                           
  4300                           ;pin_manager.c: 86: ANSELA = 0x2F;
  4301  0038' 0E2F               	movlw	47
  4302  003A' 6F38               	movwf	56,b	;volatile
  4303                           
  4304                           ;pin_manager.c: 91: WPUB = 0x17;
  4305  003C' 0E17               	movlw	23
  4306  003E' 6E61               	movwf	3937,c	;volatile
  4307                           
  4308                           ; BSR set to: 15
  4309                           ;pin_manager.c: 92: INTCON2bits.nRBPU = 1;
  4310  0040' 8EF1               	bsf	intcon2,7,c	;volatile
  4311                           
  4312                           ; BSR set to: 15
  4313                           ;pin_manager.c: 101: IOCBbits.IOCB4 = 1;
  4314  0042' 8862               	bsf	3938,4,c	;volatile
  4315                           
  4316                           ; BSR set to: 15
  4317                           ;pin_manager.c: 106: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  4318  0044' 0E00'              	movlw	low _IOCB4_DefaultInterruptHandler
  4319  0046' 0100               	movlb	0	; () banked
  4320  0048' 6F00'              	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4321  004A' 0E00'              	movlw	high _IOCB4_DefaultInterruptHandler
  4322  004C' 6F00'              	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4323  004E' EC00' F000'        	call	_IOCB4_SetInterruptHandler	;wreg free
  4324                           
  4325                           ;pin_manager.c: 109: INTCONbits.RBIE = 1;
  4326  0052' 86F2               	bsf	intcon,3,c	;volatile
  4327  0054' 0012               	return		;funcret
  4328  0056'                    __end_of_PIN_MANAGER_Initialize:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _OSCILLATOR_Initialize *****************
  4347 ;; Defined at:
  4348 ;;		line 63 in file "mcc_generated_files/mcc.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;		None
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:        0 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    7
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_SYSTEM_Initialize
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text9
  4377  0000'                    __ptext9:
  4378                           	opt stack 0
  4379  0000'                    _OSCILLATOR_Initialize:
  4380                           	opt stack 22
  4381                           
  4382                           ;mcc.c: 66: OSCCON = 0x70;
  4383                           
  4384                           ;incstack = 0
  4385  0000' 0E70               	movlw	112
  4386  0002' 6ED3               	movwf	4051,c	;volatile
  4387                           
  4388                           ;mcc.c: 68: OSCCON2 = 0x04;
  4389  0004' 0E04               	movlw	4
  4390  0006' 6ED2               	movwf	4050,c	;volatile
  4391                           
  4392                           ;mcc.c: 70: OSCTUNE = 0x00;
  4393  0008' 0E00               	movlw	0
  4394  000A' 6E9B               	movwf	3995,c	;volatile
  4395  000C' 0012               	return		;funcret
  4396  000E'                    __end_of_OSCILLATOR_Initialize:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           postinc2	equ	0xFDE
  4409                           postdec2	equ	0xFDD
  4410                           fsr2h	equ	0xFDA
  4411                           fsr2l	equ	0xFD9
  4412                           status	equ	0xFD8
  4413                           
  4414 ;; *************** function _LORAWAN_PlatformInit *****************
  4415 ;; Defined at:
  4416 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+3, btemp+
      +4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, bsr, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;Total ram usage:        0 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    9
  4437 ;; This function calls:
  4438 ;;		_DIO0_ISR_Lora_Init
  4439 ;;		_DIO1_ISR_Lora_Init
  4440 ;;		_DIO2_ISR_Lora_Init
  4441 ;;		_DIO3_ISR_Lora_Init
  4442 ;;		_DIO4_ISR_Lora_Init
  4443 ;;		_DIO5_ISR_Lora_Init
  4444 ;;		_SystemTimerInit
  4445 ;;		_TMR_ISR_Lora_Init
  4446 ;; This function is called by:
  4447 ;;		_SYSTEM_Initialize
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text10
  4452  0000'                    __ptext10:
  4453                           	opt stack 0
  4454  0000'                    _LORAWAN_PlatformInit:
  4455                           	opt stack 20
  4456                           
  4457                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  4458                           
  4459                           ;incstack = 0
  4460  0000' EC00' F000'        	call	_TMR_ISR_Lora_Init	;wreg free
  4461                           
  4462                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  4463  0004' EC00' F000'        	call	_DIO0_ISR_Lora_Init	;wreg free
  4464                           
  4465                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  4466  0008' EC00' F000'        	call	_DIO1_ISR_Lora_Init	;wreg free
  4467                           
  4468                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  4469  000C' EC00' F000'        	call	_DIO2_ISR_Lora_Init	;wreg free
  4470                           
  4471                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  4472  0010' EC00' F000'        	call	_DIO3_ISR_Lora_Init	;wreg free
  4473                           
  4474                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  4475  0014' EC00' F000'        	call	_DIO4_ISR_Lora_Init	;wreg free
  4476                           
  4477                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  4478  0018' EC00' F000'        	call	_DIO5_ISR_Lora_Init	;wreg free
  4479                           
  4480                           ;lorawan_init.c: 81: SystemTimerInit();
  4481  001C' EC00' F000'        	call	_SystemTimerInit	;wreg free
  4482  0020' 0012               	return		;funcret
  4483  0022'                    __end_of_LORAWAN_PlatformInit:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           intcon2	equ	0xFF1
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postinc2	equ	0xFDE
  4496                           postdec2	equ	0xFDD
  4497                           fsr2h	equ	0xFDA
  4498                           fsr2l	equ	0xFD9
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function _TMR_ISR_Lora_Init *****************
  4502 ;; Defined at:
  4503 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:        0 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    8
  4524 ;; This function calls:
  4525 ;;		_TMR1_SetInterruptHandler
  4526 ;; This function is called by:
  4527 ;;		_LORAWAN_PlatformInit
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text11
  4532  0000'                    __ptext11:
  4533                           	opt stack 0
  4534  0000'                    _TMR_ISR_Lora_Init:
  4535                           	opt stack 20
  4536                           
  4537                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4538                           
  4539                           ;incstack = 0
  4540  0000' 0E00'              	movlw	low _TMR_ISR_lora
  4541  0002' 0100               	movlb	0	; () banked
  4542  0004' 6F00'              	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4543  0006' 0E00'              	movlw	high _TMR_ISR_lora
  4544  0008' 6F00'              	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4545  000A' EC00' F000'        	call	_TMR1_SetInterruptHandler	;wreg free
  4546  000E' 0012               	return		;funcret
  4547  0010'                    __end_of_TMR_ISR_Lora_Init:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           intcon	equ	0xFF2
  4556                           intcon2	equ	0xFF1
  4557                           postinc0	equ	0xFEE
  4558                           wreg	equ	0xFE8
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _TMR1_SetInterruptHandler *****************
  4566 ;; Defined at:
  4567 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4570 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  1    wreg      void 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;Total ram usage:        2 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    7
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_TMR_ISR_Lora_Init
  4593 ;;		_TMR1_Initialize
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text12
  4598  0000'                    __ptext12:
  4599                           	opt stack 0
  4600  0000'                    _TMR1_SetInterruptHandler:
  4601                           	opt stack 21
  4602                           
  4603                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
  4604                           
  4605                           ;incstack = 0
  4606  0000' C000' F00A'        	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4607  0004' C001' F00B'        	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4608  0008' 0012               	return		;funcret
  4609  000A'                    __end_of_TMR1_SetInterruptHandler:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postinc2	equ	0xFDE
  4622                           postdec2	equ	0xFDD
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _SystemTimerInit *****************
  4628 ;; Defined at:
  4629 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;		None
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		wreg, status,2
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;Total ram usage:        0 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    7
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_LORAWAN_PlatformInit
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text13
  4658  0000'                    __ptext13:
  4659                           	opt stack 0
  4660  0000'                    _SystemTimerInit:
  4661                           	opt stack 21
  4662                           
  4663                           ;sw_timer.c: 137: allocatedTimers = 0;
  4664                           
  4665                           ;incstack = 0
  4666  0000' 0E00               	movlw	0
  4667  0002' 0100               	movlb	0	; () banked
  4668  0004' 6F00'              	movwf	_allocatedTimers& (0+255),b	;volatile
  4669                           
  4670                           ; BSR set to: 0
  4671  0006' 0012               	return		;funcret
  4672  0008'                    __end_of_SystemTimerInit:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon2	equ	0xFF1
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4691 ;; Defined at:
  4692 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      void 
  4699 ;; Registers used:
  4700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+3, btemp+
      +4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, bsr, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:        0 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    8
  4713 ;; This function calls:
  4714 ;;		_INT0_SetInterruptHandler
  4715 ;; This function is called by:
  4716 ;;		_LORAWAN_PlatformInit
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text14
  4721  0000'                    __ptext14:
  4722                           	opt stack 0
  4723  0000'                    _DIO5_ISR_Lora_Init:
  4724                           	opt stack 20
  4725                           
  4726                           ;lorawan_init.c: 69: INT0_SetInterruptHandler(DIO5_ISR_Lora);
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;incstack = 0
  4730  0000' 0E00               	movlw	0
  4731  0002' 0100               	movlb	0	; () banked
  4732  0004' 6F00'              	movwf	?_INT0_SetInterruptHandler& (0+255),b
  4733  0006' 0E00               	movlw	0
  4734  0008' 6F00'              	movwf	(?_INT0_SetInterruptHandler+1)& (0+255),b
  4735  000A' EC00' F000'        	call	_INT0_SetInterruptHandler	;wreg free
  4736  000E' 0012               	return		;funcret
  4737  0010'                    __end_of_DIO5_ISR_Lora_Init:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           intcon2	equ	0xFF1
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4756 ;; Defined at:
  4757 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		None
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    7
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_LORAWAN_PlatformInit
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text15
  4786  0000'                    __ptext15:
  4787                           	opt stack 0
  4788  0000'                    _DIO4_ISR_Lora_Init:
  4789                           	opt stack 21
  4790                           
  4791                           ;incstack = 0
  4792  0000' 0012               	return		;funcret
  4793  0002'                    __end_of_DIO4_ISR_Lora_Init:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           intcon	equ	0xFF2
  4802                           intcon2	equ	0xFF1
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4812 ;; Defined at:
  4813 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		None
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    7
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_LORAWAN_PlatformInit
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text16
  4842  0000'                    __ptext16:
  4843                           	opt stack 0
  4844  0000'                    _DIO3_ISR_Lora_Init:
  4845                           	opt stack 21
  4846                           
  4847                           ;incstack = 0
  4848  0000' 0012               	return		;funcret
  4849  0002'                    __end_of_DIO3_ISR_Lora_Init:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           intcon2	equ	0xFF1
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4868 ;; Defined at:
  4869 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;Total ram usage:        0 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    8
  4890 ;; This function calls:
  4891 ;;		_IOCB4_SetInterruptHandler
  4892 ;; This function is called by:
  4893 ;;		_LORAWAN_PlatformInit
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text17
  4898  0000'                    __ptext17:
  4899                           	opt stack 0
  4900  0000'                    _DIO2_ISR_Lora_Init:
  4901                           	opt stack 20
  4902                           
  4903                           ;lorawan_init.c: 56: IOCB4_SetInterruptHandler(DIO2_ISR_Lora);
  4904                           
  4905                           ;incstack = 0
  4906  0000' 0E00'              	movlw	low _DIO2_ISR_Lora
  4907  0002' 0100               	movlb	0	; () banked
  4908  0004' 6F00'              	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4909  0006' 0E00'              	movlw	high _DIO2_ISR_Lora
  4910  0008' 6F00'              	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4911  000A' EC00' F000'        	call	_IOCB4_SetInterruptHandler	;wreg free
  4912  000E' 0012               	return		;funcret
  4913  0010'                    __end_of_DIO2_ISR_Lora_Init:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           intcon2	equ	0xFF1
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _IOCB4_SetInterruptHandler *****************
  4932 ;; Defined at:
  4933 ;;		line 141 in file "mcc_generated_files/pin_manager.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4936 ;;		 -> IOCB4_DefaultInterruptHandler(1), DIO2_ISR_Lora(1), 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;Total ram usage:        2 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    7
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_DIO2_ISR_Lora_Init
  4959 ;;		_PIN_MANAGER_Initialize
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text18
  4964  0000'                    __ptext18:
  4965                           	opt stack 0
  4966  0000'                    _IOCB4_SetInterruptHandler:
  4967                           	opt stack 21
  4968                           
  4969                           ;pin_manager.c: 142: IOCB4_InterruptHandler = InterruptHandler;
  4970                           
  4971                           ;incstack = 0
  4972  0000' C000' F008'        	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  4973  0004' C001' F009'        	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  4974  0008' 0012               	return		;funcret
  4975  000A'                    __end_of_IOCB4_SetInterruptHandler:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           intcon2	equ	0xFF1
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _DIO1_ISR_Lora_Init *****************
  4994 ;; Defined at:
  4995 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    8
  5016 ;; This function calls:
  5017 ;;		_INT2_SetInterruptHandler
  5018 ;; This function is called by:
  5019 ;;		_LORAWAN_PlatformInit
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text19
  5024  0000'                    __ptext19:
  5025                           	opt stack 0
  5026  0000'                    _DIO1_ISR_Lora_Init:
  5027                           	opt stack 20
  5028                           
  5029                           ;lorawan_init.c: 51: INT2_SetInterruptHandler(DIO1_ISR_Lora);
  5030                           
  5031                           ;incstack = 0
  5032  0000' 0E00'              	movlw	low _DIO1_ISR_Lora
  5033  0002' 0100               	movlb	0	; () banked
  5034  0004' 6F00'              	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5035  0006' 0E00'              	movlw	high _DIO1_ISR_Lora
  5036  0008' 6F00'              	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5037  000A' EC00' F000'        	call	_INT2_SetInterruptHandler	;wreg free
  5038  000E' 0012               	return		;funcret
  5039  0010'                    __end_of_DIO1_ISR_Lora_Init:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           intcon2	equ	0xFF1
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           postinc2	equ	0xFDE
  5052                           postdec2	equ	0xFDD
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5058 ;; Defined at:
  5059 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;		None
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;Total ram usage:        0 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    8
  5080 ;; This function calls:
  5081 ;;		_INT1_SetInterruptHandler
  5082 ;; This function is called by:
  5083 ;;		_LORAWAN_PlatformInit
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text20
  5088  0000'                    __ptext20:
  5089                           	opt stack 0
  5090  0000'                    _DIO0_ISR_Lora_Init:
  5091                           	opt stack 20
  5092                           
  5093                           ;lorawan_init.c: 46: INT1_SetInterruptHandler(DIO0_ISR_Lora);
  5094                           
  5095                           ;incstack = 0
  5096  0000' 0E00'              	movlw	low _DIO0_ISR_Lora
  5097  0002' 0100               	movlb	0	; () banked
  5098  0004' 6F00'              	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5099  0006' 0E00'              	movlw	high _DIO0_ISR_Lora
  5100  0008' 6F00'              	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5101  000A' EC00' F000'        	call	_INT1_SetInterruptHandler	;wreg free
  5102  000E' 0012               	return		;funcret
  5103  0010'                    __end_of_DIO0_ISR_Lora_Init:
  5104                           	opt stack 0
  5105                           tblptru	equ	0xFF8
  5106                           tblptrh	equ	0xFF7
  5107                           tblptrl	equ	0xFF6
  5108                           tablat	equ	0xFF5
  5109                           prodh	equ	0xFF4
  5110                           prodl	equ	0xFF3
  5111                           intcon	equ	0xFF2
  5112                           intcon2	equ	0xFF1
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _INTERRUPT_Initialize *****************
  5122 ;; Defined at:
  5123 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		None
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:        0 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    7
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_SYSTEM_Initialize
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text21
  5152  0000'                    __ptext21:
  5153                           	opt stack 0
  5154  0000'                    _INTERRUPT_Initialize:
  5155                           	opt stack 22
  5156                           
  5157                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5158                           
  5159                           ;incstack = 0
  5160  0000' 9ED0               	bcf	4048,7,c	;volatile
  5161  0002' 0012               	return		;funcret
  5162  0004'                    __end_of_INTERRUPT_Initialize:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           intcon2	equ	0xFF1
  5172                           postinc0	equ	0xFEE
  5173                           wreg	equ	0xFE8
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _EXT_INT_Initialize *****************
  5181 ;; Defined at:
  5182 ;;		line 86 in file "mcc_generated_files/ext_int.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    8
  5203 ;; This function calls:
  5204 ;;		_INT1_SetInterruptHandler
  5205 ;;		_INT2_SetInterruptHandler
  5206 ;; This function is called by:
  5207 ;;		_SYSTEM_Initialize
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text22
  5212  0000'                    __ptext22:
  5213                           	opt stack 0
  5214  0000'                    _EXT_INT_Initialize:
  5215                           	opt stack 21
  5216                           
  5217                           ;ext_int.c: 91: (INTCON3bits.INT1IF = 0);
  5218                           
  5219                           ;incstack = 0
  5220  0000' 90F0               	bcf	intcon3,0,c	;volatile
  5221                           
  5222                           ;ext_int.c: 92: (INTCON2bits.INTEDG1 = 1);
  5223  0002' 8AF1               	bsf	intcon2,5,c	;volatile
  5224                           
  5225                           ;ext_int.c: 94: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5226  0004' 0E00'              	movlw	low _INT1_DefaultInterruptHandler
  5227  0006' 0100               	movlb	0	; () banked
  5228  0008' 6F00'              	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5229  000A' 0E00'              	movlw	high _INT1_DefaultInterruptHandler
  5230  000C' 6F00'              	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5231  000E' EC00' F000'        	call	_INT1_SetInterruptHandler	;wreg free
  5232                           
  5233                           ;ext_int.c: 95: (INTCON3bits.INT1IE = 1);
  5234  0012' 86F0               	bsf	intcon3,3,c	;volatile
  5235                           
  5236                           ;ext_int.c: 100: (INTCON3bits.INT2IF = 0);
  5237  0014' 92F0               	bcf	intcon3,1,c	;volatile
  5238                           
  5239                           ;ext_int.c: 101: (INTCON2bits.INTEDG2 = 1);
  5240  0016' 88F1               	bsf	intcon2,4,c	;volatile
  5241                           
  5242                           ;ext_int.c: 103: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5243  0018' 0E00'              	movlw	low _INT2_DefaultInterruptHandler
  5244  001A' 0100               	movlb	0	; () banked
  5245  001C' 6F00'              	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5246  001E' 0E00'              	movlw	high _INT2_DefaultInterruptHandler
  5247  0020' 6F00'              	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5248  0022' EC00' F000'        	call	_INT2_SetInterruptHandler	;wreg free
  5249                           
  5250                           ;ext_int.c: 104: (INTCON3bits.INT2IE = 1);
  5251  0026' 88F0               	bsf	intcon3,4,c	;volatile
  5252  0028' 0012               	return		;funcret
  5253  002A'                    __end_of_EXT_INT_Initialize:
  5254                           	opt stack 0
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           intcon2	equ	0xFF1
  5263                           intcon3	equ	0xFF0
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _INT2_SetInterruptHandler *****************
  5273 ;; Defined at:
  5274 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5277 ;;		 -> INT2_DefaultInterruptHandler(1), DIO1_ISR_Lora(1), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:        2 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    7
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_DIO1_ISR_Lora_Init
  5300 ;;		_EXT_INT_Initialize
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text23
  5305  0000'                    __ptext23:
  5306                           	opt stack 0
  5307  0000'                    _INT2_SetInterruptHandler:
  5308                           	opt stack 20
  5309                           
  5310                           ;ext_int.c: 78: INT2_InterruptHandler = InterruptHandler;
  5311                           
  5312                           ;incstack = 0
  5313  0000' C000' F004'        	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5314  0004' C001' F005'        	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5315  0008' 0012               	return		;funcret
  5316  000A'                    __end_of_INT2_SetInterruptHandler:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           intcon2	equ	0xFF1
  5326                           intcon3	equ	0xFF0
  5327                           postinc0	equ	0xFEE
  5328                           wreg	equ	0xFE8
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _INT1_SetInterruptHandler *****************
  5336 ;; Defined at:
  5337 ;;		line 51 in file "mcc_generated_files/ext_int.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5340 ;;		 -> INT1_DefaultInterruptHandler(1), DIO0_ISR_Lora(1), 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:        2 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    7
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_DIO0_ISR_Lora_Init
  5363 ;;		_EXT_INT_Initialize
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text24
  5368  0000'                    __ptext24:
  5369                           	opt stack 0
  5370  0000'                    _INT1_SetInterruptHandler:
  5371                           	opt stack 20
  5372                           
  5373                           ;ext_int.c: 52: INT1_InterruptHandler = InterruptHandler;
  5374                           
  5375                           ;incstack = 0
  5376  0000' C000' F006'        	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5377  0004' C001' F007'        	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5378  0008' 0012               	return		;funcret
  5379  000A'                    __end_of_INT1_SetInterruptHandler:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           intcon2	equ	0xFF1
  5389                           intcon3	equ	0xFF0
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postinc2	equ	0xFDE
  5393                           postdec2	equ	0xFDD
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398 ;; *************** function _EUSART1_Initialize *****************
  5399 ;; Defined at:
  5400 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, status,2
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    7
  5421 ;; This function calls:
  5422 ;;		Nothing
  5423 ;; This function is called by:
  5424 ;;		_SYSTEM_Initialize
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           	psect	text25
  5429  0000'                    __ptext25:
  5430                           	opt stack 0
  5431  0000'                    _EUSART1_Initialize:
  5432                           	opt stack 22
  5433                           
  5434                           ;eusart1.c: 61: BAUDCON1 = 0x08;
  5435                           
  5436                           ;incstack = 0
  5437  0000' 0E08               	movlw	8
  5438  0002' 6EB8               	movwf	4024,c	;volatile
  5439                           
  5440                           ;eusart1.c: 64: RCSTA1 = 0x80;
  5441  0004' 0E80               	movlw	128
  5442  0006' 6EAB               	movwf	4011,c	;volatile
  5443                           
  5444                           ;eusart1.c: 67: TXSTA1 = 0x24;
  5445  0008' 0E24               	movlw	36
  5446  000A' 6EAC               	movwf	4012,c	;volatile
  5447                           
  5448                           ;eusart1.c: 70: SPBRG1 = 0xA0;
  5449  000C' 0EA0               	movlw	160
  5450  000E' 6EAF               	movwf	4015,c	;volatile
  5451                           
  5452                           ;eusart1.c: 73: SPBRGH1 = 0x01;
  5453  0010' 0E01               	movlw	1
  5454  0012' 6EB0               	movwf	4016,c	;volatile
  5455  0014' 0012               	return		;funcret
  5456  0016'                    __end_of_EUSART1_Initialize:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           intcon2	equ	0xFF1
  5466                           intcon3	equ	0xFF0
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _LORAWAN_SetDeviceEui *****************
  5476 ;; Defined at:
  5477 ;;		line 337 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  deviceEuiNew    2   11[BANK0 ] PTR unsigned char 
  5480 ;;		 -> deviceEuiNew(8), 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;Total ram usage:        2 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    8
  5499 ;; This function calls:
  5500 ;;		_memcpy
  5501 ;; This function is called by:
  5502 ;;		_main
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text26
  5507  0000'                    __ptext26:
  5508                           	opt stack 0
  5509  0000'                    _LORAWAN_SetDeviceEui:
  5510                           	opt stack 22
  5511                           
  5512                           ;lorawan.c: 339: if (deviceEuiNew != (0))
  5513                           
  5514                           ;incstack = 0
  5515  0000' 0100               	movlb	0	; () banked
  5516  0002' 5100'              	movf	LORAWAN_SetDeviceEui@deviceEuiNew& (0+255),w,b
  5517  0004' 1100'              	iorwf	(LORAWAN_SetDeviceEui@deviceEuiNew+1)& (0+255),w,b
  5518  0006' B4D8               	btfsc	status,2,c
  5519  0008' 0012               	return	
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;lorawan.c: 340: {
  5523                           ;lorawan.c: 341: memcpy(loRa.activationParameters.deviceEui.buffer, deviceEuiNew, sizeof
      +                          (loRa.activationParameters.deviceEui) );
  5524  000A' 0E00'              	movlw	low (_loRa+90)
  5525  000C' 6F00'              	movwf	memcpy@d1& (0+255),b
  5526  000E' 0E00'              	movlw	high (_loRa+90)
  5527  0010' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
  5528  0012' C00B' F002'        	movff	LORAWAN_SetDeviceEui@deviceEuiNew,memcpy@s1
  5529  0016' C00C' F003'        	movff	LORAWAN_SetDeviceEui@deviceEuiNew+1,memcpy@s1+1
  5530  001A' 0E00               	movlw	0
  5531  001C' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
  5532  001E' 0E08               	movlw	8
  5533  0020' 6F00'              	movwf	memcpy@n& (0+255),b
  5534  0022' EC00' F000'        	call	_memcpy	;wreg free
  5535                           
  5536                           ;lorawan.c: 342: loRa.macKeys.deviceEui = 1;
  5537  0026' 0102               	movlb	2	; () banked
  5538  0028' 8100'              	bsf	(_loRa+150)& (0+255),0,b
  5539                           
  5540                           ; BSR set to: 2
  5541                           ;lorawan.c: 343: loRa.macStatus.networkJoined = 0;
  5542  002A' 9900'              	bcf	(_loRa+2)& (0+255),4,b
  5543  002C' 0012               	return	
  5544  002E'                    __end_of_LORAWAN_SetDeviceEui:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon2	equ	0xFF1
  5554                           intcon3	equ	0xFF0
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _LORAWAN_SetApplicationKey *****************
  5564 ;; Defined at:
  5565 ;;		line 409 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  applicationK    2   11[BANK0 ] PTR unsigned char 
  5568 ;;		 -> applicationKeyNew(16), 
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5580 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;Total ram usage:        2 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    8
  5587 ;; This function calls:
  5588 ;;		_memcpy
  5589 ;; This function is called by:
  5590 ;;		_main
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text27
  5595  0000'                    __ptext27:
  5596                           	opt stack 0
  5597  0000'                    _LORAWAN_SetApplicationKey:
  5598                           	opt stack 22
  5599                           
  5600                           ;lorawan.c: 411: if (applicationKeyNew != (0))
  5601                           
  5602                           ;incstack = 0
  5603  0000' 0100               	movlb	0	; () banked
  5604  0002' 5100'              	movf	LORAWAN_SetApplicationKey@applicationKeyNew& (0+255),w,b
  5605  0004' 1100'              	iorwf	(LORAWAN_SetApplicationKey@applicationKeyNew+1)& (0+255),w,b
  5606  0006' B4D8               	btfsc	status,2,c
  5607  0008' 0012               	return	
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;lorawan.c: 412: {
  5611                           ;lorawan.c: 413: memcpy( loRa.activationParameters.applicationKey, applicationKeyNew, 16
      +                          );
  5612  000A' 0E00'              	movlw	low (_loRa+66)
  5613  000C' 6F00'              	movwf	memcpy@d1& (0+255),b
  5614  000E' 0E00'              	movlw	high (_loRa+66)
  5615  0010' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
  5616  0012' C00B' F002'        	movff	LORAWAN_SetApplicationKey@applicationKeyNew,memcpy@s1
  5617  0016' C00C' F003'        	movff	LORAWAN_SetApplicationKey@applicationKeyNew+1,memcpy@s1+1
  5618  001A' 0E00               	movlw	0
  5619  001C' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
  5620  001E' 0E10               	movlw	16
  5621  0020' 6F00'              	movwf	memcpy@n& (0+255),b
  5622  0022' EC00' F000'        	call	_memcpy	;wreg free
  5623                           
  5624                           ;lorawan.c: 414: loRa.macKeys.applicationKey = 1;
  5625  0026' 0102               	movlb	2	; () banked
  5626  0028' 8700'              	bsf	(_loRa+150)& (0+255),3,b
  5627                           
  5628                           ; BSR set to: 2
  5629                           ;lorawan.c: 415: loRa.macStatus.networkJoined = 0;
  5630  002A' 9900'              	bcf	(_loRa+2)& (0+255),4,b
  5631  002C' 0012               	return	
  5632  002E'                    __end_of_LORAWAN_SetApplicationKey:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           intcon3	equ	0xFF0
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _LORAWAN_SetApplicationEui *****************
  5652 ;; Defined at:
  5653 ;;		line 352 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  applicationE    2   11[BANK0 ] PTR unsigned char 
  5656 ;;		 -> applicationEuiNew(8), 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5668 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    8
  5675 ;; This function calls:
  5676 ;;		_memcpy
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text28
  5683  0000'                    __ptext28:
  5684                           	opt stack 0
  5685  0000'                    _LORAWAN_SetApplicationEui:
  5686                           	opt stack 22
  5687                           
  5688                           ;lorawan.c: 354: if (applicationEuiNew != (0))
  5689                           
  5690                           ;incstack = 0
  5691  0000' 0100               	movlb	0	; () banked
  5692  0002' 5100'              	movf	LORAWAN_SetApplicationEui@applicationEuiNew& (0+255),w,b
  5693  0004' 1100'              	iorwf	(LORAWAN_SetApplicationEui@applicationEuiNew+1)& (0+255),w,b
  5694  0006' B4D8               	btfsc	status,2,c
  5695  0008' 0012               	return	
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;lorawan.c: 355: {
  5699                           ;lorawan.c: 356: memcpy(loRa.activationParameters.applicationEui.buffer, applicationEuiN
      +                          ew, 8);
  5700  000A' 0E00'              	movlw	low (_loRa+82)
  5701  000C' 6F00'              	movwf	memcpy@d1& (0+255),b
  5702  000E' 0E00'              	movlw	high (_loRa+82)
  5703  0010' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
  5704  0012' C00B' F002'        	movff	LORAWAN_SetApplicationEui@applicationEuiNew,memcpy@s1
  5705  0016' C00C' F003'        	movff	LORAWAN_SetApplicationEui@applicationEuiNew+1,memcpy@s1+1
  5706  001A' 0E00               	movlw	0
  5707  001C' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
  5708  001E' 0E08               	movlw	8
  5709  0020' 6F00'              	movwf	memcpy@n& (0+255),b
  5710  0022' EC00' F000'        	call	_memcpy	;wreg free
  5711                           
  5712                           ;lorawan.c: 357: loRa.macKeys.applicationEui = 1;
  5713  0026' 0102               	movlb	2	; () banked
  5714  0028' 8300'              	bsf	(_loRa+150)& (0+255),1,b
  5715                           
  5716                           ; BSR set to: 2
  5717                           ;lorawan.c: 358: loRa.macStatus.networkJoined = 0;
  5718  002A' 9900'              	bcf	(_loRa+2)& (0+255),4,b
  5719  002C' 0012               	return	
  5720  002E'                    __end_of_LORAWAN_SetApplicationEui:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           intcon	equ	0xFF2
  5729                           intcon2	equ	0xFF1
  5730                           intcon3	equ	0xFF0
  5731                           postinc0	equ	0xFEE
  5732                           wreg	equ	0xFE8
  5733                           postinc2	equ	0xFDE
  5734                           postdec2	equ	0xFDD
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function _LORAWAN_Mainloop *****************
  5740 ;; Defined at:
  5741 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+8, btemp+
      +9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:   18
  5762 ;; This function calls:
  5763 ;;		_INTERRUPT_GetDioStatus
  5764 ;;		_RADIO_DIO0
  5765 ;;		_RADIO_DIO1
  5766 ;;		_RADIO_DIO2
  5767 ;;		_RADIO_DIO3
  5768 ;;		_RADIO_DIO4
  5769 ;;		_RADIO_DIO5
  5770 ;;		_SwTimersExecute
  5771 ;; This function is called by:
  5772 ;;		_main
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text29
  5777  0000'                    __ptext29:
  5778                           	opt stack 0
  5779  0000'                    _LORAWAN_Mainloop:
  5780                           	opt stack 12
  5781                           
  5782                           ;lorawan.c: 2240: SwTimersExecute();
  5783                           
  5784                           ;incstack = 0
  5785  0000' EC00' F000'        	call	_SwTimersExecute	;wreg free
  5786                           
  5787                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  5788  0004' EC00' F000'        	call	_INTERRUPT_GetDioStatus	;wreg free
  5789  0008' 0101               	movlb	1	; () banked
  5790  000A' 6F00'              	movwf	_localDioStatus& (0+255),b
  5791                           
  5792                           ; BSR set to: 1
  5793                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  5794  000C' B100'              	btfsc	_localDioStatus& (0+255),0,b
  5795                           
  5796                           ; BSR set to: 1
  5797                           ;lorawan.c: 2246: {
  5798                           ;lorawan.c: 2247: RADIO_DIO0();
  5799  000E' EC00' F000'        	call	_RADIO_DIO0	;wreg free
  5800                           
  5801                           ;lorawan.c: 2248: }
  5802                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  5803  0012' 0101               	movlb	1	; () banked
  5804  0014' B300'              	btfsc	_localDioStatus& (0+255),1,b
  5805                           
  5806                           ; BSR set to: 1
  5807                           ;lorawan.c: 2250: {
  5808                           ;lorawan.c: 2251: RADIO_DIO1();
  5809  0016' EC00' F000'        	call	_RADIO_DIO1	;wreg free
  5810                           
  5811                           ;lorawan.c: 2252: }
  5812                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  5813  001A' 0101               	movlb	1	; () banked
  5814  001C' B500'              	btfsc	_localDioStatus& (0+255),2,b
  5815                           
  5816                           ; BSR set to: 1
  5817                           ;lorawan.c: 2254: {
  5818                           ;lorawan.c: 2255: RADIO_DIO2();
  5819  001E' EC00' F000'        	call	_RADIO_DIO2	;wreg free
  5820                           
  5821                           ;lorawan.c: 2256: }
  5822                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  5823  0022' 0101               	movlb	1	; () banked
  5824  0024' B700'              	btfsc	_localDioStatus& (0+255),3,b
  5825                           
  5826                           ; BSR set to: 1
  5827                           ;lorawan.c: 2258: {
  5828                           ;lorawan.c: 2259: RADIO_DIO3();
  5829  0026' EC00' F000'        	call	_RADIO_DIO3	;wreg free
  5830                           
  5831                           ;lorawan.c: 2260: }
  5832                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  5833  002A' 0101               	movlb	1	; () banked
  5834  002C' B900'              	btfsc	_localDioStatus& (0+255),4,b
  5835                           
  5836                           ; BSR set to: 1
  5837                           ;lorawan.c: 2262: {
  5838                           ;lorawan.c: 2263: RADIO_DIO4();
  5839  002E' EC00' F000'        	call	_RADIO_DIO4	;wreg free
  5840                           
  5841                           ;lorawan.c: 2264: }
  5842                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  5843  0032' 0101               	movlb	1	; () banked
  5844  0034' AB00'              	btfss	_localDioStatus& (0+255),5,b
  5845  0036' 0012               	return	
  5846                           
  5847                           ; BSR set to: 1
  5848                           ;lorawan.c: 2266: {
  5849                           ;lorawan.c: 2267: RADIO_DIO5();
  5850  0038' EC00' F000'        	call	_RADIO_DIO5	;wreg free
  5851  003C' 0012               	return	
  5852  003E'                    __end_of_LORAWAN_Mainloop:
  5853                           	opt stack 0
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           intcon2	equ	0xFF1
  5862                           intcon3	equ	0xFF0
  5863                           postinc0	equ	0xFEE
  5864                           wreg	equ	0xFE8
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           fsr2h	equ	0xFDA
  5868                           fsr2l	equ	0xFD9
  5869                           status	equ	0xFD8
  5870                           
  5871 ;; *************** function _SwTimersExecute *****************
  5872 ;; Defined at:
  5873 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  i               1  126[BANK0 ] unsigned char 
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      void 
  5880 ;; Registers used:
  5881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+8, btemp+
      +9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;Total ram usage:        5 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:   16
  5894 ;; This function calls:
  5895 ;;		Absolute function
  5896 ;;		_AckRetransmissionCallback
  5897 ;;		_AutomaticReplyCallback
  5898 ;;		_LORAWAN_LinkCheckCallback
  5899 ;;		_LORAWAN_ReceiveWindow1Callback
  5900 ;;		_LORAWAN_ReceiveWindow2Callback
  5901 ;;		_RADIO_RxFSKTimeout
  5902 ;;		_RADIO_WatchdogTimeout
  5903 ;;		_TransmissionErrorCallback
  5904 ;;		_UnconfirmedTransmissionCallback
  5905 ;;		_UpdateJoinSuccessState
  5906 ;; This function is called by:
  5907 ;;		_LORAWAN_Mainloop
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text30
  5912  0000'                    __ptext30:
  5913                           	opt stack 0
  5914  0000'                    _SwTimersExecute:
  5915                           	opt stack 13
  5916                           
  5917                           ;sw_timer.c: 262: uint8_t i;
  5918                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  5919                           
  5920                           ;incstack = 0
  5921  0000' 9EF2               	bcf	intcon,7,c	;volatile
  5922                           
  5923                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  5924  0002' 0E00               	movlw	0
  5925  0004' 0100               	movlb	0	; () banked
  5926  0006' 6F00'              	movwf	SwTimersExecute@i& (0+255),b
  5927  0008' D068               	goto	l1160
  5928  000A'                    
  5929                           ; BSR set to: 0
  5930                           ;sw_timer.c: 266: {
  5931                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  5932                           
  5933                           ; BSR set to: 0
  5934  000A' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  5935  000C' 0D08               	mullw	8
  5936  000E' 0E04               	movlw	4
  5937  0010' 26F3               	addwf	prodl,f,c
  5938  0012' 0E00               	movlw	0
  5939  0014' 22F4               	addwfc	prodh,f,c
  5940  0016' 0E00'              	movlw	low _swTimers
  5941  0018' 24F3               	addwf	prodl,w,c
  5942  001A' 6ED9               	movwf	fsr2l,c
  5943  001C' 0E00'              	movlw	high _swTimers
  5944  001E' 20F4               	addwfc	prodh,w,c
  5945  0020' 6EDA               	movwf	fsr2h,c
  5946  0022' 04DE               	decf	postinc2,w,c
  5947  0024' A4D8               	btfss	status,2,c
  5948  0026' D057               	goto	l1164
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;sw_timer.c: 270: {
  5952                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  5953  0028' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  5954  002A' 0D08               	mullw	8
  5955  002C' 0E00'              	movlw	low _swTimers
  5956  002E' 24F3               	addwf	prodl,w,c
  5957  0030' 6ED9               	movwf	fsr2l,c
  5958  0032' 0E00'              	movlw	high _swTimers
  5959  0034' 20F4               	addwfc	prodh,w,c
  5960  0036' 6EDA               	movwf	fsr2h,c
  5961  0038' 50DE               	movf	postinc2,w,c
  5962  003A' 10DE               	iorwf	postinc2,w,c
  5963  003C' 10DE               	iorwf	postinc2,w,c
  5964  003E' 10DE               	iorwf	postinc2,w,c
  5965  0040' A4D8               	btfss	status,2,c
  5966  0042' D049               	goto	l1164
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;sw_timer.c: 272: {
  5970                           ;sw_timer.c: 273: swTimers[i].running = 0;
  5971  0044' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  5972  0046' 0D08               	mullw	8
  5973  0048' 0E04               	movlw	4
  5974  004A' 26F3               	addwf	prodl,f,c
  5975  004C' 0E00               	movlw	0
  5976  004E' 22F4               	addwfc	prodh,f,c
  5977  0050' 0E00'              	movlw	low _swTimers
  5978  0052' 24F3               	addwf	prodl,w,c
  5979  0054' 6ED9               	movwf	fsr2l,c
  5980  0056' 0E00'              	movlw	high _swTimers
  5981  0058' 20F4               	addwfc	prodh,w,c
  5982  005A' 6EDA               	movwf	fsr2h,c
  5983  005C' 0E00               	movlw	0
  5984  005E' 6EDF               	movwf	indf2,c
  5985                           
  5986                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  5987  0060' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  5988  0062' 0D08               	mullw	8
  5989  0064' 0E06               	movlw	6
  5990  0066' 26F3               	addwf	prodl,f,c
  5991  0068' 0E00               	movlw	0
  5992  006A' 22F4               	addwfc	prodh,f,c
  5993  006C' 0E00'              	movlw	low _swTimers
  5994  006E' 24F3               	addwf	prodl,w,c
  5995  0070' 6ED9               	movwf	fsr2l,c
  5996  0072' 0E00'              	movlw	high _swTimers
  5997  0074' 20F4               	addwfc	prodh,w,c
  5998  0076' 6EDA               	movwf	fsr2h,c
  5999  0078' 50DE               	movf	postinc2,w,c
  6000  007A' 10DE               	iorwf	postinc2,w,c
  6001  007C' B4D8               	btfsc	status,2,c
  6002  007E' D02B               	goto	l1164
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;sw_timer.c: 275: {
  6006                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6007  0080' 8EF2               	bsf	intcon,7,c	;volatile
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6011  0082' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  6012  0084' 0D08               	mullw	8
  6013  0086' 0E05               	movlw	5
  6014  0088' 26F3               	addwf	prodl,f,c
  6015  008A' 0E00               	movlw	0
  6016  008C' 22F4               	addwfc	prodh,f,c
  6017  008E' 0E00'              	movlw	low _swTimers
  6018  0090' 24F3               	addwf	prodl,w,c
  6019  0092' 6ED9               	movwf	fsr2l,c
  6020  0094' 0E00'              	movlw	high _swTimers
  6021  0096' 20F4               	addwfc	prodh,w,c
  6022  0098' 6EDA               	movwf	fsr2h,c
  6023  009A' 50DF               	movf	indf2,w,c
  6024  009C' 6EE6               	movwf	postinc1,c
  6025  009E' 5100'              	movf	SwTimersExecute@i& (0+255),w,b
  6026  00A0' 0D08               	mullw	8
  6027  00A2' 0E06               	movlw	6
  6028  00A4' 26F3               	addwf	prodl,f,c
  6029  00A6' 0E00               	movlw	0
  6030  00A8' 22F4               	addwfc	prodh,f,c
  6031  00AA' 0E00'              	movlw	low _swTimers
  6032  00AC' 24F3               	addwf	prodl,w,c
  6033  00AE' 6ED9               	movwf	fsr2l,c
  6034  00B0' 0E00'              	movlw	high _swTimers
  6035  00B2' 20F4               	addwfc	prodh,w,c
  6036  00B4' 6EDA               	movwf	fsr2h,c
  6037  00B6' CFDE F07A'         	movff	postinc2,??_SwTimersExecute
  6038  00BA' CFDD F07B'         	movff	postdec2,??_SwTimersExecute+1
  6039  00BE' D801               	call	u14698
  6040  00C0' D009               	goto	u14699
  6041  00C2'                    u14698:
  6042  00C2' 0005               	push	
  6043  00C4' 6EFA               	movwf	pclath,c
  6044  00C6' 5100'              	movf	??_SwTimersExecute& (0+255),w,b
  6045  00C8' 6EFD               	movwf	tosl,c
  6046  00CA' 5100'              	movf	(??_SwTimersExecute+1)& (0+255),w,b
  6047  00CC' 6EFE               	movwf	tosh,c
  6048  00CE' 6AFF               	clrf	tosu,c
  6049  00D0' 50FA               	movf	pclath,w,c
  6050  00D2' 0012               	return		;indir
  6051  00D4'                    u14699:
  6052                           
  6053                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6054  00D4' 9EF2               	bcf	intcon,7,c	;volatile
  6055  00D6'                    l1164:
  6056  00D6' 0100               	movlb	0	; () banked
  6057  00D8' 2B00'              	incf	SwTimersExecute@i& (0+255),f,b
  6058  00DA'                    l1160:
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  00DA' 5100'              	movf	_allocatedTimers& (0+255),w,b	;volatile
  6064  00DC' 5D00'              	subwf	SwTimersExecute@i& (0+255),w,b
  6065  00DE' A0D8               	btfss	status,0,c
  6066  00E0' D794               	goto	l1161
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;sw_timer.c: 279: }
  6070                           ;sw_timer.c: 280: }
  6071                           ;sw_timer.c: 281: }
  6072                           ;sw_timer.c: 282: }
  6073                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6074  00E2' 8EF2               	bsf	intcon,7,c	;volatile
  6075                           
  6076                           ; BSR set to: 0
  6077  00E4' 0012               	return		;funcret
  6078  00E6'                    __end_of_SwTimersExecute:
  6079                           	opt stack 0
  6080                           tosu	equ	0xFFF
  6081                           tosh	equ	0xFFE
  6082                           tosl	equ	0xFFD
  6083                           pclath	equ	0xFFA
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           intcon	equ	0xFF2
  6091                           intcon2	equ	0xFF1
  6092                           intcon3	equ	0xFF0
  6093                           postinc0	equ	0xFEE
  6094                           wreg	equ	0xFE8
  6095                           postinc1	equ	0xFE6
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function _RADIO_WatchdogTimeout *****************
  6104 ;; Defined at:
  6105 ;;		line 1497 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  param           1  [STACK] unsigned char 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1  [STACK] void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 3F/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:   15
  6126 ;; This function calls:
  6127 ;;		_LORAWAN_RxTimeout
  6128 ;;		_LORAWAN_TxDone
  6129 ;;		_RADIO_WriteMode
  6130 ;; This function is called by:
  6131 ;;		_RADIO_Init
  6132 ;;		_SwTimersExecute
  6133 ;; This function uses a reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text31
  6137  0000'                    __ptext31:
  6138                           	opt stack 0
  6139  0000'                    _RADIO_WatchdogTimeout:
  6140                           	opt stack 13
  6141                           
  6142                           ;radio_driver_SX1276.c: 1499: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  6143                           
  6144                           ; BSR set to: 0
  6145                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6146                           ;incstack = 0
  6147  0000' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  6148  0004' 0E01               	movlw	1
  6149  0006' 0100               	movlb	0	; () banked
  6150  0008' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  6151  000A' 0E01               	movlw	1
  6152  000C' EC00' F000'        	call	_RADIO_WriteMode
  6153                           
  6154                           ;radio_driver_SX1276.c: 1500: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6155  0010' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  6156  0014' 0E00               	movlw	0
  6157  0016' 0100               	movlb	0	; () banked
  6158  0018' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  6159  001A' 0E00               	movlw	0
  6160  001C' EC00' F000'        	call	_RADIO_WriteMode
  6161  0020' 968A               	bcf	3978,3,c	;volatile
  6162                           
  6163                           ;radio_driver_SX1276.c: 1505: RadioConfiguration.flags |= (1 << (4));
  6164  0022' 0101               	movlb	1	; () banked
  6165  0024' 8900'              	bsf	(_RadioConfiguration+35)& (0+255),4,b
  6166                           
  6167                           ; BSR set to: 1
  6168                           ;radio_driver_SX1276.c: 1506: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  6169  0026' A300'              	btfss	(_RadioConfiguration+35)& (0+255),1,b
  6170  0028' D004               	goto	l2082
  6171                           
  6172                           ; BSR set to: 1
  6173                           ;radio_driver_SX1276.c: 1507: {
  6174                           ;radio_driver_SX1276.c: 1508: RadioConfiguration.flags &= ~(1 << (1));
  6175  002A' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6176                           
  6177                           ; BSR set to: 1
  6178                           ;radio_driver_SX1276.c: 1509: LORAWAN_RxTimeout();
  6179  002C' EC00' F000'        	call	_LORAWAN_RxTimeout	;wreg free
  6180                           
  6181                           ;radio_driver_SX1276.c: 1510: }
  6182  0030' D009               	goto	l2085
  6183  0032'                    l2082:
  6184                           
  6185                           ; BSR set to: 1
  6186                           ;radio_driver_SX1276.c: 1511: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  6187  0032' A100'              	btfss	(_RadioConfiguration+35)& (0+255),0,b
  6188  0034' D007               	goto	l2085
  6189                           
  6190                           ; BSR set to: 1
  6191                           ;radio_driver_SX1276.c: 1512: {
  6192                           ;radio_driver_SX1276.c: 1513: RadioConfiguration.flags &= ~(1 << (0));
  6193  0036' 9100'              	bcf	(_RadioConfiguration+35)& (0+255),0,b
  6194                           
  6195                           ; BSR set to: 1
  6196                           ;radio_driver_SX1276.c: 1518: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  6197  0038' C041' F03A'        	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  6198  003C' C042' F03B'        	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  6199  0040' EC00' F000'        	call	_LORAWAN_TxDone	;wreg free
  6200  0044'                    l2085:
  6201                           
  6202                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  6203  0044' 52E5               	movf	postdec1,f,c
  6204  0046' 0012               	return		;funcret
  6205  0048'                    __end_of_RADIO_WatchdogTimeout:
  6206                           	opt stack 0
  6207                           tosu	equ	0xFFF
  6208                           tosh	equ	0xFFE
  6209                           tosl	equ	0xFFD
  6210                           pclath	equ	0xFFA
  6211                           tblptru	equ	0xFF8
  6212                           tblptrh	equ	0xFF7
  6213                           tblptrl	equ	0xFF6
  6214                           tablat	equ	0xFF5
  6215                           prodh	equ	0xFF4
  6216                           prodl	equ	0xFF3
  6217                           intcon	equ	0xFF2
  6218                           intcon2	equ	0xFF1
  6219                           intcon3	equ	0xFF0
  6220                           postinc0	equ	0xFEE
  6221                           wreg	equ	0xFE8
  6222                           postinc1	equ	0xFE6
  6223                           postdec1	equ	0xFE5
  6224                           indf2	equ	0xFDF
  6225                           postinc2	equ	0xFDE
  6226                           postdec2	equ	0xFDD
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _RADIO_RxFSKTimeout *****************
  6232 ;; Defined at:
  6233 ;;		line 1477 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  param           1  [STACK] unsigned char 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  irqFlags        1  [STACK] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1  [STACK] void 
  6240 ;; Registers used:
  6241 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prod
      +h, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 3F/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;Total ram usage:        0 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:   15
  6254 ;; This function calls:
  6255 ;;		_LORAWAN_RxTimeout
  6256 ;;		_RADIO_RegisterRead
  6257 ;;		_RADIO_WriteMode
  6258 ;;		_SwTimerStop
  6259 ;; This function is called by:
  6260 ;;		_RADIO_Init
  6261 ;;		_SwTimersExecute
  6262 ;; This function uses a reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text32
  6266  0000'                    __ptext32:
  6267                           	opt stack 0
  6268  0000'                    _RADIO_RxFSKTimeout:
  6269                           	opt stack 0
  6270                           
  6271                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6272  0000' 52E6               	movf	postinc1,f,c
  6273                           
  6274                           ;radio_driver_SX1276.c: 1479: uint8_t irqFlags;
  6275                           ;radio_driver_SX1276.c: 1480: irqFlags = RADIO_RegisterRead(0x3E);
  6276                           
  6277                           ;incstack = 0
  6278  0002' 0E3E               	movlw	62
  6279  0004' EC00' F000'        	call	_RADIO_RegisterRead
  6280  0008' 6E0B'              	movwf	btemp+11,c
  6281                           
  6282                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6283  000A' 0EFF               	movlw	-1
  6284  000C' C00B' FFE3         	movff	btemp+11,plusw1
  6285                           
  6286                           ;radio_driver_SX1276.c: 1481: if (0 == (irqFlags & (1<<(0))))
  6287                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  6288  0010' 0EFF               	movlw	-1
  6289  0012' B0E3               	btfsc	plusw1,0,c
  6290  0014' D011               	goto	l2077
  6291                           
  6292                           ;radio_driver_SX1276.c: 1482: {
  6293                           ;radio_driver_SX1276.c: 1484: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6294  0016' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  6295  001A' 0E00               	movlw	0
  6296  001C' 0100               	movlb	0	; () banked
  6297  001E' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  6298  0020' 0E00               	movlw	0
  6299  0022' EC00' F000'        	call	_RADIO_WriteMode
  6300                           
  6301                           ;radio_driver_SX1276.c: 1486: SwTimerStop(RadioConfiguration.watchdogTimerId);
  6302  0026' 0101               	movlb	1	; () banked
  6303  0028' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
  6304  002A' EC00' F000'        	call	_SwTimerStop
  6305  002E' 968A               	bcf	3978,3,c	;volatile
  6306                           
  6307                           ;radio_driver_SX1276.c: 1491: RadioConfiguration.flags &= ~(1 << (1));
  6308  0030' 0101               	movlb	1	; () banked
  6309  0032' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6310                           
  6311                           ; BSR set to: 1
  6312                           ;radio_driver_SX1276.c: 1492: LORAWAN_RxTimeout();
  6313  0034' EC00' F000'        	call	_LORAWAN_RxTimeout	;wreg free
  6314  0038'                    l2077:
  6315                           
  6316                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6317  0038' 52E5               	movf	postdec1,f,c
  6318  003A' 52E5               	movf	postdec1,f,c
  6319  003C' 0012               	return		;funcret
  6320  003E'                    __end_of_RADIO_RxFSKTimeout:
  6321                           	opt stack 0
  6322                           tosu	equ	0xFFF
  6323                           tosh	equ	0xFFE
  6324                           tosl	equ	0xFFD
  6325                           pclath	equ	0xFFA
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           prodh	equ	0xFF4
  6331                           prodl	equ	0xFF3
  6332                           intcon	equ	0xFF2
  6333                           intcon2	equ	0xFF1
  6334                           intcon3	equ	0xFF0
  6335                           postinc0	equ	0xFEE
  6336                           wreg	equ	0xFE8
  6337                           postinc1	equ	0xFE6
  6338                           postdec1	equ	0xFE5
  6339                           plusw1	equ	0xFE3
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function _TransmissionErrorCallback *****************
  6348 ;; Defined at:
  6349 ;;		line 1092 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;  param           1  [STACK] unsigned char 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1  [STACK] void 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11
      +, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 3F/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;Total ram usage:        0 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:   13
  6370 ;; This function calls:
  6371 ;;		_RADIO_Transmit
  6372 ;;		_ResetParametersForUnconfirmedTransmission
  6373 ;;		_RxData
  6374 ;;		_SelectChannelForTransmission
  6375 ;;		_SwTimerSetTimeout
  6376 ;;		_SwTimerStart
  6377 ;; This function is called by:
  6378 ;;		_SetCallbackSoftwareTimers
  6379 ;;		_SwTimersExecute
  6380 ;; This function uses a reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text33
  6384  0000'                    __ptext33:
  6385                           	opt stack 0
  6386  0000'                    _TransmissionErrorCallback:
  6387                           	opt stack 15
  6388                           
  6389                           ;lorawan_na.c: 1094: if ( (SelectChannelForTransmission (1) == OK) )
  6390                           
  6391                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6392                           ;incstack = 0
  6393  0000' 0E01               	movlw	1
  6394  0002' EC00' F000'        	call	_SelectChannelForTransmission
  6395  0006' 0900               	iorlw	0
  6396  0008' A4D8               	btfss	status,2,c
  6397  000A' D02B               	goto	l11330
  6398                           
  6399                           ;lorawan_na.c: 1095: {
  6400                           ;lorawan_na.c: 1096: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  6401  000C' 0E00'              	movlw	low (_macBuffer+16)
  6402  000E' 0100               	movlb	0	; () banked
  6403  0010' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
  6404  0012' 0E00'              	movlw	high (_macBuffer+16)
  6405  0014' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  6406  0016' C0C5' F053'        	movff	_loRa+197,RADIO_Transmit@bufferLen
  6407  001A' EC00' F000'        	call	_RADIO_Transmit	;wreg free
  6408  001E' C051' F001'        	movff	?_RADIO_Transmit,btemp+1
  6409  0022' C052' F002'        	movff	?_RADIO_Transmit+1,btemp+2
  6410  0026' 5001'              	movf	btemp+1,w,c
  6411  0028' 1002'              	iorwf	btemp+2,w,c
  6412  002A' A4D8               	btfss	status,2,c
  6413  002C' D003               	goto	l11320
  6414                           
  6415                           ;lorawan_na.c: 1097: {
  6416                           ;lorawan_na.c: 1098: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  6417  002E' 0102               	movlb	2	; () banked
  6418  0030' 2B00'              	incf	(_loRa+201)& (0+255),f,b
  6419                           
  6420                           ;lorawan_na.c: 1099: }
  6421  0032' D031               	goto	u12029
  6422  0034'                    l11320:
  6423                           
  6424                           ;lorawan_na.c: 1100: else
  6425                           ;lorawan_na.c: 1101: {
  6426                           ;lorawan_na.c: 1102: loRa.macStatus.macState = RETRANSMISSION_DELAY;
  6427  0034' 0102               	movlb	2	; () banked
  6428  0036' 5100'              	movf	(_loRa+2)& (0+255),w,b
  6429  0038' 0BF0               	andlw	-16
  6430  003A' 0906               	iorlw	6
  6431  003C' 6F00'              	movwf	(_loRa+2)& (0+255),b
  6432                           
  6433                           ; BSR set to: 2
  6434                           
  6435                           ; BSR set to: 2
  6436                           
  6437                           ;lorawan_na.c: 1103: SwTimerSetTimeout(loRa.transmissionErrorTimerId, ((2000UL) < 0x000F
      +                          FFFFUL ? ( (((uint32_t)(2000UL)) << (12)) / 125UL ) : ( (((uint32_t)(2000UL)) / 125UL) <
      +                          < (12) ) ));
  6438  003E' 0E00               	movlw	0
  6439  0040' 0100               	movlb	0	; () banked
  6440  0042' 6F00'              	movwf	SwTimerSetTimeout@timeout& (0+255),b
  6441  0044' 0E00               	movlw	0
  6442  0046' 6F00'              	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
  6443  0048' 0E01               	movlw	1
  6444  004A' 6F00'              	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
  6445  004C' 0E00               	movlw	0
  6446  004E' 6F00'              	movwf	(SwTimerSetTimeout@timeout+3)& (0+255),b
  6447  0050' 0102               	movlb	2	; () banked
  6448  0052' 5100'              	movf	(_loRa+229)& (0+255),w,b
  6449  0054' EC00' F000'        	call	_SwTimerSetTimeout
  6450                           
  6451                           ;lorawan_na.c: 1104: SwTimerStart(loRa.transmissionErrorTimerId);
  6452  0058' 0102               	movlb	2	; () banked
  6453  005A' 5100'              	movf	(_loRa+229)& (0+255),w,b
  6454  005C' EC00' F000'        	call	_SwTimerStart
  6455  0060' D01A               	goto	u12029
  6456  0062'                    l11330:
  6457                           
  6458                           ;lorawan_na.c: 1108: else
  6459                           ;lorawan_na.c: 1110: {
  6460                           ;lorawan_na.c: 1111: ResetParametersForUnconfirmedTransmission ();
  6461  0062' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  6462                           
  6463                           ;lorawan_na.c: 1112: if (rxPayload.RxAppData != (0))
  6464  0066' 0100               	movlb	0	; () banked
  6465  0068' 5100'              	movf	_rxPayload& (0+255),w,b
  6466  006A' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
  6467  006C' B4D8               	btfsc	status,2,c
  6468  006E' D013               	goto	u12029
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;lorawan_na.c: 1113: {
  6472                           ;lorawan_na.c: 1114: rxPayload.RxAppData((0), 0, MAC_OK);
  6473  0070' 0E00               	movlw	0
  6474  0072' 6F00'              	movwf	RxData@pData& (0+255),b
  6475  0074' 0E00               	movlw	0
  6476  0076' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
  6477  0078' 0E00               	movlw	0
  6478  007A' 6F00'              	movwf	RxData@dataLength& (0+255),b
  6479  007C' 0E01               	movlw	1
  6480  007E' 6F00'              	movwf	RxData@status& (0+255),b
  6481  0080' D801               	call	u12028
  6482  0082' D009               	goto	u12029
  6483  0084'                    u12028:
  6484  0084' 0005               	push	
  6485  0086' 6EFA               	movwf	pclath,c
  6486  0088' 5100'              	movf	_rxPayload& (0+255),w,b
  6487  008A' 6EFD               	movwf	tosl,c
  6488  008C' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
  6489  008E' 6EFE               	movwf	tosh,c
  6490  0090' 6AFF               	clrf	tosu,c
  6491  0092' 50FA               	movf	pclath,w,c
  6492  0094' 0012               	return		;indir
  6493  0096'                    u12029:
  6494                           
  6495                           ; _TransmissionErrorCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  6496  0096' 52E5               	movf	postdec1,f,c
  6497  0098' 0012               	return		;funcret
  6498  009A'                    __end_of_TransmissionErrorCallback:
  6499                           	opt stack 0
  6500                           tosu	equ	0xFFF
  6501                           tosh	equ	0xFFE
  6502                           tosl	equ	0xFFD
  6503                           pclath	equ	0xFFA
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon2	equ	0xFF1
  6512                           intcon3	equ	0xFF0
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           postinc1	equ	0xFE6
  6516                           postdec1	equ	0xFE5
  6517                           plusw1	equ	0xFE3
  6518                           indf2	equ	0xFDF
  6519                           postinc2	equ	0xFDE
  6520                           postdec2	equ	0xFDD
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _UpdateJoinSuccessState *****************
  6526 ;; Defined at:
  6527 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;  param           1  [STACK] unsigned char 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1  [STACK] void 
  6534 ;; Registers used:
  6535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, pro
      +dh, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:   11
  6548 ;; This function calls:
  6549 ;;		_RxJoinResponse
  6550 ;;		_SwTimerSetTimeout
  6551 ;;		_SwTimerStart
  6552 ;;		___lldiv
  6553 ;; This function is called by:
  6554 ;;		_LORAWAN_RxDone
  6555 ;;		_SetCallbackSoftwareTimers
  6556 ;;		_SwTimersExecute
  6557 ;; This function uses a reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text34
  6561  0000'                    __ptext34:
  6562                           	opt stack 0
  6563  0000'                    _UpdateJoinSuccessState:
  6564                           	opt stack 0
  6565                           
  6566                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6567  0000' 52E6               	movf	postinc1,f,c
  6568  0002' 52E6               	movf	postinc1,f,c
  6569  0004' 52E6               	movf	postinc1,f,c
  6570  0006' 52E6               	movf	postinc1,f,c
  6571                           
  6572                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  6573                           
  6574                           ;incstack = 0
  6575  0008' 0102               	movlb	2	; () banked
  6576  000A' 9500'              	bcf	_loRa& (0+255),2,b
  6577                           
  6578                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  6579  000C' 8900'              	bsf	(_loRa+2)& (0+255),4,b
  6580                           
  6581                           ; BSR set to: 2
  6582                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  6583  000E' 0EF0               	movlw	-16
  6584  0010' 1700'              	andwf	(_loRa+2)& (0+255),f,b
  6585                           
  6586                           ; BSR set to: 2
  6587                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  6588  0012' 6B00'              	clrf	(_loRa+193)& (0+255),b
  6589  0014' 6B00'              	clrf	(_loRa+194)& (0+255),b
  6590                           
  6591                           ; BSR set to: 2
  6592                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  6593  0016' 6B00'              	clrf	(_loRa+223)& (0+255),b
  6594                           
  6595                           ; BSR set to: 2
  6596                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  6597  0018' A500'              	btfss	(_loRa+3)& (0+255),2,b
  6598  001A' D07B               	goto	l10202
  6599                           
  6600                           ; BSR set to: 2
  6601                           ;lorawan.c: 1052: {
  6602                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  6603  001C' 5100'              	movf	(_loRa+192)& (0+255),w,b
  6604  001E' E107               	bnz	u10020
  6605  0020' 2900'              	incf	(_loRa+189)& (0+255),w,b
  6606  0022' 0EFF               	movlw	255
  6607  0024' 5900'              	subwfb	(_loRa+190)& (0+255),w,b
  6608  0026' 0E0F               	movlw	15
  6609  0028' 5900'              	subwfb	(_loRa+191)& (0+255),w,b
  6610  002A' A0D8               	btfss	status,0,c
  6611  002C' D024               	goto	l10196
  6612  002E'                    u10020:
  6613                           
  6614                           ; BSR set to: 2
  6615  002E' C0BD' F000'        	movff	_loRa+189,___lldiv@dividend
  6616  0032' C0BE' F001'        	movff	_loRa+190,___lldiv@dividend+1
  6617  0036' C0BF' F002'        	movff	_loRa+191,___lldiv@dividend+2
  6618  003A' C0C0' F003'        	movff	_loRa+192,___lldiv@dividend+3
  6619  003E' 0E7D               	movlw	125
  6620  0040' 0100               	movlb	0	; () banked
  6621  0042' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  6622  0044' 0E00               	movlw	0
  6623  0046' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  6624  0048' 0E00               	movlw	0
  6625  004A' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  6626  004C' 0E00               	movlw	0
  6627  004E' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  6628  0050' EC00' F000'        	call	___lldiv	;wreg free
  6629  0054' C000' F008'        	movff	?___lldiv,btemp+8
  6630  0058' C001' F009'        	movff	?___lldiv+1,btemp+9
  6631  005C' C002' F00A'        	movff	?___lldiv+2,btemp+10
  6632  0060' C003' F00B'        	movff	?___lldiv+3,btemp+11
  6633  0064' 0E0C               	movlw	12
  6634  0066'                    u10035:
  6635  0066' 90D8               	bcf	status,0,c
  6636  0068' 3608'              	rlcf	btemp+8,f,c
  6637  006A' 3609'              	rlcf	btemp+9,f,c
  6638  006C' 360A'              	rlcf	btemp+10,f,c
  6639  006E' 360B'              	rlcf	btemp+11,f,c
  6640  0070' 2EE8               	decfsz	wreg,f,c
  6641  0072' D7F9               	goto	u10035
  6642  0074' D02B               	goto	L2
  6643  0076'                    l10196:
  6644                           
  6645                           ; BSR set to: 2
  6646  0076' C0BD' F008'        	movff	_loRa+189,btemp+8
  6647  007A' C0BE' F009'        	movff	_loRa+190,btemp+9
  6648  007E' C0BF' F00A'        	movff	_loRa+191,btemp+10
  6649  0082' C0C0' F00B'        	movff	_loRa+192,btemp+11
  6650  0086' 0E0C               	movlw	12
  6651  0088'                    u10045:
  6652  0088' 90D8               	bcf	status,0,c
  6653  008A' 3608'              	rlcf	btemp+8,f,c
  6654  008C' 3609'              	rlcf	btemp+9,f,c
  6655  008E' 360A'              	rlcf	btemp+10,f,c
  6656  0090' 360B'              	rlcf	btemp+11,f,c
  6657  0092' 2EE8               	decfsz	wreg,f,c
  6658  0094' D7F9               	goto	u10045
  6659  0096' C008' F000'        	movff	btemp+8,___lldiv@dividend
  6660  009A' C009' F001'        	movff	btemp+9,___lldiv@dividend+1
  6661  009E' C00A' F002'        	movff	btemp+10,___lldiv@dividend+2
  6662  00A2' C00B' F003'        	movff	btemp+11,___lldiv@dividend+3
  6663  00A6' 0E7D               	movlw	125
  6664  00A8' 0100               	movlb	0	; () banked
  6665  00AA' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  6666  00AC' 0E00               	movlw	0
  6667  00AE' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  6668  00B0' 0E00               	movlw	0
  6669  00B2' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  6670  00B4' 0E00               	movlw	0
  6671  00B6' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  6672  00B8' EC00' F000'        	call	___lldiv	;wreg free
  6673  00BC' C000' F008'        	movff	?___lldiv,btemp+8
  6674  00C0' C001' F009'        	movff	?___lldiv+1,btemp+9
  6675  00C4' C002' F00A'        	movff	?___lldiv+2,btemp+10
  6676  00C8' C003' F00B'        	movff	?___lldiv+3,btemp+11
  6677  00CC'                    L2:
  6678                           
  6679                           ;stkvar	_UpdateJoinSuccessState$1127 @ sp[(-4)+0]
  6680  00CC' 0EFC               	movlw	-4
  6681  00CE' C008' FFE3         	movff	btemp+8,plusw1
  6682  00D2' 0EFD               	movlw	-3
  6683  00D4' C009' FFE3         	movff	btemp+9,plusw1
  6684  00D8' 0EFE               	movlw	-2
  6685  00DA' C00A' FFE3         	movff	btemp+10,plusw1
  6686  00DE' 0EFF               	movlw	-1
  6687  00E0' C00B' FFE3         	movff	btemp+11,plusw1
  6688                           
  6689                           ;stkvar	_UpdateJoinSuccessState$1127 @ sp[(-4)+0]
  6690  00E4' 50E1               	movf	fsr1l,w,c
  6691  00E6' 0FFC               	addlw	-4
  6692  00E8' 6ED9               	movwf	fsr2l,c
  6693  00EA' 50E2               	movf	fsr1h,w,c
  6694  00EC' 6EDA               	movwf	fsr2h,c
  6695  00EE' 0EFF               	movlw	255
  6696  00F0' 22DA               	addwfc	fsr2h,f,c
  6697  00F2' CFDE F00D'         	movff	postinc2,SwTimerSetTimeout@timeout
  6698  00F6' CFDE F00E'         	movff	postinc2,SwTimerSetTimeout@timeout+1
  6699  00FA' CFDE F00F'         	movff	postinc2,SwTimerSetTimeout@timeout+2
  6700  00FE' CFDE F010'         	movff	postinc2,SwTimerSetTimeout@timeout+3
  6701  0102' 0102               	movlb	2	; () banked
  6702  0104' 5100'              	movf	(_loRa+216)& (0+255),w,b
  6703  0106' EC00' F000'        	call	_SwTimerSetTimeout
  6704                           
  6705                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  6706  010A' 0102               	movlb	2	; () banked
  6707  010C' 5100'              	movf	(_loRa+216)& (0+255),w,b
  6708  010E' EC00' F000'        	call	_SwTimerStart
  6709  0112'                    l10202:
  6710                           
  6711                           ;lorawan.c: 1055: }
  6712                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  6713  0112' 0100               	movlb	0	; () banked
  6714  0114' 5100'              	movf	(_rxPayload+2)& (0+255),w,b
  6715  0116' 1100'              	iorwf	(_rxPayload+3)& (0+255),w,b
  6716  0118' B4D8               	btfsc	status,2,c
  6717  011A' D00C               	goto	u10069
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;lorawan.c: 1058: {
  6721                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  6722  011C' D801               	call	u10068
  6723  011E' D00A               	goto	u10069
  6724  0120'                    u10068:
  6725  0120' 0005               	push	
  6726  0122' 6EFA               	movwf	pclath,c
  6727  0124' 5100'              	movf	(_rxPayload+2)& (0+255),w,b
  6728  0126' 6EFD               	movwf	tosl,c
  6729  0128' 5100'              	movf	(_rxPayload+3)& (0+255),w,b
  6730  012A' 6EFE               	movwf	tosh,c
  6731  012C' 6AFF               	clrf	tosu,c
  6732  012E' 50FA               	movf	pclath,w,c
  6733  0130' 0E01               	movlw	1
  6734  0132' 0012               	return		;indir
  6735  0134'                    u10069:
  6736                           
  6737                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  6738  0134' 0EFB               	movlw	251
  6739  0136' 26E1               	addwf	fsr1l,f,c
  6740  0138' 0EFF               	movlw	255
  6741  013A' 22E2               	addwfc	fsr1h,f,c
  6742  013C' 0012               	return		;funcret
  6743  013E'                    __end_of_UpdateJoinSuccessState:
  6744                           	opt stack 0
  6745                           tosu	equ	0xFFF
  6746                           tosh	equ	0xFFE
  6747                           tosl	equ	0xFFD
  6748                           pclath	equ	0xFFA
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           intcon3	equ	0xFF0
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postinc1	equ	0xFE6
  6761                           postdec1	equ	0xFE5
  6762                           plusw1	equ	0xFE3
  6763                           fsr1h	equ	0xFE2
  6764                           fsr1l	equ	0xFE1
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _AutomaticReplyCallback *****************
  6773 ;; Defined at:
  6774 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  param           1  [STACK] unsigned char 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1  [STACK] void 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 3F/0
  6785 ;;		On exit  : 3F/2
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;Total ram usage:        0 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:   14
  6795 ;; This function calls:
  6796 ;;		_LORAWAN_Send
  6797 ;; This function is called by:
  6798 ;;		_SetCallbackSoftwareTimers
  6799 ;;		_SwTimersExecute
  6800 ;; This function uses a reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text35
  6804  0000'                    __ptext35:
  6805                           	opt stack 0
  6806  0000'                    _AutomaticReplyCallback:
  6807                           	opt stack 14
  6808                           
  6809                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  6810                           
  6811                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6812                           ;incstack = 0
  6813  0000' 0EF0               	movlw	-16
  6814  0002' 0102               	movlb	2	; () banked
  6815  0004' 1700'              	andwf	(_loRa+2)& (0+255),f,b
  6816                           
  6817                           ; BSR set to: 2
  6818                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  6819  0006' 0E00               	movlw	0
  6820  0008' 0100               	movlb	0	; () banked
  6821  000A' 6F00'              	movwf	LORAWAN_Send@port& (0+255),b
  6822  000C' 0E00               	movlw	0
  6823  000E' 6F00'              	movwf	LORAWAN_Send@buffer& (0+255),b
  6824  0010' 0E00               	movlw	0
  6825  0012' 6F00'              	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  6826  0014' 0E00               	movlw	0
  6827  0016' 6F00'              	movwf	LORAWAN_Send@bufferLength& (0+255),b
  6828  0018' 0E00               	movlw	0
  6829  001A' EC00' F000'        	call	_LORAWAN_Send
  6830                           
  6831                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  6832  001E' 0102               	movlb	2	; () banked
  6833  0020' 9700'              	bcf	_loRa& (0+255),3,b
  6834                           
  6835                           ; BSR set to: 2
  6836                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  6837  0022' 52E5               	movf	postdec1,f,c
  6838  0024' 0012               	return		;funcret
  6839  0026'                    __end_of_AutomaticReplyCallback:
  6840                           	opt stack 0
  6841                           tosu	equ	0xFFF
  6842                           tosh	equ	0xFFE
  6843                           tosl	equ	0xFFD
  6844                           pclath	equ	0xFFA
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           postinc1	equ	0xFE6
  6857                           postdec1	equ	0xFE5
  6858                           plusw1	equ	0xFE3
  6859                           fsr1h	equ	0xFE2
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _AckRetransmissionCallback *****************
  6869 ;; Defined at:
  6870 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  param           1  [STACK] unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  maximumPacke    1  [STACK] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1  [STACK] void 
  6877 ;; Registers used:
  6878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+10, btemp+11, tosl, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 3F/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:   13
  6891 ;; This function calls:
  6892 ;;		_FindSmallestDataRate
  6893 ;;		_LORAWAN_GetMaxPayloadSize
  6894 ;;		_RADIO_Transmit
  6895 ;;		_ResetParametersForConfirmedTransmission
  6896 ;;		_RxData
  6897 ;;		_SelectChannelForTransmission
  6898 ;;		_UpdateRetransmissionAckTimeoutState
  6899 ;; This function is called by:
  6900 ;;		_SetCallbackSoftwareTimers
  6901 ;;		_SwTimersExecute
  6902 ;; This function uses a reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text36
  6906  0000'                    __ptext36:
  6907                           	opt stack 0
  6908  0000'                    _AckRetransmissionCallback:
  6909                           	opt stack 0
  6910                           
  6911                           ; BSR set to: 2
  6912                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6913  0000' 52E6               	movf	postinc1,f,c
  6914                           
  6915                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  6916                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  6917                           
  6918                           ;incstack = 0
  6919  0002' 0102               	movlb	2	; () banked
  6920  0004' B100'              	btfsc	(_loRa+3)& (0+255),0,b
  6921  0006' D083               	goto	l11208
  6922                           
  6923                           ; BSR set to: 2
  6924                           ;lorawan.c: 939: {
  6925                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  6926  0008' 5100'              	movf	(_loRa+202)& (0+255),w,b
  6927  000A' 5D00'              	subwf	(_loRa+200)& (0+255),w,b
  6928  000C' A0D8               	btfss	status,0,c
  6929  000E' D060               	goto	l11198
  6930                           
  6931                           ; BSR set to: 2
  6932                           ;lorawan.c: 941: {
  6933                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  6934  0010' EC00' F000'        	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  6935  0014' 6E0B'              	movwf	btemp+11,c
  6936  0016' 0E0D               	movlw	13
  6937  0018' 260B'              	addwf	btemp+11,f,c
  6938                           
  6939                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  6940  001A' 0EFF               	movlw	-1
  6941  001C' C00B' FFE3         	movff	btemp+11,plusw1
  6942                           
  6943                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  6944                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  6945  0020' 0EFF               	movlw	-1
  6946  0022' 50E3               	movf	plusw1,w,c
  6947  0024' 6E01'              	movwf	btemp+1,c
  6948  0026' 6A02'              	clrf	btemp+2,c
  6949  0028' 0102               	movlb	2	; () banked
  6950  002A' 5100'              	movf	(_loRa+197)& (0+255),w,b
  6951  002C' 5C01'              	subwf	btemp+1,w,c
  6952  002E' 5100'              	movf	(_loRa+198)& (0+255),w,b
  6953  0030' 5802'              	subwfb	btemp+2,w,c
  6954  0032' A0D8               	btfss	status,0,c
  6955  0034' D039               	goto	l11192
  6956                           
  6957                           ; BSR set to: 2
  6958                           ;lorawan.c: 946: {
  6959                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  6960  0036' 0E01               	movlw	1
  6961  0038' EC00' F000'        	call	_SelectChannelForTransmission
  6962  003C' 0900               	iorlw	0
  6963  003E' A4D8               	btfss	status,2,c
  6964  0040' D030               	goto	l11188
  6965                           
  6966                           ;lorawan.c: 948: {
  6967                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  6968  0042' 0E00'              	movlw	low (_macBuffer+16)
  6969  0044' 0100               	movlb	0	; () banked
  6970  0046' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
  6971  0048' 0E00'              	movlw	high (_macBuffer+16)
  6972  004A' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  6973  004C' C0C5' F053'        	movff	_loRa+197,RADIO_Transmit@bufferLen
  6974  0050' EC00' F000'        	call	_RADIO_Transmit	;wreg free
  6975  0054' C051' F001'        	movff	?_RADIO_Transmit,btemp+1
  6976  0058' C052' F002'        	movff	?_RADIO_Transmit+1,btemp+2
  6977  005C' 5001'              	movf	btemp+1,w,c
  6978  005E' 1002'              	iorwf	btemp+2,w,c
  6979  0060' A4D8               	btfss	status,2,c
  6980  0062' D01F               	goto	l11188
  6981                           
  6982                           ;lorawan.c: 951: {
  6983                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  6984  0064' 0102               	movlb	2	; () banked
  6985  0066' 5100'              	movf	(_loRa+2)& (0+255),w,b
  6986  0068' 0BF0               	andlw	-16
  6987  006A' 0901               	iorlw	1
  6988  006C' 6F00'              	movwf	(_loRa+2)& (0+255),b
  6989                           
  6990                           ; BSR set to: 2
  6991                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  6992  006E' 2B00'              	incf	(_loRa+202)& (0+255),f,b
  6993                           
  6994                           ; BSR set to: 2
  6995                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  6996  0070' B100'              	btfsc	(_loRa+202)& (0+255),0,b
  6997  0072' D04F               	goto	l610
  6998                           
  6999                           ; BSR set to: 2
  7000  0074' 5100'              	movf	(_loRa+208)& (0+255),w,b
  7001  0076' B4D8               	btfsc	status,2,c
  7002  0078' D04C               	goto	l610
  7003                           
  7004                           ; BSR set to: 2
  7005  007A' 5100'              	movf	(_loRa+202)& (0+255),w,b
  7006  007C' 6E01'              	movwf	btemp+1,c
  7007  007E' 6A02'              	clrf	btemp+2,c
  7008  0080' 5100'              	movf	(_loRa+200)& (0+255),w,b
  7009  0082' 6E0A'              	movwf	btemp+10,c
  7010  0084' 6A0B'              	clrf	btemp+11,c
  7011  0086' 0E01               	movlw	1
  7012  0088' 260A'              	addwf	btemp+10,f,c
  7013  008A' 0E00               	movlw	0
  7014  008C' 220B'              	addwfc	btemp+11,f,c
  7015  008E' 5001'              	movf	btemp+1,w,c
  7016  0090' 180A'              	xorwf	btemp+10,w,c
  7017  0092' E104               	bnz	u11830
  7018  0094' 5002'              	movf	btemp+2,w,c
  7019  0096' 180B'              	xorwf	btemp+11,w,c
  7020  0098' B4D8               	btfsc	status,2,c
  7021  009A' D03B               	goto	l610
  7022  009C'                    u11830:
  7023                           
  7024                           ; BSR set to: 2
  7025                           ;lorawan.c: 957: {
  7026                           ;lorawan.c: 958: FindSmallestDataRate();
  7027  009C' EC00' F000'        	call	_FindSmallestDataRate	;wreg free
  7028  00A0' D038               	goto	l610
  7029  00A2'                    l11188:
  7030                           
  7031                           ;lorawan.c: 961: else
  7032                           ;lorawan.c: 962: {
  7033                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7034  00A2' EC00' F000'        	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7035  00A6' D035               	goto	l610
  7036  00A8'                    l11192:
  7037                           
  7038                           ; BSR set to: 2
  7039                           ;lorawan.c: 973: else
  7040                           ;lorawan.c: 974: {
  7041                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7042  00A8' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
  7043                           
  7044                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7045  00AC' 0100               	movlb	0	; () banked
  7046  00AE' 5100'              	movf	_rxPayload& (0+255),w,b
  7047  00B0' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
  7048  00B2' B4D8               	btfsc	status,2,c
  7049  00B4' D02E               	goto	l610
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;lorawan.c: 977: {
  7053                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7054  00B6' 0E00               	movlw	0
  7055  00B8' 6F00'              	movwf	RxData@pData& (0+255),b
  7056  00BA' 0E00               	movlw	0
  7057  00BC' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
  7058  00BE' 0E00               	movlw	0
  7059  00C0' 6F00'              	movwf	RxData@dataLength& (0+255),b
  7060  00C2' 0E04               	movlw	4
  7061  00C4' 6F00'              	movwf	RxData@status& (0+255),b
  7062  00C6' D801               	call	u11858
  7063  00C8' D024               	goto	l610
  7064  00CA'                    u11858:
  7065  00CA' 0005               	push	
  7066  00CC' 6EFA               	movwf	pclath,c
  7067  00CE' D018               	goto	L3
  7068  00D0'                    l11198:
  7069                           
  7070                           ; BSR set to: 2
  7071                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7072  00D0' 5100'              	movf	(_loRa+202)& (0+255),w,b
  7073  00D2' 5D00'              	subwf	(_loRa+200)& (0+255),w,b
  7074  00D4' A0D8               	btfss	status,0,c
  7075                           
  7076                           ; BSR set to: 2
  7077  00D6' B100'              	btfsc	(_loRa+3)& (0+255),0,b
  7078  00D8' D01C               	goto	l610
  7079                           
  7080                           ; BSR set to: 2
  7081                           ;lorawan.c: 983: {
  7082                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7083  00DA' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
  7084                           
  7085                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7086  00DE' 0100               	movlb	0	; () banked
  7087  00E0' 5100'              	movf	_rxPayload& (0+255),w,b
  7088  00E2' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
  7089  00E4' B4D8               	btfsc	status,2,c
  7090  00E6' D015               	goto	l610
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;lorawan.c: 986: {
  7094                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7095  00E8' 0E00               	movlw	0
  7096  00EA' 6F00'              	movwf	RxData@pData& (0+255),b
  7097  00EC' 0E00               	movlw	0
  7098  00EE' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
  7099  00F0' 0E00               	movlw	0
  7100  00F2' 6F00'              	movwf	RxData@dataLength& (0+255),b
  7101  00F4' 0E00               	movlw	0
  7102  00F6' 6F00'              	movwf	RxData@status& (0+255),b
  7103  00F8' D801               	call	u11898
  7104  00FA' D00B               	goto	l610
  7105  00FC'                    u11898:
  7106  00FC' 0005               	push	
  7107  00FE' 6EFA               	movwf	pclath,c
  7108  0100'                    L3:
  7109  0100' 5100'              	movf	_rxPayload& (0+255),w,b
  7110  0102' 6EFD               	movwf	tosl,c
  7111  0104' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
  7112  0106' 6EFE               	movwf	tosh,c
  7113  0108' 6AFF               	clrf	tosu,c
  7114  010A' 50FA               	movf	pclath,w,c
  7115  010C' 0012               	return		;indir
  7116  010E'                    l11208:
  7117                           
  7118                           ; BSR set to: 2
  7119                           ;lorawan.c: 991: else
  7120                           ;lorawan.c: 992: {
  7121                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7122  010E' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
  7123  0112'                    l610:
  7124                           
  7125                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7126  0112' 52E5               	movf	postdec1,f,c
  7127  0114' 52E5               	movf	postdec1,f,c
  7128  0116' 0012               	return		;funcret
  7129  0118'                    __end_of_AckRetransmissionCallback:
  7130                           	opt stack 0
  7131                           tosu	equ	0xFFF
  7132                           tosh	equ	0xFFE
  7133                           tosl	equ	0xFFD
  7134                           pclath	equ	0xFFA
  7135                           tblptru	equ	0xFF8
  7136                           tblptrh	equ	0xFF7
  7137                           tblptrl	equ	0xFF6
  7138                           tablat	equ	0xFF5
  7139                           prodh	equ	0xFF4
  7140                           prodl	equ	0xFF3
  7141                           intcon	equ	0xFF2
  7142                           intcon2	equ	0xFF1
  7143                           intcon3	equ	0xFF0
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           postinc1	equ	0xFE6
  7147                           postdec1	equ	0xFE5
  7148                           plusw1	equ	0xFE3
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           indf2	equ	0xFDF
  7152                           postinc2	equ	0xFDE
  7153                           postdec2	equ	0xFDD
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7159 ;; Defined at:
  7160 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;  param           1  [STACK] unsigned char 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  iCtr            1  [STACK] unsigned char 
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1  [STACK] void 
  7167 ;; Registers used:
  7168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, cst
      +ack
  7169 ;; Tracked objects:
  7170 ;;		On entry : 3F/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:   11
  7181 ;; This function calls:
  7182 ;;		_SwTimerSetTimeout
  7183 ;;		_SwTimerStart
  7184 ;;		___lldiv
  7185 ;; This function is called by:
  7186 ;;		_SetCallbackSoftwareTimers
  7187 ;;		_SwTimersExecute
  7188 ;; This function uses a reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text37
  7192  0000'                    __ptext37:
  7193                           	opt stack 0
  7194  0000'                    _LORAWAN_LinkCheckCallback:
  7195                           	opt stack 0
  7196                           
  7197                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7198  0000' 0E05               	movlw	5
  7199  0002' 26E1               	addwf	fsr1l,f,c
  7200  0004' 0E00               	movlw	0
  7201  0006' 22E2               	addwfc	fsr1h,f,c
  7202                           
  7203                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7204                           
  7205                           ;incstack = 0
  7206  0008' 0102               	movlb	2	; () banked
  7207  000A' A100'              	btfss	(_loRa+3)& (0+255),0,b
  7208                           
  7209                           ; BSR set to: 2
  7210  000C' A500'              	btfss	(_loRa+3)& (0+255),2,b
  7211  000E' D02C               	goto	l11152
  7212                           
  7213                           ; BSR set to: 2
  7214                           ;lorawan.c: 886: {
  7215                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7216                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7217  0010' 0EFF               	movlw	-1
  7218  0012' 6AE3               	clrf	plusw1,c
  7219  0014' D00F               	goto	l11142
  7220  0016'                    l11136:
  7221                           
  7222                           ; BSR set to: 2
  7223                           ;lorawan.c: 889: {
  7224                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7225                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7226  0016' 0EFF               	movlw	-1
  7227  0018' 50E3               	movf	plusw1,w,c
  7228  001A' 0D02               	mullw	2
  7229  001C' 0E00'              	movlw	low (_loRa+153)
  7230  001E' 24F3               	addwf	prodl,w,c
  7231  0020' 6ED9               	movwf	fsr2l,c
  7232  0022' 0E00'              	movlw	high (_loRa+153)
  7233  0024' 20F4               	addwfc	prodh,w,c
  7234  0026' 6EDA               	movwf	fsr2h,c
  7235  0028' 0E02               	movlw	2
  7236  002A' 18DE               	xorwf	postinc2,w,c
  7237  002C' B4D8               	btfsc	status,2,c
  7238  002E' D009               	goto	u11690
  7239                           
  7240                           ; BSR set to: 2
  7241                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7242  0030' 0EFF               	movlw	-1
  7243  0032' 2AE3               	incf	plusw1,f,c
  7244  0034'                    l11142:
  7245                           
  7246                           ; BSR set to: 2
  7247                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7248  0034' 0EFF               	movlw	-1
  7249  0036' CFE3 F000'         	movff	plusw1,btemp
  7250  003A' 5100'              	movf	(_loRa+152)& (0+255),w,b
  7251  003C' 5C00'              	subwf	btemp,w,c
  7252  003E' A0D8               	btfss	status,0,c
  7253  0040' D7EA               	goto	l11136
  7254  0042'                    u11690:
  7255                           
  7256                           ; BSR set to: 2
  7257                           ;lorawan.c: 893: }
  7258                           ;lorawan.c: 894: }
  7259                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7260                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7261  0042' 0EFF               	movlw	-1
  7262  0044' 50E3               	movf	plusw1,w,c
  7263  0046' 1900'              	xorwf	(_loRa+152)& (0+255),w,b
  7264  0048' A4D8               	btfss	status,2,c
  7265  004A' D00E               	goto	l11152
  7266                           
  7267                           ; BSR set to: 2
  7268                           ;lorawan.c: 897: {
  7269                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7270  004C' 5100'              	movf	(_loRa+152)& (0+255),w,b
  7271  004E' 0D02               	mullw	2
  7272  0050' 0E00'              	movlw	low (_loRa+153)
  7273  0052' 24F3               	addwf	prodl,w,c
  7274  0054' 6ED9               	movwf	fsr2l,c
  7275  0056' 0E00'              	movlw	high (_loRa+153)
  7276  0058' 20F4               	addwfc	prodh,w,c
  7277  005A' 6EDA               	movwf	fsr2h,c
  7278  005C' 0E02               	movlw	2
  7279  005E' 6EDF               	movwf	indf2,c
  7280                           
  7281                           ; BSR set to: 2
  7282                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7283  0060' 0E10               	movlw	16
  7284  0062' 6100'              	cpfslt	(_loRa+152)& (0+255),b
  7285  0064' D001               	goto	l11152
  7286                           
  7287                           ; BSR set to: 2
  7288                           ;lorawan.c: 901: {
  7289                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7290  0066' 2B00'              	incf	(_loRa+152)& (0+255),f,b
  7291  0068'                    l11152:
  7292                           
  7293                           ; BSR set to: 2
  7294                           ;lorawan.c: 903: }
  7295                           ;lorawan.c: 904: }
  7296                           ;lorawan.c: 905: }
  7297                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7298  0068' A500'              	btfss	(_loRa+3)& (0+255),2,b
  7299  006A' D07B               	goto	l588
  7300                           
  7301                           ; BSR set to: 2
  7302                           ;lorawan.c: 909: {
  7303                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7304  006C' 5100'              	movf	(_loRa+192)& (0+255),w,b
  7305  006E' E107               	bnz	u11730
  7306  0070' 2900'              	incf	(_loRa+189)& (0+255),w,b
  7307  0072' 0EFF               	movlw	255
  7308  0074' 5900'              	subwfb	(_loRa+190)& (0+255),w,b
  7309  0076' 0E0F               	movlw	15
  7310  0078' 5900'              	subwfb	(_loRa+191)& (0+255),w,b
  7311  007A' A0D8               	btfss	status,0,c
  7312  007C' D024               	goto	l11158
  7313  007E'                    u11730:
  7314                           
  7315                           ; BSR set to: 2
  7316  007E' C0BD' F000'        	movff	_loRa+189,___lldiv@dividend
  7317  0082' C0BE' F001'        	movff	_loRa+190,___lldiv@dividend+1
  7318  0086' C0BF' F002'        	movff	_loRa+191,___lldiv@dividend+2
  7319  008A' C0C0' F003'        	movff	_loRa+192,___lldiv@dividend+3
  7320  008E' 0E7D               	movlw	125
  7321  0090' 0100               	movlb	0	; () banked
  7322  0092' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  7323  0094' 0E00               	movlw	0
  7324  0096' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  7325  0098' 0E00               	movlw	0
  7326  009A' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  7327  009C' 0E00               	movlw	0
  7328  009E' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  7329  00A0' EC00' F000'        	call	___lldiv	;wreg free
  7330  00A4' C000' F008'        	movff	?___lldiv,btemp+8
  7331  00A8' C001' F009'        	movff	?___lldiv+1,btemp+9
  7332  00AC' C002' F00A'        	movff	?___lldiv+2,btemp+10
  7333  00B0' C003' F00B'        	movff	?___lldiv+3,btemp+11
  7334  00B4' 0E0C               	movlw	12
  7335  00B6'                    u11745:
  7336  00B6' 90D8               	bcf	status,0,c
  7337  00B8' 3608'              	rlcf	btemp+8,f,c
  7338  00BA' 3609'              	rlcf	btemp+9,f,c
  7339  00BC' 360A'              	rlcf	btemp+10,f,c
  7340  00BE' 360B'              	rlcf	btemp+11,f,c
  7341  00C0' 2EE8               	decfsz	wreg,f,c
  7342  00C2' D7F9               	goto	u11745
  7343  00C4' D02B               	goto	L4
  7344  00C6'                    l11158:
  7345                           
  7346                           ; BSR set to: 2
  7347  00C6' C0BD' F008'        	movff	_loRa+189,btemp+8
  7348  00CA' C0BE' F009'        	movff	_loRa+190,btemp+9
  7349  00CE' C0BF' F00A'        	movff	_loRa+191,btemp+10
  7350  00D2' C0C0' F00B'        	movff	_loRa+192,btemp+11
  7351  00D6' 0E0C               	movlw	12
  7352  00D8'                    u11755:
  7353  00D8' 90D8               	bcf	status,0,c
  7354  00DA' 3608'              	rlcf	btemp+8,f,c
  7355  00DC' 3609'              	rlcf	btemp+9,f,c
  7356  00DE' 360A'              	rlcf	btemp+10,f,c
  7357  00E0' 360B'              	rlcf	btemp+11,f,c
  7358  00E2' 2EE8               	decfsz	wreg,f,c
  7359  00E4' D7F9               	goto	u11755
  7360  00E6' C008' F000'        	movff	btemp+8,___lldiv@dividend
  7361  00EA' C009' F001'        	movff	btemp+9,___lldiv@dividend+1
  7362  00EE' C00A' F002'        	movff	btemp+10,___lldiv@dividend+2
  7363  00F2' C00B' F003'        	movff	btemp+11,___lldiv@dividend+3
  7364  00F6' 0E7D               	movlw	125
  7365  00F8' 0100               	movlb	0	; () banked
  7366  00FA' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  7367  00FC' 0E00               	movlw	0
  7368  00FE' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  7369  0100' 0E00               	movlw	0
  7370  0102' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  7371  0104' 0E00               	movlw	0
  7372  0106' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  7373  0108' EC00' F000'        	call	___lldiv	;wreg free
  7374  010C' C000' F008'        	movff	?___lldiv,btemp+8
  7375  0110' C001' F009'        	movff	?___lldiv+1,btemp+9
  7376  0114' C002' F00A'        	movff	?___lldiv+2,btemp+10
  7377  0118' C003' F00B'        	movff	?___lldiv+3,btemp+11
  7378  011C'                    L4:
  7379                           
  7380                           ;stkvar	_LORAWAN_LinkCheckCallback$1110 @ sp[(-5)+0]
  7381  011C' 0EFB               	movlw	-5
  7382  011E' C008' FFE3         	movff	btemp+8,plusw1
  7383  0122' 0EFC               	movlw	-4
  7384  0124' C009' FFE3         	movff	btemp+9,plusw1
  7385  0128' 0EFD               	movlw	-3
  7386  012A' C00A' FFE3         	movff	btemp+10,plusw1
  7387  012E' 0EFE               	movlw	-2
  7388  0130' C00B' FFE3         	movff	btemp+11,plusw1
  7389                           
  7390                           ;stkvar	_LORAWAN_LinkCheckCallback$1110 @ sp[(-5)+0]
  7391  0134' 50E1               	movf	fsr1l,w,c
  7392  0136' 0FFB               	addlw	-5
  7393  0138' 6ED9               	movwf	fsr2l,c
  7394  013A' 50E2               	movf	fsr1h,w,c
  7395  013C' 6EDA               	movwf	fsr2h,c
  7396  013E' 0EFF               	movlw	255
  7397  0140' 22DA               	addwfc	fsr2h,f,c
  7398  0142' CFDE F00D'         	movff	postinc2,SwTimerSetTimeout@timeout
  7399  0146' CFDE F00E'         	movff	postinc2,SwTimerSetTimeout@timeout+1
  7400  014A' CFDE F00F'         	movff	postinc2,SwTimerSetTimeout@timeout+2
  7401  014E' CFDE F010'         	movff	postinc2,SwTimerSetTimeout@timeout+3
  7402  0152' 0102               	movlb	2	; () banked
  7403  0154' 5100'              	movf	(_loRa+216)& (0+255),w,b
  7404  0156' EC00' F000'        	call	_SwTimerSetTimeout
  7405                           
  7406                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  7407  015A' 0102               	movlb	2	; () banked
  7408  015C' 5100'              	movf	(_loRa+216)& (0+255),w,b
  7409  015E' EC00' F000'        	call	_SwTimerStart
  7410  0162'                    l588:
  7411                           
  7412                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7413  0162' 0EFA               	movlw	250
  7414  0164' 26E1               	addwf	fsr1l,f,c
  7415  0166' 0EFF               	movlw	255
  7416  0168' 22E2               	addwfc	fsr1h,f,c
  7417  016A' 0012               	return		;funcret
  7418  016C'                    __end_of_LORAWAN_LinkCheckCallback:
  7419                           	opt stack 0
  7420                           tosu	equ	0xFFF
  7421                           tosh	equ	0xFFE
  7422                           tosl	equ	0xFFD
  7423                           pclath	equ	0xFFA
  7424                           tblptru	equ	0xFF8
  7425                           tblptrh	equ	0xFF7
  7426                           tblptrl	equ	0xFF6
  7427                           tablat	equ	0xFF5
  7428                           prodh	equ	0xFF4
  7429                           prodl	equ	0xFF3
  7430                           intcon	equ	0xFF2
  7431                           intcon2	equ	0xFF1
  7432                           intcon3	equ	0xFF0
  7433                           postinc0	equ	0xFEE
  7434                           wreg	equ	0xFE8
  7435                           postinc1	equ	0xFE6
  7436                           postdec1	equ	0xFE5
  7437                           plusw1	equ	0xFE3
  7438                           fsr1h	equ	0xFE2
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  7448 ;; Defined at:
  7449 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  param           1  [STACK] unsigned char 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1  [STACK] void 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 3F/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:   14
  7470 ;; This function calls:
  7471 ;;		_ConfigureRadioRx
  7472 ;;		_LORAWAN_EnterContinuousReceive
  7473 ;;		_RADIO_GetStatus
  7474 ;;		_RADIO_ReceiveStart
  7475 ;;		_RADIO_ReceiveStop
  7476 ;;		_RADIO_ReleaseData
  7477 ;;		_ResetParametersForConfirmedTransmission
  7478 ;;		_ResetParametersForUnconfirmedTransmission
  7479 ;;		_RxData
  7480 ;; This function is called by:
  7481 ;;		_SetCallbackSoftwareTimers
  7482 ;;		_SwTimersExecute
  7483 ;; This function uses a reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text38
  7487  0000'                    __ptext38:
  7488                           	opt stack 0
  7489  0000'                    _LORAWAN_ReceiveWindow2Callback:
  7490                           	opt stack 14
  7491                           
  7492                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  7493                           
  7494                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7495                           ;incstack = 0
  7496  0000' 0102               	movlb	2	; () banked
  7497  0002' B100'              	btfsc	(_loRa+3)& (0+255),0,b
  7498  0004' D05D               	goto	l564
  7499                           
  7500                           ; BSR set to: 2
  7501                           ;lorawan.c: 831: {
  7502                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  7503  0006' EC00' F000'        	call	_RADIO_GetStatus	;wreg free
  7504  000A' 6E0B'              	movwf	btemp+11,c
  7505  000C' B20B'              	btfsc	btemp+11,1,c
  7506  000E' D054               	goto	l11122
  7507                           
  7508                           ;lorawan.c: 833: {
  7509                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  7510  0010' 0102               	movlb	2	; () banked
  7511  0012' 5100'              	movf	(_loRa+2)& (0+255),w,b
  7512  0014' 0BF0               	andlw	-16
  7513  0016' 0905               	iorlw	5
  7514  0018' 6F00'              	movwf	(_loRa+2)& (0+255),b
  7515                           
  7516                           ; BSR set to: 2
  7517                           ;lorawan.c: 836: RADIO_ReceiveStop();
  7518  001A' EC00' F000'        	call	_RADIO_ReceiveStop	;wreg free
  7519                           
  7520                           ;lorawan.c: 837: RADIO_ReleaseData();
  7521  001E' EC00' F000'        	call	_RADIO_ReleaseData	;wreg free
  7522                           
  7523                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  7524  0022' C018' F009'        	movff	_loRa+24,ConfigureRadioRx@freq
  7525  0026' C019' F00A'        	movff	_loRa+25,ConfigureRadioRx@freq+1
  7526  002A' C01A' F00B'        	movff	_loRa+26,ConfigureRadioRx@freq+2
  7527  002E' C01B' F00C'        	movff	_loRa+27,ConfigureRadioRx@freq+3
  7528  0032' 0102               	movlb	2	; () banked
  7529  0034' 5100'              	movf	(_loRa+28)& (0+255),w,b
  7530  0036' EC00' F000'        	call	_ConfigureRadioRx
  7531                           
  7532                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  7533  003A' 0102               	movlb	2	; () banked
  7534  003C' 5100'              	movf	(_loRa+18)& (0+255),w,b
  7535  003E' A4D8               	btfss	status,2,c
  7536  0040' D034               	goto	l11118
  7537                           
  7538                           ; BSR set to: 2
  7539                           ;lorawan.c: 842: {
  7540                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  7541  0042' 0E00'              	movlw	low _rxWindowSize
  7542  0044' 2500'              	addwf	(_loRa+28)& (0+255),w,b
  7543  0046' 6EF6               	movwf	tblptrl,c
  7544  0048' 6AF7               	clrf	tblptrh,c
  7545  004A' 0E00'              	movlw	high _rxWindowSize
  7546  004C' 22F7               	addwfc	tblptrh,f,c
  7547  004E'                    	if	1	;There are 3 active tblptr bytes
  7548  004E' 6AF8               	clrf	tblptru,c
  7549  0050' 0E00'              	movlw	low (__mediumconst shr (0+16))
  7550  0052' 22F8               	addwfc	tblptru,f,c
  7551  0054'                    	endif
  7552  0054' 0008               	tblrd		*
  7553  0056' 50F5               	movf	tablat,w,c
  7554  0058' 0100               	movlb	0	; () banked
  7555  005A' 6F00'              	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  7556  005C' 6B00'              	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  7557  005E' EC00' F000'        	call	_RADIO_ReceiveStart	;wreg free
  7558  0062' C051' F001'        	movff	?_RADIO_ReceiveStart,btemp+1
  7559  0066' C052' F002'        	movff	?_RADIO_ReceiveStart+1,btemp+2
  7560  006A' 5001'              	movf	btemp+1,w,c
  7561  006C' 1002'              	iorwf	btemp+2,w,c
  7562  006E' B4D8               	btfsc	status,2,c
  7563  0070' D02F               	goto	l573
  7564                           
  7565                           ;lorawan.c: 844: {
  7566                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  7567  0072' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
  7568                           
  7569                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  7570  0076' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7571                           
  7572                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  7573  007A' 0100               	movlb	0	; () banked
  7574  007C' 5100'              	movf	_rxPayload& (0+255),w,b
  7575  007E' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
  7576  0080' B4D8               	btfsc	status,2,c
  7577  0082' D026               	goto	l573
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;lorawan.c: 848: {
  7581                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  7582  0084' 0E00               	movlw	0
  7583  0086' 6F00'              	movwf	RxData@pData& (0+255),b
  7584  0088' 0E00               	movlw	0
  7585  008A' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
  7586  008C' 0E00               	movlw	0
  7587  008E' 6F00'              	movwf	RxData@dataLength& (0+255),b
  7588  0090' 0E00               	movlw	0
  7589  0092' 6F00'              	movwf	RxData@status& (0+255),b
  7590  0094' D801               	call	u11648
  7591  0096' D01C               	goto	l573
  7592  0098'                    u11648:
  7593  0098' 0005               	push	
  7594  009A' 6EFA               	movwf	pclath,c
  7595  009C' 5100'              	movf	_rxPayload& (0+255),w,b
  7596  009E' 6EFD               	movwf	tosl,c
  7597  00A0' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
  7598  00A2' 6EFE               	movwf	tosh,c
  7599  00A4' 6AFF               	clrf	tosu,c
  7600  00A6' 50FA               	movf	pclath,w,c
  7601  00A8' 0012               	return		;indir
  7602  00AA'                    l11118:
  7603                           
  7604                           ; BSR set to: 2
  7605                           ;lorawan.c: 853: else
  7606                           ;lorawan.c: 854: {
  7607                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  7608  00AA' 5100'              	movf	(_loRa+2)& (0+255),w,b
  7609  00AC' 0BF0               	andlw	-16
  7610  00AE' 0909               	iorlw	9
  7611  00B0' 6F00'              	movwf	(_loRa+2)& (0+255),b
  7612                           
  7613                           ; BSR set to: 2
  7614                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  7615  00B2' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
  7616  00B6' D00C               	goto	l573
  7617  00B8'                    l11122:
  7618                           
  7619                           ;lorawan.c: 859: else
  7620                           ;lorawan.c: 860: {
  7621                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  7622  00B8' 0E01               	movlw	1
  7623  00BA' 0102               	movlb	2	; () banked
  7624  00BC' 6F00'              	movwf	(_loRa+226)& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;lorawan.c: 864: }
  7628                           ;lorawan.c: 865: }
  7629  00BE' D008               	goto	l573
  7630  00C0'                    l564:
  7631                           
  7632                           ; BSR set to: 2
  7633                           ;lorawan.c: 866: else
  7634                           ;lorawan.c: 867: {
  7635                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  7636  00C0' A500'              	btfss	_loRa& (0+255),2,b
  7637  00C2' D002               	goto	l11126
  7638                           
  7639                           ; BSR set to: 2
  7640                           ;lorawan.c: 871: {
  7641                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  7642  00C4' 9500'              	bcf	_loRa& (0+255),2,b
  7643                           
  7644                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  7645  00C6' 9900'              	bcf	(_loRa+2)& (0+255),4,b
  7646  00C8'                    l11126:
  7647                           
  7648                           ; BSR set to: 2
  7649                           ;lorawan.c: 874: }
  7650                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  7651  00C8' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7652                           
  7653                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  7654  00CC' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
  7655  00D0'                    l573:
  7656                           
  7657                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  7658  00D0' 52E5               	movf	postdec1,f,c
  7659  00D2' 0012               	return		;funcret
  7660  00D4'                    __end_of_LORAWAN_ReceiveWindow2Callback:
  7661                           	opt stack 0
  7662                           tosu	equ	0xFFF
  7663                           tosh	equ	0xFFE
  7664                           tosl	equ	0xFFD
  7665                           pclath	equ	0xFFA
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           intcon2	equ	0xFF1
  7674                           intcon3	equ	0xFF0
  7675                           postinc0	equ	0xFEE
  7676                           wreg	equ	0xFE8
  7677                           postinc1	equ	0xFE6
  7678                           postdec1	equ	0xFE5
  7679                           plusw1	equ	0xFE3
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  7690 ;; Defined at:
  7691 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  param           1  [STACK] unsigned char 
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;  freq            4  [STACK] unsigned long 
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1  [STACK] void 
  7698 ;; Registers used:
  7699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 3F/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:   13
  7712 ;; This function calls:
  7713 ;;		_ConfigureRadioRx
  7714 ;;		_GetRx1Freq
  7715 ;;		_RADIO_ReceiveStart
  7716 ;;		_RADIO_ReceiveStop
  7717 ;;		_RADIO_ReleaseData
  7718 ;; This function is called by:
  7719 ;;		_SetCallbackSoftwareTimers
  7720 ;;		_SwTimersExecute
  7721 ;; This function uses a reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text39
  7725  0000'                    __ptext39:
  7726                           	opt stack 0
  7727  0000'                    _LORAWAN_ReceiveWindow1Callback:
  7728                           	opt stack 0
  7729                           
  7730                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7731  0000' 52E6               	movf	postinc1,f,c
  7732  0002' 52E6               	movf	postinc1,f,c
  7733  0004' 52E6               	movf	postinc1,f,c
  7734  0006' 52E6               	movf	postinc1,f,c
  7735                           
  7736                           ;lorawan.c: 798: uint32_t freq;
  7737                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  7738                           
  7739                           ;incstack = 0
  7740  0008' 0102               	movlb	2	; () banked
  7741  000A' B100'              	btfsc	(_loRa+3)& (0+255),0,b
  7742  000C' D050               	goto	l561
  7743                           
  7744                           ; BSR set to: 2
  7745                           ;lorawan.c: 801: {
  7746                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  7747  000E' 0E02               	movlw	2
  7748  0010' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
  7749  0012' B4D8               	btfsc	status,2,c
  7750                           
  7751                           ; BSR set to: 2
  7752                           ;lorawan.c: 803: {
  7753                           ;lorawan.c: 804: RADIO_ReceiveStop();
  7754  0014' EC00' F000'        	call	_RADIO_ReceiveStop	;wreg free
  7755                           
  7756                           ;lorawan.c: 805: }
  7757                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  7758  0018' 0102               	movlb	2	; () banked
  7759  001A' 5100'              	movf	(_loRa+224)& (0+255),w,b
  7760  001C' 5D00'              	subwf	(_loRa+23)& (0+255),w,b
  7761  001E' A0D8               	btfss	status,0,c
  7762  0020' D004               	goto	l559
  7763                           
  7764                           ; BSR set to: 2
  7765                           ;lorawan.c: 807: {
  7766                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  7767  0022' 5100'              	movf	(_loRa+224)& (0+255),w,b
  7768  0024' 5D00'              	subwf	(_loRa+23)& (0+255),w,b
  7769  0026' 6F00'              	movwf	(_loRa+23)& (0+255),b
  7770                           
  7771                           ;lorawan.c: 809: }
  7772  0028' D001               	goto	l11086
  7773  002A'                    l559:
  7774                           
  7775                           ; BSR set to: 2
  7776                           ;lorawan.c: 810: else
  7777                           ;lorawan.c: 811: {
  7778                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  7779  002A' 6B00'              	clrf	(_loRa+23)& (0+255),b
  7780  002C'                    l11086:
  7781                           
  7782                           ; BSR set to: 2
  7783                           ;lorawan.c: 813: }
  7784                           ;lorawan.c: 815: freq = GetRx1Freq();
  7785  002C' EC00' F000'        	call	_GetRx1Freq	;wreg free
  7786  0030' C04F' F008'        	movff	?_GetRx1Freq,btemp+8
  7787  0034' C050' F009'        	movff	?_GetRx1Freq+1,btemp+9
  7788  0038' C051' F00A'        	movff	?_GetRx1Freq+2,btemp+10
  7789  003C' C052' F00B'        	movff	?_GetRx1Freq+3,btemp+11
  7790                           
  7791                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  7792  0040' 0EFC               	movlw	-4
  7793  0042' C008' FFE3         	movff	btemp+8,plusw1
  7794  0046' 0EFD               	movlw	-3
  7795  0048' C009' FFE3         	movff	btemp+9,plusw1
  7796  004C' 0EFE               	movlw	-2
  7797  004E' C00A' FFE3         	movff	btemp+10,plusw1
  7798  0052' 0EFF               	movlw	-1
  7799  0054' C00B' FFE3         	movff	btemp+11,plusw1
  7800                           
  7801                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  7802  0058' 0102               	movlb	2	; () banked
  7803  005A' 5100'              	movf	(_loRa+2)& (0+255),w,b
  7804  005C' 0BF0               	andlw	-16
  7805  005E' 0903               	iorlw	3
  7806  0060' 6F00'              	movwf	(_loRa+2)& (0+255),b
  7807                           
  7808                           ; BSR set to: 2
  7809                           ;lorawan.c: 819: RADIO_ReleaseData();
  7810  0062' EC00' F000'        	call	_RADIO_ReleaseData	;wreg free
  7811                           
  7812                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  7813                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  7814  0066' 50E1               	movf	fsr1l,w,c
  7815  0068' 0FFC               	addlw	-4
  7816  006A' 6ED9               	movwf	fsr2l,c
  7817  006C' 50E2               	movf	fsr1h,w,c
  7818  006E' 6EDA               	movwf	fsr2h,c
  7819  0070' 0EFF               	movlw	255
  7820  0072' 22DA               	addwfc	fsr2h,f,c
  7821  0074' CFDE F009'         	movff	postinc2,ConfigureRadioRx@freq
  7822  0078' CFDE F00A'         	movff	postinc2,ConfigureRadioRx@freq+1
  7823  007C' CFDE F00B'         	movff	postinc2,ConfigureRadioRx@freq+2
  7824  0080' CFDE F00C'         	movff	postinc2,ConfigureRadioRx@freq+3
  7825  0084' 0102               	movlb	2	; () banked
  7826  0086' 5100'              	movf	(_loRa+23)& (0+255),w,b
  7827  0088' EC00' F000'        	call	_ConfigureRadioRx
  7828                           
  7829                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  7830  008C' 0E00'              	movlw	low _rxWindowSize
  7831  008E' 0102               	movlb	2	; () banked
  7832  0090' 2500'              	addwf	(_loRa+23)& (0+255),w,b
  7833  0092' 6EF6               	movwf	tblptrl,c
  7834  0094' 6AF7               	clrf	tblptrh,c
  7835  0096' 0E00'              	movlw	high _rxWindowSize
  7836  0098' 22F7               	addwfc	tblptrh,f,c
  7837  009A'                    	if	1	;There are 3 active tblptr bytes
  7838  009A' 6AF8               	clrf	tblptru,c
  7839  009C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  7840  009E' 22F8               	addwfc	tblptru,f,c
  7841  00A0'                    	endif
  7842  00A0' 0008               	tblrd		*
  7843  00A2' 50F5               	movf	tablat,w,c
  7844  00A4' 0100               	movlb	0	; () banked
  7845  00A6' 6F00'              	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  7846  00A8' 6B00'              	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  7847  00AA' EC00' F000'        	call	_RADIO_ReceiveStart	;wreg free
  7848  00AE'                    l561:
  7849                           
  7850                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  7851  00AE' 0EFB               	movlw	251
  7852  00B0' 26E1               	addwf	fsr1l,f,c
  7853  00B2' 0EFF               	movlw	255
  7854  00B4' 22E2               	addwfc	fsr1h,f,c
  7855  00B6' 0012               	return		;funcret
  7856  00B8'                    __end_of_LORAWAN_ReceiveWindow1Callback:
  7857                           	opt stack 0
  7858                           tosu	equ	0xFFF
  7859                           tosh	equ	0xFFE
  7860                           tosl	equ	0xFFD
  7861                           pclath	equ	0xFFA
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           intcon2	equ	0xFF1
  7870                           intcon3	equ	0xFF0
  7871                           postinc0	equ	0xFEE
  7872                           wreg	equ	0xFE8
  7873                           postinc1	equ	0xFE6
  7874                           postdec1	equ	0xFE5
  7875                           plusw1	equ	0xFE3
  7876                           fsr1h	equ	0xFE2
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _UnconfirmedTransmissionCallback *****************
  7886 ;; Defined at:
  7887 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  param           1  [STACK] unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1  [STACK] void 
  7894 ;; Registers used:
  7895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cst
      +ack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 3F/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:   13
  7908 ;; This function calls:
  7909 ;;		_RADIO_Transmit
  7910 ;;		_ResetParametersForUnconfirmedTransmission
  7911 ;;		_RxData
  7912 ;;		_SelectChannelForTransmission
  7913 ;; This function is called by:
  7914 ;;		_SetCallbackSoftwareTimers
  7915 ;;		_SwTimersExecute
  7916 ;; This function uses a reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text40
  7920  0000'                    __ptext40:
  7921                           	opt stack 0
  7922  0000'                    _UnconfirmedTransmissionCallback:
  7923                           	opt stack 15
  7924                           
  7925                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  7926                           
  7927                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7928                           ;incstack = 0
  7929  0000' 0E01               	movlw	1
  7930  0002' EC00' F000'        	call	_SelectChannelForTransmission
  7931  0006' 0900               	iorlw	0
  7932  0008' A4D8               	btfss	status,2,c
  7933  000A' D018               	goto	l11218
  7934  000C' 0E00'              	movlw	low (_macBuffer+16)
  7935  000E' 0100               	movlb	0	; () banked
  7936  0010' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
  7937  0012' 0E00'              	movlw	high (_macBuffer+16)
  7938  0014' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  7939  0016' C0C5' F053'        	movff	_loRa+197,RADIO_Transmit@bufferLen
  7940  001A' EC00' F000'        	call	_RADIO_Transmit	;wreg free
  7941  001E' C051' F001'        	movff	?_RADIO_Transmit,btemp+1
  7942  0022' C052' F002'        	movff	?_RADIO_Transmit+1,btemp+2
  7943  0026' 5001'              	movf	btemp+1,w,c
  7944  0028' 1002'              	iorwf	btemp+2,w,c
  7945  002A' A4D8               	btfss	status,2,c
  7946  002C' D007               	goto	l11218
  7947                           
  7948                           ;lorawan.c: 1001: {
  7949                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  7950  002E' 0102               	movlb	2	; () banked
  7951  0030' 2B00'              	incf	(_loRa+201)& (0+255),f,b
  7952                           
  7953                           ; BSR set to: 2
  7954                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7955  0032' 5100'              	movf	(_loRa+2)& (0+255),w,b
  7956  0034' 0BF0               	andlw	-16
  7957  0036' 0901               	iorlw	1
  7958  0038' 6F00'              	movwf	(_loRa+2)& (0+255),b
  7959                           
  7960                           ;lorawan.c: 1005: }
  7961  003A' D01A               	goto	u11939
  7962  003C'                    l11218:
  7963                           
  7964                           ;lorawan.c: 1006: else
  7965                           ;lorawan.c: 1008: {
  7966                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  7967  003C' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7968                           
  7969                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  7970  0040' 0100               	movlb	0	; () banked
  7971  0042' 5100'              	movf	_rxPayload& (0+255),w,b
  7972  0044' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
  7973  0046' B4D8               	btfsc	status,2,c
  7974  0048' D013               	goto	u11939
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;lorawan.c: 1011: {
  7978                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7979  004A' 0E00               	movlw	0
  7980  004C' 6F00'              	movwf	RxData@pData& (0+255),b
  7981  004E' 0E00               	movlw	0
  7982  0050' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
  7983  0052' 0E00               	movlw	0
  7984  0054' 6F00'              	movwf	RxData@dataLength& (0+255),b
  7985  0056' 0E00               	movlw	0
  7986  0058' 6F00'              	movwf	RxData@status& (0+255),b
  7987  005A' D801               	call	u11938
  7988  005C' D009               	goto	u11939
  7989  005E'                    u11938:
  7990  005E' 0005               	push	
  7991  0060' 6EFA               	movwf	pclath,c
  7992  0062' 5100'              	movf	_rxPayload& (0+255),w,b
  7993  0064' 6EFD               	movwf	tosl,c
  7994  0066' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
  7995  0068' 6EFE               	movwf	tosh,c
  7996  006A' 6AFF               	clrf	tosu,c
  7997  006C' 50FA               	movf	pclath,w,c
  7998  006E' 0012               	return		;indir
  7999  0070'                    u11939:
  8000                           
  8001                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8002  0070' 52E5               	movf	postdec1,f,c
  8003  0072' 0012               	return		;funcret
  8004  0074'                    __end_of_UnconfirmedTransmissionCallback:
  8005                           	opt stack 0
  8006                           tosu	equ	0xFFF
  8007                           tosh	equ	0xFFE
  8008                           tosl	equ	0xFFD
  8009                           pclath	equ	0xFFA
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           intcon2	equ	0xFF1
  8018                           intcon3	equ	0xFF0
  8019                           postinc0	equ	0xFEE
  8020                           wreg	equ	0xFE8
  8021                           postinc1	equ	0xFE6
  8022                           postdec1	equ	0xFE5
  8023                           plusw1	equ	0xFE3
  8024                           fsr1h	equ	0xFE2
  8025                           fsr1l	equ	0xFE1
  8026                           indf2	equ	0xFDF
  8027                           postinc2	equ	0xFDE
  8028                           postdec2	equ	0xFDD
  8029                           fsr2h	equ	0xFDA
  8030                           fsr2l	equ	0xFD9
  8031                           status	equ	0xFD8
  8032                           
  8033 ;; *************** function _GetRx1Freq *****************
  8034 ;; Defined at:
  8035 ;;		line 682 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;		None
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  channelIndex    1   83[BANK0 ] unsigned char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  4   79[BANK0 ] unsigned long 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;Total ram usage:        5 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    9
  8056 ;; This function calls:
  8057 ;;		_GenerateUSFrequencyReception
  8058 ;; This function is called by:
  8059 ;;		_LORAWAN_ReceiveWindow1Callback
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text41
  8064  0000'                    __ptext41:
  8065                           	opt stack 0
  8066  0000'                    _GetRx1Freq:
  8067                           	opt stack 18
  8068                           
  8069                           ;lorawan_na.c: 684: uint8_t channelIndex;
  8070                           ;lorawan_na.c: 686: channelIndex = loRa.lastUsedChannelIndex % 8;
  8071                           
  8072                           ;incstack = 0
  8073  0000' 0102               	movlb	2	; () banked
  8074  0002' 5100'              	movf	(_loRa+203)& (0+255),w,b
  8075  0004' 0B07               	andlw	7
  8076  0006' 0100               	movlb	0	; () banked
  8077  0008' 6F00'              	movwf	GetRx1Freq@channelIndex& (0+255),b
  8078                           
  8079                           ; BSR set to: 0
  8080                           ;lorawan_na.c: 687: loRa.receiveWindow1Parameters.frequency = GenerateUSFrequencyRecepti
      +                          on (channelIndex);
  8081  000A' 5100'              	movf	GetRx1Freq@channelIndex& (0+255),w,b
  8082  000C' EC00' F000'        	call	_GenerateUSFrequencyReception
  8083  0010' C046' F013'        	movff	?_GenerateUSFrequencyReception,_loRa+19
  8084  0014' C047' F014'        	movff	?_GenerateUSFrequencyReception+1,_loRa+20
  8085  0018' C048' F015'        	movff	?_GenerateUSFrequencyReception+2,_loRa+21
  8086  001C' C049' F016'        	movff	?_GenerateUSFrequencyReception+3,_loRa+22
  8087                           
  8088                           ;lorawan_na.c: 689: return loRa.receiveWindow1Parameters.frequency;
  8089  0020' C013' F04F'        	movff	_loRa+19,?_GetRx1Freq
  8090  0024' C014' F050'        	movff	_loRa+20,?_GetRx1Freq+1
  8091  0028' C015' F051'        	movff	_loRa+21,?_GetRx1Freq+2
  8092  002C' C016' F052'        	movff	_loRa+22,?_GetRx1Freq+3
  8093  0030' 0012               	return	
  8094  0032'                    __end_of_GetRx1Freq:
  8095                           	opt stack 0
  8096                           tosu	equ	0xFFF
  8097                           tosh	equ	0xFFE
  8098                           tosl	equ	0xFFD
  8099                           pclath	equ	0xFFA
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon2	equ	0xFF1
  8108                           intcon3	equ	0xFF0
  8109                           postinc0	equ	0xFEE
  8110                           wreg	equ	0xFE8
  8111                           postinc1	equ	0xFE6
  8112                           postdec1	equ	0xFE5
  8113                           plusw1	equ	0xFE3
  8114                           fsr1h	equ	0xFE2
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _GenerateUSFrequencyReception *****************
  8124 ;; Defined at:
  8125 ;;		line 995 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  channelIndex    1    wreg     unsigned char 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  channelIndex    1   78[BANK0 ] unsigned char 
  8130 ;;  channelFrequ    4   74[BANK0 ] unsigned long 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  4   70[BANK0 ] unsigned long 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:        9 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    8
  8147 ;; This function calls:
  8148 ;;		___lmul
  8149 ;; This function is called by:
  8150 ;;		_GetRx1Freq
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text42
  8155  0000'                    __ptext42:
  8156                           	opt stack 0
  8157  0000'                    _GenerateUSFrequencyReception:
  8158                           	opt stack 18
  8159                           
  8160                           ;incstack = 0
  8161                           ;GenerateUSFrequencyReception@channelIndex stored from wreg
  8162  0000' 0100               	movlb	0	; () banked
  8163  0002' 6F00'              	movwf	GenerateUSFrequencyReception@channelIndex& (0+255),b
  8164                           
  8165                           ;lorawan_na.c: 997: uint32_t channelFrequency;
  8166                           ;lorawan_na.c: 999: channelFrequency = (923300000) + 600000 * channelIndex;
  8167  0004' 0100               	movlb	0	; () banked
  8168  0006' 5100'              	movf	GenerateUSFrequencyReception@channelIndex& (0+255),w,b
  8169  0008' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  8170  000A' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  8171  000C' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  8172  000E' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  8173  0010' 0EC0               	movlw	192
  8174  0012' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  8175  0014' 0E27               	movlw	39
  8176  0016' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  8177  0018' 0E09               	movlw	9
  8178  001A' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  8179  001C' 0E00               	movlw	0
  8180  001E' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  8181  0020' EC00' F000'        	call	___lmul	;wreg free
  8182  0024' 0EA0               	movlw	160
  8183  0026' 0100               	movlb	0	; () banked
  8184  0028' 2500'              	addwf	?___lmul& (0+255),w,b
  8185  002A' 6F00'              	movwf	GenerateUSFrequencyReception@channelFrequency& (0+255),b
  8186  002C' 0E70               	movlw	112
  8187  002E' 2100'              	addwfc	(?___lmul+1)& (0+255),w,b
  8188  0030' 6F00'              	movwf	(GenerateUSFrequencyReception@channelFrequency+1)& (0+255),b
  8189  0032' 0E08               	movlw	8
  8190  0034' 2100'              	addwfc	(?___lmul+2)& (0+255),w,b
  8191  0036' 6F00'              	movwf	(GenerateUSFrequencyReception@channelFrequency+2)& (0+255),b
  8192  0038' 0E37               	movlw	55
  8193  003A' 2100'              	addwfc	(?___lmul+3)& (0+255),w,b
  8194  003C' 6F00'              	movwf	(GenerateUSFrequencyReception@channelFrequency+3)& (0+255),b
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;lorawan_na.c: 1000: return channelFrequency;
  8198  003E' C04A' F046'        	movff	GenerateUSFrequencyReception@channelFrequency,?_GenerateUSFrequencyReception
  8199  0042' C04B' F047'        	movff	GenerateUSFrequencyReception@channelFrequency+1,?_GenerateUSFrequencyReception+1
  8200  0046' C04C' F048'        	movff	GenerateUSFrequencyReception@channelFrequency+2,?_GenerateUSFrequencyReception+2
  8201  004A' C04D' F049'        	movff	GenerateUSFrequencyReception@channelFrequency+3,?_GenerateUSFrequencyReception+3
  8202  004E' 0012               	return	
  8203  0050'                    __end_of_GenerateUSFrequencyReception:
  8204                           	opt stack 0
  8205                           tosu	equ	0xFFF
  8206                           tosh	equ	0xFFE
  8207                           tosl	equ	0xFFD
  8208                           pclath	equ	0xFFA
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           intcon3	equ	0xFF0
  8218                           postinc0	equ	0xFEE
  8219                           wreg	equ	0xFE8
  8220                           postinc1	equ	0xFE6
  8221                           postdec1	equ	0xFE5
  8222                           plusw1	equ	0xFE3
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _RADIO_DIO5 *****************
  8233 ;; Defined at:
  8234 ;;		line 1421 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg, status,2, status,0, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;Total ram usage:        2 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:   11
  8255 ;; This function calls:
  8256 ;;		_RADIO_RegisterRead
  8257 ;;		_RADIO_UnhandledInterrupt
  8258 ;; This function is called by:
  8259 ;;		_LORAWAN_Mainloop
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text43
  8264  0000'                    __ptext43:
  8265                           	opt stack 0
  8266  0000'                    _RADIO_DIO5:
  8267                           	opt stack 18
  8268                           
  8269                           ;radio_driver_SX1276.c: 1424: uint8_t dioMapping;
  8270                           ;radio_driver_SX1276.c: 1425: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;incstack = 0
  8274  0000' 0E41               	movlw	65
  8275  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8276  0006' 0100               	movlb	0	; () banked
  8277  0008' 6F00'              	movwf	??_RADIO_DIO5& (0+255),b
  8278  000A' 3900'              	swapf	??_RADIO_DIO5& (0+255),w,b
  8279  000C' 0B0F               	andlw	15
  8280  000E' 0B03               	andlw	3
  8281  0010' 6F00'              	movwf	RADIO_DIO5@dioMapping& (0+255),b
  8282                           
  8283                           ;radio_driver_SX1276.c: 1427: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8284  0012' 0E01               	movlw	1
  8285  0014' EC00' F000'        	call	_RADIO_RegisterRead
  8286  0018' 0100               	movlb	0	; () banked
  8287  001A' 6F00'              	movwf	??_RADIO_DIO5& (0+255),b
  8288  001C' AF00'              	btfss	??_RADIO_DIO5& (0+255),7,b
  8289  001E' 0012               	return	
  8290                           
  8291                           ;radio_driver_SX1276.c: 1433: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8292                           
  8293                           ; BSR set to: 0
  8294                           
  8295                           ;radio_driver_SX1276.c: 1431: {
  8296                           ;radio_driver_SX1276.c: 1432: default:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;radio_driver_SX1276.c: 1428: {
  8300                           ;radio_driver_SX1276.c: 1430: switch (dioMapping)
  8301  0020' 0E01               	movlw	1
  8302  0022' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  8303                           
  8304                           ;radio_driver_SX1276.c: 1435: }
  8305                           
  8306                           ;radio_driver_SX1276.c: 1434: break;
  8307  0026' 0012               	return	
  8308  0028'                    __end_of_RADIO_DIO5:
  8309                           	opt stack 0
  8310                           tosu	equ	0xFFF
  8311                           tosh	equ	0xFFE
  8312                           tosl	equ	0xFFD
  8313                           pclath	equ	0xFFA
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           intcon3	equ	0xFF0
  8323                           postinc0	equ	0xFEE
  8324                           wreg	equ	0xFE8
  8325                           postinc1	equ	0xFE6
  8326                           postdec1	equ	0xFE5
  8327                           plusw1	equ	0xFE3
  8328                           fsr1h	equ	0xFE2
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           postdec2	equ	0xFDD
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function _RADIO_DIO4 *****************
  8338 ;; Defined at:
  8339 ;;		line 1398 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  dioMapping      1    7[BANK0 ] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		wreg, status,2, status,0, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:        3 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:   11
  8360 ;; This function calls:
  8361 ;;		_RADIO_RegisterRead
  8362 ;;		_RADIO_UnhandledInterrupt
  8363 ;; This function is called by:
  8364 ;;		_LORAWAN_Mainloop
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           	psect	text44
  8369  0000'                    __ptext44:
  8370                           	opt stack 0
  8371  0000'                    _RADIO_DIO4:
  8372                           	opt stack 18
  8373                           
  8374                           ;radio_driver_SX1276.c: 1401: uint8_t dioMapping;
  8375                           ;radio_driver_SX1276.c: 1402: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  8376                           
  8377                           ;incstack = 0
  8378  0000' 0E41               	movlw	65
  8379  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8380  0006' 0100               	movlb	0	; () banked
  8381  0008' 6F00'              	movwf	??_RADIO_DIO4& (0+255),b
  8382  000A' 0E06               	movlw	6
  8383  000C' 6F00'              	movwf	(??_RADIO_DIO4+1)& (0+255),b
  8384  000E'                    u12455:
  8385  000E' 90D8               	bcf	status,0,c
  8386  0010' 3300'              	rrcf	??_RADIO_DIO4& (0+255),f,b
  8387  0012' 2F00'              	decfsz	(??_RADIO_DIO4+1)& (0+255),f,b
  8388  0014' D7FC               	goto	u12455
  8389  0016' 5100'              	movf	??_RADIO_DIO4& (0+255),w,b
  8390  0018' 0B03               	andlw	3
  8391  001A' 6F00'              	movwf	RADIO_DIO4@dioMapping& (0+255),b
  8392                           
  8393                           ;radio_driver_SX1276.c: 1404: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8394  001C' 0E01               	movlw	1
  8395  001E' EC00' F000'        	call	_RADIO_RegisterRead
  8396  0022' 0100               	movlb	0	; () banked
  8397  0024' 6F00'              	movwf	??_RADIO_DIO4& (0+255),b
  8398  0026' AF00'              	btfss	??_RADIO_DIO4& (0+255),7,b
  8399  0028' 0012               	return	
  8400                           
  8401                           ;radio_driver_SX1276.c: 1410: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8402                           
  8403                           ; BSR set to: 0
  8404                           
  8405                           ;radio_driver_SX1276.c: 1408: {
  8406                           ;radio_driver_SX1276.c: 1409: default:
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;radio_driver_SX1276.c: 1405: {
  8410                           ;radio_driver_SX1276.c: 1407: switch (dioMapping)
  8411  002A' 0E01               	movlw	1
  8412  002C' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  8413                           
  8414                           ;radio_driver_SX1276.c: 1412: }
  8415                           
  8416                           ;radio_driver_SX1276.c: 1411: break;
  8417  0030' 0012               	return	
  8418  0032'                    __end_of_RADIO_DIO4:
  8419                           	opt stack 0
  8420                           tosu	equ	0xFFF
  8421                           tosh	equ	0xFFE
  8422                           tosl	equ	0xFFD
  8423                           pclath	equ	0xFFA
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           intcon3	equ	0xFF0
  8433                           postinc0	equ	0xFEE
  8434                           wreg	equ	0xFE8
  8435                           postinc1	equ	0xFE6
  8436                           postdec1	equ	0xFE5
  8437                           plusw1	equ	0xFE3
  8438                           fsr1h	equ	0xFE2
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           postdec2	equ	0xFDD
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _RADIO_DIO3 *****************
  8448 ;; Defined at:
  8449 ;;		line 1375 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        2 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:   11
  8470 ;; This function calls:
  8471 ;;		_RADIO_RegisterRead
  8472 ;;		_RADIO_UnhandledInterrupt
  8473 ;; This function is called by:
  8474 ;;		_LORAWAN_Mainloop
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text45
  8479  0000'                    __ptext45:
  8480                           	opt stack 0
  8481  0000'                    _RADIO_DIO3:
  8482                           	opt stack 18
  8483                           
  8484                           ;radio_driver_SX1276.c: 1378: uint8_t dioMapping;
  8485                           ;radio_driver_SX1276.c: 1379: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  8486                           
  8487                           ;incstack = 0
  8488  0000' 0E40               	movlw	64
  8489  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8490  0006' 0B03               	andlw	3
  8491  0008' 0100               	movlb	0	; () banked
  8492  000A' 6F00'              	movwf	RADIO_DIO3@dioMapping& (0+255),b
  8493                           
  8494                           ;radio_driver_SX1276.c: 1381: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8495  000C' 0E01               	movlw	1
  8496  000E' EC00' F000'        	call	_RADIO_RegisterRead
  8497  0012' 0100               	movlb	0	; () banked
  8498  0014' 6F00'              	movwf	??_RADIO_DIO3& (0+255),b
  8499  0016' AF00'              	btfss	??_RADIO_DIO3& (0+255),7,b
  8500  0018' 0012               	return	
  8501                           
  8502                           ;radio_driver_SX1276.c: 1387: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8503                           
  8504                           ; BSR set to: 0
  8505                           
  8506                           ;radio_driver_SX1276.c: 1385: {
  8507                           ;radio_driver_SX1276.c: 1386: default:
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;radio_driver_SX1276.c: 1382: {
  8511                           ;radio_driver_SX1276.c: 1384: switch (dioMapping)
  8512  001A' 0E01               	movlw	1
  8513  001C' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  8514                           
  8515                           ;radio_driver_SX1276.c: 1389: }
  8516                           
  8517                           ;radio_driver_SX1276.c: 1388: break;
  8518  0020' 0012               	return	
  8519  0022'                    __end_of_RADIO_DIO3:
  8520                           	opt stack 0
  8521                           tosu	equ	0xFFF
  8522                           tosh	equ	0xFFE
  8523                           tosl	equ	0xFFD
  8524                           pclath	equ	0xFFA
  8525                           tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           intcon	equ	0xFF2
  8532                           intcon2	equ	0xFF1
  8533                           intcon3	equ	0xFF0
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           postinc1	equ	0xFE6
  8537                           postdec1	equ	0xFE5
  8538                           plusw1	equ	0xFE3
  8539                           fsr1h	equ	0xFE2
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function _RADIO_DIO2 *****************
  8549 ;; Defined at:
  8550 ;;		line 1345 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  dioMapping      1   37[BANK0 ] unsigned char 
  8555 ;;  opMode          1   36[BANK0 ] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      void 
  8558 ;; Registers used:
  8559 ;;		wreg, status,2, status,0, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;Total ram usage:        3 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:   12
  8572 ;; This function calls:
  8573 ;;		_RADIO_FHSSChangeChannel
  8574 ;;		_RADIO_RegisterRead
  8575 ;;		_RADIO_UnhandledInterrupt
  8576 ;; This function is called by:
  8577 ;;		_LORAWAN_Mainloop
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text46
  8582  0000'                    __ptext46:
  8583                           	opt stack 0
  8584  0000'                    _RADIO_DIO2:
  8585                           	opt stack 17
  8586                           
  8587                           ;radio_driver_SX1276.c: 1348: uint8_t dioMapping;
  8588                           ;radio_driver_SX1276.c: 1349: uint8_t opMode;
  8589                           ;radio_driver_SX1276.c: 1350: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  8590                           
  8591                           ;incstack = 0
  8592  0000' 0E40               	movlw	64
  8593  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8594  0006' 0100               	movlb	0	; () banked
  8595  0008' 6F00'              	movwf	??_RADIO_DIO2& (0+255),b
  8596  000A' 90D8               	bcf	status,0,c
  8597  000C' 3300'              	rrcf	??_RADIO_DIO2& (0+255),f,b
  8598  000E' 90D8               	bcf	status,0,c
  8599  0010' 3100'              	rrcf	??_RADIO_DIO2& (0+255),w,b
  8600  0012' 0B03               	andlw	3
  8601  0014' 6F00'              	movwf	RADIO_DIO2@dioMapping& (0+255),b
  8602                           
  8603                           ;radio_driver_SX1276.c: 1351: opMode = RADIO_RegisterRead(0x01);
  8604  0016' 0E01               	movlw	1
  8605  0018' EC00' F000'        	call	_RADIO_RegisterRead
  8606  001C' 0100               	movlb	0	; () banked
  8607  001E' 6F00'              	movwf	RADIO_DIO2@opMode& (0+255),b
  8608                           
  8609                           ;radio_driver_SX1276.c: 1353: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8610  0020' 0E01               	movlw	1
  8611  0022' EC00' F000'        	call	_RADIO_RegisterRead
  8612  0026' 0100               	movlb	0	; () banked
  8613  0028' 6F00'              	movwf	??_RADIO_DIO2& (0+255),b
  8614  002A' AF00'              	btfss	??_RADIO_DIO2& (0+255),7,b
  8615  002C' 0012               	return	
  8616  002E' D007               	goto	l2031
  8617  0030'                    
  8618                           ; BSR set to: 0
  8619                           ;radio_driver_SX1276.c: 1360: case 0x01:
  8620                           ;radio_driver_SX1276.c: 1361: case 0x02:
  8621                           ;radio_driver_SX1276.c: 1362: RADIO_FHSSChangeChannel();
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626                           
  8627                           ; BSR set to: 0
  8628  0030' EC00' F000'        	call	_RADIO_FHSSChangeChannel	;wreg free
  8629                           
  8630                           ;radio_driver_SX1276.c: 1363: break;
  8631  0034' 0012               	return	
  8632  0036'                    
  8633                           ;radio_driver_SX1276.c: 1365: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8634  0036' 0E01               	movlw	1
  8635  0038' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  8636                           
  8637                           ;radio_driver_SX1276.c: 1367: }
  8638                           
  8639                           ;radio_driver_SX1276.c: 1366: break;
  8640  003C' 0012               	return	
  8641  003E'                    l2031:
  8642  003E' 0100               	movlb	0	; () banked
  8643  0040' 5100'              	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  8644                           
  8645                           ; Switch size 1, requested type "space"
  8646                           ; Number of cases is 3, Range of values is 0 to 2
  8647                           ; switch strategies available:
  8648                           ; Name         Instructions Cycles
  8649                           ; simple_byte           10     6 (average)
  8650                           ;	Chosen strategy is simple_byte
  8651  0042' 0A00               	xorlw	0	; case 0
  8652  0044' B4D8               	btfsc	status,2,c
  8653  0046' D7F4               	goto	l2032
  8654  0048' 0A01               	xorlw	1	; case 1
  8655  004A' B4D8               	btfsc	status,2,c
  8656  004C' D7F1               	goto	l2032
  8657  004E' 0A03               	xorlw	3	; case 2
  8658  0050' B4D8               	btfsc	status,2,c
  8659  0052' D7EE               	goto	l2032
  8660  0054' D7F0               	goto	l2036
  8661  0056'                    __end_of_RADIO_DIO2:
  8662                           	opt stack 0
  8663                           tosu	equ	0xFFF
  8664                           tosh	equ	0xFFE
  8665                           tosl	equ	0xFFD
  8666                           pclath	equ	0xFFA
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           intcon3	equ	0xFF0
  8676                           postinc0	equ	0xFEE
  8677                           wreg	equ	0xFE8
  8678                           postinc1	equ	0xFE6
  8679                           postdec1	equ	0xFE5
  8680                           plusw1	equ	0xFE3
  8681                           fsr1h	equ	0xFE2
  8682                           fsr1l	equ	0xFE1
  8683                           indf2	equ	0xFDF
  8684                           postinc2	equ	0xFDE
  8685                           postdec2	equ	0xFDD
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function _RADIO_DIO1 *****************
  8691 ;; Defined at:
  8692 ;;		line 1308 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  dioMapping      1  107[BANK0 ] unsigned char 
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      void 
  8699 ;; Registers used:
  8700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;Total ram usage:        2 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:   16
  8713 ;; This function calls:
  8714 ;;		_RADIO_FHSSChangeChannel
  8715 ;;		_RADIO_RegisterRead
  8716 ;;		_RADIO_RxTimeout
  8717 ;;		_RADIO_UnhandledInterrupt
  8718 ;; This function is called by:
  8719 ;;		_LORAWAN_Mainloop
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text47
  8724  0000'                    __ptext47:
  8725                           	opt stack 0
  8726  0000'                    _RADIO_DIO1:
  8727                           	opt stack 13
  8728                           
  8729                           ;radio_driver_SX1276.c: 1311: uint8_t dioMapping;
  8730                           ;radio_driver_SX1276.c: 1312: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  8731                           
  8732                           ;incstack = 0
  8733  0000' 0E40               	movlw	64
  8734  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8735  0006' 0100               	movlb	0	; () banked
  8736  0008' 6F00'              	movwf	??_RADIO_DIO1& (0+255),b
  8737  000A' 3900'              	swapf	??_RADIO_DIO1& (0+255),w,b
  8738  000C' 0B0F               	andlw	15
  8739  000E' 0B03               	andlw	3
  8740  0010' 6F00'              	movwf	RADIO_DIO1@dioMapping& (0+255),b
  8741                           
  8742                           ;radio_driver_SX1276.c: 1314: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8743  0012' 0E01               	movlw	1
  8744  0014' EC00' F000'        	call	_RADIO_RegisterRead
  8745  0018' 0100               	movlb	0	; () banked
  8746  001A' 6F00'              	movwf	??_RADIO_DIO1& (0+255),b
  8747  001C' BF00'              	btfsc	??_RADIO_DIO1& (0+255),7,b
  8748  001E' D00B               	goto	l2017
  8749  0020' D013               	goto	l2023
  8750  0022'                    
  8751                           ; BSR set to: 0
  8752                           ;radio_driver_SX1276.c: 1320: RADIO_RxTimeout();
  8753                           
  8754                           ; BSR set to: 0
  8755  0022' EC00' F000'        	call	_RADIO_RxTimeout	;wreg free
  8756                           
  8757                           ;radio_driver_SX1276.c: 1321: break;
  8758  0026' 0012               	return	
  8759  0028'                    
  8760                           ;radio_driver_SX1276.c: 1323: RADIO_FHSSChangeChannel();
  8761  0028' EC00' F000'        	call	_RADIO_FHSSChangeChannel	;wreg free
  8762                           
  8763                           ;radio_driver_SX1276.c: 1324: break;
  8764  002C' 0012               	return	
  8765  002E'                    
  8766                           ;radio_driver_SX1276.c: 1326: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8767  002E' 0E01               	movlw	1
  8768  0030' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  8769                           
  8770                           ;radio_driver_SX1276.c: 1328: }
  8771                           
  8772                           ;radio_driver_SX1276.c: 1327: break;
  8773  0034' 0012               	return	
  8774  0036'                    l2017:
  8775  0036' 0100               	movlb	0	; () banked
  8776  0038' 5100'              	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8777                           
  8778                           ; Switch size 1, requested type "space"
  8779                           ; Number of cases is 2, Range of values is 0 to 1
  8780                           ; switch strategies available:
  8781                           ; Name         Instructions Cycles
  8782                           ; simple_byte            7     4 (average)
  8783                           ;	Chosen strategy is simple_byte
  8784  003A' 0A00               	xorlw	0	; case 0
  8785  003C' B4D8               	btfsc	status,2,c
  8786  003E' D7F1               	goto	l2018
  8787  0040' 0A01               	xorlw	1	; case 1
  8788  0042' B4D8               	btfsc	status,2,c
  8789  0044' D7F1               	goto	l2020
  8790  0046' D7F3               	goto	l2021
  8791  0048'                    l2023:
  8792                           
  8793                           ; BSR set to: 0
  8794                           
  8795                           ; BSR set to: 0
  8796  0048' 5100'              	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8797                           
  8798                           ; Switch size 1, requested type "space"
  8799                           ; Number of cases is 1, Range of values is 0 to 0
  8800                           ; switch strategies available:
  8801                           ; Name         Instructions Cycles
  8802                           ; simple_byte            4     3 (average)
  8803                           ;	Chosen strategy is simple_byte
  8804  004A' 0A00               	xorlw	0	; case 0
  8805                           
  8806                           ; BSR set to: 0
  8807  004C' 0012               	return	
  8808  004E'                    __end_of_RADIO_DIO1:
  8809                           	opt stack 0
  8810                           tosu	equ	0xFFF
  8811                           tosh	equ	0xFFE
  8812                           tosl	equ	0xFFD
  8813                           pclath	equ	0xFFA
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon	equ	0xFF2
  8821                           intcon2	equ	0xFF1
  8822                           intcon3	equ	0xFF0
  8823                           postinc0	equ	0xFEE
  8824                           wreg	equ	0xFE8
  8825                           postinc1	equ	0xFE6
  8826                           postdec1	equ	0xFE5
  8827                           plusw1	equ	0xFE3
  8828                           fsr1h	equ	0xFE2
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function _RADIO_RxTimeout *****************
  8838 ;; Defined at:
  8839 ;;		line 1131 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      void 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;Total ram usage:        0 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:   15
  8860 ;; This function calls:
  8861 ;;		_LORAWAN_RxTimeout
  8862 ;;		_RADIO_RegisterWrite
  8863 ;;		_RADIO_WriteMode
  8864 ;;		_SwTimerStop
  8865 ;; This function is called by:
  8866 ;;		_RADIO_DIO1
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text48
  8871  0000'                    __ptext48:
  8872                           	opt stack 0
  8873  0000'                    _RADIO_RxTimeout:
  8874                           	opt stack 13
  8875                           
  8876                           ;radio_driver_SX1276.c: 1134: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8877                           
  8878                           ;incstack = 0
  8879  0000' 0101               	movlb	1	; () banked
  8880  0002' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
  8881  0004' EC00' F000'        	call	_SwTimerStop
  8882                           
  8883                           ;radio_driver_SX1276.c: 1137: do { LATB3 = 0; } while(0);
  8884  0008' 968A               	bcf	3978,3,c	;volatile
  8885                           
  8886                           ;radio_driver_SX1276.c: 1139: RADIO_RegisterWrite(0x12, 1<<(7));
  8887  000A' 0E80               	movlw	128
  8888  000C' 0100               	movlb	0	; () banked
  8889  000E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  8890  0010' 0E12               	movlw	18
  8891  0012' EC00' F000'        	call	_RADIO_RegisterWrite
  8892                           
  8893                           ;radio_driver_SX1276.c: 1141: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8894  0016' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8895  001A' 0E00               	movlw	0
  8896  001C' 0100               	movlb	0	; () banked
  8897  001E' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  8898  0020' 0E00               	movlw	0
  8899  0022' EC00' F000'        	call	_RADIO_WriteMode
  8900                           
  8901                           ;radio_driver_SX1276.c: 1142: RadioConfiguration.flags &= ~(1 << (1));
  8902  0026' 0101               	movlb	1	; () banked
  8903  0028' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8904                           
  8905                           ; BSR set to: 1
  8906                           ;radio_driver_SX1276.c: 1144: LORAWAN_RxTimeout ();
  8907  002A' EC00' F000'        	call	_LORAWAN_RxTimeout	;wreg free
  8908  002E' 0012               	return		;funcret
  8909  0030'                    __end_of_RADIO_RxTimeout:
  8910                           	opt stack 0
  8911                           tosu	equ	0xFFF
  8912                           tosh	equ	0xFFE
  8913                           tosl	equ	0xFFD
  8914                           pclath	equ	0xFFA
  8915                           tblptru	equ	0xFF8
  8916                           tblptrh	equ	0xFF7
  8917                           tblptrl	equ	0xFF6
  8918                           tablat	equ	0xFF5
  8919                           prodh	equ	0xFF4
  8920                           prodl	equ	0xFF3
  8921                           intcon	equ	0xFF2
  8922                           intcon2	equ	0xFF1
  8923                           intcon3	equ	0xFF0
  8924                           postinc0	equ	0xFEE
  8925                           wreg	equ	0xFE8
  8926                           postinc1	equ	0xFE6
  8927                           postdec1	equ	0xFE5
  8928                           plusw1	equ	0xFE3
  8929                           fsr1h	equ	0xFE2
  8930                           fsr1l	equ	0xFE1
  8931                           indf2	equ	0xFDF
  8932                           postinc2	equ	0xFDE
  8933                           postdec2	equ	0xFDD
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function _RADIO_FHSSChangeChannel *****************
  8939 ;; Defined at:
  8940 ;;		line 1235 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;		None
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  irqFlags        1   34[BANK0 ] unsigned char 
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      void 
  8947 ;; Registers used:
  8948 ;;		wreg, status,2, status,0, cstack
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;Total ram usage:        1 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:   11
  8961 ;; This function calls:
  8962 ;;		_RADIO_RegisterRead
  8963 ;;		_RADIO_RegisterWrite
  8964 ;;		_RADIO_WriteFrequency
  8965 ;; This function is called by:
  8966 ;;		_RADIO_DIO1
  8967 ;;		_RADIO_DIO2
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text49
  8972  0000'                    __ptext49:
  8973                           	opt stack 0
  8974  0000'                    _RADIO_FHSSChangeChannel:
  8975                           	opt stack 17
  8976                           
  8977                           ;radio_driver_SX1276.c: 1237: uint8_t irqFlags;
  8978                           ;radio_driver_SX1276.c: 1238: irqFlags = RADIO_RegisterRead(0x12);
  8979                           
  8980                           ;incstack = 0
  8981  0000' 0E12               	movlw	18
  8982  0002' EC00' F000'        	call	_RADIO_RegisterRead
  8983  0006' 0100               	movlb	0	; () banked
  8984  0008' 6F00'              	movwf	RADIO_FHSSChangeChannel@irqFlags& (0+255),b
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;radio_driver_SX1276.c: 1240: if ((0) != RadioConfiguration.frequencyHopPeriod)
  8988  000A' 0101               	movlb	1	; () banked
  8989  000C' 5100'              	movf	(_RadioConfiguration+30)& (0+255),w,b
  8990  000E' 1100'              	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  8991  0010' B4D8               	btfsc	status,2,c
  8992  0012' D00F               	goto	l1994
  8993                           
  8994                           ; BSR set to: 1
  8995                           ;radio_driver_SX1276.c: 1241: {
  8996                           ;radio_driver_SX1276.c: 1242: if ((0) != RadioConfiguration.fhssNextFrequency)
  8997  0014' 5100'              	movf	(_RadioConfiguration+47)& (0+255),w,b
  8998  0016' 1100'              	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  8999  0018' B4D8               	btfsc	status,2,c
  9000  001A' D00B               	goto	l1994
  9001                           
  9002                           ; BSR set to: 1
  9003                           ;radio_driver_SX1276.c: 1243: {
  9004                           ;radio_driver_SX1276.c: 1244: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9005  001C' 0E00               	movlw	0
  9006  001E' 0100               	movlb	0	; () banked
  9007  0020' 6F00'              	movwf	RADIO_WriteFrequency@frequency& (0+255),b
  9008  0022' 0E00               	movlw	0
  9009  0024' 6F00'              	movwf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9010  0026' 0E00               	movlw	0
  9011  0028' 6F00'              	movwf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9012  002A' 0E00               	movlw	0
  9013  002C' 6F00'              	movwf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9014  002E' EC00' F000'        	call	_RADIO_WriteFrequency	;wreg free
  9015  0032'                    l1994:
  9016                           
  9017                           ;radio_driver_SX1276.c: 1245: }
  9018                           ;radio_driver_SX1276.c: 1246: }
  9019                           ;radio_driver_SX1276.c: 1249: RADIO_RegisterWrite(0x12, 1<<(1));
  9020  0032' 0E02               	movlw	2
  9021  0034' 0100               	movlb	0	; () banked
  9022  0036' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9023  0038' 0E12               	movlw	18
  9024  003A' EC00' F000'        	call	_RADIO_RegisterWrite
  9025  003E' 0012               	return		;funcret
  9026  0040'                    __end_of_RADIO_FHSSChangeChannel:
  9027                           	opt stack 0
  9028                           tosu	equ	0xFFF
  9029                           tosh	equ	0xFFE
  9030                           tosl	equ	0xFFD
  9031                           pclath	equ	0xFFA
  9032                           tblptru	equ	0xFF8
  9033                           tblptrh	equ	0xFF7
  9034                           tblptrl	equ	0xFF6
  9035                           tablat	equ	0xFF5
  9036                           prodh	equ	0xFF4
  9037                           prodl	equ	0xFF3
  9038                           intcon	equ	0xFF2
  9039                           intcon2	equ	0xFF1
  9040                           intcon3	equ	0xFF0
  9041                           postinc0	equ	0xFEE
  9042                           wreg	equ	0xFE8
  9043                           postinc1	equ	0xFE6
  9044                           postdec1	equ	0xFE5
  9045                           plusw1	equ	0xFE3
  9046                           fsr1h	equ	0xFE2
  9047                           fsr1l	equ	0xFE1
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           fsr2h	equ	0xFDA
  9052                           fsr2l	equ	0xFD9
  9053                           status	equ	0xFD8
  9054                           
  9055 ;; *************** function _RADIO_DIO0 *****************
  9056 ;; Defined at:
  9057 ;;		line 1253 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;		None
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;  opMode          1  152[BANK0 ] unsigned char 
  9062 ;;  dioMapping      1  151[BANK0 ] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  1    wreg      void 
  9065 ;; Registers used:
  9066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;Total ram usage:        4 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:   17
  9079 ;; This function calls:
  9080 ;;		_RADIO_FSKPacketSent
  9081 ;;		_RADIO_FSKPayloadReady
  9082 ;;		_RADIO_RegisterRead
  9083 ;;		_RADIO_RxDone
  9084 ;;		_RADIO_TxDone
  9085 ;;		_RADIO_UnhandledInterrupt
  9086 ;; This function is called by:
  9087 ;;		_LORAWAN_Mainloop
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           	psect	text50
  9092  0000'                    __ptext50:
  9093                           	opt stack 0
  9094  0000'                    _RADIO_DIO0:
  9095                           	opt stack 12
  9096                           
  9097                           ;radio_driver_SX1276.c: 1256: uint8_t dioMapping;
  9098                           ;radio_driver_SX1276.c: 1257: uint8_t opMode;
  9099                           ;radio_driver_SX1276.c: 1258: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9100                           
  9101                           ;incstack = 0
  9102  0000' 0E40               	movlw	64
  9103  0002' EC00' F000'        	call	_RADIO_RegisterRead
  9104  0006' 0100               	movlb	0	; () banked
  9105  0008' 6F00'              	movwf	??_RADIO_DIO0& (0+255),b
  9106  000A' 0E06               	movlw	6
  9107  000C' 6F00'              	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9108  000E'                    u12385:
  9109  000E' 90D8               	bcf	status,0,c
  9110  0010' 3300'              	rrcf	??_RADIO_DIO0& (0+255),f,b
  9111  0012' 2F00'              	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9112  0014' D7FC               	goto	u12385
  9113  0016' 5100'              	movf	??_RADIO_DIO0& (0+255),w,b
  9114  0018' 0B03               	andlw	3
  9115  001A' 6F00'              	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9116                           
  9117                           ;radio_driver_SX1276.c: 1259: opMode = RADIO_RegisterRead(0x01);
  9118  001C' 0E01               	movlw	1
  9119  001E' EC00' F000'        	call	_RADIO_RegisterRead
  9120  0022' 0100               	movlb	0	; () banked
  9121  0024' 6F00'              	movwf	RADIO_DIO0@opMode& (0+255),b
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;radio_driver_SX1276.c: 1261: if ((opMode & 0x80) != 0)
  9125  0026' BF00'              	btfsc	RADIO_DIO0@opMode& (0+255),7,b
  9126  0028' D00B               	goto	l1999
  9127  002A' D02C               	goto	l2005
  9128  002C'                    
  9129                           ; BSR set to: 0
  9130                           ;radio_driver_SX1276.c: 1267: RADIO_RxDone();
  9131                           
  9132                           ; BSR set to: 0
  9133  002C' EC00' F000'        	call	_RADIO_RxDone	;wreg free
  9134                           
  9135                           ;radio_driver_SX1276.c: 1268: break;
  9136  0030' 0012               	return	
  9137  0032'                    
  9138                           ;radio_driver_SX1276.c: 1270: RADIO_TxDone();
  9139  0032' EC00' F000'        	call	_RADIO_TxDone	;wreg free
  9140                           
  9141                           ;radio_driver_SX1276.c: 1271: break;
  9142  0036' 0012               	return	
  9143  0038'                    
  9144                           ;radio_driver_SX1276.c: 1273: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9145  0038' 0E01               	movlw	1
  9146  003A' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  9147                           
  9148                           ;radio_driver_SX1276.c: 1275: }
  9149                           
  9150                           ;radio_driver_SX1276.c: 1274: break;
  9151  003E' 0012               	return	
  9152  0040'                    l1999:
  9153  0040' 0100               	movlb	0	; () banked
  9154  0042' 5100'              	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9155                           
  9156                           ; Switch size 1, requested type "space"
  9157                           ; Number of cases is 2, Range of values is 0 to 1
  9158                           ; switch strategies available:
  9159                           ; Name         Instructions Cycles
  9160                           ; simple_byte            7     4 (average)
  9161                           ;	Chosen strategy is simple_byte
  9162  0044' 0A00               	xorlw	0	; case 0
  9163  0046' B4D8               	btfsc	status,2,c
  9164  0048' D7F1               	goto	l2000
  9165  004A' 0A01               	xorlw	1	; case 1
  9166  004C' B4D8               	btfsc	status,2,c
  9167  004E' D7F1               	goto	l2002
  9168  0050' D7F3               	goto	l2003
  9169  0052'                    
  9170                           ; BSR set to: 0
  9171                           ;radio_driver_SX1276.c: 1284: opMode &= 0x07;
  9172                           
  9173                           ; BSR set to: 0
  9174  0052' 0E07               	movlw	7
  9175  0054' 1700'              	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9176                           
  9177                           ;radio_driver_SX1276.c: 1285: if (MODE_TX == opMode)
  9178  0056' 0E03               	movlw	3
  9179  0058' 1900'              	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9180  005A' A4D8               	btfss	status,2,c
  9181  005C' D003               	goto	l2007
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;radio_driver_SX1276.c: 1286: {
  9185                           ;radio_driver_SX1276.c: 1288: RADIO_FSKPacketSent();
  9186  005E' EC00' F000'        	call	_RADIO_FSKPacketSent	;wreg free
  9187                           
  9188                           ;radio_driver_SX1276.c: 1289: }
  9189  0062' 0012               	return	
  9190  0064'                    l2007:
  9191                           
  9192                           ;radio_driver_SX1276.c: 1290: else if (MODE_RXCONT == opMode)
  9193  0064' 0E05               	movlw	5
  9194  0066' 0100               	movlb	0	; () banked
  9195  0068' 1900'              	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9196  006A' A4D8               	btfss	status,2,c
  9197  006C' D003               	goto	l2009
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;radio_driver_SX1276.c: 1291: {
  9201                           ;radio_driver_SX1276.c: 1293: RADIO_FSKPayloadReady();
  9202  006E' EC00' F000'        	call	_RADIO_FSKPayloadReady	;wreg free
  9203                           
  9204                           ;radio_driver_SX1276.c: 1294: }
  9205  0072' 0012               	return	
  9206  0074'                    l2009:
  9207                           
  9208                           ;radio_driver_SX1276.c: 1295: else
  9209                           ;radio_driver_SX1276.c: 1296: {
  9210                           ;radio_driver_SX1276.c: 1297: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9211  0074' 0E00               	movlw	0
  9212  0076' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  9213                           
  9214                           ;radio_driver_SX1276.c: 1298: }
  9215                           ;radio_driver_SX1276.c: 1299: break;
  9216  007A' 0012               	return	
  9217  007C'                    
  9218                           ;radio_driver_SX1276.c: 1301: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9219  007C' 0E00               	movlw	0
  9220  007E' EC00' F000'        	call	_RADIO_UnhandledInterrupt
  9221                           
  9222                           ;radio_driver_SX1276.c: 1303: }
  9223                           
  9224                           ;radio_driver_SX1276.c: 1302: break;
  9225  0082' 0012               	return	
  9226  0084'                    l2005:
  9227  0084' 0100               	movlb	0	; () banked
  9228  0086' 5100'              	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9229                           
  9230                           ; Switch size 1, requested type "space"
  9231                           ; Number of cases is 1, Range of values is 0 to 0
  9232                           ; switch strategies available:
  9233                           ; Name         Instructions Cycles
  9234                           ; simple_byte            4     3 (average)
  9235                           ;	Chosen strategy is simple_byte
  9236  0088' 0A00               	xorlw	0	; case 0
  9237  008A' B4D8               	btfsc	status,2,c
  9238  008C' D7E2               	goto	l2006
  9239  008E' D7F6               	goto	l2012
  9240  0090'                    __end_of_RADIO_DIO0:
  9241                           	opt stack 0
  9242                           tosu	equ	0xFFF
  9243                           tosh	equ	0xFFE
  9244                           tosl	equ	0xFFD
  9245                           pclath	equ	0xFFA
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           intcon	equ	0xFF2
  9253                           intcon2	equ	0xFF1
  9254                           intcon3	equ	0xFF0
  9255                           postinc0	equ	0xFEE
  9256                           wreg	equ	0xFE8
  9257                           postinc1	equ	0xFE6
  9258                           postdec1	equ	0xFE5
  9259                           plusw1	equ	0xFE3
  9260                           fsr1h	equ	0xFE2
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           fsr2h	equ	0xFDA
  9266                           fsr2l	equ	0xFD9
  9267                           status	equ	0xFD8
  9268                           
  9269 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9270 ;; Defined at:
  9271 ;;		line 1216 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  modulation      1    wreg     enum E6984
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  modulation      1    4[BANK0 ] enum E6984
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  1    wreg      void 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;Total ram usage:        1 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:   10
  9292 ;; This function calls:
  9293 ;;		_RADIO_RegisterWrite
  9294 ;; This function is called by:
  9295 ;;		_RADIO_DIO0
  9296 ;;		_RADIO_DIO1
  9297 ;;		_RADIO_DIO2
  9298 ;;		_RADIO_DIO3
  9299 ;;		_RADIO_DIO4
  9300 ;;		_RADIO_DIO5
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           	psect	text51
  9305  0000'                    __ptext51:
  9306                           	opt stack 0
  9307  0000'                    _RADIO_UnhandledInterrupt:
  9308                           	opt stack 18
  9309                           
  9310                           ;incstack = 0
  9311                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  9312  0000' 0100               	movlb	0	; () banked
  9313  0002' 6F00'              	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  9314                           
  9315                           ;radio_driver_SX1276.c: 1221: if (MODULATION_LORA == modulation)
  9316  0004' 0100               	movlb	0	; () banked
  9317  0006' 0500'              	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  9318  0008' A4D8               	btfss	status,2,c
  9319  000A' D006               	goto	l1988
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;radio_driver_SX1276.c: 1222: {
  9323                           ;radio_driver_SX1276.c: 1223: RADIO_RegisterWrite(0x12, 0xFF);
  9324  000C' 0EFF               	movlw	255
  9325  000E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9326  0010' 0E12               	movlw	18
  9327  0012' EC00' F000'        	call	_RADIO_RegisterWrite
  9328                           
  9329                           ;radio_driver_SX1276.c: 1224: }
  9330  0016' 0012               	return	
  9331  0018'                    l1988:
  9332                           
  9333                           ;radio_driver_SX1276.c: 1225: else
  9334                           ;radio_driver_SX1276.c: 1226: {
  9335                           ;radio_driver_SX1276.c: 1229: RADIO_RegisterWrite(0x3E, 0xFF);
  9336  0018' 0EFF               	movlw	255
  9337  001A' 0100               	movlb	0	; () banked
  9338  001C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9339  001E' 0E3E               	movlw	62
  9340  0020' EC00' F000'        	call	_RADIO_RegisterWrite
  9341                           
  9342                           ;radio_driver_SX1276.c: 1230: RADIO_RegisterWrite(0x3F, 0xFF);
  9343  0024' 0EFF               	movlw	255
  9344  0026' 0100               	movlb	0	; () banked
  9345  0028' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9346  002A' 0E3F               	movlw	63
  9347  002C' EC00' F000'        	call	_RADIO_RegisterWrite
  9348  0030' 0012               	return	
  9349  0032'                    __end_of_RADIO_UnhandledInterrupt:
  9350                           	opt stack 0
  9351                           tosu	equ	0xFFF
  9352                           tosh	equ	0xFFE
  9353                           tosl	equ	0xFFD
  9354                           pclath	equ	0xFFA
  9355                           tblptru	equ	0xFF8
  9356                           tblptrh	equ	0xFF7
  9357                           tblptrl	equ	0xFF6
  9358                           tablat	equ	0xFF5
  9359                           prodh	equ	0xFF4
  9360                           prodl	equ	0xFF3
  9361                           intcon	equ	0xFF2
  9362                           intcon2	equ	0xFF1
  9363                           intcon3	equ	0xFF0
  9364                           postinc0	equ	0xFEE
  9365                           wreg	equ	0xFE8
  9366                           postinc1	equ	0xFE6
  9367                           postdec1	equ	0xFE5
  9368                           plusw1	equ	0xFE3
  9369                           fsr1h	equ	0xFE2
  9370                           fsr1l	equ	0xFE1
  9371                           indf2	equ	0xFDF
  9372                           postinc2	equ	0xFDE
  9373                           postdec2	equ	0xFDD
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function _RADIO_TxDone *****************
  9379 ;; Defined at:
  9380 ;;		line 1147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  timeOnAir       4   74[BANK0 ] unsigned long 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:       12 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:   12
  9401 ;; This function calls:
  9402 ;;		_LORAWAN_TxDone
  9403 ;;		_RADIO_RegisterWrite
  9404 ;;		_RADIO_WriteMode
  9405 ;;		_SwTimerReadValue
  9406 ;;		_SwTimerStop
  9407 ;;		___lmul
  9408 ;; This function is called by:
  9409 ;;		_RADIO_DIO0
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           	psect	text52
  9414  0000'                    __ptext52:
  9415                           	opt stack 0
  9416  0000'                    _RADIO_TxDone:
  9417                           	opt stack 16
  9418                           
  9419                           ;radio_driver_SX1276.c: 1149: uint32_t timeOnAir;
  9420                           ;radio_driver_SX1276.c: 1151: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9421                           
  9422                           ;incstack = 0
  9423  0000' 0101               	movlb	1	; () banked
  9424  0002' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
  9425  0004' EC00' F000'        	call	_SwTimerStop
  9426                           
  9427                           ;radio_driver_SX1276.c: 1154: do { LATB3 = 0; } while(0);
  9428  0008' 968A               	bcf	3978,3,c	;volatile
  9429                           
  9430                           ;radio_driver_SX1276.c: 1156: RADIO_RegisterWrite(0x12, 1<<(3));
  9431  000A' 0E08               	movlw	8
  9432  000C' 0100               	movlb	0	; () banked
  9433  000E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9434  0010' 0E12               	movlw	18
  9435  0012' EC00' F000'        	call	_RADIO_RegisterWrite
  9436                           
  9437                           ;radio_driver_SX1276.c: 1157: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9438  0016' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9439  001A' 0E00               	movlw	0
  9440  001C' 0100               	movlb	0	; () banked
  9441  001E' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  9442  0020' 0E00               	movlw	0
  9443  0022' EC00' F000'        	call	_RADIO_WriteMode
  9444                           
  9445                           ;radio_driver_SX1276.c: 1158: RadioConfiguration.flags &= ~(1 << (0));
  9446  0026' 0101               	movlb	1	; () banked
  9447  0028' 9100'              	bcf	(_RadioConfiguration+35)& (0+255),0,b
  9448                           
  9449                           ; BSR set to: 1
  9450                           ;radio_driver_SX1276.c: 1159: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  9451  002A' B900'              	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  9452  002C' 0012               	return	
  9453                           
  9454                           ; BSR set to: 1
  9455                           ;radio_driver_SX1276.c: 1160: {
  9456                           ;radio_driver_SX1276.c: 1161: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  9457  002E' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
  9458  0030' EC00' F000'        	call	_SwTimerReadValue
  9459  0034' 0100               	movlb	0	; () banked
  9460  0036' 5100'              	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  9461  0038' E108               	bnz	u12140
  9462  003A' 0E1F               	movlw	31
  9463  003C' 5D00'              	subwf	?_SwTimerReadValue& (0+255),w,b
  9464  003E' 0EAC               	movlw	172
  9465  0040' 5900'              	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
  9466  0042' 0EDF               	movlw	223
  9467  0044' 5900'              	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
  9468  0046' A0D8               	btfss	status,0,c
  9469  0048' D021               	goto	l1961
  9470  004A'                    u12140:
  9471                           
  9472                           ; BSR set to: 0
  9473  004A' 0101               	movlb	1	; () banked
  9474  004C' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
  9475  004E' EC00' F000'        	call	_SwTimerReadValue
  9476  0052' 0E0D               	movlw	13
  9477  0054' D006               	goto	u12150
  9478  0056'                    u12155:
  9479  0056' 0100               	movlb	0	; () banked
  9480  0058' 90D8               	bcf	status,0,c
  9481  005A' 3300'              	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
  9482  005C' 3300'              	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
  9483  005E' 3300'              	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
  9484  0060' 3300'              	rrcf	?_SwTimerReadValue& (0+255),f,b
  9485  0062'                    u12150:
  9486  0062' 2EE8               	decfsz	wreg,f,c
  9487  0064' D7F8               	goto	u12155
  9488  0066' C031' F03A'        	movff	?_SwTimerReadValue,___lmul@multiplier
  9489  006A' C032' F03B'        	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
  9490  006E' C033' F03C'        	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
  9491  0072' C034' F03D'        	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
  9492  0076' 0E7D               	movlw	125
  9493  0078' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  9494  007A' 0E00               	movlw	0
  9495  007C' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  9496  007E' 0E00               	movlw	0
  9497  0080' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  9498  0082' 0E00               	movlw	0
  9499  0084' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  9500  0086' EC00' F000'        	call	___lmul	;wreg free
  9501  008A' D021               	goto	L5
  9502  008C'                    l1961:
  9503  008C' 0101               	movlb	1	; () banked
  9504  008E' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
  9505  0090' EC00' F000'        	call	_SwTimerReadValue
  9506  0094' C031' F03A'        	movff	?_SwTimerReadValue,___lmul@multiplier
  9507  0098' C032' F03B'        	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
  9508  009C' C033' F03C'        	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
  9509  00A0' C034' F03D'        	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
  9510  00A4' 0E7D               	movlw	125
  9511  00A6' 0100               	movlb	0	; () banked
  9512  00A8' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  9513  00AA' 0E00               	movlw	0
  9514  00AC' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  9515  00AE' 0E00               	movlw	0
  9516  00B0' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  9517  00B2' 0E00               	movlw	0
  9518  00B4' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  9519  00B6' EC00' F000'        	call	___lmul	;wreg free
  9520  00BA' 0E0D               	movlw	13
  9521  00BC' D006               	goto	u12160
  9522  00BE'                    u12165:
  9523  00BE' 0100               	movlb	0	; () banked
  9524  00C0' 90D8               	bcf	status,0,c
  9525  00C2' 3300'              	rrcf	(?___lmul+3)& (0+255),f,b
  9526  00C4' 3300'              	rrcf	(?___lmul+2)& (0+255),f,b
  9527  00C6' 3300'              	rrcf	(?___lmul+1)& (0+255),f,b
  9528  00C8' 3300'              	rrcf	?___lmul& (0+255),f,b
  9529  00CA'                    u12160:
  9530  00CA' 2EE8               	decfsz	wreg,f,c
  9531  00CC' D7F8               	goto	u12165
  9532  00CE'                    L5:
  9533  00CE' C03A' F04E'        	movff	?___lmul,_RADIO_TxDone$2846
  9534  00D2' C03B' F04F'        	movff	?___lmul+1,_RADIO_TxDone$2846+1
  9535  00D6' C03C' F050'        	movff	?___lmul+2,_RADIO_TxDone$2846+2
  9536  00DA' C03D' F051'        	movff	?___lmul+3,_RADIO_TxDone$2846+3
  9537                           
  9538                           ; BSR set to: 0
  9539  00DE' C04E' F046'        	movff	_RADIO_TxDone$2846,??_RADIO_TxDone
  9540  00E2' C04F' F047'        	movff	_RADIO_TxDone$2846+1,??_RADIO_TxDone+1
  9541  00E6' C050' F048'        	movff	_RADIO_TxDone$2846+2,??_RADIO_TxDone+2
  9542  00EA' C051' F049'        	movff	_RADIO_TxDone$2846+3,??_RADIO_TxDone+3
  9543  00EE' 0100               	movlb	0	; () banked
  9544  00F0' 1F00'              	comf	??_RADIO_TxDone& (0+255),f,b
  9545  00F2' 1F00'              	comf	(??_RADIO_TxDone+1)& (0+255),f,b
  9546  00F4' 1F00'              	comf	(??_RADIO_TxDone+2)& (0+255),f,b
  9547  00F6' 1F00'              	comf	(??_RADIO_TxDone+3)& (0+255),f,b
  9548  00F8' 2B00'              	incf	??_RADIO_TxDone& (0+255),f,b
  9549  00FA' 0E00               	movlw	0
  9550  00FC' 2300'              	addwfc	(??_RADIO_TxDone+1)& (0+255),f,b
  9551  00FE' 2300'              	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  9552  0100' 2300'              	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  9553  0102' 0E20               	movlw	32
  9554  0104' 2500'              	addwf	??_RADIO_TxDone& (0+255),w,b
  9555  0106' 6F00'              	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  9556  0108' 0E4E               	movlw	78
  9557  010A' 2100'              	addwfc	(??_RADIO_TxDone+1)& (0+255),w,b
  9558  010C' 6F00'              	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  9559  010E' 0E00               	movlw	0
  9560  0110' 2100'              	addwfc	(??_RADIO_TxDone+2)& (0+255),w,b
  9561  0112' 6F00'              	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  9562  0114' 0E00               	movlw	0
  9563  0116' 2100'              	addwfc	(??_RADIO_TxDone+3)& (0+255),w,b
  9564  0118' 6F00'              	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;radio_driver_SX1276.c: 1162: LORAWAN_TxDone((uint16_t)timeOnAir);
  9568  011A' C04A' F03A'        	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  9569  011E' C04B' F03B'        	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  9570  0122' EC00' F000'        	call	_LORAWAN_TxDone	;wreg free
  9571  0126' 0012               	return	
  9572  0128'                    __end_of_RADIO_TxDone:
  9573                           	opt stack 0
  9574                           tosu	equ	0xFFF
  9575                           tosh	equ	0xFFE
  9576                           tosl	equ	0xFFD
  9577                           pclath	equ	0xFFA
  9578                           tblptru	equ	0xFF8
  9579                           tblptrh	equ	0xFF7
  9580                           tblptrl	equ	0xFF6
  9581                           tablat	equ	0xFF5
  9582                           prodh	equ	0xFF4
  9583                           prodl	equ	0xFF3
  9584                           intcon	equ	0xFF2
  9585                           intcon2	equ	0xFF1
  9586                           intcon3	equ	0xFF0
  9587                           postinc0	equ	0xFEE
  9588                           wreg	equ	0xFE8
  9589                           postinc1	equ	0xFE6
  9590                           postdec1	equ	0xFE5
  9591                           plusw1	equ	0xFE3
  9592                           fsr1h	equ	0xFE2
  9593                           fsr1l	equ	0xFE1
  9594                           indf2	equ	0xFDF
  9595                           postinc2	equ	0xFDE
  9596                           postdec2	equ	0xFDD
  9597                           fsr2h	equ	0xFDA
  9598                           fsr2l	equ	0xFD9
  9599                           status	equ	0xFD8
  9600                           
  9601 ;; *************** function _RADIO_RxDone *****************
  9602 ;; Defined at:
  9603 ;;		line 1020 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;		None
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;  i               1  148[BANK0 ] unsigned char 
  9608 ;;  irqFlags        1  147[BANK0 ] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;                  1    wreg      void 
  9611 ;; Registers used:
  9612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;Total ram usage:        2 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:   16
  9625 ;; This function calls:
  9626 ;;		_HALSPICSAssert
  9627 ;;		_HALSPICSDeassert
  9628 ;;		_HALSPISend
  9629 ;;		_LORAWAN_RxDone
  9630 ;;		_RADIO_RegisterRead
  9631 ;;		_RADIO_RegisterWrite
  9632 ;;		_RADIO_WriteMode
  9633 ;;		_SwTimerStop
  9634 ;;		___abdiv
  9635 ;; This function is called by:
  9636 ;;		_RADIO_DIO0
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           	psect	text53
  9641  0000'                    __ptext53:
  9642                           	opt stack 0
  9643  0000'                    _RADIO_RxDone:
  9644                           	opt stack 12
  9645                           
  9646                           ;radio_driver_SX1276.c: 1022: uint8_t i, irqFlags;
  9647                           ;radio_driver_SX1276.c: 1023: irqFlags = RADIO_RegisterRead(0x12);
  9648                           
  9649                           ;incstack = 0
  9650  0000' 0E12               	movlw	18
  9651  0002' EC00' F000'        	call	_RADIO_RegisterRead
  9652  0006' 0100               	movlb	0	; () banked
  9653  0008' 6F00'              	movwf	RADIO_RxDone@irqFlags& (0+255),b
  9654                           
  9655                           ;radio_driver_SX1276.c: 1026: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  9656  000A' 0E70               	movlw	112
  9657  000C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9658  000E' 0E12               	movlw	18
  9659  0010' EC00' F000'        	call	_RADIO_RegisterWrite
  9660                           
  9661                           ;radio_driver_SX1276.c: 1027: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(
      +                          4)))))
  9662  0014' 0100               	movlb	0	; () banked
  9663  0016' 5100'              	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  9664  0018' 0B50               	andlw	80
  9665  001A' 0A50               	xorlw	80
  9666  001C' A4D8               	btfss	status,2,c
  9667  001E' 0012               	return	
  9668                           
  9669                           ; BSR set to: 0
  9670                           ;radio_driver_SX1276.c: 1028: {
  9671                           ;radio_driver_SX1276.c: 1030: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9672  0020' 0101               	movlb	1	; () banked
  9673  0022' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
  9674  0024' EC00' F000'        	call	_SwTimerStop
  9675                           
  9676                           ;radio_driver_SX1276.c: 1033: do { LATB3 = 0; } while(0);
  9677  0028' 968A               	bcf	3978,3,c	;volatile
  9678                           
  9679                           ;radio_driver_SX1276.c: 1036: i = RADIO_RegisterRead(0x1C);
  9680  002A' 0E1C               	movlw	28
  9681  002C' EC00' F000'        	call	_RADIO_RegisterRead
  9682  0030' 0100               	movlb	0	; () banked
  9683  0032' 6F00'              	movwf	RADIO_RxDone@i& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;radio_driver_SX1276.c: 1037: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & 
      +                          (1<<(5)))) && (0 != (i & (1<<(6))))))
  9687  0034' 0101               	movlb	1	; () banked
  9688  0036' 5100'              	movf	(_RadioConfiguration+28)& (0+255),w,b
  9689  0038' B4D8               	btfsc	status,2,c
  9690  003A' D004               	goto	u12060
  9691                           
  9692                           ; BSR set to: 1
  9693  003C' 0100               	movlb	0	; () banked
  9694  003E' AB00'              	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  9695                           
  9696                           ; BSR set to: 0
  9697  0040' AD00'              	btfss	RADIO_RxDone@i& (0+255),6,b
  9698  0042' D03C               	goto	l1927
  9699  0044'                    u12060:
  9700                           
  9701                           ;radio_driver_SX1276.c: 1038: {
  9702                           ;radio_driver_SX1276.c: 1046: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13
      +                          );
  9703                           
  9704                           ; BSR set to: 0
  9705  0044' 0E13               	movlw	19
  9706  0046' EC00' F000'        	call	_RADIO_RegisterRead
  9707  004A' 0101               	movlb	1	; () banked
  9708  004C' 6F00'              	movwf	(_RadioConfiguration+36)& (0+255),b
  9709                           
  9710                           ;radio_driver_SX1276.c: 1047: RADIO_RegisterWrite(0x0D, 0x00);
  9711  004E' 0E00               	movlw	0
  9712  0050' 0100               	movlb	0	; () banked
  9713  0052' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
  9714  0054' 0E0D               	movlw	13
  9715  0056' EC00' F000'        	call	_RADIO_RegisterWrite
  9716                           
  9717                           ;radio_driver_SX1276.c: 1049: HALSPICSAssert();
  9718  005A' EC00' F000'        	call	_HALSPICSAssert	;wreg free
  9719                           
  9720                           ;radio_driver_SX1276.c: 1050: HALSPISend(0x00);
  9721  005E' 0E00               	movlw	0
  9722  0060' EC00' F000'        	call	_HALSPISend
  9723                           
  9724                           ;radio_driver_SX1276.c: 1051: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9725  0064' 0E00               	movlw	0
  9726  0066' 0100               	movlb	0	; () banked
  9727  0068' 6F00'              	movwf	RADIO_RxDone@i& (0+255),b
  9728  006A' D00F               	goto	l1930
  9729  006C'                    
  9730                           ; BSR set to: 0
  9731                           ;radio_driver_SX1276.c: 1052: {
  9732                           ;radio_driver_SX1276.c: 1053: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9733                           
  9734                           ; BSR set to: 0
  9735  006C' 5100'              	movf	RADIO_RxDone@i& (0+255),w,b
  9736  006E' 0D01               	mullw	1
  9737  0070' 50F3               	movf	prodl,w,c
  9738  0072' 0101               	movlb	1	; () banked
  9739  0074' 2500'              	addwf	(_RadioConfiguration+37)& (0+255),w,b
  9740  0076' 6ED9               	movwf	fsr2l,c
  9741  0078' 50F4               	movf	prodh,w,c
  9742  007A' 2100'              	addwfc	(_RadioConfiguration+38)& (0+255),w,b
  9743  007C' 6EDA               	movwf	fsr2h,c
  9744  007E' 0EFF               	movlw	255
  9745  0080' EC00' F000'        	call	_HALSPISend
  9746  0084' 6EDF               	movwf	indf2,c
  9747  0086' 0100               	movlb	0	; () banked
  9748  0088' 2B00'              	incf	RADIO_RxDone@i& (0+255),f,b
  9749  008A'                    l1930:
  9750                           
  9751                           ; BSR set to: 0
  9752                           
  9753                           ; BSR set to: 0
  9754  008A' 0101               	movlb	1	; () banked
  9755  008C' 5100'              	movf	(_RadioConfiguration+36)& (0+255),w,b
  9756  008E' 0100               	movlb	0	; () banked
  9757  0090' 5D00'              	subwf	RADIO_RxDone@i& (0+255),w,b
  9758  0092' A0D8               	btfss	status,0,c
  9759  0094' D7EB               	goto	l1931
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;radio_driver_SX1276.c: 1054: }
  9763                           ;radio_driver_SX1276.c: 1055: HALSPICSDeassert();
  9764                           
  9765                           ; BSR set to: 0
  9766  0096' EC00' F000'        	call	_HALSPICSDeassert	;wreg free
  9767                           
  9768                           ;radio_driver_SX1276.c: 1056: RadioConfiguration.flags |= (1 << (2));
  9769  009A' 0101               	movlb	1	; () banked
  9770  009C' 8500'              	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9771                           
  9772                           ; BSR set to: 1
  9773                           ;radio_driver_SX1276.c: 1058: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  9774  009E' 0E19               	movlw	25
  9775  00A0' EC00' F000'        	call	_RADIO_RegisterRead
  9776  00A4' 0101               	movlb	1	; () banked
  9777  00A6' 6F00'              	movwf	(_RadioConfiguration+50)& (0+255),b
  9778                           
  9779                           ; BSR set to: 1
  9780                           ;radio_driver_SX1276.c: 1059: RadioConfiguration.packetSNR /= (int8_t)4;
  9781  00A8' 0E04               	movlw	4
  9782  00AA' 0100               	movlb	0	; () banked
  9783  00AC' 6F00'              	movwf	___abdiv@divisor& (0+255),b
  9784  00AE' 0101               	movlb	1	; () banked
  9785  00B0' 5100'              	movf	(_RadioConfiguration+50)& (0+255),w,b
  9786  00B2' EC00' F000'        	call	___abdiv
  9787  00B6' 0101               	movlb	1	; () banked
  9788  00B8' 6F00'              	movwf	(_RadioConfiguration+50)& (0+255),b
  9789                           
  9790                           ;radio_driver_SX1276.c: 1060: }
  9791  00BA' D002               	goto	l1933
  9792  00BC'                    l1927:
  9793                           
  9794                           ;radio_driver_SX1276.c: 1061: else
  9795                           ;radio_driver_SX1276.c: 1062: {
  9796                           ;radio_driver_SX1276.c: 1064: RadioConfiguration.flags |= (1 << (3));
  9797                           
  9798                           ; BSR set to: 1
  9799  00BC' 0101               	movlb	1	; () banked
  9800  00BE' 8700'              	bsf	(_RadioConfiguration+35)& (0+255),3,b
  9801  00C0'                    l1933:
  9802                           
  9803                           ; BSR set to: 1
  9804                           ;radio_driver_SX1276.c: 1065: }
  9805                           ;radio_driver_SX1276.c: 1066: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9806                           
  9807                           ; BSR set to: 1
  9808  00C0' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9809  00C4' 0E00               	movlw	0
  9810  00C6' 0100               	movlb	0	; () banked
  9811  00C8' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
  9812  00CA' 0E00               	movlw	0
  9813  00CC' EC00' F000'        	call	_RADIO_WriteMode
  9814                           
  9815                           ;radio_driver_SX1276.c: 1067: RadioConfiguration.flags &= ~(1 << (1));
  9816  00D0' 0101               	movlb	1	; () banked
  9817  00D2' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9818                           
  9819                           ; BSR set to: 1
  9820                           ;radio_driver_SX1276.c: 1068: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9821  00D4' C03C' F066'        	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
  9822  00D8' C03D' F067'        	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
  9823  00DC' C03B' F068'        	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
  9824  00E0' EC00' F000'        	call	_LORAWAN_RxDone	;wreg free
  9825  00E4' 0012               	return	
  9826  00E6'                    __end_of_RADIO_RxDone:
  9827                           	opt stack 0
  9828                           tosu	equ	0xFFF
  9829                           tosh	equ	0xFFE
  9830                           tosl	equ	0xFFD
  9831                           pclath	equ	0xFFA
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon2	equ	0xFF1
  9840                           intcon3	equ	0xFF0
  9841                           postinc0	equ	0xFEE
  9842                           wreg	equ	0xFE8
  9843                           postinc1	equ	0xFE6
  9844                           postdec1	equ	0xFE5
  9845                           plusw1	equ	0xFE3
  9846                           fsr1h	equ	0xFE2
  9847                           fsr1l	equ	0xFE1
  9848                           indf2	equ	0xFDF
  9849                           postinc2	equ	0xFDE
  9850                           postdec2	equ	0xFDD
  9851                           fsr2h	equ	0xFDA
  9852                           fsr2l	equ	0xFD9
  9853                           status	equ	0xFD8
  9854                           
  9855 ;; *************** function ___abdiv *****************
  9856 ;; Defined at:
  9857 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abdiv.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  dividend        1    wreg     char 
  9860 ;;  divisor         1    0[BANK0 ] char 
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;  dividend        1    6[BANK0 ] char 
  9863 ;;  quotient        1    5[BANK0 ] char 
  9864 ;;  sign            1    4[BANK0 ] unsigned char 
  9865 ;;  counter         1    3[BANK0 ] unsigned char 
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      char 
  9868 ;; Registers used:
  9869 ;;		wreg, status,2, status,0
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:        7 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    7
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_RADIO_RxDone
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text54
  9890  0000'                    __ptext54:
  9891                           	opt stack 0
  9892  0000'                    ___abdiv:
  9893                           	opt stack 20
  9894                           
  9895                           ;incstack = 0
  9896                           ;___abdiv@dividend stored from wreg
  9897  0000' 0100               	movlb	0	; () banked
  9898  0002' 6F00'              	movwf	___abdiv@dividend& (0+255),b
  9899  0004' 0E00               	movlw	0
  9900  0006' 0100               	movlb	0	; () banked
  9901  0008' 6F00'              	movwf	___abdiv@sign& (0+255),b
  9902                           
  9903                           ; BSR set to: 0
  9904  000A' AF00'              	btfss	___abdiv@divisor& (0+255),7,b
  9905  000C' D003               	goto	l2649
  9906                           
  9907                           ; BSR set to: 0
  9908  000E' 6D00'              	negf	___abdiv@divisor& (0+255),b
  9909                           
  9910                           ; BSR set to: 0
  9911  0010' 0E01               	movlw	1
  9912  0012' 6F00'              	movwf	___abdiv@sign& (0+255),b
  9913  0014'                    l2649:
  9914                           
  9915                           ; BSR set to: 0
  9916                           
  9917                           ; BSR set to: 0
  9918  0014' AF00'              	btfss	___abdiv@dividend& (0+255),7,b
  9919  0016' D003               	goto	l2650
  9920                           
  9921                           ; BSR set to: 0
  9922  0018' 6D00'              	negf	___abdiv@dividend& (0+255),b
  9923                           
  9924                           ; BSR set to: 0
  9925  001A' 0E01               	movlw	1
  9926  001C' 1B00'              	xorwf	___abdiv@sign& (0+255),f,b
  9927  001E'                    l2650:
  9928                           
  9929                           ; BSR set to: 0
  9930                           
  9931                           ; BSR set to: 0
  9932  001E' 0E00               	movlw	0
  9933  0020' 6F00'              	movwf	___abdiv@quotient& (0+255),b
  9934                           
  9935                           ; BSR set to: 0
  9936  0022' 5100'              	movf	___abdiv@divisor& (0+255),w,b
  9937  0024' B4D8               	btfsc	status,2,c
  9938  0026' D01A               	goto	l2657
  9939                           
  9940                           ; BSR set to: 0
  9941  0028' 0E01               	movlw	1
  9942  002A' 6F00'              	movwf	___abdiv@counter& (0+255),b
  9943  002C' D003               	goto	l2652
  9944  002E'                    
  9945                           ; BSR set to: 0
  9946                           
  9947                           ; BSR set to: 0
  9948  002E' 90D8               	bcf	status,0,c
  9949  0030' 3700'              	rlcf	___abdiv@divisor& (0+255),f,b
  9950                           
  9951                           ; BSR set to: 0
  9952  0032' 2B00'              	incf	___abdiv@counter& (0+255),f,b
  9953  0034'                    l2652:
  9954                           
  9955                           ; BSR set to: 0
  9956                           
  9957                           ; BSR set to: 0
  9958  0034' C000' F001'        	movff	___abdiv@divisor,??___abdiv
  9959  0038' 6B00'              	clrf	(??___abdiv+1)& (0+255),b
  9960  003A' BF00'              	btfsc	??___abdiv& (0+255),7,b
  9961  003C' 0700'              	decf	(??___abdiv+1)& (0+255),f,b
  9962  003E' AF00'              	btfss	??___abdiv& (0+255),7,b
  9963  0040' D7F6               	goto	l2653
  9964  0042'                    u11410:
  9965                           
  9966                           ; BSR set to: 0
  9967                           
  9968                           ; BSR set to: 0
  9969                           
  9970                           ; BSR set to: 0
  9971  0042' 90D8               	bcf	status,0,c
  9972  0044' 3700'              	rlcf	___abdiv@quotient& (0+255),f,b
  9973  0046' 5100'              	movf	___abdiv@divisor& (0+255),w,b
  9974  0048' 5D00'              	subwf	___abdiv@dividend& (0+255),w,b
  9975  004A' A0D8               	btfss	status,0,c
  9976  004C' D003               	goto	l2656
  9977                           
  9978                           ; BSR set to: 0
  9979  004E' 5100'              	movf	___abdiv@divisor& (0+255),w,b
  9980  0050' 5F00'              	subwf	___abdiv@dividend& (0+255),f,b
  9981                           
  9982                           ; BSR set to: 0
  9983  0052' 8100'              	bsf	___abdiv@quotient& (0+255),0,b
  9984  0054'                    l2656:
  9985                           
  9986                           ; BSR set to: 0
  9987                           
  9988                           ; BSR set to: 0
  9989  0054' 90D8               	bcf	status,0,c
  9990  0056' 3300'              	rrcf	___abdiv@divisor& (0+255),f,b
  9991                           
  9992                           ; BSR set to: 0
  9993  0058' 2F00'              	decfsz	___abdiv@counter& (0+255),f,b
  9994  005A' D7F3               	goto	u11410
  9995  005C'                    l2657:
  9996                           
  9997                           ; BSR set to: 0
  9998                           
  9999                           ; BSR set to: 0
 10000                           
 10001                           ; BSR set to: 0
 10002  005C' 5100'              	movf	___abdiv@sign& (0+255),w,b
 10003  005E' A4D8               	btfss	status,2,c
 10004                           
 10005                           ; BSR set to: 0
 10006  0060' 6D00'              	negf	___abdiv@quotient& (0+255),b
 10007                           
 10008                           ; BSR set to: 0
 10009                           
 10010                           ; BSR set to: 0
 10011  0062' 5100'              	movf	___abdiv@quotient& (0+255),w,b
 10012  0064' 0012               	return	
 10013  0066'                    __end_of___abdiv:
 10014                           	opt stack 0
 10015                           tosu	equ	0xFFF
 10016                           tosh	equ	0xFFE
 10017                           tosl	equ	0xFFD
 10018                           pclath	equ	0xFFA
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           intcon2	equ	0xFF1
 10027                           intcon3	equ	0xFF0
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postinc1	equ	0xFE6
 10031                           postdec1	equ	0xFE5
 10032                           plusw1	equ	0xFE3
 10033                           fsr1h	equ	0xFE2
 10034                           fsr1l	equ	0xFE1
 10035                           indf2	equ	0xFDF
 10036                           postinc2	equ	0xFDE
 10037                           postdec2	equ	0xFDD
 10038                           fsr2h	equ	0xFDA
 10039                           fsr2l	equ	0xFD9
 10040                           status	equ	0xFD8
 10041                           
 10042 ;; *************** function _RADIO_FSKPayloadReady *****************
 10043 ;; Defined at:
 10044 ;;		line 1072 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  i               1  148[BANK0 ] unsigned char 
 10049 ;;  irqFlags        1  147[BANK0 ] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;Total ram usage:        2 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:   16
 10066 ;; This function calls:
 10067 ;;		_HALSPICSAssert
 10068 ;;		_HALSPICSDeassert
 10069 ;;		_HALSPISend
 10070 ;;		_LORAWAN_RxDone
 10071 ;;		_LORAWAN_RxTimeout
 10072 ;;		_RADIO_RegisterRead
 10073 ;;		_RADIO_WriteMode
 10074 ;;		_SwTimerStop
 10075 ;; This function is called by:
 10076 ;;		_RADIO_DIO0
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           	psect	text55
 10081  0000'                    __ptext55:
 10082                           	opt stack 0
 10083  0000'                    _RADIO_FSKPayloadReady:
 10084                           	opt stack 12
 10085                           
 10086                           ;radio_driver_SX1276.c: 1074: uint8_t irqFlags;
 10087                           ;radio_driver_SX1276.c: 1075: uint8_t i;
 10088                           ;radio_driver_SX1276.c: 1077: irqFlags = RADIO_RegisterRead(0x3F);
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;incstack = 0
 10092  0000' 0E3F               	movlw	63
 10093  0002' EC00' F000'        	call	_RADIO_RegisterRead
 10094  0006' 0100               	movlb	0	; () banked
 10095  0008' 6F00'              	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;radio_driver_SX1276.c: 1078: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10099  000A' A500'              	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10100  000C' 0012               	return	
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;radio_driver_SX1276.c: 1079: {
 10104                           ;radio_driver_SX1276.c: 1084: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10105  000E' 0101               	movlb	1	; () banked
 10106  0010' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 10107  0012' EC00' F000'        	call	_SwTimerStop
 10108                           
 10109                           ;radio_driver_SX1276.c: 1085: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10110  0016' 0101               	movlb	1	; () banked
 10111  0018' 5100'              	movf	(_RadioConfiguration+40)& (0+255),w,b
 10112  001A' EC00' F000'        	call	_SwTimerStop
 10113                           
 10114                           ;radio_driver_SX1276.c: 1088: do { LATB3 = 0; } while(0);
 10115  001E' 968A               	bcf	3978,3,c	;volatile
 10116                           
 10117                           ;radio_driver_SX1276.c: 1090: HALSPICSAssert();
 10118  0020' EC00' F000'        	call	_HALSPICSAssert	;wreg free
 10119                           
 10120                           ;radio_driver_SX1276.c: 1091: HALSPISend(0x00);
 10121  0024' 0E00               	movlw	0
 10122  0026' EC00' F000'        	call	_HALSPISend
 10123                           
 10124                           ;radio_driver_SX1276.c: 1092: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10125  002A' 0EFF               	movlw	255
 10126  002C' EC00' F000'        	call	_HALSPISend
 10127  0030' 0101               	movlb	1	; () banked
 10128  0032' 6F00'              	movwf	(_RadioConfiguration+36)& (0+255),b
 10129                           
 10130                           ; BSR set to: 1
 10131                           ;radio_driver_SX1276.c: 1093: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10132  0034' 0E00               	movlw	0
 10133  0036' 0100               	movlb	0	; () banked
 10134  0038' 6F00'              	movwf	RADIO_FSKPayloadReady@i& (0+255),b
 10135  003A' D00F               	goto	l1940
 10136  003C'                    
 10137                           ; BSR set to: 0
 10138                           ;radio_driver_SX1276.c: 1094: {
 10139                           ;radio_driver_SX1276.c: 1095: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10140                           
 10141                           ; BSR set to: 0
 10142  003C' 5100'              	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10143  003E' 0D01               	mullw	1
 10144  0040' 50F3               	movf	prodl,w,c
 10145  0042' 0101               	movlb	1	; () banked
 10146  0044' 2500'              	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10147  0046' 6ED9               	movwf	fsr2l,c
 10148  0048' 50F4               	movf	prodh,w,c
 10149  004A' 2100'              	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10150  004C' 6EDA               	movwf	fsr2h,c
 10151  004E' 0EFF               	movlw	255
 10152  0050' EC00' F000'        	call	_HALSPISend
 10153  0054' 6EDF               	movwf	indf2,c
 10154  0056' 0100               	movlb	0	; () banked
 10155  0058' 2B00'              	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10156  005A'                    l1940:
 10157                           
 10158                           ; BSR set to: 0
 10159                           
 10160                           ; BSR set to: 0
 10161  005A' 0101               	movlb	1	; () banked
 10162  005C' 5100'              	movf	(_RadioConfiguration+36)& (0+255),w,b
 10163  005E' 0100               	movlb	0	; () banked
 10164  0060' 5D00'              	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10165  0062' A0D8               	btfss	status,0,c
 10166  0064' D7EB               	goto	l1941
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;radio_driver_SX1276.c: 1096: }
 10170                           ;radio_driver_SX1276.c: 1097: HALSPICSDeassert();
 10171                           
 10172                           ; BSR set to: 0
 10173  0066' EC00' F000'        	call	_HALSPICSDeassert	;wreg free
 10174                           
 10175                           ;radio_driver_SX1276.c: 1099: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10176  006A' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10177  006E' 0E00               	movlw	0
 10178  0070' 0100               	movlb	0	; () banked
 10179  0072' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 10180  0074' 0E00               	movlw	0
 10181  0076' EC00' F000'        	call	_RADIO_WriteMode
 10182                           
 10183                           ;radio_driver_SX1276.c: 1100: RadioConfiguration.flags &= ~(1 << (1));
 10184  007A' 0101               	movlb	1	; () banked
 10185  007C' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10186                           
 10187                           ; BSR set to: 1
 10188                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.packetSNR = -128;
 10189  007E' 0E80               	movlw	128
 10190  0080' 6F00'              	movwf	(_RadioConfiguration+50)& (0+255),b
 10191                           
 10192                           ; BSR set to: 1
 10193                           ;radio_driver_SX1276.c: 1104: if (1 == RadioConfiguration.crcOn)
 10194  0082' 0500'              	decf	(_RadioConfiguration+28)& (0+255),w,b
 10195  0084' A4D8               	btfss	status,2,c
 10196  0086' D008               	goto	l1943
 10197                           
 10198                           ; BSR set to: 1
 10199                           ;radio_driver_SX1276.c: 1105: {
 10200                           ;radio_driver_SX1276.c: 1106: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10201  0088' 0100               	movlb	0	; () banked
 10202  008A' A300'              	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10203  008C' D002               	goto	l1944
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;radio_driver_SX1276.c: 1107: {
 10207                           ;radio_driver_SX1276.c: 1108: RadioConfiguration.flags |= (1 << (2));
 10208  008E' 0101               	movlb	1	; () banked
 10209  0090' D003               	goto	l1943
 10210  0092'                    l1944:
 10211                           
 10212                           ;radio_driver_SX1276.c: 1110: else
 10213                           ;radio_driver_SX1276.c: 1111: {
 10214                           ;radio_driver_SX1276.c: 1112: RadioConfiguration.flags &= ~(1 << (2));
 10215                           
 10216                           ; BSR set to: 1
 10217  0092' 0101               	movlb	1	; () banked
 10218  0094' 9500'              	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10219                           
 10220                           ; BSR set to: 1
 10221                           ;radio_driver_SX1276.c: 1113: }
 10222                           ;radio_driver_SX1276.c: 1114: }
 10223  0096' D001               	goto	l1946
 10224  0098'                    l1943:
 10225                           
 10226                           ; BSR set to: 1
 10227                           ;radio_driver_SX1276.c: 1115: else
 10228                           ;radio_driver_SX1276.c: 1116: {
 10229                           ;radio_driver_SX1276.c: 1117: RadioConfiguration.flags |= (1 << (2));
 10230                           
 10231                           ; BSR set to: 1
 10232  0098' 8500'              	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10233  009A'                    l1946:
 10234                           
 10235                           ; BSR set to: 1
 10236                           ;radio_driver_SX1276.c: 1118: }
 10237                           ;radio_driver_SX1276.c: 1120: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10238                           
 10239                           ; BSR set to: 1
 10240  009A' A500'              	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10241  009C' D009               	goto	l1947
 10242                           
 10243                           ; BSR set to: 1
 10244                           ;radio_driver_SX1276.c: 1121: {
 10245                           ;radio_driver_SX1276.c: 1122: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10246  009E' C03C' F066'        	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10247  00A2' C03D' F067'        	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10248  00A6' C03B' F068'        	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10249  00AA' EC00' F000'        	call	_LORAWAN_RxDone	;wreg free
 10250                           
 10251                           ;radio_driver_SX1276.c: 1123: }
 10252  00AE' 0012               	return	
 10253  00B0'                    l1947:
 10254                           
 10255                           ;radio_driver_SX1276.c: 1124: else
 10256                           ;radio_driver_SX1276.c: 1125: {
 10257                           ;radio_driver_SX1276.c: 1126: LORAWAN_RxTimeout();
 10258  00B0' EC00' F000'        	call	_LORAWAN_RxTimeout	;wreg free
 10259  00B4' 0012               	return	
 10260  00B6'                    __end_of_RADIO_FSKPayloadReady:
 10261                           	opt stack 0
 10262                           tosu	equ	0xFFF
 10263                           tosh	equ	0xFFE
 10264                           tosl	equ	0xFFD
 10265                           pclath	equ	0xFFA
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           intcon2	equ	0xFF1
 10274                           intcon3	equ	0xFF0
 10275                           postinc0	equ	0xFEE
 10276                           wreg	equ	0xFE8
 10277                           postinc1	equ	0xFE6
 10278                           postdec1	equ	0xFE5
 10279                           plusw1	equ	0xFE3
 10280                           fsr1h	equ	0xFE2
 10281                           fsr1l	equ	0xFE1
 10282                           indf2	equ	0xFDF
 10283                           postinc2	equ	0xFDE
 10284                           postdec2	equ	0xFDD
 10285                           fsr2h	equ	0xFDA
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _LORAWAN_RxTimeout *****************
 10290 ;; Defined at:
 10291 ;;		line 347 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:   14
 10312 ;; This function calls:
 10313 ;;		_Retransmissions
 10314 ;;		_RxData
 10315 ;;		_SetJoinFailState
 10316 ;; This function is called by:
 10317 ;;		_RADIO_FSKPayloadReady
 10318 ;;		_RADIO_RxTimeout
 10319 ;;		_RADIO_RxFSKTimeout
 10320 ;;		_RADIO_WatchdogTimeout
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text56
 10325  0000'                    __ptext56:
 10326                           	opt stack 0
 10327  0000'                    _LORAWAN_RxTimeout:
 10328                           	opt stack 13
 10329                           
 10330                           ;lorawan_na.c: 349: if (loRa.macStatus.macPause == 0)
 10331                           
 10332                           ;incstack = 0
 10333  0000' 0102               	movlb	2	; () banked
 10334  0002' B100'              	btfsc	(_loRa+3)& (0+255),0,b
 10335  0004' D014               	goto	l1435
 10336                           
 10337                           ; BSR set to: 2
 10338                           ;lorawan_na.c: 350: {
 10339                           ;lorawan_na.c: 352: if ( loRa.macStatus.macState == RX1_OPEN )
 10340  0006' 5100'              	movf	(_loRa+2)& (0+255),w,b
 10341  0008' 0B0F               	andlw	15
 10342  000A' 0A03               	xorlw	3
 10343  000C' A4D8               	btfss	status,2,c
 10344  000E' D005               	goto	l1436
 10345                           
 10346                           ; BSR set to: 2
 10347                           ;lorawan_na.c: 353: {
 10348                           ;lorawan_na.c: 354: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 10349  0010' 5100'              	movf	(_loRa+2)& (0+255),w,b
 10350  0012' 0BF0               	andlw	-16
 10351  0014' 0904               	iorlw	4
 10352  0016' 6F00'              	movwf	(_loRa+2)& (0+255),b
 10353                           
 10354                           ;lorawan_na.c: 355: }
 10355  0018' 0012               	return	
 10356  001A'                    l1436:
 10357                           
 10358                           ; BSR set to: 2
 10359                           ;lorawan_na.c: 356: else
 10360                           ;lorawan_na.c: 357: {
 10361                           ;lorawan_na.c: 359: if (loRa.lorawanMacStatus.joining == 1)
 10362  001A' A500'              	btfss	_loRa& (0+255),2,b
 10363  001C' D003               	goto	l1438
 10364                           
 10365                           ; BSR set to: 2
 10366                           ;lorawan_na.c: 360: {
 10367                           ;lorawan_na.c: 361: SetJoinFailState();
 10368  001E' EC00' F000'        	call	_SetJoinFailState	;wreg free
 10369                           
 10370                           ;lorawan_na.c: 362: }
 10371  0022' 0012               	return	
 10372  0024'                    l1438:
 10373                           
 10374                           ; BSR set to: 2
 10375                           ;lorawan_na.c: 364: else if (loRa.macStatus.networkJoined == 1)
 10376  0024' A900'              	btfss	(_loRa+2)& (0+255),4,b
 10377  0026' 0012               	return	
 10378                           
 10379                           ; BSR set to: 2
 10380                           ;lorawan_na.c: 365: {
 10381                           ;lorawan_na.c: 366: Retransmissions ();
 10382  0028' EC00' F000'        	call	_Retransmissions	;wreg free
 10383                           
 10384                           ;lorawan_na.c: 367: }
 10385                           ;lorawan_na.c: 368: }
 10386                           ;lorawan_na.c: 369: }
 10387  002C' 0012               	return	
 10388  002E'                    l1435:
 10389                           
 10390                           ;lorawan_na.c: 370: else
 10391                           ;lorawan_na.c: 371: {
 10392                           ;lorawan_na.c: 373: if (rxPayload.RxAppData != (0))
 10393  002E' 0100               	movlb	0	; () banked
 10394  0030' 5100'              	movf	_rxPayload& (0+255),w,b
 10395  0032' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 10396  0034' B4D8               	btfsc	status,2,c
 10397  0036' 0012               	return	
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;lorawan_na.c: 374: {
 10401                           ;lorawan_na.c: 375: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 10402  0038' 0E00               	movlw	0
 10403  003A' 6F00'              	movwf	RxData@pData& (0+255),b
 10404  003C' 0E00               	movlw	0
 10405  003E' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 10406  0040' 0E00               	movlw	0
 10407  0042' 6F00'              	movwf	RxData@dataLength& (0+255),b
 10408  0044' 0E02               	movlw	2
 10409  0046' 6F00'              	movwf	RxData@status& (0+255),b
 10410  0048' D801               	call	u11378
 10411  004A' 0012               	return	
 10412  004C'                    u11378:
 10413  004C' 0005               	push	
 10414  004E' 6EFA               	movwf	pclath,c
 10415  0050' 5100'              	movf	_rxPayload& (0+255),w,b
 10416  0052' 6EFD               	movwf	tosl,c
 10417  0054' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 10418  0056' 6EFE               	movwf	tosh,c
 10419  0058' 6AFF               	clrf	tosu,c
 10420  005A' 50FA               	movf	pclath,w,c
 10421  005C' 0012               	return		;indir
 10422  005E'                    __end_of_LORAWAN_RxTimeout:
 10423                           	opt stack 0
 10424                           tosu	equ	0xFFF
 10425                           tosh	equ	0xFFE
 10426                           tosl	equ	0xFFD
 10427                           pclath	equ	0xFFA
 10428                           tblptru	equ	0xFF8
 10429                           tblptrh	equ	0xFF7
 10430                           tblptrl	equ	0xFF6
 10431                           tablat	equ	0xFF5
 10432                           prodh	equ	0xFF4
 10433                           prodl	equ	0xFF3
 10434                           intcon	equ	0xFF2
 10435                           intcon2	equ	0xFF1
 10436                           intcon3	equ	0xFF0
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           postinc1	equ	0xFE6
 10440                           postdec1	equ	0xFE5
 10441                           plusw1	equ	0xFE3
 10442                           fsr1h	equ	0xFE2
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           fsr2h	equ	0xFDA
 10448                           fsr2l	equ	0xFD9
 10449                           status	equ	0xFD8
 10450                           
 10451 ;; *************** function _Retransmissions *****************
 10452 ;; Defined at:
 10453 ;;		line 1033 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;		None
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;		None
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;Total ram usage:        4 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:   13
 10474 ;; This function calls:
 10475 ;;		_RADIO_Transmit
 10476 ;;		_ResetParametersForConfirmedTransmission
 10477 ;;		_ResetParametersForUnconfirmedTransmission
 10478 ;;		_RxData
 10479 ;;		_SelectChannelForTransmission
 10480 ;;		_SwTimerSetTimeout
 10481 ;;		_SwTimerStart
 10482 ;;		_UpdateRetransmissionAckTimeoutState
 10483 ;; This function is called by:
 10484 ;;		_LORAWAN_RxTimeout
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text57
 10489  0000'                    __ptext57:
 10490                           	opt stack 0
 10491  0000'                    _Retransmissions:
 10492                           	opt stack 13
 10493                           
 10494                           ;lorawan_na.c: 1035: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 10495                           
 10496                           ;incstack = 0
 10497  0000' 0102               	movlb	2	; () banked
 10498  0002' A100'              	btfss	_loRa& (0+255),0,b
 10499  0004' D021               	goto	l1657
 10500                           
 10501                           ; BSR set to: 2
 10502                           ;lorawan_na.c: 1036: {
 10503                           ;lorawan_na.c: 1037: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCo
      +                          nfirmedUplink)
 10504  0006' 5100'              	movf	(_loRa+202)& (0+255),w,b
 10505  0008' 5D00'              	subwf	(_loRa+200)& (0+255),w,b
 10506  000A' A0D8               	btfss	status,0,c
 10507  000C' D003               	goto	l1658
 10508                           
 10509                           ; BSR set to: 2
 10510                           ;lorawan_na.c: 1038: {
 10511                           ;lorawan_na.c: 1039: UpdateRetransmissionAckTimeoutState ();
 10512  000E' EC00' F000'        	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 10513                           
 10514                           ;lorawan_na.c: 1040: }
 10515  0012' 0012               	return	
 10516  0014'                    l1658:
 10517                           
 10518                           ;lorawan_na.c: 1041: else
 10519                           ;lorawan_na.c: 1042: {
 10520                           ;lorawan_na.c: 1043: ResetParametersForConfirmedTransmission ();
 10521  0014' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
 10522                           
 10523                           ;lorawan_na.c: 1044: if (rxPayload.RxAppData != (0))
 10524  0018' 0100               	movlb	0	; () banked
 10525  001A' 5100'              	movf	_rxPayload& (0+255),w,b
 10526  001C' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 10527  001E' B4D8               	btfsc	status,2,c
 10528  0020' 0012               	return	
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;lorawan_na.c: 1045: {
 10532                           ;lorawan_na.c: 1046: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 10533  0022' 0E00               	movlw	0
 10534  0024' 6F00'              	movwf	RxData@pData& (0+255),b
 10535  0026' 0E00               	movlw	0
 10536  0028' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 10537  002A' 0E00               	movlw	0
 10538  002C' 6F00'              	movwf	RxData@dataLength& (0+255),b
 10539  002E' 0E00               	movlw	0
 10540  0030' 6F00'              	movwf	RxData@status& (0+255),b
 10541  0032' D801               	call	u10388
 10542  0034' 0012               	return	
 10543  0036'                    u10388:
 10544  0036' 0005               	push	
 10545  0038' 6EFA               	movwf	pclath,c
 10546  003A' 5100'              	movf	_rxPayload& (0+255),w,b
 10547  003C' 6EFD               	movwf	tosl,c
 10548  003E' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 10549  0040' 6EFE               	movwf	tosh,c
 10550  0042' 6AFF               	clrf	tosu,c
 10551  0044' 50FA               	movf	pclath,w,c
 10552  0046' 0012               	return		;indir
 10553  0048'                    l1657:
 10554                           
 10555                           ;lorawan_na.c: 1051: else
 10556                           ;lorawan_na.c: 1052: {
 10557                           ;lorawan_na.c: 1053: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitions
      +                          UnconfirmedUplink)
 10558  0048' 0102               	movlb	2	; () banked
 10559  004A' 5100'              	movf	(_loRa+201)& (0+255),w,b
 10560  004C' 5D00'              	subwf	(_loRa+199)& (0+255),w,b
 10561  004E' A0D8               	btfss	status,0,c
 10562  0050' D054               	goto	l1662
 10563                           
 10564                           ; BSR set to: 2
 10565                           ;lorawan_na.c: 1054: {
 10566                           ;lorawan_na.c: 1055: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10567  0052' 5100'              	movf	(_loRa+2)& (0+255),w,b
 10568  0054' 0BF0               	andlw	-16
 10569  0056' 0906               	iorlw	6
 10570  0058' 6F00'              	movwf	(_loRa+2)& (0+255),b
 10571                           
 10572                           ; BSR set to: 2
 10573                           ;lorawan_na.c: 1057: if ( (SelectChannelForTransmission (1) == OK) )
 10574  005A' 0E01               	movlw	1
 10575  005C' EC00' F000'        	call	_SelectChannelForTransmission
 10576  0060' 0900               	iorlw	0
 10577  0062' A4D8               	btfss	status,2,c
 10578  0064' D030               	goto	l1663
 10579                           
 10580                           ;lorawan_na.c: 1058: {
 10581                           ;lorawan_na.c: 1059: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 10582  0066' 0E00'              	movlw	low (_macBuffer+16)
 10583  0068' 0100               	movlb	0	; () banked
 10584  006A' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
 10585  006C' 0E00'              	movlw	high (_macBuffer+16)
 10586  006E' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 10587  0070' C0C5' F053'        	movff	_loRa+197,RADIO_Transmit@bufferLen
 10588  0074' EC00' F000'        	call	_RADIO_Transmit	;wreg free
 10589  0078' 0100               	movlb	0	; () banked
 10590  007A' 5100'              	movf	?_RADIO_Transmit& (0+255),w,b
 10591  007C' 1100'              	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 10592  007E' A4D8               	btfss	status,2,c
 10593  0080' D003               	goto	l1664
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;lorawan_na.c: 1060: {
 10597                           ;lorawan_na.c: 1061: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 10598  0082' 0102               	movlb	2	; () banked
 10599  0084' 2B00'              	incf	(_loRa+201)& (0+255),f,b
 10600                           
 10601                           ;lorawan_na.c: 1062: }
 10602  0086' 0012               	return	
 10603  0088'                    l1664:
 10604                           
 10605                           ;lorawan_na.c: 1063: else
 10606                           ;lorawan_na.c: 1064: {
 10607                           ;lorawan_na.c: 1065: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 10608                           
 10609                           ; BSR set to: 2
 10610  0088' 0102               	movlb	2	; () banked
 10611  008A' 5100'              	movf	(_loRa+2)& (0+255),w,b
 10612  008C' 0BF0               	andlw	-16
 10613  008E' 0906               	iorlw	6
 10614  0090' 6F00'              	movwf	(_loRa+2)& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617                           
 10618                           ; BSR set to: 2
 10619                           
 10620                           ;lorawan_na.c: 1066: SwTimerSetTimeout(loRa.transmissionErrorTimerId, ((2000UL) < 0x000F
      +                          FFFFUL ? ( (((uint32_t)(2000UL)) << (12)) / 125UL ) : ( (((uint32_t)(2000UL)) / 125UL) <
      +                          < (12) ) ));
 10621  0092' 0E00               	movlw	0
 10622  0094' 0100               	movlb	0	; () banked
 10623  0096' 6F00'              	movwf	_Retransmissions$2475& (0+255),b
 10624  0098' 0E00               	movlw	0
 10625  009A' 6F00'              	movwf	(_Retransmissions$2475+1)& (0+255),b
 10626  009C' 0E01               	movlw	1
 10627  009E' 6F00'              	movwf	(_Retransmissions$2475+2)& (0+255),b
 10628  00A0' 0E00               	movlw	0
 10629  00A2' 6F00'              	movwf	(_Retransmissions$2475+3)& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           
 10633                           ; BSR set to: 0
 10634  00A4' C066' F00D'        	movff	_Retransmissions$2475,SwTimerSetTimeout@timeout
 10635  00A8' C067' F00E'        	movff	_Retransmissions$2475+1,SwTimerSetTimeout@timeout+1
 10636  00AC' C068' F00F'        	movff	_Retransmissions$2475+2,SwTimerSetTimeout@timeout+2
 10637  00B0' C069' F010'        	movff	_Retransmissions$2475+3,SwTimerSetTimeout@timeout+3
 10638  00B4' 0102               	movlb	2	; () banked
 10639  00B6' 5100'              	movf	(_loRa+229)& (0+255),w,b
 10640  00B8' EC00' F000'        	call	_SwTimerSetTimeout
 10641                           
 10642                           ;lorawan_na.c: 1067: SwTimerStart(loRa.transmissionErrorTimerId);
 10643  00BC' 0102               	movlb	2	; () banked
 10644  00BE' 5100'              	movf	(_loRa+229)& (0+255),w,b
 10645  00C0' EC00' F000'        	call	_SwTimerStart
 10646                           
 10647                           ;lorawan_na.c: 1068: }
 10648                           ;lorawan_na.c: 1069: }
 10649  00C4' 0012               	return	
 10650  00C6'                    l1663:
 10651                           
 10652                           ;lorawan_na.c: 1071: else
 10653                           ;lorawan_na.c: 1073: {
 10654                           ;lorawan_na.c: 1074: ResetParametersForUnconfirmedTransmission ();
 10655  00C6' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10656                           
 10657                           ;lorawan_na.c: 1075: if (rxPayload.RxAppData != (0))
 10658  00CA' 0100               	movlb	0	; () banked
 10659  00CC' 5100'              	movf	_rxPayload& (0+255),w,b
 10660  00CE' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 10661  00D0' B4D8               	btfsc	status,2,c
 10662  00D2' 0012               	return	
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;lorawan_na.c: 1076: {
 10666                           ;lorawan_na.c: 1077: rxPayload.RxAppData((0), 0, MAC_OK);
 10667  00D4' 0E00               	movlw	0
 10668  00D6' 6F00'              	movwf	RxData@pData& (0+255),b
 10669  00D8' 0E00               	movlw	0
 10670  00DA' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 10671  00DC' 0E00               	movlw	0
 10672  00DE' 6F00'              	movwf	RxData@dataLength& (0+255),b
 10673  00E0' 0E01               	movlw	1
 10674  00E2' 6F00'              	movwf	RxData@status& (0+255),b
 10675  00E4' D801               	call	u10438
 10676  00E6' 0012               	return	
 10677  00E8'                    u10438:
 10678  00E8' 0005               	push	
 10679  00EA' 6EFA               	movwf	pclath,c
 10680  00EC' 5100'              	movf	_rxPayload& (0+255),w,b
 10681  00EE' 6EFD               	movwf	tosl,c
 10682  00F0' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 10683  00F2' 6EFE               	movwf	tosh,c
 10684  00F4' 6AFF               	clrf	tosu,c
 10685  00F6' 50FA               	movf	pclath,w,c
 10686  00F8' 0012               	return		;indir
 10687  00FA'                    l1662:
 10688                           
 10689                           ;lorawan_na.c: 1081: else
 10690                           ;lorawan_na.c: 1082: {
 10691                           ;lorawan_na.c: 1083: ResetParametersForUnconfirmedTransmission ();
 10692  00FA' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 10693                           
 10694                           ;lorawan_na.c: 1084: if (rxPayload.RxAppData != (0))
 10695  00FE' 0100               	movlb	0	; () banked
 10696  0100' 5100'              	movf	_rxPayload& (0+255),w,b
 10697  0102' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 10698  0104' B4D8               	btfsc	status,2,c
 10699  0106' 0012               	return	
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;lorawan_na.c: 1085: {
 10703                           ;lorawan_na.c: 1086: rxPayload.RxAppData((0), 0, MAC_OK);
 10704  0108' 0E00               	movlw	0
 10705  010A' 6F00'              	movwf	RxData@pData& (0+255),b
 10706  010C' 0E00               	movlw	0
 10707  010E' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 10708  0110' 0E00               	movlw	0
 10709  0112' 6F00'              	movwf	RxData@dataLength& (0+255),b
 10710  0114' 0E01               	movlw	1
 10711  0116' 6F00'              	movwf	RxData@status& (0+255),b
 10712  0118' D801               	call	u10458
 10713  011A' 0012               	return	
 10714  011C'                    u10458:
 10715  011C' 0005               	push	
 10716  011E' 6EFA               	movwf	pclath,c
 10717  0120' 5100'              	movf	_rxPayload& (0+255),w,b
 10718  0122' 6EFD               	movwf	tosl,c
 10719  0124' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 10720  0126' 6EFE               	movwf	tosh,c
 10721  0128' 6AFF               	clrf	tosu,c
 10722  012A' 50FA               	movf	pclath,w,c
 10723  012C' 0012               	return		;indir
 10724  012E'                    __end_of_Retransmissions:
 10725                           	opt stack 0
 10726                           tosu	equ	0xFFF
 10727                           tosh	equ	0xFFE
 10728                           tosl	equ	0xFFD
 10729                           pclath	equ	0xFFA
 10730                           tblptru	equ	0xFF8
 10731                           tblptrh	equ	0xFF7
 10732                           tblptrl	equ	0xFF6
 10733                           tablat	equ	0xFF5
 10734                           prodh	equ	0xFF4
 10735                           prodl	equ	0xFF3
 10736                           intcon	equ	0xFF2
 10737                           intcon2	equ	0xFF1
 10738                           intcon3	equ	0xFF0
 10739                           postinc0	equ	0xFEE
 10740                           wreg	equ	0xFE8
 10741                           postinc1	equ	0xFE6
 10742                           postdec1	equ	0xFE5
 10743                           plusw1	equ	0xFE3
 10744                           fsr1h	equ	0xFE2
 10745                           fsr1l	equ	0xFE1
 10746                           indf2	equ	0xFDF
 10747                           postinc2	equ	0xFDE
 10748                           postdec2	equ	0xFDD
 10749                           fsr2h	equ	0xFDA
 10750                           fsr2l	equ	0xFD9
 10751                           status	equ	0xFD8
 10752                           
 10753 ;; *************** function _LORAWAN_RxDone *****************
 10754 ;; Defined at:
 10755 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 10756 ;; Parameters:    Size  Location     Type
 10757 ;;  buffer          2  102[BANK1 ] PTR unsigned char 
 10758 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10759 ;;  bufferLength    1  104[BANK1 ] unsigned char 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  hdr             2  145[BANK0 ] PTR struct .
 10762 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10763 ;;  joinAccept      2  142[BANK0 ] PTR struct .
 10764 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 10765 ;;  computedMic     4  138[BANK0 ] unsigned long 
 10766 ;;  extractedMic    4  130[BANK0 ] unsigned long 
 10767 ;;  packet          2  136[BANK0 ] PTR unsigned char 
 10768 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 10769 ;;  frmPayloadLe    1  144[BANK0 ] unsigned char 
 10770 ;;  temp            1  135[BANK0 ] unsigned char 
 10771 ;;  bufferIndex     1  134[BANK0 ] unsigned char 
 10772 ;;  mhdr            1  129[BANK0 ] struct .
 10773 ;;  channelIndex    1  128[BANK0 ] unsigned char 
 10774 ;;  fPort           1  127[BANK0 ] unsigned char 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      enum E7190
 10777 ;; Registers used:
 10778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10784 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Totals:         0      25       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;Total ram usage:       28 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:   15
 10791 ;; This function calls:
 10792 ;;		_AESCmac
 10793 ;;		_AESEncodeLoRa
 10794 ;;		_AssembleEncryptionBlock
 10795 ;;		_CheckFlags
 10796 ;;		_CheckMcastFlags
 10797 ;;		_ComputeMic
 10798 ;;		_ComputeSessionKeys
 10799 ;;		_EncryptFRMPayload
 10800 ;;		_ExtractMic
 10801 ;;		_LORAWAN_EnterContinuousReceive
 10802 ;;		_LORAWAN_Send
 10803 ;;		_MacExecuteCommands
 10804 ;;		_RADIO_GetStatus
 10805 ;;		_RADIO_ReleaseData
 10806 ;;		_RxData
 10807 ;;		_SearchAvailableChannel
 10808 ;;		_SetJoinFailState
 10809 ;;		_SetReceptionNotOkState
 10810 ;;		_StartReTxTimer
 10811 ;;		_SwTimerStop
 10812 ;;		_UpdateCfList
 10813 ;;		_UpdateDLSettings
 10814 ;;		_UpdateJoinSuccessState
 10815 ;;		_UpdateReceiveDelays
 10816 ;;		_UpdateRetransmissionAckTimeoutState
 10817 ;;		_memcpy
 10818 ;; This function is called by:
 10819 ;;		_RADIO_RxDone
 10820 ;;		_RADIO_FSKPayloadReady
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           	psect	text58
 10825  0000'                    __ptext58:
 10826                           	opt stack 0
 10827  0000'                    _LORAWAN_RxDone:
 10828                           	opt stack 12
 10829                           
 10830                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 10831                           ;lorawan.c: 1124: Mhdr_t mhdr;
 10832                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 10833                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 10834                           ;lorawan.c: 1127: uint8_t *packet;
 10835                           ;lorawan.c: 1128: uint8_t temp;
 10836                           ;lorawan.c: 1130: RADIO_ReleaseData();
 10837                           
 10838                           ;incstack = 0
 10839  0000' EC00' F000'        	call	_RADIO_ReleaseData	;wreg free
 10840                           
 10841                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 10842  0004' 0102               	movlb	2	; () banked
 10843  0006' B100'              	btfsc	(_loRa+3)& (0+255),0,b
 10844  0008' EF00' F000'        	goto	l664
 10845                           
 10846                           ; BSR set to: 2
 10847                           ;lorawan.c: 1133: {
 10848                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 10849  000C' C066' FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 10850  0010' C067' FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 10851  0014' 50DF               	movf	indf2,w,c
 10852  0016' 0100               	movlb	0	; () banked
 10853  0018' 6F00'              	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 10857  001A' 3900'              	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10858  001C' 32E8               	rrcf	wreg,f,c
 10859  001E' 0B07               	andlw	7
 10860  0020' 06E8               	decf	wreg,f,c
 10861  0022' A4D8               	btfss	status,2,c
 10862  0024' D0D8               	goto	l665
 10863                           
 10864                           ; BSR set to: 0
 10865  0026' 0102               	movlb	2	; () banked
 10866  0028' 5100'              	movf	(_loRa+29)& (0+255),w,b
 10867  002A' A4D8               	btfss	status,2,c
 10868  002C' D0D4               	goto	l665
 10869                           
 10870                           ; BSR set to: 2
 10871                           ;lorawan.c: 1136: {
 10872                           ;lorawan.c: 1137: temp = bufferLength - 1;
 10873  002E' 0101               	movlb	1	; () banked
 10874  0030' 0500'              	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10875  0032' 0100               	movlb	0	; () banked
 10876  0034' D028               	goto	L6
 10877  0036'                    
 10878                           ; BSR set to: 0
 10879                           ;lorawan.c: 1139: {
 10880                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 10881                           
 10882                           ; BSR set to: 0
 10883  0036' 5100'              	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10884  0038' 6F00'              	movwf	??_LORAWAN_RxDone& (0+255),b
 10885  003A' 6B00'              	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 10886  003C' 1F00'              	comf	??_LORAWAN_RxDone& (0+255),f,b
 10887  003E' 1F00'              	comf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 10888  0040' 4B00'              	infsnz	??_LORAWAN_RxDone& (0+255),f,b
 10889  0042' 2B00'              	incf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 10890  0044' 0101               	movlb	1	; () banked
 10891  0046' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10892  0048' 0100               	movlb	0	; () banked
 10893  004A' 6F00'              	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 10894  004C' 6B00'              	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 10895  004E' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 10896  0050' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 10897  0052' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10898  0054' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 10899  0056' 5100'              	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 10900  0058' 0101               	movlb	1	; () banked
 10901  005A' 2500'              	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10902  005C' 0100               	movlb	0	; () banked
 10903  005E' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 10904  0060' 5100'              	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 10905  0062' 0101               	movlb	1	; () banked
 10906  0064' 2100'              	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10907  0066' 0100               	movlb	0	; () banked
 10908  0068' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 10909  006A' 0E00'              	movlw	low (_loRa+66)
 10910  006C' 6F00'              	movwf	AESEncodeLoRa@key& (0+255),b
 10911  006E' 0E00'              	movlw	high (_loRa+66)
 10912  0070' 6F00'              	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 10913  0072' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 10914                           
 10915                           ;lorawan.c: 1142: if (temp > 16)
 10916  0076' 0E10               	movlw	16
 10917  0078' 0100               	movlb	0	; () banked
 10918  007A' 6500'              	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 10919  007C' D003               	goto	l668
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;lorawan.c: 1143: {
 10923                           ;lorawan.c: 1144: temp -= 16;
 10924  007E' 0E10               	movlw	16
 10925  0080' 5F00'              	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 10926                           
 10927                           ;lorawan.c: 1145: }
 10928  0082' D002               	goto	l669
 10929  0084'                    l668:
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;lorawan.c: 1146: else
 10933                           ;lorawan.c: 1147: {
 10934                           ;lorawan.c: 1148: temp = 0;
 10935                           
 10936                           ; BSR set to: 0
 10937  0084' 0E00               	movlw	0
 10938  0086'                    L6:
 10939  0086' 6F00'              	movwf	LORAWAN_RxDone@temp& (0+255),b
 10940  0088'                    l669:
 10941                           
 10942                           ; BSR set to: 0
 10943                           
 10944                           ; BSR set to: 0
 10945  0088' 5100'              	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10946  008A' A4D8               	btfss	status,2,c
 10947  008C' D7D4               	goto	l667
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;lorawan.c: 1149: }
 10951                           ;lorawan.c: 1150: }
 10952                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 10953                           
 10954                           ; BSR set to: 0
 10955  008E' 0E00'              	movlw	low (_loRa+66)
 10956  0090' 6F00'              	movwf	ComputeMic@key& (0+255),b
 10957  0092' 0E00'              	movlw	high (_loRa+66)
 10958  0094' 6F00'              	movwf	(ComputeMic@key+1)& (0+255),b
 10959  0096' C066' F069'        	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 10960  009A' C067' F06A'        	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 10961  009E' 0101               	movlb	1	; () banked
 10962  00A0' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10963  00A2' 0FFC               	addlw	252
 10964  00A4' 0100               	movlb	0	; () banked
 10965  00A6' 6F00'              	movwf	ComputeMic@bufferLength& (0+255),b
 10966  00A8' EC00' F000'        	call	_ComputeMic	;wreg free
 10967  00AC' C067' F08A'        	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 10968  00B0' C068' F08B'        	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 10969  00B4' C069' F08C'        	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 10970  00B8' C06A' F08D'        	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 10971                           
 10972                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 10973  00BC' C066' F00B'        	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 10974  00C0' C067' F00C'        	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 10975  00C4' C068' F00D'        	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 10976  00C8' EC00' F000'        	call	_ExtractMic	;wreg free
 10977  00CC' C00B' F082'        	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 10978  00D0' C00C' F083'        	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 10979  00D4' C00D' F084'        	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 10980  00D8' C00E' F085'        	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 10981                           
 10982                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 10983  00DC' 0100               	movlb	0	; () banked
 10984  00DE' 5100'              	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 10985  00E0' 1900'              	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 10986  00E2' E10A               	bnz	u10530
 10987  00E4' 5100'              	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 10988  00E6' 1900'              	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 10989  00E8' E107               	bnz	u10530
 10990  00EA' 5100'              	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 10991  00EC' 1900'              	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 10992  00EE' E104               	bnz	u10530
 10993  00F0' 5100'              	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 10994  00F2' 1900'              	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 10995  00F4' B4D8               	btfsc	status,2,c
 10996  00F6' D011               	goto	l671
 10997  00F8'                    u10530:
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;lorawan.c: 1156: {
 11001                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11002  00F8' 0102               	movlb	2	; () banked
 11003  00FA' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11004  00FC' 0B0F               	andlw	15
 11005  00FE' 0A05               	xorlw	5
 11006  0100' B4D8               	btfsc	status,2,c
 11007  0102' D008               	goto	u10560
 11008                           
 11009                           ; BSR set to: 2
 11010  0104' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11011  0106' 0B0F               	andlw	15
 11012  0108' 0A03               	xorlw	3
 11013  010A' A4D8               	btfss	status,2,c
 11014  010C' 0012               	return	
 11015                           
 11016                           ; BSR set to: 2
 11017  010E' 5100'              	movf	(_loRa+226)& (0+255),w,b
 11018  0110' B4D8               	btfsc	status,2,c
 11019  0112' 0012               	return	
 11020  0114'                    u10560:
 11021                           
 11022                           ; BSR set to: 2
 11023                           ;lorawan.c: 1158: {
 11024                           ;lorawan.c: 1159: SetJoinFailState();
 11025                           
 11026                           ; BSR set to: 2
 11027  0114' EC00' F000'        	call	_SetJoinFailState	;wreg free
 11028                           
 11029                           ;lorawan.c: 1160: }
 11030                           ;lorawan.c: 1162: return INVALID_PARAMETER;
 11031                           ;	Return value of _LORAWAN_RxDone is never used
 11032  0118' 0012               	return	
 11033  011A'                    l671:
 11034                           
 11035                           ;lorawan.c: 1163: }
 11036                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11037  011A' 0102               	movlb	2	; () banked
 11038  011C' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11039  011E' 0B0F               	andlw	15
 11040  0120' 0A03               	xorlw	3
 11041  0122' A4D8               	btfss	status,2,c
 11042  0124' D003               	goto	l676
 11043                           
 11044                           ; BSR set to: 2
 11045                           ;lorawan.c: 1167: {
 11046                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11047  0126' 5100'              	movf	(_loRa+212)& (0+255),w,b
 11048  0128' EC00' F000'        	call	_SwTimerStop
 11049  012C'                    l676:
 11050                           
 11051                           ;lorawan.c: 1169: }
 11052                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11053                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11054  012C' C066' F08E'        	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11055  0130' C067' F08F'        	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11056                           
 11057                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11058  0134' 0100               	movlb	0	; () banked
 11059  0136' EE20 F007          	lfsr	2,7
 11060  013A' 5100'              	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11061  013C' 26D9               	addwf	fsr2l,f,c
 11062  013E' 5100'              	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11063  0140' 22DA               	addwfc	fsr2h,f,c
 11064  0142' CFDE F01E'         	movff	postinc2,_loRa+30
 11065  0146' CFDE F01F'         	movff	postinc2,_loRa+31
 11066  014A' CFDE F020'         	movff	postinc2,_loRa+32
 11067  014E' CFDE F021'         	movff	postinc2,_loRa+33
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11071  0152' EE20 F00C          	lfsr	2,12
 11072  0156' 5100'              	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11073  0158' 26D9               	addwf	fsr2l,f,c
 11074  015A' 5100'              	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11075  015C' 22DA               	addwfc	fsr2h,f,c
 11076  015E' 50DF               	movf	indf2,w,c
 11077  0160' 0B0F               	andlw	15
 11078  0162' EC00' F000'        	call	_UpdateReceiveDelays
 11079                           
 11080                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11081  0166' 0100               	movlb	0	; () banked
 11082  0168' EE20 F00B          	lfsr	2,11
 11083  016C' 5100'              	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11084  016E' 26D9               	addwf	fsr2l,f,c
 11085  0170' 5100'              	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11086  0172' 22DA               	addwfc	fsr2h,f,c
 11087  0174' 38DF               	swapf	223,w,c
 11088  0176' 0B07               	andlw	7
 11089  0178' 6F00'              	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11090  017A' EE20 F00B          	lfsr	2,11
 11091  017E' 5100'              	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11092  0180' 26D9               	addwf	fsr2l,f,c
 11093  0182' 5100'              	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11094  0184' 22DA               	addwfc	fsr2h,f,c
 11095  0186' 50DF               	movf	223,w,c
 11096  0188' 0B0F               	andlw	15
 11097  018A' EC00' F000'        	call	_UpdateDLSettings
 11098                           
 11099                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 11100  018E' C08E' F000'        	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 11101  0192' C08F' F001'        	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 11102  0196' 0101               	movlb	1	; () banked
 11103  0198' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11104  019A' EC00' F000'        	call	_UpdateCfList
 11105                           
 11106                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 11107  019E' C08E' F031'        	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 11108  01A2' C08F' F032'        	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 11109  01A6' EC00' F000'        	call	_ComputeSessionKeys	;wreg free
 11110                           
 11111                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 11112  01AA' 0E00               	movlw	0
 11113  01AC' 6EE6               	movwf	postinc1,c
 11114  01AE' EC00' F000'        	call	_UpdateJoinSuccessState	;wreg free
 11115                           
 11116                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 11117  01B2' 0E00               	movlw	0
 11118  01B4' 0102               	movlb	2	; () banked
 11119  01B6' 6F00'              	movwf	(_loRa+6)& (0+255),b
 11120  01B8' 0E00               	movlw	0
 11121  01BA' 6F00'              	movwf	(_loRa+7)& (0+255),b
 11122  01BC' 0E00               	movlw	0
 11123  01BE' 6F00'              	movwf	(_loRa+8)& (0+255),b
 11124  01C0' 0E00               	movlw	0
 11125  01C2' 6F00'              	movwf	(_loRa+9)& (0+255),b
 11126                           
 11127                           ; BSR set to: 2
 11128                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 11129  01C4' 0E00               	movlw	0
 11130  01C6' 6F00'              	movwf	(_loRa+10)& (0+255),b
 11131  01C8' 0E00               	movlw	0
 11132  01CA' 6F00'              	movwf	(_loRa+11)& (0+255),b
 11133  01CC' 0E00               	movlw	0
 11134  01CE' 6F00'              	movwf	(_loRa+12)& (0+255),b
 11135  01D0' 0E00               	movlw	0
 11136  01D2' 6F00'              	movwf	(_loRa+13)& (0+255),b
 11137                           
 11138                           ; BSR set to: 2
 11139                           ;lorawan.c: 1190: }
 11140                           
 11141                           ; BSR set to: 2
 11142                           ;lorawan.c: 1189: return OK;
 11143                           ;	Return value of _LORAWAN_RxDone is never used
 11144  01D4' 0012               	return	
 11145  01D6'                    l665:
 11146                           
 11147                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 11148                           
 11149                           ; BSR set to: 2
 11150  01D6' 0100               	movlb	0	; () banked
 11151  01D8' 3900'              	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11152  01DA' 32E8               	rrcf	wreg,f,c
 11153  01DC' 0B07               	andlw	7
 11154  01DE' 0A03               	xorlw	3
 11155  01E0' B4D8               	btfsc	status,2,c
 11156  01E2' D007               	goto	u10590
 11157                           
 11158                           ; BSR set to: 0
 11159  01E4' 3900'              	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11160  01E6' 32E8               	rrcf	wreg,f,c
 11161  01E8' 0B07               	andlw	7
 11162  01EA' 0A05               	xorlw	5
 11163  01EC' A4D8               	btfss	status,2,c
 11164  01EE' EF00' F000'        	goto	l678
 11165  01F2'                    u10590:
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;lorawan.c: 1192: {
 11169                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 11170                           
 11171                           ; BSR set to: 0
 11172  01F2' 0E00               	movlw	0
 11173  01F4' 0102               	movlb	2	; () banked
 11174  01F6' 6F00'              	movwf	(_loRa+152)& (0+255),b
 11175                           
 11176                           ; BSR set to: 2
 11177                           ;lorawan.c: 1195: Hdr_t *hdr;
 11178                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 11179  01F8' C066' F091'        	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 11180  01FC' C067' F092'        	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 11181                           
 11182                           ; BSR set to: 2
 11183                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 11184  0200' 0E02               	movlw	2
 11185  0202' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 11186  0204' A4D8               	btfss	status,2,c
 11187  0206' D208               	goto	l681
 11188                           
 11189                           ; BSR set to: 2
 11190  0208' 0100               	movlb	0	; () banked
 11191  020A' EE20 F001          	lfsr	2,1
 11192  020E' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11193  0210' 26D9               	addwf	fsr2l,f,c
 11194  0212' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11195  0214' 22DA               	addwfc	fsr2h,f,c
 11196  0216' 0102               	movlb	2	; () banked
 11197  0218' 5100'              	movf	(_loRa+98)& (0+255),w,b
 11198  021A' 18DE               	xorwf	postinc2,w,c
 11199  021C' E109               	bnz	u10611
 11200  021E' 5100'              	movf	(_loRa+99)& (0+255),w,b
 11201  0220' 18DE               	xorwf	postinc2,w,c
 11202  0222' E106               	bnz	u10611
 11203  0224' 5100'              	movf	(_loRa+100)& (0+255),w,b
 11204  0226' 18DE               	xorwf	postinc2,w,c
 11205  0228' E103               	bnz	u10611
 11206  022A' 5100'              	movf	(_loRa+101)& (0+255),w,b
 11207  022C' 18DE               	xorwf	postinc2,w,c
 11208  022E' A4D8               	btfss	status,2,c
 11209  0230'                    u10611:
 11210  0230' D1F3               	goto	l681
 11211                           
 11212                           ; BSR set to: 2
 11213  0232' A500'              	btfss	(_loRa+4)& (0+255),2,b
 11214  0234' D1F1               	goto	l681
 11215                           
 11216                           ; BSR set to: 2
 11217                           ;lorawan.c: 1200: {
 11218                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 11219  0236' C091' F000'        	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 11220  023A' C092' F001'        	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 11221  023E' EC00' F000'        	call	_CheckMcastFlags	;wreg free
 11222  0242' 0900               	iorlw	0
 11223  0244' A4D8               	btfss	status,2,c
 11224  0246' D008               	goto	l682
 11225                           
 11226                           ;lorawan.c: 1203: {
 11227                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11228  0248' 0102               	movlb	2	; () banked
 11229  024A' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11230  024C' 0BF0               	andlw	-16
 11231  024E' 0909               	iorlw	9
 11232  0250' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11233                           
 11234                           ; BSR set to: 2
 11235                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 11236  0252' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11237                           
 11238                           ;lorawan.c: 1206: return MCAST_MSG_ERROR;
 11239                           ;	Return value of _LORAWAN_RxDone is never used
 11240  0256' 0012               	return	
 11241  0258'                    l682:
 11242                           
 11243                           ;lorawan.c: 1207: }
 11244                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 11245  0258' 0100               	movlb	0	; () banked
 11246  025A' EE20 F006          	lfsr	2,6
 11247  025E' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11248  0260' 26D9               	addwf	fsr2l,f,c
 11249  0262' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11250  0264' 22DA               	addwfc	fsr2h,f,c
 11251  0266' CFDE F07A'         	movff	postinc2,??_LORAWAN_RxDone
 11252  026A' CFDD F07B'         	movff	postdec2,??_LORAWAN_RxDone+1
 11253  026E' C07A' F00B'        	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 11254  0272' C07B' F00C'        	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 11255  0276' 6B00'              	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 11256  0278' 6B00'              	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 11257  027A' 0101               	movlb	1	; () banked
 11258  027C' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11259  027E' 0FFC               	addlw	252
 11260  0280' 0100               	movlb	0	; () banked
 11261  0282' 6F00'              	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 11262  0284' 0E49               	movlw	73
 11263  0286' 6F00'              	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 11264  0288' 0E01               	movlw	1
 11265  028A' 6F00'              	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11266  028C' 0E01               	movlw	1
 11267  028E' EC00' F000'        	call	_AssembleEncryptionBlock
 11268                           
 11269                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11270  0292' 0E00'              	movlw	low _radioBuffer
 11271  0294' 0100               	movlb	0	; () banked
 11272  0296' 6F00'              	movwf	memcpy@d1& (0+255),b
 11273  0298' 0E00'              	movlw	high _radioBuffer
 11274  029A' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 11275  029C' 0E00'              	movlw	low _aesBuffer
 11276  029E' 6F00'              	movwf	memcpy@s1& (0+255),b
 11277  02A0' 0E00'              	movlw	high _aesBuffer
 11278  02A2' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 11279  02A4' 0E00               	movlw	0
 11280  02A6' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 11281  02A8' 0E10               	movlw	16
 11282  02AA' 6F00'              	movwf	memcpy@n& (0+255),b
 11283  02AC' EC00' F000'        	call	_memcpy	;wreg free
 11284                           
 11285                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11286  02B0' 0E00'              	movlw	low (_radioBuffer+16)
 11287  02B2' 0100               	movlb	0	; () banked
 11288  02B4' 6F00'              	movwf	memcpy@d1& (0+255),b
 11289  02B6' 0E00'              	movlw	high (_radioBuffer+16)
 11290  02B8' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 11291  02BA' C066' F002'        	movff	LORAWAN_RxDone@buffer,memcpy@s1
 11292  02BE' C067' F003'        	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 11293  02C2' 0EFC               	movlw	252
 11294  02C4' 0101               	movlb	1	; () banked
 11295  02C6' 2500'              	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11296  02C8' 0100               	movlb	0	; () banked
 11297  02CA' 6F00'              	movwf	memcpy@n& (0+255),b
 11298  02CC' 6B00'              	clrf	(memcpy@n+1)& (0+255),b
 11299  02CE' 0EFF               	movlw	255
 11300  02D0' 2300'              	addwfc	(memcpy@n+1)& (0+255),f,b
 11301  02D2' EC00' F000'        	call	_memcpy	;wreg free
 11302                           
 11303                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11304  02D6' 0E00'              	movlw	low (_loRa+102)
 11305  02D8' 0100               	movlb	0	; () banked
 11306  02DA' 6F00'              	movwf	AESCmac@key& (0+255),b
 11307  02DC' 0E00'              	movlw	high (_loRa+102)
 11308  02DE' 6F00'              	movwf	(AESCmac@key+1)& (0+255),b
 11309  02E0' 0E00'              	movlw	low _aesBuffer
 11310  02E2' 6F00'              	movwf	AESCmac@output& (0+255),b
 11311  02E4' 0E00'              	movlw	high _aesBuffer
 11312  02E6' 6F00'              	movwf	(AESCmac@output+1)& (0+255),b
 11313  02E8' 0E00'              	movlw	low _radioBuffer
 11314  02EA' 6F00'              	movwf	AESCmac@input& (0+255),b
 11315  02EC' 0E00'              	movlw	high _radioBuffer
 11316  02EE' 6F00'              	movwf	(AESCmac@input+1)& (0+255),b
 11317  02F0' 0101               	movlb	1	; () banked
 11318  02F2' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11319  02F4' 0F0C               	addlw	12
 11320  02F6' 0100               	movlb	0	; () banked
 11321  02F8' 6F00'              	movwf	AESCmac@size& (0+255),b
 11322  02FA' EC00' F000'        	call	_AESCmac	;wreg free
 11323                           
 11324                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11325  02FE' 0E00'              	movlw	low LORAWAN_RxDone@computedMic
 11326  0300' 0100               	movlb	0	; () banked
 11327  0302' 6F00'              	movwf	memcpy@d1& (0+255),b
 11328  0304' 0E00'              	movlw	high LORAWAN_RxDone@computedMic
 11329  0306' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 11330  0308' 0E00'              	movlw	low _aesBuffer
 11331  030A' 6F00'              	movwf	memcpy@s1& (0+255),b
 11332  030C' 0E00'              	movlw	high _aesBuffer
 11333  030E' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 11334  0310' 0E00               	movlw	0
 11335  0312' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 11336  0314' 0E04               	movlw	4
 11337  0316' 6F00'              	movwf	memcpy@n& (0+255),b
 11338  0318' EC00' F000'        	call	_memcpy	;wreg free
 11339                           
 11340                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11341  031C' C066' F00B'        	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 11342  0320' C067' F00C'        	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 11343  0324' C068' F00D'        	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 11344  0328' EC00' F000'        	call	_ExtractMic	;wreg free
 11345  032C' C00B' F082'        	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 11346  0330' C00C' F083'        	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 11347  0334' C00D' F084'        	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 11348  0338' C00E' F085'        	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 11349                           
 11350                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 11351  033C' 0100               	movlb	0	; () banked
 11352  033E' 5100'              	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11353  0340' 1900'              	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11354  0342' E10A               	bnz	u10640
 11355  0344' 5100'              	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11356  0346' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11357  0348' E107               	bnz	u10640
 11358  034A' 5100'              	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11359  034C' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11360  034E' E104               	bnz	u10640
 11361  0350' 5100'              	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11362  0352' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11363  0354' B4D8               	btfsc	status,2,c
 11364  0356' D008               	goto	l683
 11365  0358'                    u10640:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;lorawan.c: 1218: {
 11369                           ;lorawan.c: 1219: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11370  0358' 0102               	movlb	2	; () banked
 11371  035A' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11372  035C' 0BF0               	andlw	-16
 11373  035E' 0909               	iorlw	9
 11374  0360' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11375                           
 11376                           ; BSR set to: 2
 11377                           ;lorawan.c: 1220: LORAWAN_EnterContinuousReceive();
 11378  0362' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11379                           
 11380                           ;lorawan.c: 1221: return MCAST_MSG_ERROR;
 11381                           ;	Return value of _LORAWAN_RxDone is never used
 11382  0366' 0012               	return	
 11383  0368'                    l683:
 11384                           
 11385                           ;lorawan.c: 1222: }
 11386                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 11387  0368' 0100               	movlb	0	; () banked
 11388  036A' EE20 F006          	lfsr	2,6
 11389  036E' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11390  0370' 26D9               	addwf	fsr2l,f,c
 11391  0372' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11392  0374' 22DA               	addwfc	fsr2h,f,c
 11393  0376' 0102               	movlb	2	; () banked
 11394  0378' 5100'              	movf	(_loRa+14)& (0+255),w,b
 11395  037A' 5CDE               	subwf	postinc2,w,c
 11396  037C' 5100'              	movf	(_loRa+15)& (0+255),w,b
 11397  037E' 58DE               	subwfb	postinc2,w,c
 11398  0380' A0D8               	btfss	status,0,c
 11399  0382' D04E               	goto	l684
 11400                           
 11401                           ; BSR set to: 2
 11402                           ;lorawan.c: 1225: {
 11403                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 11404  0384' 0100               	movlb	0	; () banked
 11405  0386' EE20 F006          	lfsr	2,6
 11406  038A' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11407  038C' 26D9               	addwf	fsr2l,f,c
 11408  038E' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11409  0390' 22DA               	addwfc	fsr2h,f,c
 11410  0392' CFDE F07A'         	movff	postinc2,??_LORAWAN_RxDone
 11411  0396' CFDD F07B'         	movff	postdec2,??_LORAWAN_RxDone+1
 11412  039A' EE20' F000'        	lfsr	2,_loRa+14
 11413  039E' CFDE F07C'         	movff	postinc2,??_LORAWAN_RxDone+2
 11414  03A2' CFDD F07D'         	movff	postdec2,??_LORAWAN_RxDone+3
 11415  03A6' 1F00'              	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11416  03A8' 1F00'              	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11417  03AA' 4B00'              	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11418  03AC' 2B00'              	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11419  03AE' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 11420  03B0' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11421  03B2' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11422  03B4' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11423  03B6' 5100'              	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11424  03B8' 0102               	movlb	2	; () banked
 11425  03BA' 5D00'              	subwf	(_loRa+144)& (0+255),w,b
 11426  03BC' 0100               	movlb	0	; () banked
 11427  03BE' 5100'              	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11428  03C0' 0102               	movlb	2	; () banked
 11429  03C2' 5900'              	subwfb	(_loRa+145)& (0+255),w,b
 11430  03C4' B0D8               	btfsc	status,0,c
 11431  03C6' D020               	goto	l685
 11432                           
 11433                           ; BSR set to: 2
 11434                           ;lorawan.c: 1227: {
 11435                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 11436  03C8' 0100               	movlb	0	; () banked
 11437  03CA' 5100'              	movf	_rxPayload& (0+255),w,b
 11438  03CC' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 11439  03CE' B4D8               	btfsc	status,2,c
 11440  03D0' D013               	goto	u10689
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;lorawan.c: 1229: {
 11444                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11445  03D2' 0E00               	movlw	0
 11446  03D4' 6F00'              	movwf	RxData@pData& (0+255),b
 11447  03D6' 0E00               	movlw	0
 11448  03D8' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 11449  03DA' 0E00               	movlw	0
 11450  03DC' 6F00'              	movwf	RxData@dataLength& (0+255),b
 11451  03DE' 0E05               	movlw	5
 11452  03E0' 6F00'              	movwf	RxData@status& (0+255),b
 11453  03E2' D801               	call	u10688
 11454  03E4' D009               	goto	u10689
 11455  03E6'                    u10688:
 11456  03E6' 0005               	push	
 11457  03E8' 6EFA               	movwf	pclath,c
 11458  03EA' 5100'              	movf	_rxPayload& (0+255),w,b
 11459  03EC' 6EFD               	movwf	tosl,c
 11460  03EE' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 11461  03F0' 6EFE               	movwf	tosh,c
 11462  03F2' 6AFF               	clrf	tosu,c
 11463  03F4' 50FA               	movf	pclath,w,c
 11464  03F6' 0012               	return		;indir
 11465  03F8'                    u10689:
 11466                           
 11467                           ;lorawan.c: 1231: }
 11468                           ;lorawan.c: 1233: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11469  03F8' 0102               	movlb	2	; () banked
 11470  03FA' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11471  03FC' 0BF0               	andlw	-16
 11472  03FE' 0909               	iorlw	9
 11473  0400' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11474                           
 11475                           ; BSR set to: 2
 11476                           ;lorawan.c: 1234: LORAWAN_EnterContinuousReceive();
 11477  0402' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11478                           
 11479                           ;lorawan.c: 1235: return MCAST_MSG_ERROR;
 11480                           ;	Return value of _LORAWAN_RxDone is never used
 11481  0406' 0012               	return	
 11482  0408'                    l685:
 11483                           
 11484                           ;lorawan.c: 1237: else
 11485                           ;lorawan.c: 1238: {
 11486                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 11487  0408' 0100               	movlb	0	; () banked
 11488  040A' EE20 F006          	lfsr	2,6
 11489  040E' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11490  0410' 26D9               	addwf	fsr2l,f,c
 11491  0412' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11492  0414' 22DA               	addwfc	fsr2h,f,c
 11493  0416' CFDE F00E'         	movff	postinc2,_loRa+14
 11494  041A' CFDD F00F'         	movff	postdec2,_loRa+15
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;lorawan.c: 1240: }
 11498                           ;lorawan.c: 1241: }
 11499  041E' D038               	goto	l690
 11500  0420'                    l684:
 11501                           
 11502                           ;lorawan.c: 1242: else
 11503                           ;lorawan.c: 1243: {
 11504                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 11505                           
 11506                           ; BSR set to: 0
 11507  0420' 0100               	movlb	0	; () banked
 11508  0422' EE20 F006          	lfsr	2,6
 11509  0426' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11510  0428' 26D9               	addwf	fsr2l,f,c
 11511  042A' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11512  042C' 22DA               	addwfc	fsr2h,f,c
 11513  042E' 50DE               	movf	postinc2,w,c
 11514  0430' 10DE               	iorwf	postinc2,w,c
 11515  0432' A4D8               	btfss	status,2,c
 11516  0434' D00D               	goto	l689
 11517                           
 11518                           ; BSR set to: 0
 11519  0436' 0102               	movlb	2	; () banked
 11520  0438' 2900'              	incf	(_loRa+14)& (0+255),w,b
 11521  043A' E10A               	bnz	l10602
 11522  043C' 2900'              	incf	(_loRa+15)& (0+255),w,b
 11523  043E' A4D8               	btfss	status,2,c
 11524  0440' D007               	goto	l689
 11525                           
 11526                           ; BSR set to: 2
 11527                           ;lorawan.c: 1245: {
 11528                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 11529  0442' 0E00               	movlw	0
 11530  0444' 6F00'              	movwf	(_loRa+15)& (0+255),b
 11531  0446' 0E00               	movlw	0
 11532  0448' 6F00'              	movwf	(_loRa+14)& (0+255),b
 11533                           
 11534                           ; BSR set to: 2
 11535                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 11536  044A' 4B00'              	infsnz	(_loRa+16)& (0+255),f,b
 11537  044C' 2B00'              	incf	(_loRa+17)& (0+255),f,b
 11538                           
 11539                           ;lorawan.c: 1248: }
 11540  044E' D020               	goto	l690
 11541  0450'                    l689:
 11542  0450'                    l10602:
 11543                           
 11544                           ;lorawan.c: 1249: else
 11545                           ;lorawan.c: 1250: {
 11546                           ;lorawan.c: 1251: if (rxPayload.RxAppData != (0))
 11547  0450' 0100               	movlb	0	; () banked
 11548  0452' 5100'              	movf	_rxPayload& (0+255),w,b
 11549  0454' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 11550  0456' B4D8               	btfsc	status,2,c
 11551  0458' D013               	goto	u10729
 11552                           
 11553                           ; BSR set to: 0
 11554                           ;lorawan.c: 1252: {
 11555                           ;lorawan.c: 1253: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11556  045A' 0E00               	movlw	0
 11557  045C' 6F00'              	movwf	RxData@pData& (0+255),b
 11558  045E' 0E00               	movlw	0
 11559  0460' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 11560  0462' 0E00               	movlw	0
 11561  0464' 6F00'              	movwf	RxData@dataLength& (0+255),b
 11562  0466' 0E05               	movlw	5
 11563  0468' 6F00'              	movwf	RxData@status& (0+255),b
 11564  046A' D801               	call	u10728
 11565  046C' D009               	goto	u10729
 11566  046E'                    u10728:
 11567  046E' 0005               	push	
 11568  0470' 6EFA               	movwf	pclath,c
 11569  0472' 5100'              	movf	_rxPayload& (0+255),w,b
 11570  0474' 6EFD               	movwf	tosl,c
 11571  0476' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 11572  0478' 6EFE               	movwf	tosh,c
 11573  047A' 6AFF               	clrf	tosu,c
 11574  047C' 50FA               	movf	pclath,w,c
 11575  047E' 0012               	return		;indir
 11576  0480'                    u10729:
 11577                           
 11578                           ;lorawan.c: 1254: }
 11579                           ;lorawan.c: 1256: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11580  0480' 0102               	movlb	2	; () banked
 11581  0482' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11582  0484' 0BF0               	andlw	-16
 11583  0486' 0909               	iorlw	9
 11584  0488' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11585                           
 11586                           ; BSR set to: 2
 11587                           ;lorawan.c: 1257: LORAWAN_EnterContinuousReceive();
 11588  048A' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11589                           
 11590                           ;lorawan.c: 1258: return MCAST_MSG_ERROR;
 11591                           ;	Return value of _LORAWAN_RxDone is never used
 11592  048E' 0012               	return	
 11593  0490'                    l690:
 11594                           
 11595                           ;lorawan.c: 1259: }
 11596                           ;lorawan.c: 1260: }
 11597                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 11598  0490' 0102               	movlb	2	; () banked
 11599  0492' 2900'              	incf	(_loRa+14)& (0+255),w,b
 11600  0494' E127               	bnz	l10624
 11601  0496' 2900'              	incf	(_loRa+15)& (0+255),w,b
 11602  0498' E125               	bnz	l10624
 11603  049A' 2900'              	incf	(_loRa+16)& (0+255),w,b
 11604  049C' E123               	bnz	l10624
 11605  049E' 2900'              	incf	(_loRa+17)& (0+255),w,b
 11606  04A0' A4D8               	btfss	status,2,c
 11607  04A2' D020               	goto	l692
 11608                           
 11609                           ; BSR set to: 2
 11610                           ;lorawan.c: 1263: {
 11611                           ;lorawan.c: 1264: if (rxPayload.RxAppData != (0))
 11612  04A4' 0100               	movlb	0	; () banked
 11613  04A6' 5100'              	movf	_rxPayload& (0+255),w,b
 11614  04A8' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 11615  04AA' B4D8               	btfsc	status,2,c
 11616  04AC' D013               	goto	u10759
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;lorawan.c: 1265: {
 11620                           ;lorawan.c: 1266: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 11621  04AE' 0E00               	movlw	0
 11622  04B0' 6F00'              	movwf	RxData@pData& (0+255),b
 11623  04B2' 0E00               	movlw	0
 11624  04B4' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 11625  04B6' 0E00               	movlw	0
 11626  04B8' 6F00'              	movwf	RxData@dataLength& (0+255),b
 11627  04BA' 0E05               	movlw	5
 11628  04BC' 6F00'              	movwf	RxData@status& (0+255),b
 11629  04BE' D801               	call	u10758
 11630  04C0' D009               	goto	u10759
 11631  04C2'                    u10758:
 11632  04C2' 0005               	push	
 11633  04C4' 6EFA               	movwf	pclath,c
 11634  04C6' 5100'              	movf	_rxPayload& (0+255),w,b
 11635  04C8' 6EFD               	movwf	tosl,c
 11636  04CA' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 11637  04CC' 6EFE               	movwf	tosh,c
 11638  04CE' 6AFF               	clrf	tosu,c
 11639  04D0' 50FA               	movf	pclath,w,c
 11640  04D2' 0012               	return		;indir
 11641  04D4'                    u10759:
 11642                           
 11643                           ;lorawan.c: 1267: }
 11644                           ;lorawan.c: 1269: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11645  04D4' 0102               	movlb	2	; () banked
 11646  04D6' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11647  04D8' 0BF0               	andlw	-16
 11648  04DA' 0909               	iorlw	9
 11649  04DC' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11650                           
 11651                           ; BSR set to: 2
 11652                           ;lorawan.c: 1270: LORAWAN_EnterContinuousReceive();
 11653  04DE' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11654                           
 11655                           ;lorawan.c: 1271: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 11656                           ;	Return value of _LORAWAN_RxDone is never used
 11657  04E2' 0012               	return	
 11658  04E4'                    l692:
 11659  04E4'                    l10624:
 11660                           
 11661                           ;lorawan.c: 1272: }
 11662                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 11663  04E4' 0102               	movlb	2	; () banked
 11664  04E6' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11665  04E8' 0B0F               	andlw	15
 11666  04EA' 0A08               	xorlw	8
 11667  04EC' A4D8               	btfss	status,2,c
 11668  04EE' D008               	goto	l694
 11669                           
 11670                           ; BSR set to: 2
 11671                           ;lorawan.c: 1275: {
 11672                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 11673  04F0' 5100'              	movf	(_loRa+213)& (0+255),w,b
 11674  04F2' EC00' F000'        	call	_SwTimerStop
 11675                           
 11676                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 11677  04F6' 0102               	movlb	2	; () banked
 11678  04F8' 5100'              	movf	(_loRa+214)& (0+255),w,b
 11679  04FA' EC00' F000'        	call	_SwTimerStop
 11680                           
 11681                           ;lorawan.c: 1278: }
 11682  04FE' D009               	goto	l696
 11683  0500'                    l694:
 11684                           
 11685                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 11686  0500' 0102               	movlb	2	; () banked
 11687  0502' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11688  0504' 0B0F               	andlw	15
 11689  0506' 0A03               	xorlw	3
 11690  0508' A4D8               	btfss	status,2,c
 11691  050A' D003               	goto	l696
 11692                           
 11693                           ; BSR set to: 2
 11694                           ;lorawan.c: 1280: {
 11695                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 11696  050C' 5100'              	movf	(_loRa+214)& (0+255),w,b
 11697  050E' EC00' F000'        	call	_SwTimerStop
 11698  0512'                    l696:
 11699                           
 11700                           ;lorawan.c: 1282: }
 11701                           ;lorawan.c: 1284: buffer = buffer + 8;
 11702  0512' 0E08               	movlw	8
 11703  0514' 0101               	movlb	1	; () banked
 11704  0516' 2500'              	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11705  0518' 6F00'              	movwf	LORAWAN_RxDone@buffer& (0+255),b
 11706  051A' 0E00               	movlw	0
 11707  051C' 2100'              	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11708  051E' 6F00'              	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 11709                           
 11710                           ; BSR set to: 1
 11711                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11712  0520' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11713  0522' 0100               	movlb	0	; () banked
 11714  0524' 6F00'              	movwf	??_LORAWAN_RxDone& (0+255),b
 11715  0526' 6B00'              	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11716  0528' EE20 F005          	lfsr	2,5
 11717  052C' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11718  052E' 26D9               	addwf	fsr2l,f,c
 11719  0530' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11720  0532' 22DA               	addwfc	fsr2h,f,c
 11721  0534' 50DF               	movf	223,w,c
 11722  0536' 0B0F               	andlw	15
 11723  0538' 6F00'              	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11724  053A' 6B00'              	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11725  053C' 0E0C               	movlw	12
 11726  053E' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11727  0540' 0E00               	movlw	0
 11728  0542' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11729  0544' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 11730  0546' 1900'              	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11731  0548' E104               	bnz	u10780
 11732  054A' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11733  054C' 1900'              	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11734  054E' B4D8               	btfsc	status,2,c
 11735  0550' D037               	goto	l697
 11736  0552'                    u10780:
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;lorawan.c: 1287: {
 11740                           ;lorawan.c: 1288: fPort = *(buffer++);
 11741  0552' C066' FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 11742  0556' C067' FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 11743  055A' 50DF               	movf	indf2,w,c
 11744  055C' 6F00'              	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11745                           
 11746                           ; BSR set to: 0
 11747  055E' 0101               	movlb	1	; () banked
 11748  0560' 4B00'              	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11749  0562' 2B00'              	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11750                           
 11751                           ; BSR set to: 1
 11752                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 11753  0564' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11754  0566' 0FF4               	addlw	244
 11755  0568' 0100               	movlb	0	; () banked
 11756  056A' 6F00'              	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 11760  056C' 0E19               	movlw	25
 11761  056E' 6F00'              	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 11765  0570' C066' F031'        	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11766  0574' C067' F032'        	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11767  0578' 0500'              	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11768  057A' 6F00'              	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11769  057C' 0E01               	movlw	1
 11770  057E' 6F00'              	movwf	EncryptFRMPayload@dir& (0+255),b
 11771  0580' C00E' F035'        	movff	_loRa+14,EncryptFRMPayload@frameCounter
 11772  0584' C00F' F036'        	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 11773  0588' C010' F037'        	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 11774  058C' C011' F038'        	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 11775  0590' 0E00'              	movlw	low (_loRa+118)
 11776  0592' 6F00'              	movwf	EncryptFRMPayload@key& (0+255),b
 11777  0594' 0E00'              	movlw	high (_loRa+118)
 11778  0596' 6F00'              	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 11779  0598' C086' F03B'        	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 11780  059C' 0E00'              	movlw	low _radioBuffer
 11781  059E' 6F00'              	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 11782  05A0' 0E00'              	movlw	high _radioBuffer
 11783  05A2' 6F00'              	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 11784  05A4' 0E01               	movlw	1
 11785  05A6' 6F00'              	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 11786  05A8' EC00' F000'        	call	_EncryptFRMPayload	;wreg free
 11787                           
 11788                           ;lorawan.c: 1294: packet = buffer - 1;
 11789  05AC' 0EFF               	movlw	255
 11790  05AE' 0101               	movlb	1	; () banked
 11791  05B0' 2500'              	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11792  05B2' 0100               	movlb	0	; () banked
 11793  05B4' 6F00'              	movwf	LORAWAN_RxDone@packet& (0+255),b
 11794  05B6' 0EFF               	movlw	255
 11795  05B8' 0101               	movlb	1	; () banked
 11796  05BA' 2100'              	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11797  05BC' 0100               	movlb	0	; () banked
 11798  05BE' D005               	goto	L7
 11799  05C0'                    l697:
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;lorawan.c: 1296: else
 11803                           ;lorawan.c: 1297: {
 11804                           ;lorawan.c: 1298: frmPayloadLength = 0;
 11805                           
 11806                           ; BSR set to: 0
 11807  05C0' 0E00               	movlw	0
 11808  05C2' 6F00'              	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;lorawan.c: 1299: packet = (0);
 11812  05C4' 0E00               	movlw	0
 11813  05C6' 6F00'              	movwf	LORAWAN_RxDone@packet& (0+255),b
 11814  05C8' 0E00               	movlw	0
 11815  05CA'                    L7:
 11816  05CA' 6F00'              	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;lorawan.c: 1300: }
 11820                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 11821                           
 11822                           ; BSR set to: 0
 11823  05CC' 0102               	movlb	2	; () banked
 11824  05CE' 8300'              	bsf	(_loRa+3)& (0+255),1,b
 11825                           
 11826                           ; BSR set to: 2
 11827                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 11828  05D0' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 11829  05D2' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 11830  05D4' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 11831  05D6' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 11832                           
 11833                           ; BSR set to: 2
 11834                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 11835  05D8' 0100               	movlb	0	; () banked
 11836  05DA' 5100'              	movf	_rxPayload& (0+255),w,b
 11837  05DC' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 11838  05DE' B4D8               	btfsc	status,2,c
 11839  05E0' D013               	goto	u10809
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;lorawan.c: 1306: {
 11843                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11844  05E2' C088' F000'        	movff	LORAWAN_RxDone@packet,RxData@pData
 11845  05E6' C089' F001'        	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 11846  05EA' C090' F002'        	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 11847  05EE' 0E01               	movlw	1
 11848  05F0' 6F00'              	movwf	RxData@status& (0+255),b
 11849  05F2' D801               	call	u10808
 11850  05F4' D009               	goto	u10809
 11851  05F6'                    u10808:
 11852  05F6' 0005               	push	
 11853  05F8' 6EFA               	movwf	pclath,c
 11854  05FA' 5100'              	movf	_rxPayload& (0+255),w,b
 11855  05FC' 6EFD               	movwf	tosl,c
 11856  05FE' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 11857  0600' 6EFE               	movwf	tosh,c
 11858  0602' 6AFF               	clrf	tosu,c
 11859  0604' 50FA               	movf	pclath,w,c
 11860  0606' 0012               	return		;indir
 11861  0608'                    u10809:
 11862                           
 11863                           ;lorawan.c: 1308: }
 11864                           ;lorawan.c: 1310: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11865  0608' 0102               	movlb	2	; () banked
 11866  060A' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11867  060C' 0BF0               	andlw	-16
 11868  060E' 0909               	iorlw	9
 11869  0610' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11870                           
 11871                           ; BSR set to: 2
 11872                           ;lorawan.c: 1311: LORAWAN_EnterContinuousReceive();
 11873  0612' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11874                           
 11875                           ;lorawan.c: 1312: return MAC_OK;
 11876                           ;	Return value of _LORAWAN_RxDone is never used
 11877  0616' 0012               	return	
 11878  0618'                    l681:
 11879                           
 11880                           ;lorawan.c: 1313: }
 11881                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 11882  0618' 0100               	movlb	0	; () banked
 11883  061A' EE20 F001          	lfsr	2,1
 11884  061E' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11885  0620' 26D9               	addwf	fsr2l,f,c
 11886  0622' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11887  0624' 22DA               	addwfc	fsr2h,f,c
 11888  0626' 0102               	movlb	2	; () banked
 11889  0628' 5100'              	movf	(_loRa+30)& (0+255),w,b
 11890  062A' 18DE               	xorwf	postinc2,w,c
 11891  062C' E10A               	bnz	u10810
 11892  062E' 5100'              	movf	(_loRa+31)& (0+255),w,b
 11893  0630' 18DE               	xorwf	postinc2,w,c
 11894  0632' E107               	bnz	u10810
 11895  0634' 5100'              	movf	(_loRa+32)& (0+255),w,b
 11896  0636' 18DE               	xorwf	postinc2,w,c
 11897  0638' E104               	bnz	u10810
 11898  063A' 5100'              	movf	(_loRa+33)& (0+255),w,b
 11899  063C' 18DE               	xorwf	postinc2,w,c
 11900  063E' B4D8               	btfsc	status,2,c
 11901  0640' D00E               	goto	l700
 11902  0642'                    u10810:
 11903                           
 11904                           ; BSR set to: 2
 11905                           ;lorawan.c: 1317: {
 11906                           ;lorawan.c: 1318: SetReceptionNotOkState();
 11907  0642' EC00' F000'        	call	_SetReceptionNotOkState	;wreg free
 11908                           
 11909                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 11910  0646' 0E02               	movlw	2
 11911  0648' 0102               	movlb	2	; () banked
 11912  064A' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 11913  064C' A4D8               	btfss	status,2,c
 11914  064E' 0012               	return	
 11915                           
 11916                           ; BSR set to: 2
 11917                           ;lorawan.c: 1320: {
 11918                           ;lorawan.c: 1321: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 11919  0650' 5100'              	movf	(_loRa+2)& (0+255),w,b
 11920  0652' 0BF0               	andlw	-16
 11921  0654' 0909               	iorlw	9
 11922  0656' 6F00'              	movwf	(_loRa+2)& (0+255),b
 11923                           
 11924                           ; BSR set to: 2
 11925                           ;lorawan.c: 1322: LORAWAN_EnterContinuousReceive();
 11926  0658' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 11927                           
 11928                           ;lorawan.c: 1323: }
 11929                           ;lorawan.c: 1324: return INVALID_PARAMETER;
 11930                           ;	Return value of _LORAWAN_RxDone is never used
 11931  065C' 0012               	return	
 11932  065E'                    l700:
 11933                           
 11934                           ;lorawan.c: 1325: }
 11935                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 11936  065E' 0100               	movlb	0	; () banked
 11937  0660' EE20 F006          	lfsr	2,6
 11938  0664' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11939  0666' 26D9               	addwf	fsr2l,f,c
 11940  0668' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11941  066A' 22DA               	addwfc	fsr2h,f,c
 11942  066C' CFDE F07A'         	movff	postinc2,??_LORAWAN_RxDone
 11943  0670' CFDD F07B'         	movff	postdec2,??_LORAWAN_RxDone+1
 11944  0674' C07A' F00B'        	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 11945  0678' C07B' F00C'        	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 11946  067C' 6B00'              	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 11947  067E' 6B00'              	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 11948  0680' 0101               	movlb	1	; () banked
 11949  0682' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11950  0684' 0FFC               	addlw	252
 11951  0686' 0100               	movlb	0	; () banked
 11952  0688' 6F00'              	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 11953  068A' 0E49               	movlw	73
 11954  068C' 6F00'              	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 11955  068E' 0E00               	movlw	0
 11956  0690' 6F00'              	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 11957  0692' 0E01               	movlw	1
 11958  0694' EC00' F000'        	call	_AssembleEncryptionBlock
 11959                           
 11960                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 11961  0698' 0E00'              	movlw	low _radioBuffer
 11962  069A' 0100               	movlb	0	; () banked
 11963  069C' 6F00'              	movwf	memcpy@d1& (0+255),b
 11964  069E' 0E00'              	movlw	high _radioBuffer
 11965  06A0' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 11966  06A2' 0E00'              	movlw	low _aesBuffer
 11967  06A4' 6F00'              	movwf	memcpy@s1& (0+255),b
 11968  06A6' 0E00'              	movlw	high _aesBuffer
 11969  06A8' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 11970  06AA' 0E00               	movlw	0
 11971  06AC' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 11972  06AE' 0E10               	movlw	16
 11973  06B0' 6F00'              	movwf	memcpy@n& (0+255),b
 11974  06B2' EC00' F000'        	call	_memcpy	;wreg free
 11975                           
 11976                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 11977  06B6' 0E00'              	movlw	low (_radioBuffer+16)
 11978  06B8' 0100               	movlb	0	; () banked
 11979  06BA' 6F00'              	movwf	memcpy@d1& (0+255),b
 11980  06BC' 0E00'              	movlw	high (_radioBuffer+16)
 11981  06BE' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 11982  06C0' C066' F002'        	movff	LORAWAN_RxDone@buffer,memcpy@s1
 11983  06C4' C067' F003'        	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 11984  06C8' 0EFC               	movlw	252
 11985  06CA' 0101               	movlb	1	; () banked
 11986  06CC' 2500'              	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11987  06CE' 0100               	movlb	0	; () banked
 11988  06D0' 6F00'              	movwf	memcpy@n& (0+255),b
 11989  06D2' 6B00'              	clrf	(memcpy@n+1)& (0+255),b
 11990  06D4' 0EFF               	movlw	255
 11991  06D6' 2300'              	addwfc	(memcpy@n+1)& (0+255),f,b
 11992  06D8' EC00' F000'        	call	_memcpy	;wreg free
 11993                           
 11994                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11995  06DC' 0E00'              	movlw	low (_loRa+34)
 11996  06DE' 0100               	movlb	0	; () banked
 11997  06E0' 6F00'              	movwf	AESCmac@key& (0+255),b
 11998  06E2' 0E00'              	movlw	high (_loRa+34)
 11999  06E4' 6F00'              	movwf	(AESCmac@key+1)& (0+255),b
 12000  06E6' 0E00'              	movlw	low _aesBuffer
 12001  06E8' 6F00'              	movwf	AESCmac@output& (0+255),b
 12002  06EA' 0E00'              	movlw	high _aesBuffer
 12003  06EC' 6F00'              	movwf	(AESCmac@output+1)& (0+255),b
 12004  06EE' 0E00'              	movlw	low _radioBuffer
 12005  06F0' 6F00'              	movwf	AESCmac@input& (0+255),b
 12006  06F2' 0E00'              	movlw	high _radioBuffer
 12007  06F4' 6F00'              	movwf	(AESCmac@input+1)& (0+255),b
 12008  06F6' 0101               	movlb	1	; () banked
 12009  06F8' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12010  06FA' 0F0C               	addlw	12
 12011  06FC' 0100               	movlb	0	; () banked
 12012  06FE' 6F00'              	movwf	AESCmac@size& (0+255),b
 12013  0700' EC00' F000'        	call	_AESCmac	;wreg free
 12014                           
 12015                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 12016  0704' 0E00'              	movlw	low LORAWAN_RxDone@computedMic
 12017  0706' 0100               	movlb	0	; () banked
 12018  0708' 6F00'              	movwf	memcpy@d1& (0+255),b
 12019  070A' 0E00'              	movlw	high LORAWAN_RxDone@computedMic
 12020  070C' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 12021  070E' 0E00'              	movlw	low _aesBuffer
 12022  0710' 6F00'              	movwf	memcpy@s1& (0+255),b
 12023  0712' 0E00'              	movlw	high _aesBuffer
 12024  0714' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 12025  0716' 0E00               	movlw	0
 12026  0718' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 12027  071A' 0E04               	movlw	4
 12028  071C' 6F00'              	movwf	memcpy@n& (0+255),b
 12029  071E' EC00' F000'        	call	_memcpy	;wreg free
 12030                           
 12031                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 12032  0722' C066' F00B'        	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12033  0726' C067' F00C'        	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12034  072A' C068' F00D'        	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12035  072E' EC00' F000'        	call	_ExtractMic	;wreg free
 12036  0732' C00B' F082'        	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12037  0736' C00C' F083'        	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12038  073A' C00D' F084'        	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12039  073E' C00E' F085'        	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12040                           
 12041                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 12042  0742' 0100               	movlb	0	; () banked
 12043  0744' 5100'              	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 12044  0746' 1900'              	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 12045  0748' E10A               	bnz	u10830
 12046  074A' 5100'              	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 12047  074C' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 12048  074E' E107               	bnz	u10830
 12049  0750' 5100'              	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 12050  0752' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 12051  0754' E104               	bnz	u10830
 12052  0756' 5100'              	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 12053  0758' 1900'              	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 12054  075A' B4D8               	btfsc	status,2,c
 12055  075C' D00E               	goto	l702
 12056  075E'                    u10830:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;lorawan.c: 1337: {
 12060                           ;lorawan.c: 1338: SetReceptionNotOkState();
 12061  075E' EC00' F000'        	call	_SetReceptionNotOkState	;wreg free
 12062                           
 12063                           ;lorawan.c: 1339: if (CLASS_C == loRa.deviceClass)
 12064  0762' 0E02               	movlw	2
 12065  0764' 0102               	movlb	2	; () banked
 12066  0766' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 12067  0768' A4D8               	btfss	status,2,c
 12068  076A' 0012               	return	
 12069                           
 12070                           ; BSR set to: 2
 12071                           ;lorawan.c: 1340: {
 12072                           ;lorawan.c: 1341: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12073  076C' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12074  076E' 0BF0               	andlw	-16
 12075  0770' 0909               	iorlw	9
 12076  0772' 6F00'              	movwf	(_loRa+2)& (0+255),b
 12077                           
 12078                           ; BSR set to: 2
 12079                           ;lorawan.c: 1342: LORAWAN_EnterContinuousReceive();
 12080  0774' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12081                           
 12082                           ;lorawan.c: 1343: }
 12083                           ;lorawan.c: 1344: return INVALID_PARAMETER;
 12084                           ;	Return value of _LORAWAN_RxDone is never used
 12085  0778' 0012               	return	
 12086  077A'                    l702:
 12087                           
 12088                           ;lorawan.c: 1345: }
 12089                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 12090  077A' 0100               	movlb	0	; () banked
 12091  077C' EE20 F006          	lfsr	2,6
 12092  0780' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12093  0782' 26D9               	addwf	fsr2l,f,c
 12094  0784' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12095  0786' 22DA               	addwfc	fsr2h,f,c
 12096  0788' 0102               	movlb	2	; () banked
 12097  078A' 5100'              	movf	(_loRa+10)& (0+255),w,b
 12098  078C' 5CDE               	subwf	postinc2,w,c
 12099  078E' 5100'              	movf	(_loRa+11)& (0+255),w,b
 12100  0790' 58DE               	subwfb	postinc2,w,c
 12101  0792' A0D8               	btfss	status,0,c
 12102  0794' D05C               	goto	l704
 12103                           
 12104                           ; BSR set to: 2
 12105                           ;lorawan.c: 1349: {
 12106                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 12107  0796' 0100               	movlb	0	; () banked
 12108  0798' EE20 F006          	lfsr	2,6
 12109  079C' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12110  079E' 26D9               	addwf	fsr2l,f,c
 12111  07A0' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12112  07A2' 22DA               	addwfc	fsr2h,f,c
 12113  07A4' CFDE F07A'         	movff	postinc2,??_LORAWAN_RxDone
 12114  07A8' CFDD F07B'         	movff	postdec2,??_LORAWAN_RxDone+1
 12115  07AC' EE20' F000'        	lfsr	2,_loRa+10
 12116  07B0' CFDE F07C'         	movff	postinc2,??_LORAWAN_RxDone+2
 12117  07B4' CFDD F07D'         	movff	postdec2,??_LORAWAN_RxDone+3
 12118  07B8' 1F00'              	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12119  07BA' 1F00'              	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12120  07BC' 4B00'              	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12121  07BE' 2B00'              	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12122  07C0' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 12123  07C2' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12124  07C4' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12125  07C6' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12126  07C8' 5100'              	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12127  07CA' 0102               	movlb	2	; () banked
 12128  07CC' 5D00'              	subwf	(_loRa+142)& (0+255),w,b
 12129  07CE' 0100               	movlb	0	; () banked
 12130  07D0' 5100'              	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12131  07D2' 0102               	movlb	2	; () banked
 12132  07D4' 5900'              	subwfb	(_loRa+143)& (0+255),w,b
 12133  07D6' B0D8               	btfsc	status,0,c
 12134  07D8' D02E               	goto	l705
 12135                           
 12136                           ; BSR set to: 2
 12137                           ;lorawan.c: 1351: {
 12138                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12139  07DA' 9100'              	bcf	_loRa& (0+255),0,b
 12140                           
 12141                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 12142  07DC' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 12143  07DE' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 12144  07E0' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 12145  07E2' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 12146                           
 12147                           ; BSR set to: 2
 12148                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 12149  07E4' 0100               	movlb	0	; () banked
 12150  07E6' 5100'              	movf	_rxPayload& (0+255),w,b
 12151  07E8' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 12152  07EA' B4D8               	btfsc	status,2,c
 12153  07EC' D016               	goto	u10889
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;lorawan.c: 1355: {
 12157                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 12158  07EE' 0102               	movlb	2	; () banked
 12159  07F0' 9B00'              	bcf	_loRa& (0+255),5,b
 12160                           
 12161                           ; BSR set to: 2
 12162                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 12163  07F2' 0E00               	movlw	0
 12164  07F4' 0100               	movlb	0	; () banked
 12165  07F6' 6F00'              	movwf	RxData@pData& (0+255),b
 12166  07F8' 0E00               	movlw	0
 12167  07FA' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 12168  07FC' 0E00               	movlw	0
 12169  07FE' 6F00'              	movwf	RxData@dataLength& (0+255),b
 12170  0800' 0E00               	movlw	0
 12171  0802' 6F00'              	movwf	RxData@status& (0+255),b
 12172  0804' D801               	call	u10888
 12173  0806' D009               	goto	u10889
 12174  0808'                    u10888:
 12175  0808' 0005               	push	
 12176  080A' 6EFA               	movwf	pclath,c
 12177  080C' 5100'              	movf	_rxPayload& (0+255),w,b
 12178  080E' 6EFD               	movwf	tosl,c
 12179  0810' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 12180  0812' 6EFE               	movwf	tosh,c
 12181  0814' 6AFF               	clrf	tosu,c
 12182  0816' 50FA               	movf	pclath,w,c
 12183  0818' 0012               	return		;indir
 12184  081A'                    u10889:
 12185                           
 12186                           ;lorawan.c: 1358: }
 12187                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 12188  081A' 0102               	movlb	2	; () banked
 12189  081C' 9300'              	bcf	(_loRa+3)& (0+255),1,b
 12190                           
 12191                           ; BSR set to: 2
 12192                           ;lorawan.c: 1362: loRa.macStatus.rejoinNeeded = 1;
 12193  081E' 8300'              	bsf	(_loRa+4)& (0+255),1,b
 12194                           
 12195                           ; BSR set to: 2
 12196                           ;lorawan.c: 1363: if (CLASS_C == loRa.deviceClass)
 12197  0820' 0E02               	movlw	2
 12198  0822' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 12199  0824' A4D8               	btfss	status,2,c
 12200  0826' 0012               	return	
 12201                           
 12202                           ; BSR set to: 2
 12203                           ;lorawan.c: 1364: {
 12204                           ;lorawan.c: 1365: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12205  0828' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12206  082A' 0BF0               	andlw	-16
 12207  082C' 0909               	iorlw	9
 12208  082E' 6F00'              	movwf	(_loRa+2)& (0+255),b
 12209                           
 12210                           ; BSR set to: 2
 12211                           ;lorawan.c: 1366: LORAWAN_EnterContinuousReceive();
 12212  0830' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12213                           
 12214                           ;lorawan.c: 1367: }
 12215                           ;lorawan.c: 1368: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 12216                           ;	Return value of _LORAWAN_RxDone is never used
 12217  0834' 0012               	return	
 12218  0836'                    l705:
 12219                           
 12220                           ;lorawan.c: 1370: else
 12221                           ;lorawan.c: 1371: {
 12222                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 12223  0836' 0100               	movlb	0	; () banked
 12224  0838' EE20 F006          	lfsr	2,6
 12225  083C' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12226  083E' 26D9               	addwf	fsr2l,f,c
 12227  0840' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12228  0842' 22DA               	addwfc	fsr2h,f,c
 12229  0844' CFDE F00A'         	movff	postinc2,_loRa+10
 12230  0848' CFDD F00B'         	movff	postdec2,_loRa+11
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;lorawan.c: 1373: }
 12234                           ;lorawan.c: 1374: }
 12235  084C' D02E               	goto	l711
 12236  084E'                    l704:
 12237                           
 12238                           ;lorawan.c: 1375: else
 12239                           ;lorawan.c: 1376: {
 12240                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 12241                           
 12242                           ; BSR set to: 0
 12243  084E' 0100               	movlb	0	; () banked
 12244  0850' EE20 F006          	lfsr	2,6
 12245  0854' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12246  0856' 26D9               	addwf	fsr2l,f,c
 12247  0858' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12248  085A' 22DA               	addwfc	fsr2h,f,c
 12249  085C' 50DE               	movf	postinc2,w,c
 12250  085E' 10DE               	iorwf	postinc2,w,c
 12251  0860' A4D8               	btfss	status,2,c
 12252  0862' D015               	goto	l710
 12253                           
 12254                           ; BSR set to: 0
 12255  0864' 0102               	movlb	2	; () banked
 12256  0866' 2900'              	incf	(_loRa+10)& (0+255),w,b
 12257  0868' E112               	bnz	l10736
 12258  086A' 2900'              	incf	(_loRa+11)& (0+255),w,b
 12259  086C' A4D8               	btfss	status,2,c
 12260  086E' D00F               	goto	l710
 12261                           
 12262                           ; BSR set to: 2
 12263                           ;lorawan.c: 1378: {
 12264                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 12265  0870' 0100               	movlb	0	; () banked
 12266  0872' EE20 F006          	lfsr	2,6
 12267  0876' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12268  0878' 26D9               	addwf	fsr2l,f,c
 12269  087A' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12270  087C' 22DA               	addwfc	fsr2h,f,c
 12271  087E' CFDE F00A'         	movff	postinc2,_loRa+10
 12272  0882' CFDD F00B'         	movff	postdec2,_loRa+11
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 12276  0886' 0102               	movlb	2	; () banked
 12277  0888' 4B00'              	infsnz	(_loRa+12)& (0+255),f,b
 12278  088A' 2B00'              	incf	(_loRa+13)& (0+255),f,b
 12279                           
 12280                           ;lorawan.c: 1382: }
 12281  088C' D00E               	goto	l711
 12282  088E'                    l710:
 12283  088E'                    l10736:
 12284                           
 12285                           ;lorawan.c: 1383: else
 12286                           ;lorawan.c: 1384: {
 12287                           ;lorawan.c: 1385: SetReceptionNotOkState();
 12288  088E' EC00' F000'        	call	_SetReceptionNotOkState	;wreg free
 12289                           
 12290                           ;lorawan.c: 1386: if (CLASS_C == loRa.deviceClass)
 12291  0892' 0E02               	movlw	2
 12292  0894' 0102               	movlb	2	; () banked
 12293  0896' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 12294  0898' A4D8               	btfss	status,2,c
 12295  089A' 0012               	return	
 12296                           
 12297                           ; BSR set to: 2
 12298                           ;lorawan.c: 1387: {
 12299                           ;lorawan.c: 1388: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12300  089C' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12301  089E' 0BF0               	andlw	-16
 12302  08A0' 0909               	iorlw	9
 12303  08A2' 6F00'              	movwf	(_loRa+2)& (0+255),b
 12304                           
 12305                           ; BSR set to: 2
 12306                           ;lorawan.c: 1389: LORAWAN_EnterContinuousReceive();
 12307  08A4' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12308                           
 12309                           ;lorawan.c: 1390: }
 12310                           ;lorawan.c: 1392: return INVALID_PARAMETER;
 12311                           ;	Return value of _LORAWAN_RxDone is never used
 12312  08A8' 0012               	return	
 12313  08AA'                    l711:
 12314                           
 12315                           ;lorawan.c: 1393: }
 12316                           ;lorawan.c: 1394: }
 12317                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 12318  08AA' 0102               	movlb	2	; () banked
 12319  08AC' 2900'              	incf	(_loRa+10)& (0+255),w,b
 12320  08AE' E113               	bnz	l10758
 12321  08B0' 2900'              	incf	(_loRa+11)& (0+255),w,b
 12322  08B2' E111               	bnz	l10758
 12323  08B4' 2900'              	incf	(_loRa+12)& (0+255),w,b
 12324  08B6' E10F               	bnz	l10758
 12325  08B8' 2900'              	incf	(_loRa+13)& (0+255),w,b
 12326  08BA' A4D8               	btfss	status,2,c
 12327  08BC' D00C               	goto	l713
 12328                           
 12329                           ; BSR set to: 2
 12330                           ;lorawan.c: 1397: {
 12331                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 12332  08BE' 8300'              	bsf	(_loRa+4)& (0+255),1,b
 12333                           
 12334                           ; BSR set to: 2
 12335                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 12336  08C0' 0E02               	movlw	2
 12337  08C2' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 12338  08C4' A4D8               	btfss	status,2,c
 12339  08C6' 0012               	return	
 12340                           
 12341                           ; BSR set to: 2
 12342                           ;lorawan.c: 1402: {
 12343                           ;lorawan.c: 1403: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12344  08C8' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12345  08CA' 0BF0               	andlw	-16
 12346  08CC' 0909               	iorlw	9
 12347  08CE' 6F00'              	movwf	(_loRa+2)& (0+255),b
 12348                           
 12349                           ; BSR set to: 2
 12350                           ;lorawan.c: 1404: LORAWAN_EnterContinuousReceive();
 12351  08D0' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12352                           
 12353                           ;lorawan.c: 1405: }
 12354                           ;lorawan.c: 1406: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 12355                           ;	Return value of _LORAWAN_RxDone is never used
 12356  08D4' 0012               	return	
 12357  08D6'                    l713:
 12358  08D6'                    l10758:
 12359                           
 12360                           ;lorawan.c: 1407: }
 12361                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 12362  08D6' 0102               	movlb	2	; () banked
 12363  08D8' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12364  08DA' 0B0F               	andlw	15
 12365  08DC' 0A03               	xorlw	3
 12366  08DE' A4D8               	btfss	status,2,c
 12367  08E0' D003               	goto	l715
 12368                           
 12369                           ; BSR set to: 2
 12370                           ;lorawan.c: 1411: {
 12371                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 12372  08E2' 5100'              	movf	(_loRa+214)& (0+255),w,b
 12373  08E4' EC00' F000'        	call	_SwTimerStop
 12374  08E8'                    l715:
 12375                           
 12376                           ;lorawan.c: 1413: }
 12377                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 12378  08E8' 0E01               	movlw	1
 12379  08EA' 0102               	movlb	2	; () banked
 12380  08EC' 6F00'              	movwf	(_loRa+201)& (0+255),b
 12381                           
 12382                           ; BSR set to: 2
 12383                           ;lorawan.c: 1417: CheckFlags (hdr);
 12384  08EE' C091' F000'        	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 12385  08F2' C092' F001'        	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 12386  08F6' EC00' F000'        	call	_CheckFlags	;wreg free
 12387                           
 12388                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 12389  08FA' 0100               	movlb	0	; () banked
 12390  08FC' EE20 F005          	lfsr	2,5
 12391  0900' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12392  0902' 26D9               	addwf	fsr2l,f,c
 12393  0904' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12394  0906' 22DA               	addwfc	fsr2h,f,c
 12395  0908' 50DF               	movf	223,w,c
 12396  090A' 0B0F               	andlw	15
 12397  090C' 0900               	iorlw	0
 12398  090E' B4D8               	btfsc	status,2,c
 12399  0910' D016               	goto	l716
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;lorawan.c: 1420: {
 12403                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 12404  0912' 0E08               	movlw	8
 12405  0914' 2500'              	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 12406  0916' 6F00'              	movwf	MacExecuteCommands@buffer& (0+255),b
 12407  0918' 0E00               	movlw	0
 12408  091A' 2100'              	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12409  091C' 6F00'              	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 12410  091E' EE20 F005          	lfsr	2,5
 12411  0922' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12412  0924' 26D9               	addwf	fsr2l,f,c
 12413  0926' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12414  0928' 22DA               	addwfc	fsr2h,f,c
 12415  092A' 50DF               	movf	223,w,c
 12416  092C' 0B0F               	andlw	15
 12417  092E' 6F00'              	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 12418  0930' EC00' F000'        	call	_MacExecuteCommands	;wreg free
 12419  0934' C05D' F066'        	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 12420  0938' C05E' F067'        	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 12421                           
 12422                           ;lorawan.c: 1422: }
 12423  093C' D007               	goto	l717
 12424  093E'                    l716:
 12425                           
 12426                           ;lorawan.c: 1423: else
 12427                           ;lorawan.c: 1424: {
 12428                           ;lorawan.c: 1425: buffer = buffer + 8;
 12429  093E' 0E08               	movlw	8
 12430  0940' 0101               	movlb	1	; () banked
 12431  0942' 2500'              	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12432  0944' 6F00'              	movwf	LORAWAN_RxDone@buffer& (0+255),b
 12433  0946' 0E00               	movlw	0
 12434  0948' 2100'              	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12435  094A' 6F00'              	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 12436  094C'                    l717:
 12437                           
 12438                           ;lorawan.c: 1426: }
 12439                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 12440                           
 12441                           ; BSR set to: 1
 12442  094C' 0101               	movlb	1	; () banked
 12443  094E' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12444  0950' 0100               	movlb	0	; () banked
 12445  0952' 6F00'              	movwf	??_LORAWAN_RxDone& (0+255),b
 12446  0954' 6B00'              	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12447  0956' EE20 F005          	lfsr	2,5
 12448  095A' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12449  095C' 26D9               	addwf	fsr2l,f,c
 12450  095E' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12451  0960' 22DA               	addwfc	fsr2h,f,c
 12452  0962' 50DF               	movf	223,w,c
 12453  0964' 0B0F               	andlw	15
 12454  0966' 6F00'              	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12455  0968' 6B00'              	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12456  096A' 0E0C               	movlw	12
 12457  096C' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12458  096E' 0E00               	movlw	0
 12459  0970' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12460  0972' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 12461  0974' 1900'              	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12462  0976' E104               	bnz	u10970
 12463  0978' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12464  097A' 1900'              	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12465  097C' B4D8               	btfsc	status,2,c
 12466  097E' D098               	goto	l718
 12467  0980'                    u10970:
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;lorawan.c: 1428: {
 12471                           ;lorawan.c: 1429: fPort = *(buffer++);
 12472  0980' C066' FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12473  0984' C067' FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12474  0988' 50DF               	movf	indf2,w,c
 12475  098A' 6F00'              	movwf	LORAWAN_RxDone@fPort& (0+255),b
 12476                           
 12477                           ; BSR set to: 0
 12478  098C' 0101               	movlb	1	; () banked
 12479  098E' 4B00'              	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 12480  0990' 2B00'              	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12481                           
 12482                           ; BSR set to: 1
 12483                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 12484  0992' 0100               	movlb	0	; () banked
 12485  0994' EE20 F005          	lfsr	2,5
 12486  0998' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12487  099A' 26D9               	addwf	fsr2l,f,c
 12488  099C' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12489  099E' 22DA               	addwfc	fsr2h,f,c
 12490  09A0' 50DF               	movf	223,w,c
 12491  09A2' 0B0F               	andlw	15
 12492  09A4' 0800               	sublw	0
 12493  09A6' 0101               	movlb	1	; () banked
 12494  09A8' 2500'              	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12495  09AA' 0FF4               	addlw	244
 12496  09AC' 0100               	movlb	0	; () banked
 12497  09AE' 6F00'              	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 12501  09B0' EE20 F005          	lfsr	2,5
 12502  09B4' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12503  09B6' 26D9               	addwf	fsr2l,f,c
 12504  09B8' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12505  09BA' 22DA               	addwfc	fsr2h,f,c
 12506  09BC' 50DF               	movf	223,w,c
 12507  09BE' 0B0F               	andlw	15
 12508  09C0' 0F19               	addlw	25
 12509  09C2' 6F00'              	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;lorawan.c: 1434: if (fPort != 0)
 12513  09C4' 5100'              	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 12514  09C6' B4D8               	btfsc	status,2,c
 12515  09C8' D028               	goto	l719
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;lorawan.c: 1435: {
 12519                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 12520  09CA' C066' F031'        	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12521  09CE' C067' F032'        	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12522  09D2' 0500'              	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12523  09D4' 6F00'              	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12524  09D6' 0E01               	movlw	1
 12525  09D8' 6F00'              	movwf	EncryptFRMPayload@dir& (0+255),b
 12526  09DA' C00A' F035'        	movff	_loRa+10,EncryptFRMPayload@frameCounter
 12527  09DE' C00B' F036'        	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 12528  09E2' C00C' F037'        	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 12529  09E6' C00D' F038'        	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 12530  09EA' 0E00'              	movlw	low (_loRa+50)
 12531  09EC' 6F00'              	movwf	EncryptFRMPayload@key& (0+255),b
 12532  09EE' 0E00'              	movlw	high (_loRa+50)
 12533  09F0' 6F00'              	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12534  09F2' C086' F03B'        	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12535  09F6' 0E00'              	movlw	low _radioBuffer
 12536  09F8' 6F00'              	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12537  09FA' 0E00'              	movlw	high _radioBuffer
 12538  09FC' 6F00'              	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12539  09FE' 0E00               	movlw	0
 12540  0A00' 6F00'              	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 12541  0A02' EC00' F000'        	call	_EncryptFRMPayload	;wreg free
 12542                           
 12543                           ;lorawan.c: 1437: packet = buffer - 1;
 12544  0A06' 0EFF               	movlw	255
 12545  0A08' 0101               	movlb	1	; () banked
 12546  0A0A' 2500'              	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12547  0A0C' 0100               	movlb	0	; () banked
 12548  0A0E' 6F00'              	movwf	LORAWAN_RxDone@packet& (0+255),b
 12549  0A10' 0EFF               	movlw	255
 12550  0A12' 0101               	movlb	1	; () banked
 12551  0A14' 2100'              	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12552  0A16' 0100               	movlb	0	; () banked
 12553  0A18' D050               	goto	L27
 12554  0A1A'                    l719:
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;lorawan.c: 1439: else
 12558                           ;lorawan.c: 1440: {
 12559                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 12560                           
 12561                           ; BSR set to: 0
 12562  0A1A' 0101               	movlb	1	; () banked
 12563  0A1C' 5100'              	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12564  0A1E' 0100               	movlb	0	; () banked
 12565  0A20' 6F00'              	movwf	??_LORAWAN_RxDone& (0+255),b
 12566  0A22' 6B00'              	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12567  0A24' EE20 F005          	lfsr	2,5
 12568  0A28' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12569  0A2A' 26D9               	addwf	fsr2l,f,c
 12570  0A2C' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12571  0A2E' 22DA               	addwfc	fsr2h,f,c
 12572  0A30' 50DF               	movf	223,w,c
 12573  0A32' 0B0F               	andlw	15
 12574  0A34' 6F00'              	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12575  0A36' 6B00'              	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12576  0A38' 0E0D               	movlw	13
 12577  0A3A' 2700'              	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12578  0A3C' 0E00               	movlw	0
 12579  0A3E' 2300'              	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12580  0A40' 5100'              	movf	??_LORAWAN_RxDone& (0+255),w,b
 12581  0A42' 5D00'              	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12582  0A44' 5100'              	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12583  0A46' 0A80               	xorlw	128
 12584  0A48' 6F00'              	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 12585  0A4A' 5100'              	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12586  0A4C' 0A80               	xorlw	128
 12587  0A4E' 5900'              	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 12588  0A50' B0D8               	btfsc	status,0,c
 12589  0A52' D02B               	goto	l721
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;lorawan.c: 1443: {
 12593                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 12594  0A54' C066' F031'        	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12595  0A58' C067' F032'        	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12596  0A5C' 0500'              	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12597  0A5E' 6F00'              	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12598  0A60' 0E01               	movlw	1
 12599  0A62' 6F00'              	movwf	EncryptFRMPayload@dir& (0+255),b
 12600  0A64' C00A' F035'        	movff	_loRa+10,EncryptFRMPayload@frameCounter
 12601  0A68' C00B' F036'        	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 12602  0A6C' C00C' F037'        	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 12603  0A70' C00D' F038'        	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 12604  0A74' 0E00'              	movlw	low (_loRa+34)
 12605  0A76' 6F00'              	movwf	EncryptFRMPayload@key& (0+255),b
 12606  0A78' 0E00'              	movlw	high (_loRa+34)
 12607  0A7A' 6F00'              	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12608  0A7C' C086' F03B'        	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12609  0A80' 0E00'              	movlw	low _radioBuffer
 12610  0A82' 6F00'              	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12611  0A84' 0E00'              	movlw	high _radioBuffer
 12612  0A86' 6F00'              	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12613  0A88' 0E00               	movlw	0
 12614  0A8A' 6F00'              	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 12615  0A8C' EC00' F000'        	call	_EncryptFRMPayload	;wreg free
 12616                           
 12617                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 12618  0A90' C066' F05D'        	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 12619  0A94' C067' F05E'        	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 12620  0A98' 0100               	movlb	0	; () banked
 12621  0A9A' 0500'              	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12622  0A9C' 6F00'              	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 12623  0A9E' EC00' F000'        	call	_MacExecuteCommands	;wreg free
 12624  0AA2' C05D' F066'        	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 12625  0AA6' C05E' F067'        	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 12626  0AAA'                    l721:
 12627                           
 12628                           ;lorawan.c: 1447: }
 12629                           ;lorawan.c: 1449: frmPayloadLength = 0;
 12630  0AAA' 0E00               	movlw	0
 12631  0AAC' 0100               	movlb	0	; () banked
 12632  0AAE' D001               	goto	L9
 12633  0AB0'                    l718:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;lorawan.c: 1453: else
 12637                           ;lorawan.c: 1454: {
 12638                           ;lorawan.c: 1455: frmPayloadLength = 0;
 12639                           
 12640                           ; BSR set to: 0
 12641  0AB0' 0E00               	movlw	0
 12642  0AB2'                    L9:
 12643  0AB2' 6F00'              	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;lorawan.c: 1456: packet = (0);
 12647  0AB4' 0E00               	movlw	0
 12648  0AB6' 6F00'              	movwf	LORAWAN_RxDone@packet& (0+255),b
 12649  0AB8' 0E00               	movlw	0
 12650  0ABA'                    L27:
 12651  0ABA' 6F00'              	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;lorawan.c: 1457: }
 12655                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 12656                           
 12657                           ; BSR set to: 0
 12658  0ABC' 0E01               	movlw	1
 12659  0ABE' 0102               	movlb	2	; () banked
 12660  0AC0' 6F00'              	movwf	(_loRa+201)& (0+255),b
 12661                           
 12662                           ; BSR set to: 2
 12663                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 12664  0AC2' 0E00               	movlw	0
 12665  0AC4' 6F00'              	movwf	(_loRa+194)& (0+255),b
 12666  0AC6' 0E00               	movlw	0
 12667  0AC8' 6F00'              	movwf	(_loRa+193)& (0+255),b
 12668                           
 12669                           ; BSR set to: 2
 12670                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 12671  0ACA' 0E00               	movlw	0
 12672  0ACC' 6F00'              	movwf	(_loRa+223)& (0+255),b
 12673                           
 12674                           ; BSR set to: 2
 12675                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 12676  0ACE' 9900'              	bcf	_loRa& (0+255),4,b
 12677                           
 12678                           ; BSR set to: 2
 12679                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 12680  0AD0' 8300'              	bsf	(_loRa+3)& (0+255),1,b
 12681                           
 12682                           ; BSR set to: 2
 12683                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 12684  0AD2' A100'              	btfss	_loRa& (0+255),0,b
 12685  0AD4' D054               	goto	l723
 12686                           
 12687                           ; BSR set to: 2
 12688                           ;lorawan.c: 1468: {
 12689                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 12690  0AD6' 0100               	movlb	0	; () banked
 12691  0AD8' EE20 F005          	lfsr	2,5
 12692  0ADC' 5100'              	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12693  0ADE' 26D9               	addwf	fsr2l,f,c
 12694  0AE0' 5100'              	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12695  0AE2' 22DA               	addwfc	fsr2h,f,c
 12696  0AE4' AADF               	btfss	indf2,5,c
 12697  0AE6' D048               	goto	l724
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;lorawan.c: 1470: {
 12701                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12702  0AE8' 0102               	movlb	2	; () banked
 12703  0AEA' 9100'              	bcf	_loRa& (0+255),0,b
 12704                           
 12705                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 12706  0AEC' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 12707  0AEE' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 12708  0AF0' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 12709  0AF2' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 12710                           
 12711                           ; BSR set to: 2
 12712                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 12713  0AF4' 0100               	movlb	0	; () banked
 12714  0AF6' 5100'              	movf	_rxPayload& (0+255),w,b
 12715  0AF8' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 12716  0AFA' B4D8               	btfsc	status,2,c
 12717  0AFC' D016               	goto	u11039
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;lorawan.c: 1474: {
 12721                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 12722  0AFE' 0102               	movlb	2	; () banked
 12723  0B00' 9B00'              	bcf	_loRa& (0+255),5,b
 12724                           
 12725                           ; BSR set to: 2
 12726                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12727  0B02' C088' F000'        	movff	LORAWAN_RxDone@packet,RxData@pData
 12728  0B06' C089' F001'        	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 12729  0B0A' C090' F002'        	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 12730  0B0E' 0E01               	movlw	1
 12731  0B10' 0100               	movlb	0	; () banked
 12732  0B12' 6F00'              	movwf	RxData@status& (0+255),b
 12733  0B14' D801               	call	u11038
 12734  0B16' D009               	goto	u11039
 12735  0B18'                    u11038:
 12736  0B18' 0005               	push	
 12737  0B1A' 6EFA               	movwf	pclath,c
 12738  0B1C' 5100'              	movf	_rxPayload& (0+255),w,b
 12739  0B1E' 6EFD               	movwf	tosl,c
 12740  0B20' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 12741  0B22' 6EFE               	movwf	tosh,c
 12742  0B24' 6AFF               	clrf	tosu,c
 12743  0B26' 50FA               	movf	pclath,w,c
 12744  0B28' 0012               	return		;indir
 12745  0B2A'                    u11039:
 12746                           
 12747                           ;lorawan.c: 1477: }
 12748                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 12749  0B2A' 0102               	movlb	2	; () banked
 12750  0B2C' 9300'              	bcf	(_loRa+3)& (0+255),1,b
 12751                           
 12752                           ; BSR set to: 2
 12753                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12754  0B2E' BB00'              	btfsc	(_loRa+2)& (0+255),5,b
 12755                           
 12756                           ; BSR set to: 2
 12757  0B30' BB00'              	btfsc	_loRa& (0+255),5,b
 12758  0B32' D06B               	goto	l738
 12759                           
 12760                           ; BSR set to: 2
 12761  0B34' B300'              	btfsc	_loRa& (0+255),1,b
 12762  0B36' D002               	goto	u11070
 12763                           
 12764                           ; BSR set to: 2
 12765  0B38' A700'              	btfss	_loRa& (0+255),3,b
 12766  0B3A' D067               	goto	l738
 12767  0B3C'                    u11070:
 12768                           
 12769                           ; BSR set to: 2
 12770                           ;lorawan.c: 1480: {
 12771                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12772                           
 12773                           ; BSR set to: 2
 12774  0B3C' 0E01               	movlw	1
 12775  0B3E' 0100               	movlb	0	; () banked
 12776  0B40' 6F00'              	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 12777  0B42' 0E00'              	movlw	low LORAWAN_RxDone@channelIndex
 12778  0B44' 6F00'              	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 12779  0B46' 0E00'              	movlw	high LORAWAN_RxDone@channelIndex
 12780  0B48' 6F00'              	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 12781  0B4A' 0102               	movlb	2	; () banked
 12782  0B4C' 5100'              	movf	(_loRa+222)& (0+255),w,b
 12783  0B4E' EC00' F000'        	call	_SearchAvailableChannel
 12784  0B52' 0900               	iorlw	0
 12785  0B54' A4D8               	btfss	status,2,c
 12786  0B56' D00D               	goto	l729
 12787                           
 12788                           ;lorawan.c: 1482: {
 12789                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 12790  0B58' 0E00               	movlw	0
 12791  0B5A' 0100               	movlb	0	; () banked
 12792  0B5C' 6F00'              	movwf	LORAWAN_Send@port& (0+255),b
 12793  0B5E' 0E00               	movlw	0
 12794  0B60' 6F00'              	movwf	LORAWAN_Send@buffer& (0+255),b
 12795  0B62' 0E00               	movlw	0
 12796  0B64' 6F00'              	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 12797  0B66' 0E00               	movlw	0
 12798  0B68' 6F00'              	movwf	LORAWAN_Send@bufferLength& (0+255),b
 12799  0B6A' 0E00               	movlw	0
 12800  0B6C' EC00' F000'        	call	_LORAWAN_Send
 12801  0B70' D047               	goto	l10862
 12802  0B72'                    l729:
 12803                           
 12804                           ;lorawan.c: 1486: else
 12805                           ;lorawan.c: 1487: {
 12806                           ;lorawan.c: 1489: StartReTxTimer();
 12807                           
 12808                           ; BSR set to: 2
 12809  0B72' EC00' F000'        	call	_StartReTxTimer	;wreg free
 12810                           
 12811                           ;lorawan.c: 1490: }
 12812                           ;lorawan.c: 1491: }
 12813                           ;lorawan.c: 1492: }
 12814  0B76' D049               	goto	l738
 12815  0B78'                    l724:
 12816                           
 12817                           ;lorawan.c: 1494: else
 12818                           ;lorawan.c: 1495: {
 12819                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 12820  0B78' EC00' F000'        	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 12821                           
 12822                           ;lorawan.c: 1497: }
 12823                           ;lorawan.c: 1498: }
 12824  0B7C' D046               	goto	l738
 12825  0B7E'                    l723:
 12826                           
 12827                           ; BSR set to: 2
 12828                           ;lorawan.c: 1499: else
 12829                           ;lorawan.c: 1500: {
 12830                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 12831  0B7E' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 12832  0B80' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 12833  0B82' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 12834  0B84' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 12835                           
 12836                           ; BSR set to: 2
 12837                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 12838  0B86' 0100               	movlb	0	; () banked
 12839  0B88' 5100'              	movf	_rxPayload& (0+255),w,b
 12840  0B8A' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 12841  0B8C' B4D8               	btfsc	status,2,c
 12842  0B8E' D016               	goto	u11109
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;lorawan.c: 1504: {
 12846                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 12847  0B90' 0102               	movlb	2	; () banked
 12848  0B92' 9B00'              	bcf	_loRa& (0+255),5,b
 12849                           
 12850                           ; BSR set to: 2
 12851                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12852  0B94' C088' F000'        	movff	LORAWAN_RxDone@packet,RxData@pData
 12853  0B98' C089' F001'        	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 12854  0B9C' C090' F002'        	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 12855  0BA0' 0E01               	movlw	1
 12856  0BA2' 0100               	movlb	0	; () banked
 12857  0BA4' 6F00'              	movwf	RxData@status& (0+255),b
 12858  0BA6' D801               	call	u11108
 12859  0BA8' D009               	goto	u11109
 12860  0BAA'                    u11108:
 12861  0BAA' 0005               	push	
 12862  0BAC' 6EFA               	movwf	pclath,c
 12863  0BAE' 5100'              	movf	_rxPayload& (0+255),w,b
 12864  0BB0' 6EFD               	movwf	tosl,c
 12865  0BB2' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 12866  0BB4' 6EFE               	movwf	tosh,c
 12867  0BB6' 6AFF               	clrf	tosu,c
 12868  0BB8' 50FA               	movf	pclath,w,c
 12869  0BBA' 0012               	return		;indir
 12870  0BBC'                    u11109:
 12871                           
 12872                           ;lorawan.c: 1507: }
 12873                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 12874  0BBC' 0102               	movlb	2	; () banked
 12875  0BBE' BB00'              	btfsc	(_loRa+2)& (0+255),5,b
 12876                           
 12877                           ; BSR set to: 2
 12878  0BC0' BB00'              	btfsc	_loRa& (0+255),5,b
 12879  0BC2' D023               	goto	l738
 12880                           
 12881                           ; BSR set to: 2
 12882  0BC4' B300'              	btfsc	_loRa& (0+255),1,b
 12883  0BC6' D002               	goto	u11140
 12884                           
 12885                           ; BSR set to: 2
 12886  0BC8' A700'              	btfss	_loRa& (0+255),3,b
 12887  0BCA' D01F               	goto	l738
 12888  0BCC'                    u11140:
 12889                           
 12890                           ; BSR set to: 2
 12891                           ;lorawan.c: 1510: {
 12892                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 12893                           
 12894                           ; BSR set to: 2
 12895  0BCC' 0E01               	movlw	1
 12896  0BCE' 0100               	movlb	0	; () banked
 12897  0BD0' 6F00'              	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 12898  0BD2' 0E00'              	movlw	low LORAWAN_RxDone@channelIndex
 12899  0BD4' 6F00'              	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 12900  0BD6' 0E00'              	movlw	high LORAWAN_RxDone@channelIndex
 12901  0BD8' 6F00'              	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 12902  0BDA' 0102               	movlb	2	; () banked
 12903  0BDC' 5100'              	movf	(_loRa+222)& (0+255),w,b
 12904  0BDE' EC00' F000'        	call	_SearchAvailableChannel
 12905  0BE2' 0900               	iorlw	0
 12906  0BE4' A4D8               	btfss	status,2,c
 12907  0BE6' D00F               	goto	l737
 12908                           
 12909                           ;lorawan.c: 1512: {
 12910                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 12911  0BE8' 0E00               	movlw	0
 12912  0BEA' 0100               	movlb	0	; () banked
 12913  0BEC' 6F00'              	movwf	LORAWAN_Send@port& (0+255),b
 12914  0BEE' 0E00               	movlw	0
 12915  0BF0' 6F00'              	movwf	LORAWAN_Send@buffer& (0+255),b
 12916  0BF2' 0E00               	movlw	0
 12917  0BF4' 6F00'              	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 12918  0BF6' 0E00               	movlw	0
 12919  0BF8' 6F00'              	movwf	LORAWAN_Send@bufferLength& (0+255),b
 12920  0BFA' 0E00               	movlw	0
 12921  0BFC' EC00' F000'        	call	_LORAWAN_Send
 12922  0C00'                    l10862:
 12923                           
 12924                           ;lorawan.c: 1514: loRa.lorawanMacStatus.fPending = 0;
 12925  0C00' 0102               	movlb	2	; () banked
 12926  0C02' 9700'              	bcf	_loRa& (0+255),3,b
 12927                           
 12928                           ;lorawan.c: 1515: }
 12929  0C04' D002               	goto	l738
 12930  0C06'                    l737:
 12931                           
 12932                           ;lorawan.c: 1516: else
 12933                           ;lorawan.c: 1517: {
 12934                           ;lorawan.c: 1519: StartReTxTimer();
 12935                           
 12936                           ; BSR set to: 2
 12937  0C06' EC00' F000'        	call	_StartReTxTimer	;wreg free
 12938  0C0A'                    l738:
 12939                           
 12940                           ;lorawan.c: 1520: }
 12941                           ;lorawan.c: 1521: }
 12942                           ;lorawan.c: 1522: }
 12943                           ;lorawan.c: 1524: if (CLASS_C == loRa.deviceClass)
 12944  0C0A' 0E02               	movlw	2
 12945  0C0C' 0102               	movlb	2	; () banked
 12946  0C0E' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 12947  0C10' A4D8               	btfss	status,2,c
 12948  0C12' 0012               	return	
 12949                           
 12950                           ; BSR set to: 2
 12951                           ;lorawan.c: 1525: {
 12952                           ;lorawan.c: 1526: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12953  0C14' 5100'              	movf	(_loRa+2)& (0+255),w,b
 12954  0C16' 0BF0               	andlw	-16
 12955  0C18' 0909               	iorlw	9
 12956  0C1A' 6F00'              	movwf	(_loRa+2)& (0+255),b
 12957                           
 12958                           ; BSR set to: 2
 12959                           ;lorawan.c: 1527: LORAWAN_EnterContinuousReceive();
 12960  0C1C' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12961                           
 12962                           ;lorawan.c: 1528: }
 12963                           ;lorawan.c: 1529: }
 12964  0C20' 0012               	return	
 12965  0C22'                    l678:
 12966                           
 12967                           ;lorawan.c: 1530: else
 12968                           ;lorawan.c: 1531: {
 12969                           ;lorawan.c: 1533: SetReceptionNotOkState ();
 12970  0C22' EC00' F000'        	call	_SetReceptionNotOkState	;wreg free
 12971                           
 12972                           ;lorawan.c: 1535: }
 12973                           ;lorawan.c: 1536: }
 12974                           
 12975                           ;lorawan.c: 1534: return INVALID_PARAMETER;
 12976                           ;	Return value of _LORAWAN_RxDone is never used
 12977  0C26' 0012               	return	
 12978  0C28'                    l664:
 12979                           
 12980                           ;lorawan.c: 1537: else
 12981                           ;lorawan.c: 1538: {
 12982                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 12983  0C28' 0100               	movlb	0	; () banked
 12984  0C2A' 5100'              	movf	_rxPayload& (0+255),w,b
 12985  0C2C' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 12986  0C2E' B4D8               	btfsc	status,2,c
 12987  0C30' 0012               	return	
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;lorawan.c: 1541: {
 12991                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 12992  0C32' EC00' F000'        	call	_RADIO_GetStatus	;wreg free
 12993  0C36' 0100               	movlb	0	; () banked
 12994  0C38' 6F00'              	movwf	??_LORAWAN_RxDone& (0+255),b
 12995  0C3A' B700'              	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 12996  0C3C' D013               	goto	l743
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;lorawan.c: 1543: {
 13000                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 13001  0C3E' C066' F000'        	movff	LORAWAN_RxDone@buffer,RxData@pData
 13002  0C42' C067' F001'        	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13003  0C46' C068' F002'        	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13004  0C4A' 0E03               	movlw	3
 13005  0C4C' 6F00'              	movwf	RxData@status& (0+255),b
 13006  0C4E' D801               	call	u11198
 13007  0C50' 0012               	return	
 13008  0C52'                    u11198:
 13009  0C52' 0005               	push	
 13010  0C54' 6EFA               	movwf	pclath,c
 13011  0C56' 5100'              	movf	_rxPayload& (0+255),w,b
 13012  0C58' 6EFD               	movwf	tosl,c
 13013  0C5A' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 13014  0C5C' 6EFE               	movwf	tosh,c
 13015  0C5E' 6AFF               	clrf	tosu,c
 13016  0C60' 50FA               	movf	pclath,w,c
 13017  0C62' 0012               	return		;indir
 13018  0C64'                    l743:
 13019                           
 13020                           ;lorawan.c: 1546: else
 13021                           ;lorawan.c: 1547: {
 13022                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 13023  0C64' C066' F000'        	movff	LORAWAN_RxDone@buffer,RxData@pData
 13024  0C68' C067' F001'        	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13025  0C6C' C068' F002'        	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13026  0C70' 0E02               	movlw	2
 13027  0C72' 0100               	movlb	0	; () banked
 13028  0C74' 6F00'              	movwf	RxData@status& (0+255),b
 13029  0C76' D801               	call	u11208
 13030  0C78' 0012               	return	
 13031  0C7A'                    u11208:
 13032  0C7A' 0005               	push	
 13033  0C7C' 6EFA               	movwf	pclath,c
 13034  0C7E' 5100'              	movf	_rxPayload& (0+255),w,b
 13035  0C80' 6EFD               	movwf	tosl,c
 13036  0C82' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 13037  0C84' 6EFE               	movwf	tosh,c
 13038  0C86' 6AFF               	clrf	tosu,c
 13039  0C88' 50FA               	movf	pclath,w,c
 13040  0C8A' 0012               	return		;indir
 13041  0C8C'                    __end_of_LORAWAN_RxDone:
 13042                           	opt stack 0
 13043                           tosu	equ	0xFFF
 13044                           tosh	equ	0xFFE
 13045                           tosl	equ	0xFFD
 13046                           pclath	equ	0xFFA
 13047                           tblptru	equ	0xFF8
 13048                           tblptrh	equ	0xFF7
 13049                           tblptrl	equ	0xFF6
 13050                           tablat	equ	0xFF5
 13051                           prodh	equ	0xFF4
 13052                           prodl	equ	0xFF3
 13053                           intcon	equ	0xFF2
 13054                           intcon2	equ	0xFF1
 13055                           intcon3	equ	0xFF0
 13056                           postinc0	equ	0xFEE
 13057                           wreg	equ	0xFE8
 13058                           postinc1	equ	0xFE6
 13059                           postdec1	equ	0xFE5
 13060                           plusw1	equ	0xFE3
 13061                           fsr1h	equ	0xFE2
 13062                           fsr1l	equ	0xFE1
 13063                           indf2	equ	0xFDF
 13064                           postinc2	equ	0xFDE
 13065                           postdec2	equ	0xFDD
 13066                           fsr2h	equ	0xFDA
 13067                           fsr2l	equ	0xFD9
 13068                           status	equ	0xFD8
 13069                           
 13070 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 13071 ;; Defined at:
 13072 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;		None
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;		None
 13077 ;; Return value:  Size  Location     Type
 13078 ;;                  1    wreg      void 
 13079 ;; Registers used:
 13080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13081 ;; Tracked objects:
 13082 ;;		On entry : 0/0
 13083 ;;		On exit  : 0/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13090 ;;Total ram usage:        4 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:   11
 13093 ;; This function calls:
 13094 ;;		_SwTimerSetTimeout
 13095 ;;		_SwTimerStart
 13096 ;;		___lldiv
 13097 ;; This function is called by:
 13098 ;;		_AckRetransmissionCallback
 13099 ;;		_LORAWAN_RxDone
 13100 ;;		_Retransmissions
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           	psect	text59
 13105  0000'                    __ptext59:
 13106                           	opt stack 0
 13107  0000'                    _UpdateRetransmissionAckTimeoutState:
 13108                           	opt stack 14
 13109                           
 13110                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 13111                           
 13112                           ;incstack = 0
 13113  0000' 0102               	movlb	2	; () banked
 13114  0002' 5100'              	movf	(_loRa+2)& (0+255),w,b
 13115  0004' 0BF0               	andlw	-16
 13116  0006' 0906               	iorlw	6
 13117  0008' 6F00'              	movwf	(_loRa+2)& (0+255),b
 13118                           
 13119                           ; BSR set to: 2
 13120                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 13121  000A' 5100'              	movf	(_loRa+146)& (0+255),w,b
 13122  000C' 0100               	movlb	0	; () banked
 13123  000E' 6F00'              	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 13124  0010' 0102               	movlb	2	; () banked
 13125  0012' 5100'              	movf	(_loRa+147)& (0+255),w,b
 13126  0014' 0100               	movlb	0	; () banked
 13127  0016' 6F00'              	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 13128  0018' 6B00'              	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 13129  001A' 6B00'              	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 13130  001C' 0E0C               	movlw	12
 13131  001E'                    u9485:
 13132  001E' 90D8               	bcf	status,0,c
 13133  0020' 3700'              	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 13134  0022' 3700'              	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 13135  0024' 3700'              	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 13136  0026' 3700'              	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 13137  0028' 2EE8               	decfsz	wreg,f,c
 13138  002A' D7F9               	goto	u9485
 13139  002C' C03A' F000'        	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 13140  0030' C03B' F001'        	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 13141  0034' C03C' F002'        	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 13142  0038' C03D' F003'        	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 13143  003C' 0E7D               	movlw	125
 13144  003E' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 13145  0040' 0E00               	movlw	0
 13146  0042' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 13147  0044' 0E00               	movlw	0
 13148  0046' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 13149  0048' 0E00               	movlw	0
 13150  004A' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 13151  004C' EC00' F000'        	call	___lldiv	;wreg free
 13152  0050' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 13153  0054' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 13154  0058' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 13155  005C' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 13156  0060' 0102               	movlb	2	; () banked
 13157  0062' 5100'              	movf	(_loRa+217)& (0+255),w,b
 13158  0064' EC00' F000'        	call	_SwTimerSetTimeout
 13159                           
 13160                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 13161  0068' 0102               	movlb	2	; () banked
 13162  006A' 5100'              	movf	(_loRa+217)& (0+255),w,b
 13163  006C' EC00' F000'        	call	_SwTimerStart
 13164  0070' 0012               	return		;funcret
 13165  0072'                    __end_of_UpdateRetransmissionAckTimeoutState:
 13166                           	opt stack 0
 13167                           tosu	equ	0xFFF
 13168                           tosh	equ	0xFFE
 13169                           tosl	equ	0xFFD
 13170                           pclath	equ	0xFFA
 13171                           tblptru	equ	0xFF8
 13172                           tblptrh	equ	0xFF7
 13173                           tblptrl	equ	0xFF6
 13174                           tablat	equ	0xFF5
 13175                           prodh	equ	0xFF4
 13176                           prodl	equ	0xFF3
 13177                           intcon	equ	0xFF2
 13178                           intcon2	equ	0xFF1
 13179                           intcon3	equ	0xFF0
 13180                           postinc0	equ	0xFEE
 13181                           wreg	equ	0xFE8
 13182                           postinc1	equ	0xFE6
 13183                           postdec1	equ	0xFE5
 13184                           plusw1	equ	0xFE3
 13185                           fsr1h	equ	0xFE2
 13186                           fsr1l	equ	0xFE1
 13187                           indf2	equ	0xFDF
 13188                           postinc2	equ	0xFDE
 13189                           postdec2	equ	0xFDD
 13190                           fsr2h	equ	0xFDA
 13191                           fsr2l	equ	0xFD9
 13192                           status	equ	0xFD8
 13193                           
 13194 ;; *************** function _UpdateDLSettings *****************
 13195 ;; Defined at:
 13196 ;;		line 692 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;  dlRx2Dr         1    wreg     unsigned char 
 13199 ;;  dlRx1DrOffse    1    0[BANK0 ] unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  dlRx2Dr         1    1[BANK0 ] unsigned char 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  1    wreg      void 
 13204 ;; Registers used:
 13205 ;;		wreg, status,2, status,0
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13211 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13215 ;;Total ram usage:        2 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    7
 13218 ;; This function calls:
 13219 ;;		Nothing
 13220 ;; This function is called by:
 13221 ;;		_LORAWAN_RxDone
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           	psect	text60
 13226  0000'                    __ptext60:
 13227                           	opt stack 0
 13228  0000'                    _UpdateDLSettings:
 13229                           	opt stack 19
 13230                           
 13231                           ;incstack = 0
 13232                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 13233  0000' 0100               	movlb	0	; () banked
 13234  0002' 6F00'              	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 13235                           
 13236                           ;lorawan_na.c: 694: if ( (dlRx2Dr >= 8) && (dlRx2Dr <= 13) )
 13237  0004' 0E07               	movlw	7
 13238  0006' 0100               	movlb	0	; () banked
 13239  0008' 6500'              	cpfsgt	UpdateDLSettings@dlRx2Dr& (0+255),b
 13240  000A' D005               	goto	l1542
 13241                           
 13242                           ; BSR set to: 0
 13243  000C' 0E0E               	movlw	14
 13244  000E' 6100'              	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 13245  0010' D002               	goto	l1542
 13246                           
 13247                           ; BSR set to: 0
 13248                           ;lorawan_na.c: 695: {
 13249                           ;lorawan_na.c: 696: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 13250  0012' C001' F01C'        	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 13251  0016'                    l1542:
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;lorawan_na.c: 697: }
 13255                           ;lorawan_na.c: 699: if (dlRx1DrOffset <= 3)
 13256                           
 13257                           ; BSR set to: 0
 13258  0016' 0E04               	movlw	4
 13259  0018' 6100'              	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 13260  001A' 0012               	return	
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;lorawan_na.c: 700: {
 13264                           ;lorawan_na.c: 702: loRa.offset = dlRx1DrOffset;
 13265  001C' C000' F0E0'        	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+224
 13266  0020' 0012               	return	
 13267  0022'                    __end_of_UpdateDLSettings:
 13268                           	opt stack 0
 13269                           tosu	equ	0xFFF
 13270                           tosh	equ	0xFFE
 13271                           tosl	equ	0xFFD
 13272                           pclath	equ	0xFFA
 13273                           tblptru	equ	0xFF8
 13274                           tblptrh	equ	0xFF7
 13275                           tblptrl	equ	0xFF6
 13276                           tablat	equ	0xFF5
 13277                           prodh	equ	0xFF4
 13278                           prodl	equ	0xFF3
 13279                           intcon	equ	0xFF2
 13280                           intcon2	equ	0xFF1
 13281                           intcon3	equ	0xFF0
 13282                           postinc0	equ	0xFEE
 13283                           wreg	equ	0xFE8
 13284                           postinc1	equ	0xFE6
 13285                           postdec1	equ	0xFE5
 13286                           plusw1	equ	0xFE3
 13287                           fsr1h	equ	0xFE2
 13288                           fsr1l	equ	0xFE1
 13289                           indf2	equ	0xFDF
 13290                           postinc2	equ	0xFDE
 13291                           postdec2	equ	0xFDD
 13292                           fsr2h	equ	0xFDA
 13293                           fsr2l	equ	0xFD9
 13294                           status	equ	0xFD8
 13295                           
 13296 ;; *************** function _UpdateCfList *****************
 13297 ;; Defined at:
 13298 ;;		line 667 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;  bufferLength    1    wreg     unsigned char 
 13301 ;;  joinAccept      2    0[BANK0 ] PTR struct .
 13302 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;  bufferLength    1    0[COMRAM] unsigned char 
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      void 
 13307 ;; Registers used:
 13308 ;;		wreg
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13314 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13318 ;;Total ram usage:        2 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    7
 13321 ;; This function calls:
 13322 ;;		Nothing
 13323 ;; This function is called by:
 13324 ;;		_LORAWAN_RxDone
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           	psect	text61
 13329  0000'                    __ptext61:
 13330                           	opt stack 0
 13331  0000'                    _UpdateCfList:
 13332                           	opt stack 19
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;incstack = 0
 13336  0000' 0012               	return		;funcret
 13337  0002'                    __end_of_UpdateCfList:
 13338                           	opt stack 0
 13339                           tosu	equ	0xFFF
 13340                           tosh	equ	0xFFE
 13341                           tosl	equ	0xFFD
 13342                           pclath	equ	0xFFA
 13343                           tblptru	equ	0xFF8
 13344                           tblptrh	equ	0xFF7
 13345                           tblptrl	equ	0xFF6
 13346                           tablat	equ	0xFF5
 13347                           prodh	equ	0xFF4
 13348                           prodl	equ	0xFF3
 13349                           intcon	equ	0xFF2
 13350                           intcon2	equ	0xFF1
 13351                           intcon3	equ	0xFF0
 13352                           postinc0	equ	0xFEE
 13353                           wreg	equ	0xFE8
 13354                           postinc1	equ	0xFE6
 13355                           postdec1	equ	0xFE5
 13356                           plusw1	equ	0xFE3
 13357                           fsr1h	equ	0xFE2
 13358                           fsr1l	equ	0xFE1
 13359                           indf2	equ	0xFDF
 13360                           postinc2	equ	0xFDE
 13361                           postdec2	equ	0xFDD
 13362                           fsr2h	equ	0xFDA
 13363                           fsr2l	equ	0xFD9
 13364                           status	equ	0xFD8
 13365                           
 13366 ;; *************** function _StartReTxTimer *****************
 13367 ;; Defined at:
 13368 ;;		line 706 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;		None
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      void 
 13375 ;; Registers used:
 13376 ;;		None
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;Total ram usage:        0 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; Hardware stack levels required when called:    7
 13389 ;; This function calls:
 13390 ;;		Nothing
 13391 ;; This function is called by:
 13392 ;;		_LORAWAN_RxDone
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           	psect	text62
 13397  0000'                    __ptext62:
 13398                           	opt stack 0
 13399  0000'                    _StartReTxTimer:
 13400                           	opt stack 19
 13401                           
 13402                           ;incstack = 0
 13403  0000' 0012               	return		;funcret
 13404  0002'                    __end_of_StartReTxTimer:
 13405                           	opt stack 0
 13406                           tosu	equ	0xFFF
 13407                           tosh	equ	0xFFE
 13408                           tosl	equ	0xFFD
 13409                           pclath	equ	0xFFA
 13410                           tblptru	equ	0xFF8
 13411                           tblptrh	equ	0xFF7
 13412                           tblptrl	equ	0xFF6
 13413                           tablat	equ	0xFF5
 13414                           prodh	equ	0xFF4
 13415                           prodl	equ	0xFF3
 13416                           intcon	equ	0xFF2
 13417                           intcon2	equ	0xFF1
 13418                           intcon3	equ	0xFF0
 13419                           postinc0	equ	0xFEE
 13420                           wreg	equ	0xFE8
 13421                           postinc1	equ	0xFE6
 13422                           postdec1	equ	0xFE5
 13423                           plusw1	equ	0xFE3
 13424                           fsr1h	equ	0xFE2
 13425                           fsr1l	equ	0xFE1
 13426                           indf2	equ	0xFDF
 13427                           postinc2	equ	0xFDE
 13428                           postdec2	equ	0xFDD
 13429                           fsr2h	equ	0xFDA
 13430                           fsr2l	equ	0xFD9
 13431                           status	equ	0xFD8
 13432                           
 13433 ;; *************** function _SetReceptionNotOkState *****************
 13434 ;; Defined at:
 13435 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;		None
 13438 ;; Auto vars:     Size  Location     Type
 13439 ;;		None
 13440 ;; Return value:  Size  Location     Type
 13441 ;;                  1    wreg      void 
 13442 ;; Registers used:
 13443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13444 ;; Tracked objects:
 13445 ;;		On entry : 0/0
 13446 ;;		On exit  : 0/0
 13447 ;;		Unchanged: 0/0
 13448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13453 ;;Total ram usage:        0 bytes
 13454 ;; Hardware stack levels used:    1
 13455 ;; Hardware stack levels required when called:   14
 13456 ;; This function calls:
 13457 ;;		_LORAWAN_EnterContinuousReceive
 13458 ;;		_RxData
 13459 ;; This function is called by:
 13460 ;;		_LORAWAN_RxDone
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           	psect	text63
 13465  0000'                    __ptext63:
 13466                           	opt stack 0
 13467  0000'                    _SetReceptionNotOkState:
 13468                           	opt stack 12
 13469                           
 13470                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 13471                           
 13472                           ;incstack = 0
 13473  0000' 0102               	movlb	2	; () banked
 13474  0002' 5100'              	movf	(_loRa+2)& (0+255),w,b
 13475  0004' 0B0F               	andlw	15
 13476  0006' 0A05               	xorlw	5
 13477  0008' B4D8               	btfsc	status,2,c
 13478  000A' D008               	goto	u10200
 13479                           
 13480                           ; BSR set to: 2
 13481  000C' 5100'              	movf	(_loRa+2)& (0+255),w,b
 13482  000E' 0B0F               	andlw	15
 13483  0010' 0A03               	xorlw	3
 13484  0012' A4D8               	btfss	status,2,c
 13485  0014' D028               	goto	l852
 13486                           
 13487                           ; BSR set to: 2
 13488  0016' 5100'              	movf	(_loRa+226)& (0+255),w,b
 13489  0018' B4D8               	btfsc	status,2,c
 13490  001A' D025               	goto	l852
 13491  001C'                    u10200:
 13492                           
 13493                           ; BSR set to: 2
 13494                           ;lorawan.c: 2000: {
 13495                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13496  001C' 9100'              	bcf	_loRa& (0+255),0,b
 13497                           
 13498                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 13499  001E' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 13500  0020' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 13501  0022' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 13502  0024' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 13503                           
 13504                           ; BSR set to: 2
 13505                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 13506  0026' 5100'              	movf	(_loRa+18)& (0+255),w,b
 13507  0028' A4D8               	btfss	status,2,c
 13508  002A' D01B               	goto	u10239
 13509                           
 13510                           ; BSR set to: 2
 13511  002C' 0100               	movlb	0	; () banked
 13512  002E' 5100'              	movf	_rxPayload& (0+255),w,b
 13513  0030' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 13514  0032' B4D8               	btfsc	status,2,c
 13515  0034' D016               	goto	u10239
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;lorawan.c: 2005: {
 13519                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 13520  0036' 0102               	movlb	2	; () banked
 13521  0038' 9B00'              	bcf	_loRa& (0+255),5,b
 13522                           
 13523                           ; BSR set to: 2
 13524                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13525  003A' 0E00               	movlw	0
 13526  003C' 0100               	movlb	0	; () banked
 13527  003E' 6F00'              	movwf	RxData@pData& (0+255),b
 13528  0040' 0E00               	movlw	0
 13529  0042' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 13530  0044' 0E00               	movlw	0
 13531  0046' 6F00'              	movwf	RxData@dataLength& (0+255),b
 13532  0048' 0E00               	movlw	0
 13533  004A' 6F00'              	movwf	RxData@status& (0+255),b
 13534  004C' D801               	call	u10238
 13535  004E' D009               	goto	u10239
 13536  0050'                    u10238:
 13537  0050' 0005               	push	
 13538  0052' 6EFA               	movwf	pclath,c
 13539  0054' 5100'              	movf	_rxPayload& (0+255),w,b
 13540  0056' 6EFD               	movwf	tosl,c
 13541  0058' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 13542  005A' 6EFE               	movwf	tosh,c
 13543  005C' 6AFF               	clrf	tosu,c
 13544  005E' 50FA               	movf	pclath,w,c
 13545  0060' 0012               	return		;indir
 13546  0062'                    u10239:
 13547                           
 13548                           ;lorawan.c: 2008: }
 13549                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 13550  0062' 0102               	movlb	2	; () banked
 13551  0064' 9300'              	bcf	(_loRa+3)& (0+255),1,b
 13552  0066'                    l852:
 13553                           
 13554                           ; BSR set to: 2
 13555                           ;lorawan.c: 2010: }
 13556                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 13557                           
 13558                           ; BSR set to: 2
 13559  0066' 0E02               	movlw	2
 13560  0068' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 13561  006A' A4D8               	btfss	status,2,c
 13562  006C' 0012               	return	
 13563                           
 13564                           ; BSR set to: 2
 13565                           ;lorawan.c: 2013: {
 13566                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13567  006E' 5100'              	movf	(_loRa+2)& (0+255),w,b
 13568  0070' 0BF0               	andlw	-16
 13569  0072' 0909               	iorlw	9
 13570  0074' 6F00'              	movwf	(_loRa+2)& (0+255),b
 13571                           
 13572                           ; BSR set to: 2
 13573                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 13574  0076' EC00' F000'        	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13575  007A' 0012               	return	
 13576  007C'                    __end_of_SetReceptionNotOkState:
 13577                           	opt stack 0
 13578                           tosu	equ	0xFFF
 13579                           tosh	equ	0xFFE
 13580                           tosl	equ	0xFFD
 13581                           pclath	equ	0xFFA
 13582                           tblptru	equ	0xFF8
 13583                           tblptrh	equ	0xFF7
 13584                           tblptrl	equ	0xFF6
 13585                           tablat	equ	0xFF5
 13586                           prodh	equ	0xFF4
 13587                           prodl	equ	0xFF3
 13588                           intcon	equ	0xFF2
 13589                           intcon2	equ	0xFF1
 13590                           intcon3	equ	0xFF0
 13591                           postinc0	equ	0xFEE
 13592                           wreg	equ	0xFE8
 13593                           postinc1	equ	0xFE6
 13594                           postdec1	equ	0xFE5
 13595                           plusw1	equ	0xFE3
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 13606 ;; Defined at:
 13607 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;		None
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;		None
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1    wreg      void 
 13614 ;; Registers used:
 13615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;Total ram usage:        0 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:   13
 13628 ;; This function calls:
 13629 ;;		_ConfigureRadioRx
 13630 ;;		_RADIO_ReceiveStart
 13631 ;;		_RADIO_ReceiveStop
 13632 ;;		_RADIO_ReleaseData
 13633 ;;		_ResetParametersForConfirmedTransmission
 13634 ;;		_ResetParametersForUnconfirmedTransmission
 13635 ;;		_RxData
 13636 ;; This function is called by:
 13637 ;;		_LORAWAN_ReceiveWindow2Callback
 13638 ;;		_LORAWAN_RxDone
 13639 ;;		_SetReceptionNotOkState
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text64
 13644  0000'                    __ptext64:
 13645                           	opt stack 0
 13646  0000'                    _LORAWAN_EnterContinuousReceive:
 13647                           	opt stack 14
 13648                           
 13649                           ;lorawan.c: 917: RADIO_ReceiveStop();
 13650                           
 13651                           ;incstack = 0
 13652  0000' EC00' F000'        	call	_RADIO_ReceiveStop	;wreg free
 13653                           
 13654                           ;lorawan.c: 918: RADIO_ReleaseData();
 13655  0004' EC00' F000'        	call	_RADIO_ReleaseData	;wreg free
 13656                           
 13657                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 13658  0008' C018' F009'        	movff	_loRa+24,ConfigureRadioRx@freq
 13659  000C' C019' F00A'        	movff	_loRa+25,ConfigureRadioRx@freq+1
 13660  0010' C01A' F00B'        	movff	_loRa+26,ConfigureRadioRx@freq+2
 13661  0014' C01B' F00C'        	movff	_loRa+27,ConfigureRadioRx@freq+3
 13662  0018' 0102               	movlb	2	; () banked
 13663  001A' 5100'              	movf	(_loRa+28)& (0+255),w,b
 13664  001C' EC00' F000'        	call	_ConfigureRadioRx
 13665                           
 13666                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 13667  0020' 0E00               	movlw	0
 13668  0022' 0100               	movlb	0	; () banked
 13669  0024' 6F00'              	movwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 13670  0026' 0E00               	movlw	0
 13671  0028' 6F00'              	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 13672  002A' EC00' F000'        	call	_RADIO_ReceiveStart	;wreg free
 13673  002E' 0100               	movlb	0	; () banked
 13674  0030' 5100'              	movf	?_RADIO_ReceiveStart& (0+255),w,b
 13675  0032' 1100'              	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 13676  0034' B4D8               	btfsc	status,2,c
 13677  0036' 0012               	return	
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;lorawan.c: 923: {
 13681                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 13682  0038' EC00' F000'        	call	_ResetParametersForConfirmedTransmission	;wreg free
 13683                           
 13684                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 13685  003C' EC00' F000'        	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 13686                           
 13687                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 13688  0040' 0102               	movlb	2	; () banked
 13689  0042' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 13690  0044' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 13691  0046' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 13692  0048' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 13693                           
 13694                           ; BSR set to: 2
 13695                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 13696  004A' 0100               	movlb	0	; () banked
 13697  004C' 5100'              	movf	_rxPayload& (0+255),w,b
 13698  004E' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 13699  0050' B4D8               	btfsc	status,2,c
 13700  0052' 0012               	return	
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;lorawan.c: 928: {
 13704                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13705  0054' 0E00               	movlw	0
 13706  0056' 6F00'              	movwf	RxData@pData& (0+255),b
 13707  0058' 0E00               	movlw	0
 13708  005A' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 13709  005C' 0E00               	movlw	0
 13710  005E' 6F00'              	movwf	RxData@dataLength& (0+255),b
 13711  0060' 0E00               	movlw	0
 13712  0062' 6F00'              	movwf	RxData@status& (0+255),b
 13713  0064' D801               	call	u9478
 13714  0066' 0012               	return	
 13715  0068'                    u9478:
 13716  0068' 0005               	push	
 13717  006A' 6EFA               	movwf	pclath,c
 13718  006C' 5100'              	movf	_rxPayload& (0+255),w,b
 13719  006E' 6EFD               	movwf	tosl,c
 13720  0070' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 13721  0072' 6EFE               	movwf	tosh,c
 13722  0074' 6AFF               	clrf	tosu,c
 13723  0076' 50FA               	movf	pclath,w,c
 13724  0078' 0012               	return		;indir
 13725  007A'                    __end_of_LORAWAN_EnterContinuousReceive:
 13726                           	opt stack 0
 13727                           tosu	equ	0xFFF
 13728                           tosh	equ	0xFFE
 13729                           tosl	equ	0xFFD
 13730                           pclath	equ	0xFFA
 13731                           tblptru	equ	0xFF8
 13732                           tblptrh	equ	0xFF7
 13733                           tblptrl	equ	0xFF6
 13734                           tablat	equ	0xFF5
 13735                           prodh	equ	0xFF4
 13736                           prodl	equ	0xFF3
 13737                           intcon	equ	0xFF2
 13738                           intcon2	equ	0xFF1
 13739                           intcon3	equ	0xFF0
 13740                           postinc0	equ	0xFEE
 13741                           wreg	equ	0xFE8
 13742                           postinc1	equ	0xFE6
 13743                           postdec1	equ	0xFE5
 13744                           plusw1	equ	0xFE3
 13745                           fsr1h	equ	0xFE2
 13746                           fsr1l	equ	0xFE1
 13747                           indf2	equ	0xFDF
 13748                           postinc2	equ	0xFDE
 13749                           postdec2	equ	0xFDD
 13750                           fsr2h	equ	0xFDA
 13751                           fsr2l	equ	0xFD9
 13752                           status	equ	0xFD8
 13753                           
 13754 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 13755 ;; Defined at:
 13756 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;		None
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;		None
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      void 
 13763 ;; Registers used:
 13764 ;;		wreg, status,2
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13774 ;;Total ram usage:        0 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    7
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_LORAWAN_ReceiveWindow2Callback
 13781 ;;		_LORAWAN_EnterContinuousReceive
 13782 ;;		_UnconfirmedTransmissionCallback
 13783 ;;		_Retransmissions
 13784 ;;		_TransmissionErrorCallback
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	text65
 13789  0000'                    __ptext65:
 13790                           	opt stack 0
 13791  0000'                    _ResetParametersForUnconfirmedTransmission:
 13792                           	opt stack 20
 13793                           
 13794                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 13795                           
 13796                           ;incstack = 0
 13797  0000' 0102               	movlb	2	; () banked
 13798  0002' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 13799  0004' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 13800  0006' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 13801  0008' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 13802                           
 13803                           ; BSR set to: 2
 13804                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 13805  000A' 0E01               	movlw	1
 13806  000C' 6F00'              	movwf	(_loRa+201)& (0+255),b
 13807                           
 13808                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 13809  000E' 0E00               	movlw	0
 13810  0010' 6F00'              	movwf	(_loRa+152)& (0+255),b
 13811                           
 13812                           ; BSR set to: 2
 13813  0012' 0012               	return		;funcret
 13814  0014'                    __end_of_ResetParametersForUnconfirmedTransmission:
 13815                           	opt stack 0
 13816                           tosu	equ	0xFFF
 13817                           tosh	equ	0xFFE
 13818                           tosl	equ	0xFFD
 13819                           pclath	equ	0xFFA
 13820                           tblptru	equ	0xFF8
 13821                           tblptrh	equ	0xFF7
 13822                           tblptrl	equ	0xFF6
 13823                           tablat	equ	0xFF5
 13824                           prodh	equ	0xFF4
 13825                           prodl	equ	0xFF3
 13826                           intcon	equ	0xFF2
 13827                           intcon2	equ	0xFF1
 13828                           intcon3	equ	0xFF0
 13829                           postinc0	equ	0xFEE
 13830                           wreg	equ	0xFE8
 13831                           postinc1	equ	0xFE6
 13832                           postdec1	equ	0xFE5
 13833                           plusw1	equ	0xFE3
 13834                           fsr1h	equ	0xFE2
 13835                           fsr1l	equ	0xFE1
 13836                           indf2	equ	0xFDF
 13837                           postinc2	equ	0xFDE
 13838                           postdec2	equ	0xFDD
 13839                           fsr2h	equ	0xFDA
 13840                           fsr2l	equ	0xFD9
 13841                           status	equ	0xFD8
 13842                           
 13843 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 13844 ;; Defined at:
 13845 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13846 ;; Parameters:    Size  Location     Type
 13847 ;;		None
 13848 ;; Auto vars:     Size  Location     Type
 13849 ;;		None
 13850 ;; Return value:  Size  Location     Type
 13851 ;;                  1    wreg      void 
 13852 ;; Registers used:
 13853 ;;		wreg, status,2
 13854 ;; Tracked objects:
 13855 ;;		On entry : 0/0
 13856 ;;		On exit  : 0/0
 13857 ;;		Unchanged: 0/0
 13858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13863 ;;Total ram usage:        0 bytes
 13864 ;; Hardware stack levels used:    1
 13865 ;; Hardware stack levels required when called:    7
 13866 ;; This function calls:
 13867 ;;		Nothing
 13868 ;; This function is called by:
 13869 ;;		_LORAWAN_ReceiveWindow2Callback
 13870 ;;		_LORAWAN_EnterContinuousReceive
 13871 ;;		_AckRetransmissionCallback
 13872 ;;		_Retransmissions
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text66
 13877  0000'                    __ptext66:
 13878                           	opt stack 0
 13879  0000'                    _ResetParametersForConfirmedTransmission:
 13880                           	opt stack 18
 13881                           
 13882                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 13883                           
 13884                           ; BSR set to: 2
 13885                           ;incstack = 0
 13886  0000' 0102               	movlb	2	; () banked
 13887  0002' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 13888  0004' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 13889  0006' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 13890  0008' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 13891                           
 13892                           ; BSR set to: 2
 13893                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 13894  000A' 0E01               	movlw	1
 13895  000C' 6F00'              	movwf	(_loRa+202)& (0+255),b
 13896                           
 13897                           ; BSR set to: 2
 13898                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13899  000E' 9100'              	bcf	_loRa& (0+255),0,b
 13900                           
 13901                           ; BSR set to: 2
 13902  0010' 0012               	return		;funcret
 13903  0012'                    __end_of_ResetParametersForConfirmedTransmission:
 13904                           	opt stack 0
 13905                           tosu	equ	0xFFF
 13906                           tosh	equ	0xFFE
 13907                           tosl	equ	0xFFD
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           intcon3	equ	0xFF0
 13918                           postinc0	equ	0xFEE
 13919                           wreg	equ	0xFE8
 13920                           postinc1	equ	0xFE6
 13921                           postdec1	equ	0xFE5
 13922                           plusw1	equ	0xFE3
 13923                           fsr1h	equ	0xFE2
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _RADIO_ReleaseData *****************
 13933 ;; Defined at:
 13934 ;;		line 1211 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;		None
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;		None
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		status,2, status,0
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:        0 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    7
 13955 ;; This function calls:
 13956 ;;		Nothing
 13957 ;; This function is called by:
 13958 ;;		_LORAWAN_ReceiveWindow1Callback
 13959 ;;		_LORAWAN_ReceiveWindow2Callback
 13960 ;;		_LORAWAN_EnterContinuousReceive
 13961 ;;		_LORAWAN_RxDone
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           	psect	text67
 13966  0000'                    __ptext67:
 13967                           	opt stack 0
 13968  0000'                    _RADIO_ReleaseData:
 13969                           	opt stack 20
 13970                           
 13971                           ;radio_driver_SX1276.c: 1213: RadioConfiguration.flags &= ~(1 << (2));
 13972                           
 13973                           ; BSR set to: 2
 13974                           ;incstack = 0
 13975  0000' 0101               	movlb	1	; () banked
 13976  0002' 9500'              	bcf	(_RadioConfiguration+35)& (0+255),2,b
 13977                           
 13978                           ; BSR set to: 1
 13979  0004' 0012               	return		;funcret
 13980  0006'                    __end_of_RADIO_ReleaseData:
 13981                           	opt stack 0
 13982                           tosu	equ	0xFFF
 13983                           tosh	equ	0xFFE
 13984                           tosl	equ	0xFFD
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           intcon3	equ	0xFF0
 13995                           postinc0	equ	0xFEE
 13996                           wreg	equ	0xFE8
 13997                           postinc1	equ	0xFE6
 13998                           postdec1	equ	0xFE5
 13999                           plusw1	equ	0xFE3
 14000                           fsr1h	equ	0xFE2
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function _RADIO_ReceiveStart *****************
 14010 ;; Defined at:
 14011 ;;		line 923 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  rxWindowSize    2   81[BANK0 ] unsigned int 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;		None
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  2   81[BANK0 ] enum E7721
 14018 ;; Registers used:
 14019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14025 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;Total ram usage:       10 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:   12
 14032 ;; This function calls:
 14033 ;;		_RADIO_RegisterWrite
 14034 ;;		_RADIO_WriteConfiguration
 14035 ;;		_RADIO_WriteMode
 14036 ;;		_SwTimerSetTimeout
 14037 ;;		_SwTimerStart
 14038 ;;		___lldiv
 14039 ;; This function is called by:
 14040 ;;		_LORAWAN_ReceiveWindow1Callback
 14041 ;;		_LORAWAN_ReceiveWindow2Callback
 14042 ;;		_LORAWAN_EnterContinuousReceive
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text68
 14047  0000'                    __ptext68:
 14048                           	opt stack 0
 14049  0000'                    _RADIO_ReceiveStart:
 14050                           	opt stack 15
 14051                           
 14052                           ;radio_driver_SX1276.c: 925: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 14053                           
 14054                           ; BSR set to: 1
 14055                           ;incstack = 0
 14056  0000' 0101               	movlb	1	; () banked
 14057  0002' A500'              	btfss	(_RadioConfiguration+35)& (0+255),2,b
 14058  0004' D006               	goto	l1898
 14059                           
 14060                           ; BSR set to: 1
 14061                           ;radio_driver_SX1276.c: 926: {
 14062                           ;radio_driver_SX1276.c: 927: return ERR_BUFFER_LOCKED;
 14063  0006' 0E80               	movlw	128
 14064  0008' 0100               	movlb	0	; () banked
 14065  000A' 6F00'              	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 14066  000C' 0E03               	movlw	3
 14067  000E' 6F00'              	movwf	?_RADIO_ReceiveStart& (0+255),b
 14068                           
 14069                           ; BSR set to: 0
 14070  0010' 0012               	return	
 14071  0012'                    l1898:
 14072                           
 14073                           ;radio_driver_SX1276.c: 928: }
 14074                           ;radio_driver_SX1276.c: 930: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 14075                           
 14076                           ; BSR set to: 0
 14077  0012' C03A' F053'        	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 14078  0016' 0E03               	movlw	3
 14079  0018' 0100               	movlb	0	; () banked
 14080  001A' 1700'              	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 14081  001C' B4D8               	btfsc	status,2,c
 14082  001E' D005               	goto	l1900
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;radio_driver_SX1276.c: 931: {
 14086                           ;radio_driver_SX1276.c: 932: return ERR_RADIO_BUSY;
 14087  0020' 0E80               	movlw	128
 14088  0022' 6F00'              	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 14089  0024' 0E04               	movlw	4
 14090  0026' 6F00'              	movwf	?_RADIO_ReceiveStart& (0+255),b
 14091                           
 14092                           ; BSR set to: 0
 14093  0028' 0012               	return	
 14094  002A'                    l1900:
 14095                           
 14096                           ; BSR set to: 0
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;radio_driver_SX1276.c: 933: }
 14100                           ;radio_driver_SX1276.c: 941: do { LATB3 = 1; } while(0);
 14101  002A' 868A               	bsf	3978,3,c	;volatile
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;radio_driver_SX1276.c: 943: if (0 == rxWindowSize)
 14105                           
 14106                           ; BSR set to: 0
 14107  002C' 5100'              	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 14108  002E' 1100'              	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 14109  0030' A4D8               	btfss	status,2,c
 14110  0032' D007               	goto	l1903
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;radio_driver_SX1276.c: 944: {
 14114                           ;radio_driver_SX1276.c: 945: RADIO_WriteConfiguration(4);
 14115  0034' 0E00               	movlw	0
 14116  0036' 6F00'              	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 14117  0038' 0E04               	movlw	4
 14118  003A' 6F00'              	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 14119  003C' EC00' F000'        	call	_RADIO_WriteConfiguration	;wreg free
 14120                           
 14121                           ;radio_driver_SX1276.c: 946: }
 14122  0040' D006               	goto	l1904
 14123  0042'                    l1903:
 14124                           
 14125                           ;radio_driver_SX1276.c: 947: else
 14126                           ;radio_driver_SX1276.c: 948: {
 14127                           ;radio_driver_SX1276.c: 949: RADIO_WriteConfiguration(rxWindowSize);
 14128  0042' C051' F046'        	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 14129  0046' C052' F047'        	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 14130  004A' EC00' F000'        	call	_RADIO_WriteConfiguration	;wreg free
 14131  004E'                    l1904:
 14132                           
 14133                           ;radio_driver_SX1276.c: 950: }
 14134                           ;radio_driver_SX1276.c: 952: if (MODULATION_LORA == RadioConfiguration.modulation)
 14135  004E' 0101               	movlb	1	; () banked
 14136  0050' 0500'              	decf	(_RadioConfiguration+24)& (0+255),w,b
 14137  0052' A4D8               	btfss	status,2,c
 14138  0054' D013               	goto	l1905
 14139                           
 14140                           ; BSR set to: 1
 14141                           ;radio_driver_SX1276.c: 953: {
 14142                           ;radio_driver_SX1276.c: 956: RADIO_RegisterWrite(0x22, 0x01);
 14143  0056' 0E01               	movlw	1
 14144  0058' 0100               	movlb	0	; () banked
 14145  005A' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 14146  005C' 0E22               	movlw	34
 14147  005E' EC00' F000'        	call	_RADIO_RegisterWrite
 14148                           
 14149                           ;radio_driver_SX1276.c: 962: RADIO_RegisterWrite(0x40, 0x00);
 14150  0062' 0E00               	movlw	0
 14151  0064' 0100               	movlb	0	; () banked
 14152  0066' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 14153  0068' 0E40               	movlw	64
 14154  006A' EC00' F000'        	call	_RADIO_RegisterWrite
 14155                           
 14156                           ;radio_driver_SX1276.c: 963: RADIO_RegisterWrite(0x41, 0x00);
 14157  006E' 0E00               	movlw	0
 14158  0070' 0100               	movlb	0	; () banked
 14159  0072' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 14160  0074' 0E41               	movlw	65
 14161  0076' EC00' F000'        	call	_RADIO_RegisterWrite
 14162                           
 14163                           ;radio_driver_SX1276.c: 964: }
 14164  007A' D016               	goto	l1906
 14165  007C'                    l1905:
 14166                           
 14167                           ;radio_driver_SX1276.c: 965: else
 14168                           ;radio_driver_SX1276.c: 966: {
 14169                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 14170  007C' C04B' F002'        	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 14171  0080' 0E12               	movlw	18
 14172  0082' EC00' F000'        	call	_RADIO_RegisterWrite
 14173                           
 14174                           ;radio_driver_SX1276.c: 968: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 14175  0086' C04C' F002'        	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 14176  008A' 0E13               	movlw	19
 14177  008C' EC00' F000'        	call	_RADIO_RegisterWrite
 14178                           
 14179                           ;radio_driver_SX1276.c: 971: RADIO_RegisterWrite(0x40, 0x00);
 14180  0090' 0E00               	movlw	0
 14181  0092' 0100               	movlb	0	; () banked
 14182  0094' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 14183  0096' 0E40               	movlw	64
 14184  0098' EC00' F000'        	call	_RADIO_RegisterWrite
 14185                           
 14186                           ;radio_driver_SX1276.c: 972: RADIO_RegisterWrite(0x41, 0x00);
 14187  009C' 0E00               	movlw	0
 14188  009E' 0100               	movlb	0	; () banked
 14189  00A0' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 14190  00A2' 0E41               	movlw	65
 14191  00A4' EC00' F000'        	call	_RADIO_RegisterWrite
 14192  00A8'                    l1906:
 14193                           
 14194                           ;radio_driver_SX1276.c: 973: }
 14195                           ;radio_driver_SX1276.c: 975: RadioConfiguration.flags |= (1 << (1));
 14196  00A8' 0101               	movlb	1	; () banked
 14197  00AA' 8300'              	bsf	(_RadioConfiguration+35)& (0+255),1,b
 14198                           
 14199                           ; BSR set to: 1
 14200                           ;radio_driver_SX1276.c: 976: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 14201  00AC' 0EE7               	movlw	231
 14202  00AE' 1700'              	andwf	(_RadioConfiguration+35)& (0+255),f,b
 14203                           
 14204                           ; BSR set to: 1
 14205                           ;radio_driver_SX1276.c: 980: if (0 == rxWindowSize)
 14206  00B0' 0100               	movlb	0	; () banked
 14207  00B2' 5100'              	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 14208  00B4' 1100'              	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 14209  00B6' A4D8               	btfss	status,2,c
 14210  00B8' D008               	goto	l1907
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;radio_driver_SX1276.c: 981: {
 14214                           ;radio_driver_SX1276.c: 982: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 14215  00BA' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 14216  00BE' 0E00               	movlw	0
 14217  00C0' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 14218  00C2' 0E05               	movlw	5
 14219  00C4' EC00' F000'        	call	_RADIO_WriteMode
 14220                           
 14221                           ;radio_driver_SX1276.c: 983: }
 14222  00C8' D046               	goto	l1910
 14223  00CA'                    l1907:
 14224                           
 14225                           ;radio_driver_SX1276.c: 984: else
 14226                           ;radio_driver_SX1276.c: 985: {
 14227                           ;radio_driver_SX1276.c: 986: if (MODULATION_LORA == RadioConfiguration.modulation)
 14228  00CA' 0101               	movlb	1	; () banked
 14229  00CC' 0500'              	decf	(_RadioConfiguration+24)& (0+255),w,b
 14230  00CE' A4D8               	btfss	status,2,c
 14231  00D0' D009               	goto	l1909
 14232                           
 14233                           ; BSR set to: 1
 14234                           ;radio_driver_SX1276.c: 987: {
 14235                           ;radio_driver_SX1276.c: 988: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 14236  00D2' 0E01               	movlw	1
 14237  00D4' 0100               	movlb	0	; () banked
 14238  00D6' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 14239  00D8' 0E00               	movlw	0
 14240  00DA' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 14241  00DC' 0E06               	movlw	6
 14242  00DE' EC00' F000'        	call	_RADIO_WriteMode
 14243                           
 14244                           ;radio_driver_SX1276.c: 989: }
 14245  00E2' D039               	goto	l1910
 14246  00E4'                    l1909:
 14247                           
 14248                           ;radio_driver_SX1276.c: 990: else
 14249                           ;radio_driver_SX1276.c: 991: {
 14250                           ;radio_driver_SX1276.c: 992: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 14251  00E4' 0E00               	movlw	0
 14252  00E6' 0100               	movlb	0	; () banked
 14253  00E8' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 14254  00EA' 0E00               	movlw	0
 14255  00EC' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 14256  00EE' 0E05               	movlw	5
 14257  00F0' EC00' F000'        	call	_RADIO_WriteMode
 14258                           
 14259                           ;radio_driver_SX1276.c: 993: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 14260  00F4' 0100               	movlb	0	; () banked
 14261  00F6' 5100'              	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 14262  00F8' 6F00'              	movwf	??_RADIO_ReceiveStart& (0+255),b
 14263  00FA' 5100'              	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 14264  00FC' 6F00'              	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 14265  00FE' 6B00'              	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 14266  0100' 6B00'              	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 14267  0102' 0E0C               	movlw	12
 14268  0104'                    u8305:
 14269  0104' 90D8               	bcf	status,0,c
 14270  0106' 3700'              	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 14271  0108' 3700'              	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 14272  010A' 3700'              	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 14273  010C' 3700'              	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 14274  010E' 2EE8               	decfsz	wreg,f,c
 14275  0110' D7F9               	goto	u8305
 14276  0112' C053' F000'        	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 14277  0116' C054' F001'        	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 14278  011A' C055' F002'        	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 14279  011E' C056' F003'        	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 14280  0122' 0E7D               	movlw	125
 14281  0124' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 14282  0126' 0E00               	movlw	0
 14283  0128' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 14284  012A' 0E00               	movlw	0
 14285  012C' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 14286  012E' 0E00               	movlw	0
 14287  0130' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 14288  0132' EC00' F000'        	call	___lldiv	;wreg free
 14289  0136' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 14290  013A' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 14291  013E' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 14292  0142' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 14293  0146' 0101               	movlb	1	; () banked
 14294  0148' 5100'              	movf	(_RadioConfiguration+40)& (0+255),w,b
 14295  014A' EC00' F000'        	call	_SwTimerSetTimeout
 14296                           
 14297                           ;radio_driver_SX1276.c: 994: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 14298  014E' 0101               	movlb	1	; () banked
 14299  0150' 5100'              	movf	(_RadioConfiguration+40)& (0+255),w,b
 14300  0152' EC00' F000'        	call	_SwTimerStart
 14301  0156'                    l1910:
 14302                           
 14303                           ;radio_driver_SX1276.c: 995: }
 14304                           ;radio_driver_SX1276.c: 996: }
 14305                           ;radio_driver_SX1276.c: 998: if (0 != RadioConfiguration.watchdogTimerTimeout)
 14306  0156' 0101               	movlb	1	; () banked
 14307  0158' 5100'              	movf	(_RadioConfiguration+42)& (0+255),w,b
 14308  015A' 1100'              	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 14309  015C' 1100'              	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 14310  015E' 1100'              	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 14311  0160' B4D8               	btfsc	status,2,c
 14312  0162' D061               	goto	l1911
 14313                           
 14314                           ; BSR set to: 1
 14315                           ;radio_driver_SX1276.c: 999: {
 14316                           ;radio_driver_SX1276.c: 1000: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Ra
      +                          dioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguratio
      +                          n.watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdog
      +                          TimerTimeout)) /
 14317  0164' 5100'              	movf	(_RadioConfiguration+45)& (0+255),w,b
 14318  0166' E107               	bnz	u8320
 14319  0168' 2900'              	incf	(_RadioConfiguration+42)& (0+255),w,b
 14320  016A' 0EFF               	movlw	255
 14321  016C' 5900'              	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 14322  016E' 0E0F               	movlw	15
 14323  0170' 5900'              	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 14324  0172' A0D8               	btfss	status,0,c
 14325  0174' D01D               	goto	l1913
 14326  0176'                    u8320:
 14327                           
 14328                           ; BSR set to: 1
 14329  0176' C041' F000'        	movff	_RadioConfiguration+42,___lldiv@dividend
 14330  017A' C042' F001'        	movff	_RadioConfiguration+43,___lldiv@dividend+1
 14331  017E' C043' F002'        	movff	_RadioConfiguration+44,___lldiv@dividend+2
 14332  0182' C044' F003'        	movff	_RadioConfiguration+45,___lldiv@dividend+3
 14333  0186' 0E7D               	movlw	125
 14334  0188' 0100               	movlb	0	; () banked
 14335  018A' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 14336  018C' 0E00               	movlw	0
 14337  018E' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 14338  0190' 0E00               	movlw	0
 14339  0192' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 14340  0194' 0E00               	movlw	0
 14341  0196' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 14342  0198' EC00' F000'        	call	___lldiv	;wreg free
 14343  019C' 0E0C               	movlw	12
 14344  019E'                    u8335:
 14345  019E' 90D8               	bcf	status,0,c
 14346  01A0' 0100               	movlb	0	; () banked
 14347  01A2' 3700'              	rlcf	?___lldiv& (0+255),f,b
 14348  01A4' 3700'              	rlcf	(?___lldiv+1)& (0+255),f,b
 14349  01A6' 3700'              	rlcf	(?___lldiv+2)& (0+255),f,b
 14350  01A8' 3700'              	rlcf	(?___lldiv+3)& (0+255),f,b
 14351  01AA' 2EE8               	decfsz	wreg,f,c
 14352  01AC' D7F8               	goto	u8335
 14353  01AE' D023               	goto	L10
 14354  01B0'                    l1913:
 14355                           
 14356                           ; BSR set to: 0
 14357  01B0' C041' F053'        	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 14358  01B4' C042' F054'        	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 14359  01B8' C043' F055'        	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 14360  01BC' C044' F056'        	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 14361  01C0' 0E0C               	movlw	12
 14362  01C2'                    u8345:
 14363  01C2' 90D8               	bcf	status,0,c
 14364  01C4' 0100               	movlb	0	; () banked
 14365  01C6' 3700'              	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 14366  01C8' 3700'              	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 14367  01CA' 3700'              	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 14368  01CC' 3700'              	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 14369  01CE' 2EE8               	decfsz	wreg,f,c
 14370  01D0' D7F8               	goto	u8345
 14371  01D2' C053' F000'        	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 14372  01D6' C054' F001'        	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 14373  01DA' C055' F002'        	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 14374  01DE' C056' F003'        	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 14375  01E2' 0E7D               	movlw	125
 14376  01E4' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 14377  01E6' 0E00               	movlw	0
 14378  01E8' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 14379  01EA' 0E00               	movlw	0
 14380  01EC' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 14381  01EE' 0E00               	movlw	0
 14382  01F0' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 14383  01F2' EC00' F000'        	call	___lldiv	;wreg free
 14384  01F6'                    L10:
 14385  01F6' C000' F057'        	movff	?___lldiv,_RADIO_ReceiveStart$2833
 14386  01FA' C001' F058'        	movff	?___lldiv+1,_RADIO_ReceiveStart$2833+1
 14387  01FE' C002' F059'        	movff	?___lldiv+2,_RADIO_ReceiveStart$2833+2
 14388  0202' C003' F05A'        	movff	?___lldiv+3,_RADIO_ReceiveStart$2833+3
 14389  0206' C057' F00D'        	movff	_RADIO_ReceiveStart$2833,SwTimerSetTimeout@timeout
 14390  020A' C058' F00E'        	movff	_RADIO_ReceiveStart$2833+1,SwTimerSetTimeout@timeout+1
 14391  020E' C059' F00F'        	movff	_RADIO_ReceiveStart$2833+2,SwTimerSetTimeout@timeout+2
 14392  0212' C05A' F010'        	movff	_RADIO_ReceiveStart$2833+3,SwTimerSetTimeout@timeout+3
 14393  0216' 0101               	movlb	1	; () banked
 14394  0218' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 14395  021A' EC00' F000'        	call	_SwTimerSetTimeout
 14396                           
 14397                           ;radio_driver_SX1276.c: 1001: SwTimerStart(RadioConfiguration.watchdogTimerId);
 14398  021E' 0101               	movlb	1	; () banked
 14399  0220' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 14400  0222' EC00' F000'        	call	_SwTimerStart
 14401  0226'                    l1911:
 14402                           
 14403                           ;radio_driver_SX1276.c: 1002: }
 14404                           ;radio_driver_SX1276.c: 1003: return ERR_NONE;
 14405  0226' 0E00               	movlw	0
 14406  0228' 0100               	movlb	0	; () banked
 14407  022A' 6F00'              	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 14408  022C' 0E00               	movlw	0
 14409  022E' 6F00'              	movwf	?_RADIO_ReceiveStart& (0+255),b
 14410  0230' 0012               	return	
 14411  0232'                    __end_of_RADIO_ReceiveStart:
 14412                           	opt stack 0
 14413                           tosu	equ	0xFFF
 14414                           tosh	equ	0xFFE
 14415                           tosl	equ	0xFFD
 14416                           pclath	equ	0xFFA
 14417                           tblptru	equ	0xFF8
 14418                           tblptrh	equ	0xFF7
 14419                           tblptrl	equ	0xFF6
 14420                           tablat	equ	0xFF5
 14421                           prodh	equ	0xFF4
 14422                           prodl	equ	0xFF3
 14423                           intcon	equ	0xFF2
 14424                           intcon2	equ	0xFF1
 14425                           intcon3	equ	0xFF0
 14426                           postinc0	equ	0xFEE
 14427                           wreg	equ	0xFE8
 14428                           postinc1	equ	0xFE6
 14429                           postdec1	equ	0xFE5
 14430                           plusw1	equ	0xFE3
 14431                           fsr1h	equ	0xFE2
 14432                           fsr1l	equ	0xFE1
 14433                           indf2	equ	0xFDF
 14434                           postinc2	equ	0xFDE
 14435                           postdec2	equ	0xFDD
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _ConfigureRadioRx *****************
 14441 ;; Defined at:
 14442 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  dataRate        1    wreg     unsigned char 
 14445 ;;  freq            4    9[BANK0 ] unsigned long 
 14446 ;; Auto vars:     Size  Location     Type
 14447 ;;  dataRate        1   13[BANK0 ] unsigned char 
 14448 ;; Return value:  Size  Location     Type
 14449 ;;                  1    wreg      void 
 14450 ;; Registers used:
 14451 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14452 ;; Tracked objects:
 14453 ;;		On entry : 0/0
 14454 ;;		On exit  : 0/0
 14455 ;;		Unchanged: 0/0
 14456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14460 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;Total ram usage:        5 bytes
 14462 ;; Hardware stack levels used:    1
 14463 ;; Hardware stack levels required when called:    9
 14464 ;; This function calls:
 14465 ;;		_ConfigureRadio
 14466 ;;		_RADIO_SetCRC
 14467 ;;		_RADIO_SetIQInverted
 14468 ;; This function is called by:
 14469 ;;		_LORAWAN_ReceiveWindow1Callback
 14470 ;;		_LORAWAN_ReceiveWindow2Callback
 14471 ;;		_LORAWAN_EnterContinuousReceive
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           	psect	text69
 14476  0000'                    __ptext69:
 14477                           	opt stack 0
 14478  0000'                    _ConfigureRadioRx:
 14479                           	opt stack 17
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;incstack = 0
 14483                           ;ConfigureRadioRx@dataRate stored from wreg
 14484  0000' 0100               	movlb	0	; () banked
 14485  0002' 6F00'              	movwf	ConfigureRadioRx@dataRate& (0+255),b
 14486                           
 14487                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 14488  0004' C009' F004'        	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 14489  0008' C00A' F005'        	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 14490  000C' C00B' F006'        	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 14491  0010' C00C' F007'        	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 14492  0014' 0100               	movlb	0	; () banked
 14493  0016' 5100'              	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 14494  0018' EC00' F000'        	call	_ConfigureRadio
 14495                           
 14496                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 14497  001C' 0E00               	movlw	0
 14498  001E' EC00' F000'        	call	_RADIO_SetCRC
 14499                           
 14500                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 14501  0022' 0E01               	movlw	1
 14502  0024' EC00' F000'        	call	_RADIO_SetIQInverted
 14503  0028' 0012               	return		;funcret
 14504  002A'                    __end_of_ConfigureRadioRx:
 14505                           	opt stack 0
 14506                           tosu	equ	0xFFF
 14507                           tosh	equ	0xFFE
 14508                           tosl	equ	0xFFD
 14509                           pclath	equ	0xFFA
 14510                           tblptru	equ	0xFF8
 14511                           tblptrh	equ	0xFF7
 14512                           tblptrl	equ	0xFF6
 14513                           tablat	equ	0xFF5
 14514                           prodh	equ	0xFF4
 14515                           prodl	equ	0xFF3
 14516                           intcon	equ	0xFF2
 14517                           intcon2	equ	0xFF1
 14518                           intcon3	equ	0xFF0
 14519                           postinc0	equ	0xFEE
 14520                           wreg	equ	0xFE8
 14521                           postinc1	equ	0xFE6
 14522                           postdec1	equ	0xFE5
 14523                           plusw1	equ	0xFE3
 14524                           fsr1h	equ	0xFE2
 14525                           fsr1l	equ	0xFE1
 14526                           indf2	equ	0xFDF
 14527                           postinc2	equ	0xFDE
 14528                           postdec2	equ	0xFDD
 14529                           fsr2h	equ	0xFDA
 14530                           fsr2l	equ	0xFD9
 14531                           status	equ	0xFD8
 14532                           
 14533 ;; *************** function _ConfigureRadio *****************
 14534 ;; Defined at:
 14535 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;  dataRate        1    wreg     unsigned char 
 14538 ;;  freq            4    4[BANK0 ] unsigned long 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  dataRate        1    8[BANK0 ] unsigned char 
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14553 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;Total ram usage:        5 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    8
 14557 ;; This function calls:
 14558 ;;		_RADIO_SetBandwidth
 14559 ;;		_RADIO_SetChannelFrequency
 14560 ;;		_RADIO_SetFrequencyHopPeriod
 14561 ;;		_RADIO_SetLoRaSyncWord
 14562 ;;		_RADIO_SetModulation
 14563 ;;		_RADIO_SetSpreadingFactor
 14564 ;; This function is called by:
 14565 ;;		_ConfigureRadioRx
 14566 ;; This function uses a non-reentrant model
 14567 ;;
 14568                           
 14569                           	psect	text70
 14570  0000'                    __ptext70:
 14571                           	opt stack 0
 14572  0000'                    _ConfigureRadio:
 14573                           	opt stack 17
 14574                           
 14575                           ;incstack = 0
 14576                           ;ConfigureRadio@dataRate stored from wreg
 14577  0000' 0100               	movlb	0	; () banked
 14578  0002' 6F00'              	movwf	ConfigureRadio@dataRate& (0+255),b
 14579                           
 14580                           ;lorawan_na.c: 674: RADIO_SetModulation (MODULATION_LORA);
 14581  0004' 0E01               	movlw	1
 14582  0006' EC00' F000'        	call	_RADIO_SetModulation
 14583                           
 14584                           ;lorawan_na.c: 675: RADIO_SetChannelFrequency (freq);
 14585  000A' C004' F000'        	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 14586  000E' C005' F001'        	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 14587  0012' C006' F002'        	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 14588  0016' C007' F003'        	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 14589  001A' EC00' F000'        	call	_RADIO_SetChannelFrequency	;wreg free
 14590                           
 14591                           ;lorawan_na.c: 676: RADIO_SetFrequencyHopPeriod(0);
 14592  001E' 0E00               	movlw	0
 14593  0020' 0100               	movlb	0	; () banked
 14594  0022' 6F00'              	movwf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 14595  0024' 0E00               	movlw	0
 14596  0026' 6F00'              	movwf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 14597  0028' EC00' F000'        	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 14598                           
 14599                           ;lorawan_na.c: 677: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 14600  002C' 0100               	movlb	0	; () banked
 14601  002E' 5100'              	movf	ConfigureRadio@dataRate& (0+255),w,b
 14602  0030' 0D01               	mullw	1
 14603  0032' 0E00'              	movlw	low _spreadingFactor
 14604  0034' 24F3               	addwf	prodl,w,c
 14605  0036' 6EF6               	movwf	tblptrl,c
 14606  0038' 0E00'              	movlw	high _spreadingFactor
 14607  003A' 20F4               	addwfc	prodh,w,c
 14608  003C' 6EF7               	movwf	tblptrh,c
 14609  003E'                    	if	1	;There are 3 active tblptr bytes
 14610  003E' 6AF8               	clrf	tblptru,c
 14611  0040' 0E00'              	movlw	low (__mediumconst shr (0+16))
 14612  0042' 22F8               	addwfc	tblptru,f,c
 14613  0044'                    	endif
 14614  0044' 0008               	tblrd		*
 14615  0046' 50F5               	movf	tablat,w,c
 14616  0048' EC00' F000'        	call	_RADIO_SetSpreadingFactor
 14617                           
 14618                           ;lorawan_na.c: 678: RADIO_SetBandwidth (BW_500KHZ);
 14619  004C' 0E09               	movlw	9
 14620  004E' EC00' F000'        	call	_RADIO_SetBandwidth
 14621                           
 14622                           ;lorawan_na.c: 679: RADIO_SetLoRaSyncWord(loRa.syncWord);
 14623  0052' 0102               	movlb	2	; () banked
 14624  0054' 5100'              	movf	(_loRa+230)& (0+255),w,b
 14625  0056' EC00' F000'        	call	_RADIO_SetLoRaSyncWord
 14626  005A' 0012               	return		;funcret
 14627  005C'                    __end_of_ConfigureRadio:
 14628                           	opt stack 0
 14629                           tosu	equ	0xFFF
 14630                           tosh	equ	0xFFE
 14631                           tosl	equ	0xFFD
 14632                           pclath	equ	0xFFA
 14633                           tblptru	equ	0xFF8
 14634                           tblptrh	equ	0xFF7
 14635                           tblptrl	equ	0xFF6
 14636                           tablat	equ	0xFF5
 14637                           prodh	equ	0xFF4
 14638                           prodl	equ	0xFF3
 14639                           intcon	equ	0xFF2
 14640                           intcon2	equ	0xFF1
 14641                           intcon3	equ	0xFF0
 14642                           postinc0	equ	0xFEE
 14643                           wreg	equ	0xFE8
 14644                           postinc1	equ	0xFE6
 14645                           postdec1	equ	0xFE5
 14646                           plusw1	equ	0xFE3
 14647                           fsr1h	equ	0xFE2
 14648                           fsr1l	equ	0xFE1
 14649                           indf2	equ	0xFDF
 14650                           postinc2	equ	0xFDE
 14651                           postdec2	equ	0xFDD
 14652                           fsr2h	equ	0xFDA
 14653                           fsr2l	equ	0xFD9
 14654                           status	equ	0xFD8
 14655                           
 14656 ;; *************** function _RADIO_SetModulation *****************
 14657 ;; Defined at:
 14658 ;;		line 1608 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  modulation      1    wreg     enum E6984
 14661 ;; Auto vars:     Size  Location     Type
 14662 ;;  modulation      1    0[BANK0 ] enum E6984
 14663 ;; Return value:  Size  Location     Type
 14664 ;;                  1    wreg      void 
 14665 ;; Registers used:
 14666 ;;		wreg
 14667 ;; Tracked objects:
 14668 ;;		On entry : 0/0
 14669 ;;		On exit  : 0/0
 14670 ;;		Unchanged: 0/0
 14671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14675 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14676 ;;Total ram usage:        1 bytes
 14677 ;; Hardware stack levels used:    1
 14678 ;; Hardware stack levels required when called:    7
 14679 ;; This function calls:
 14680 ;;		Nothing
 14681 ;; This function is called by:
 14682 ;;		_ConfigureRadio
 14683 ;; This function uses a non-reentrant model
 14684 ;;
 14685                           
 14686                           	psect	text71
 14687  0000'                    __ptext71:
 14688                           	opt stack 0
 14689  0000'                    _RADIO_SetModulation:
 14690                           	opt stack 17
 14691                           
 14692                           ;incstack = 0
 14693                           ;RADIO_SetModulation@modulation stored from wreg
 14694  0000' 0100               	movlb	0	; () banked
 14695  0002' 6F00'              	movwf	RADIO_SetModulation@modulation& (0+255),b
 14696                           
 14697                           ;radio_driver_SX1276.c: 1610: RadioConfiguration.modulation = modulation;
 14698  0004' C000' F02F'        	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 14699  0008' 0012               	return		;funcret
 14700  000A'                    __end_of_RADIO_SetModulation:
 14701                           	opt stack 0
 14702                           tosu	equ	0xFFF
 14703                           tosh	equ	0xFFE
 14704                           tosl	equ	0xFFD
 14705                           pclath	equ	0xFFA
 14706                           tblptru	equ	0xFF8
 14707                           tblptrh	equ	0xFF7
 14708                           tblptrl	equ	0xFF6
 14709                           tablat	equ	0xFF5
 14710                           prodh	equ	0xFF4
 14711                           prodl	equ	0xFF3
 14712                           intcon	equ	0xFF2
 14713                           intcon2	equ	0xFF1
 14714                           intcon3	equ	0xFF0
 14715                           postinc0	equ	0xFEE
 14716                           wreg	equ	0xFE8
 14717                           postinc1	equ	0xFE6
 14718                           postdec1	equ	0xFE5
 14719                           plusw1	equ	0xFE3
 14720                           fsr1h	equ	0xFE2
 14721                           fsr1l	equ	0xFE1
 14722                           indf2	equ	0xFDF
 14723                           postinc2	equ	0xFDE
 14724                           postdec2	equ	0xFDD
 14725                           fsr2h	equ	0xFDA
 14726                           fsr2l	equ	0xFD9
 14727                           status	equ	0xFD8
 14728                           
 14729 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 14730 ;; Defined at:
 14731 ;;		line 1643 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 14732 ;; Parameters:    Size  Location     Type
 14733 ;;  frequencyHop    2    0[BANK0 ] unsigned int 
 14734 ;; Auto vars:     Size  Location     Type
 14735 ;;		None
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  1    wreg      void 
 14738 ;; Registers used:
 14739 ;;		None
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14749 ;;Total ram usage:        2 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    7
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_ConfigureRadio
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           	psect	text72
 14760  0000'                    __ptext72:
 14761                           	opt stack 0
 14762  0000'                    _RADIO_SetFrequencyHopPeriod:
 14763                           	opt stack 17
 14764                           
 14765                           ;radio_driver_SX1276.c: 1645: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 14766                           
 14767                           ;incstack = 0
 14768  0000' C000' F035'        	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 14769  0004' C001' F036'        	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 14770  0008' 0012               	return		;funcret
 14771  000A'                    __end_of_RADIO_SetFrequencyHopPeriod:
 14772                           	opt stack 0
 14773                           tosu	equ	0xFFF
 14774                           tosh	equ	0xFFE
 14775                           tosl	equ	0xFFD
 14776                           pclath	equ	0xFFA
 14777                           tblptru	equ	0xFF8
 14778                           tblptrh	equ	0xFF7
 14779                           tblptrl	equ	0xFF6
 14780                           tablat	equ	0xFF5
 14781                           prodh	equ	0xFF4
 14782                           prodl	equ	0xFF3
 14783                           intcon	equ	0xFF2
 14784                           intcon2	equ	0xFF1
 14785                           intcon3	equ	0xFF0
 14786                           postinc0	equ	0xFEE
 14787                           wreg	equ	0xFE8
 14788                           postinc1	equ	0xFE6
 14789                           postdec1	equ	0xFE5
 14790                           plusw1	equ	0xFE3
 14791                           fsr1h	equ	0xFE2
 14792                           fsr1l	equ	0xFE1
 14793                           indf2	equ	0xFDF
 14794                           postinc2	equ	0xFDE
 14795                           postdec2	equ	0xFDD
 14796                           fsr2h	equ	0xFDA
 14797                           fsr2l	equ	0xFD9
 14798                           status	equ	0xFD8
 14799                           
 14800 ;; *************** function _SetJoinFailState *****************
 14801 ;; Defined at:
 14802 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;		None
 14805 ;; Auto vars:     Size  Location     Type
 14806 ;;		None
 14807 ;; Return value:  Size  Location     Type
 14808 ;;                  1    wreg      void 
 14809 ;; Registers used:
 14810 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14811 ;; Tracked objects:
 14812 ;;		On entry : 0/0
 14813 ;;		On exit  : 0/0
 14814 ;;		Unchanged: 0/0
 14815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14820 ;;Total ram usage:        0 bytes
 14821 ;; Hardware stack levels used:    1
 14822 ;; Hardware stack levels required when called:    8
 14823 ;; This function calls:
 14824 ;;		_RxJoinResponse
 14825 ;; This function is called by:
 14826 ;;		_LORAWAN_RxDone
 14827 ;;		_LORAWAN_RxTimeout
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           	psect	text73
 14832  0000'                    __ptext73:
 14833                           	opt stack 0
 14834  0000'                    _SetJoinFailState:
 14835                           	opt stack 18
 14836                           
 14837                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 14838                           
 14839                           ;incstack = 0
 14840  0000' 0102               	movlb	2	; () banked
 14841  0002' 9900'              	bcf	(_loRa+2)& (0+255),4,b
 14842                           
 14843                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 14844  0004' 9500'              	bcf	_loRa& (0+255),2,b
 14845                           
 14846                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 14847  0006' 9100'              	bcf	(_loRa+2)& (0+255),0,b
 14848  0008' 9300'              	bcf	(_loRa+2)& (0+255),1,b
 14849  000A' 9500'              	bcf	(_loRa+2)& (0+255),2,b
 14850  000C' 9700'              	bcf	(_loRa+2)& (0+255),3,b
 14851                           
 14852                           ; BSR set to: 2
 14853                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 14854  000E' 0100               	movlb	0	; () banked
 14855  0010' 5100'              	movf	(_rxPayload+2)& (0+255),w,b
 14856  0012' 1100'              	iorwf	(_rxPayload+3)& (0+255),w,b
 14857  0014' B4D8               	btfsc	status,2,c
 14858  0016' 0012               	return	
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;lorawan.c: 1110: {
 14862                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 14863  0018' D801               	call	u10088
 14864  001A' 0012               	return	
 14865  001C'                    u10088:
 14866  001C' 0005               	push	
 14867  001E' 6EFA               	movwf	pclath,c
 14868  0020' 5100'              	movf	(_rxPayload+2)& (0+255),w,b
 14869  0022' 6EFD               	movwf	tosl,c
 14870  0024' 5100'              	movf	(_rxPayload+3)& (0+255),w,b
 14871  0026' 6EFE               	movwf	tosh,c
 14872  0028' 6AFF               	clrf	tosu,c
 14873  002A' 50FA               	movf	pclath,w,c
 14874  002C' 0E00               	movlw	0
 14875  002E' 0012               	return		;indir
 14876  0030'                    __end_of_SetJoinFailState:
 14877                           	opt stack 0
 14878                           tosu	equ	0xFFF
 14879                           tosh	equ	0xFFE
 14880                           tosl	equ	0xFFD
 14881                           pclath	equ	0xFFA
 14882                           tblptru	equ	0xFF8
 14883                           tblptrh	equ	0xFF7
 14884                           tblptrl	equ	0xFF6
 14885                           tablat	equ	0xFF5
 14886                           prodh	equ	0xFF4
 14887                           prodl	equ	0xFF3
 14888                           intcon	equ	0xFF2
 14889                           intcon2	equ	0xFF1
 14890                           intcon3	equ	0xFF0
 14891                           postinc0	equ	0xFEE
 14892                           wreg	equ	0xFE8
 14893                           postinc1	equ	0xFE6
 14894                           postdec1	equ	0xFE5
 14895                           plusw1	equ	0xFE3
 14896                           fsr1h	equ	0xFE2
 14897                           fsr1l	equ	0xFE1
 14898                           indf2	equ	0xFDF
 14899                           postinc2	equ	0xFDE
 14900                           postdec2	equ	0xFDD
 14901                           fsr2h	equ	0xFDA
 14902                           fsr2l	equ	0xFD9
 14903                           status	equ	0xFD8
 14904                           
 14905 ;; *************** function _RxJoinResponse *****************
 14906 ;; Defined at:
 14907 ;;		line 47 in file "main.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  status          1    wreg     unsigned char 
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;  status          1    0[COMRAM] unsigned char 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  1    wreg      void 
 14914 ;; Registers used:
 14915 ;;		wreg
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;Total ram usage:        0 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    7
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_main
 14932 ;;		_UpdateJoinSuccessState
 14933 ;;		_SetJoinFailState
 14934 ;; This function uses a non-reentrant model
 14935 ;;
 14936                           
 14937                           	psect	text74
 14938  0000'                    __ptext74:
 14939                           	opt stack 0
 14940  0000'                    _RxJoinResponse:
 14941                           	opt stack 20
 14942                           
 14943                           ;incstack = 0
 14944  0000' 0012               	return		;funcret
 14945  0002'                    __end_of_RxJoinResponse:
 14946                           	opt stack 0
 14947                           tosu	equ	0xFFF
 14948                           tosh	equ	0xFFE
 14949                           tosl	equ	0xFFD
 14950                           pclath	equ	0xFFA
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           intcon2	equ	0xFF1
 14959                           intcon3	equ	0xFF0
 14960                           postinc0	equ	0xFEE
 14961                           wreg	equ	0xFE8
 14962                           postinc1	equ	0xFE6
 14963                           postdec1	equ	0xFE5
 14964                           plusw1	equ	0xFE3
 14965                           fsr1h	equ	0xFE2
 14966                           fsr1l	equ	0xFE1
 14967                           indf2	equ	0xFDF
 14968                           postinc2	equ	0xFDE
 14969                           postdec2	equ	0xFDD
 14970                           fsr2h	equ	0xFDA
 14971                           fsr2l	equ	0xFD9
 14972                           status	equ	0xFD8
 14973                           
 14974 ;; *************** function _MacExecuteCommands *****************
 14975 ;; Defined at:
 14976 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  buffer          2   93[BANK0 ] PTR unsigned char 
 14979 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14980 ;;  fOptsLen        1   95[BANK0 ] unsigned char 
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;  ptr             2   99[BANK0 ] PTR unsigned char 
 14983 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14984 ;;  done            1   98[BANK0 ] unsigned char 
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  2   93[BANK0 ] PTR unsigned char 
 14987 ;; Registers used:
 14988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14994 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14995 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14997 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;Total ram usage:        8 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:   12
 15001 ;; This function calls:
 15002 ;;		_ExecuteDevStatus
 15003 ;;		_ExecuteDutyCycle
 15004 ;;		_ExecuteLinkAdr
 15005 ;;		_ExecuteLinkCheck
 15006 ;;		_ExecuteNewChannel
 15007 ;;		_ExecuteRxParamSetupReq
 15008 ;;		_ExecuteRxTimingSetup
 15009 ;; This function is called by:
 15010 ;;		_LORAWAN_RxDone
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           	psect	text75
 15015  0000'                    __ptext75:
 15016                           	opt stack 0
 15017  0000'                    _MacExecuteCommands:
 15018                           	opt stack 14
 15019                           
 15020                           ;lorawan.c: 1577: bool done = 0;
 15021                           
 15022                           ;incstack = 0
 15023  0000' 0E00               	movlw	0
 15024  0002' 0100               	movlb	0	; () banked
 15025  0004' 6F00'              	movwf	MacExecuteCommands@done& (0+255),b
 15026                           
 15027                           ; BSR set to: 0
 15028                           ;lorawan.c: 1578: uint8_t *ptr;
 15029                           ;lorawan.c: 1579: ptr = buffer;
 15030  0006' C05D' F063'        	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 15031  000A' C05E' F064'        	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 15032                           
 15033                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 15034  000E' D15A               	goto	l764
 15035  0010'                    
 15036                           ; BSR set to: 0
 15037                           ;lorawan.c: 1581: {
 15038                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 15039                           
 15040                           ; BSR set to: 0
 15041  0010' 0102               	movlb	2	; () banked
 15042  0012' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15043  0014' 0D02               	mullw	2
 15044  0016' 0E00'              	movlw	low _loRa
 15045  0018' 0100               	movlb	0	; () banked
 15046  001A' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15047  001C' 0E00'              	movlw	high _loRa
 15048  001E' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15049  0020' 0E99               	movlw	153
 15050  0022' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15051  0024' 0E00               	movlw	0
 15052  0026' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15053  0028' 50F3               	movf	prodl,w,c
 15054  002A' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15055  002C' 50F4               	movf	prodh,w,c
 15056  002E' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15057  0030' 0E01               	movlw	1
 15058  0032' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15059  0034' 6ED9               	movwf	fsr2l,c
 15060  0036' 0E00               	movlw	0
 15061  0038' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15062  003A' 6EDA               	movwf	fsr2h,c
 15063  003C' 0102               	movlb	2	; () banked
 15064  003E' 90DF               	bcf	indf2,0,c
 15065                           
 15066                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 15067  0040' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15068  0042' 0D02               	mullw	2
 15069  0044' 0E00'              	movlw	low _loRa
 15070  0046' 0100               	movlb	0	; () banked
 15071  0048' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15072  004A' 0E00'              	movlw	high _loRa
 15073  004C' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15074  004E' 0E99               	movlw	153
 15075  0050' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15076  0052' 0E00               	movlw	0
 15077  0054' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15078  0056' 50F3               	movf	prodl,w,c
 15079  0058' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15080  005A' 50F4               	movf	prodh,w,c
 15081  005C' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15082  005E' 0E01               	movlw	1
 15083  0060' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15084  0062' 6ED9               	movwf	fsr2l,c
 15085  0064' 0E00               	movlw	0
 15086  0066' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15087  0068' 6EDA               	movwf	fsr2h,c
 15088  006A' 0102               	movlb	2	; () banked
 15089  006C' 92DF               	bcf	indf2,1,c
 15090                           
 15091                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 15092  006E' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15093  0070' 0D02               	mullw	2
 15094  0072' 0E00'              	movlw	low _loRa
 15095  0074' 0100               	movlb	0	; () banked
 15096  0076' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15097  0078' 0E00'              	movlw	high _loRa
 15098  007A' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15099  007C' 0E99               	movlw	153
 15100  007E' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15101  0080' 0E00               	movlw	0
 15102  0082' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15103  0084' 50F3               	movf	prodl,w,c
 15104  0086' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15105  0088' 50F4               	movf	prodh,w,c
 15106  008A' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15107  008C' 0E01               	movlw	1
 15108  008E' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15109  0090' 6ED9               	movwf	fsr2l,c
 15110  0092' 0E00               	movlw	0
 15111  0094' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15112  0096' 6EDA               	movwf	fsr2h,c
 15113  0098' 0102               	movlb	2	; () banked
 15114  009A' 94DF               	bcf	indf2,2,c
 15115                           
 15116                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 15117  009C' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15118  009E' 0D02               	mullw	2
 15119  00A0' 0E00'              	movlw	low _loRa
 15120  00A2' 0100               	movlb	0	; () banked
 15121  00A4' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15122  00A6' 0E00'              	movlw	high _loRa
 15123  00A8' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15124  00AA' 0E99               	movlw	153
 15125  00AC' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15126  00AE' 0E00               	movlw	0
 15127  00B0' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15128  00B2' 50F3               	movf	prodl,w,c
 15129  00B4' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15130  00B6' 50F4               	movf	prodh,w,c
 15131  00B8' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15132  00BA' 0E01               	movlw	1
 15133  00BC' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15134  00BE' 6ED9               	movwf	fsr2l,c
 15135  00C0' 0E00               	movlw	0
 15136  00C2' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15137  00C4' 6EDA               	movwf	fsr2h,c
 15138  00C6' 0102               	movlb	2	; () banked
 15139  00C8' 96DF               	bcf	indf2,3,c
 15140                           
 15141                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 15142  00CA' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15143  00CC' 0D02               	mullw	2
 15144  00CE' 0E00'              	movlw	low _loRa
 15145  00D0' 0100               	movlb	0	; () banked
 15146  00D2' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15147  00D4' 0E00'              	movlw	high _loRa
 15148  00D6' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15149  00D8' 0E99               	movlw	153
 15150  00DA' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15151  00DC' 0E00               	movlw	0
 15152  00DE' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15153  00E0' 50F3               	movf	prodl,w,c
 15154  00E2' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15155  00E4' 50F4               	movf	prodh,w,c
 15156  00E6' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15157  00E8' 0E01               	movlw	1
 15158  00EA' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15159  00EC' 6ED9               	movwf	fsr2l,c
 15160  00EE' 0E00               	movlw	0
 15161  00F0' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15162  00F2' 6EDA               	movwf	fsr2h,c
 15163  00F4' 0102               	movlb	2	; () banked
 15164  00F6' 98DF               	bcf	indf2,4,c
 15165                           
 15166                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 15167  00F8' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15168  00FA' 0D02               	mullw	2
 15169  00FC' 0E00'              	movlw	low _loRa
 15170  00FE' 0100               	movlb	0	; () banked
 15171  0100' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15172  0102' 0E00'              	movlw	high _loRa
 15173  0104' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15174  0106' 0E99               	movlw	153
 15175  0108' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15176  010A' 0E00               	movlw	0
 15177  010C' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15178  010E' 50F3               	movf	prodl,w,c
 15179  0110' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15180  0112' 50F4               	movf	prodh,w,c
 15181  0114' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15182  0116' 0E01               	movlw	1
 15183  0118' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15184  011A' 6ED9               	movwf	fsr2l,c
 15185  011C' 0E00               	movlw	0
 15186  011E' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15187  0120' 6EDA               	movwf	fsr2h,c
 15188  0122' 0102               	movlb	2	; () banked
 15189  0124' 9ADF               	bcf	indf2,5,c
 15190                           
 15191                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 15192  0126' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15193  0128' 0D02               	mullw	2
 15194  012A' 0E00'              	movlw	low _loRa
 15195  012C' 0100               	movlb	0	; () banked
 15196  012E' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15197  0130' 0E00'              	movlw	high _loRa
 15198  0132' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15199  0134' 0E99               	movlw	153
 15200  0136' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15201  0138' 0E00               	movlw	0
 15202  013A' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15203  013C' 50F3               	movf	prodl,w,c
 15204  013E' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15205  0140' 50F4               	movf	prodh,w,c
 15206  0142' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15207  0144' 0E01               	movlw	1
 15208  0146' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15209  0148' 6ED9               	movwf	fsr2l,c
 15210  014A' 0E00               	movlw	0
 15211  014C' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15212  014E' 6EDA               	movwf	fsr2h,c
 15213  0150' 0102               	movlb	2	; () banked
 15214  0152' 9CDF               	bcf	indf2,6,c
 15215                           
 15216                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 15217  0154' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15218  0156' 0D02               	mullw	2
 15219  0158' 0E00'              	movlw	low _loRa
 15220  015A' 0100               	movlb	0	; () banked
 15221  015C' 6F00'              	movwf	??_MacExecuteCommands& (0+255),b
 15222  015E' 0E00'              	movlw	high _loRa
 15223  0160' 6F00'              	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15224  0162' 0E99               	movlw	153
 15225  0164' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15226  0166' 0E00               	movlw	0
 15227  0168' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15228  016A' 50F3               	movf	prodl,w,c
 15229  016C' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15230  016E' 50F4               	movf	prodh,w,c
 15231  0170' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15232  0172' 0E01               	movlw	1
 15233  0174' 2500'              	addwf	??_MacExecuteCommands& (0+255),w,b
 15234  0176' 6ED9               	movwf	fsr2l,c
 15235  0178' 0E00               	movlw	0
 15236  017A' 2100'              	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15237  017C' 6EDA               	movwf	fsr2h,c
 15238  017E' 0102               	movlb	2	; () banked
 15239  0180' 9EDF               	bcf	indf2,7,c
 15240                           
 15241                           ; BSR set to: 2
 15242                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 15243  0182' C063' FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15244  0186' C064' FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15245  018A' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15246  018C' 0D02               	mullw	2
 15247  018E' 0E00'              	movlw	low (_loRa+153)
 15248  0190' 24F3               	addwf	prodl,w,c
 15249  0192' 6EE9               	movwf	fsr0l,c
 15250  0194' 0E00'              	movlw	high (_loRa+153)
 15251  0196' 20F4               	addwfc	prodh,w,c
 15252  0198' 6EEA               	movwf	fsr0h,c
 15253  019A' CFDF FFEF          	movff	indf2,indf0
 15254                           
 15255                           ;lorawan.c: 1595: switch (*ptr ++)
 15256  019E' D064               	goto	l754
 15257  01A0'                    
 15258                           ;lorawan.c: 1598: {
 15259                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 15260                           
 15261                           ; BSR set to: 2
 15262  01A0' C063' F000'        	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 15263  01A4' C064' F001'        	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 15264  01A8' EC00' F000'        	call	_ExecuteLinkCheck
 15265  01AC' C000' F063'        	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 15266  01B0' C001' F064'        	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 15267  01B4' D04D               	goto	l10348
 15268  01B6'                    
 15269                           ;lorawan.c: 1605: {
 15270                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 15271                           
 15272                           ; BSR set to: 2
 15273  01B6' C063' F010'        	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 15274  01BA' C064' F011'        	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 15275  01BE' EC00' F000'        	call	_ExecuteLinkAdr	;wreg free
 15276  01C2' C010' F063'        	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 15277  01C6' C011' F064'        	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 15278                           
 15279                           ;lorawan.c: 1607: } break;
 15280  01CA' D06C               	goto	l756
 15281  01CC'                    
 15282                           ;lorawan.c: 1610: {
 15283                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 15284  01CC' C063' F000'        	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 15285  01D0' C064' F001'        	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 15286  01D4' EC00' F000'        	call	_ExecuteDutyCycle	;wreg free
 15287  01D8' C000' F063'        	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 15288  01DC' C001' F064'        	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 15289                           
 15290                           ;lorawan.c: 1612: } break;
 15291  01E0' D061               	goto	l756
 15292  01E2'                    
 15293                           ;lorawan.c: 1615: {
 15294                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 15295  01E2' C063' F046'        	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 15296  01E6' C064' F047'        	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 15297  01EA' EC00' F000'        	call	_ExecuteRxParamSetupReq	;wreg free
 15298  01EE' C046' F063'        	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 15299  01F2' C047' F064'        	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 15300                           
 15301                           ;lorawan.c: 1617: } break;
 15302  01F6' D056               	goto	l756
 15303  01F8'                    
 15304                           ;lorawan.c: 1620: {
 15305                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 15306  01F8' C063' F000'        	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 15307  01FC' C064' F001'        	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 15308  0200' EC00' F000'        	call	_ExecuteDevStatus	;wreg free
 15309  0204' C000' F063'        	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 15310  0208' C001' F064'        	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 15311                           
 15312                           ;lorawan.c: 1622: } break;
 15313  020C' D04B               	goto	l756
 15314  020E'                    
 15315                           ;lorawan.c: 1625: {
 15316                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 15317  020E' C063' F053'        	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 15318  0212' C064' F054'        	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 15319  0216' EC00' F000'        	call	_ExecuteNewChannel	;wreg free
 15320  021A' C053' F063'        	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 15321  021E' C054' F064'        	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 15322                           
 15323                           ;lorawan.c: 1628: } break;
 15324  0222' D040               	goto	l756
 15325  0224'                    
 15326                           ;lorawan.c: 1631: {
 15327                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 15328  0224' C063' F007'        	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 15329  0228' C064' F008'        	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 15330  022C' EC00' F000'        	call	_ExecuteRxTimingSetup	;wreg free
 15331  0230' C007' F063'        	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 15332  0234' C008' F064'        	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 15333                           
 15334                           ;lorawan.c: 1633: } break;
 15335  0238' D035               	goto	l756
 15336  023A'                    
 15337                           ;lorawan.c: 1636: {
 15338                           ;lorawan.c: 1637: done = 1;
 15339  023A' 0E01               	movlw	1
 15340  023C' 0100               	movlb	0	; () banked
 15341  023E' 6F00'              	movwf	MacExecuteCommands@done& (0+255),b
 15342                           
 15343                           ; BSR set to: 0
 15344                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 15345  0240' 5100'              	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15346  0242' 0D01               	mullw	1
 15347  0244' 50F3               	movf	prodl,w,c
 15348  0246' 2500'              	addwf	MacExecuteCommands@buffer& (0+255),w,b
 15349  0248' 6F00'              	movwf	MacExecuteCommands@ptr& (0+255),b
 15350  024A' 50F4               	movf	prodh,w,c
 15351  024C' 2100'              	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 15352  024E' 6F00'              	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 15353  0250'                    l10348:
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;lorawan.c: 1639: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 15357  0250' 0102               	movlb	2	; () banked
 15358  0252' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15359  0254' 0D02               	mullw	2
 15360  0256' 0E00'              	movlw	low (_loRa+153)
 15361  0258' 24F3               	addwf	prodl,w,c
 15362  025A' 6ED9               	movwf	fsr2l,c
 15363  025C' 0E00'              	movlw	high (_loRa+153)
 15364  025E' 20F4               	addwfc	prodh,w,c
 15365  0260' 6EDA               	movwf	fsr2h,c
 15366  0262' 0EFF               	movlw	255
 15367  0264' 6EDF               	movwf	indf2,c
 15368                           
 15369                           ; BSR set to: 2
 15370                           ;lorawan.c: 1641: }
 15371                           
 15372                           ;lorawan.c: 1640: } break;
 15373  0266' D01E               	goto	l756
 15374  0268'                    l754:
 15375                           
 15376                           ; BSR set to: 2
 15377                           
 15378                           ; BSR set to: 2
 15379  0268' C063' FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15380  026C' C064' FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15381  0270' 0100               	movlb	0	; () banked
 15382  0272' 4B00'              	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 15383  0274' 2B00'              	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 15384  0276' 50DF               	movf	indf2,w,c
 15385                           
 15386                           ; Switch size 1, requested type "space"
 15387                           ; Number of cases is 7, Range of values is 2 to 8
 15388                           ; switch strategies available:
 15389                           ; Name         Instructions Cycles
 15390                           ; simple_byte           22    12 (average)
 15391                           ;	Chosen strategy is simple_byte
 15392  0278' 0A02               	xorlw	2	; case 2
 15393  027A' B4D8               	btfsc	status,2,c
 15394  027C' D791               	goto	l755
 15395  027E' 0A01               	xorlw	1	; case 3
 15396  0280' B4D8               	btfsc	status,2,c
 15397  0282' D799               	goto	l757
 15398  0284' 0A07               	xorlw	7	; case 4
 15399  0286' B4D8               	btfsc	status,2,c
 15400  0288' D7A1               	goto	l758
 15401  028A' 0A01               	xorlw	1	; case 5
 15402  028C' B4D8               	btfsc	status,2,c
 15403  028E' D7A9               	goto	l759
 15404  0290' 0A03               	xorlw	3	; case 6
 15405  0292' B4D8               	btfsc	status,2,c
 15406  0294' D7B1               	goto	l760
 15407  0296' 0A01               	xorlw	1	; case 7
 15408  0298' B4D8               	btfsc	status,2,c
 15409  029A' D7B9               	goto	l761
 15410  029C' 0A0F               	xorlw	15	; case 8
 15411  029E' B4D8               	btfsc	status,2,c
 15412  02A0' D7C1               	goto	l762
 15413  02A2' D7CB               	goto	l763
 15414  02A4'                    l756:
 15415                           
 15416                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 15417                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 15418                           
 15419                           ; BSR set to: 0
 15420  02A4' 0102               	movlb	2	; () banked
 15421  02A6' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15422  02A8' 0D02               	mullw	2
 15423  02AA' 0E00'              	movlw	low (_loRa+153)
 15424  02AC' 24F3               	addwf	prodl,w,c
 15425  02AE' 6ED9               	movwf	fsr2l,c
 15426  02B0' 0E00'              	movlw	high (_loRa+153)
 15427  02B2' 20F4               	addwfc	prodh,w,c
 15428  02B4' 6EDA               	movwf	fsr2h,c
 15429  02B6' 28DE               	incf	postinc2,w,c
 15430  02B8' B4D8               	btfsc	status,2,c
 15431  02BA' D004               	goto	l764
 15432                           
 15433                           ; BSR set to: 2
 15434  02BC' 0E10               	movlw	16
 15435  02BE' 6100'              	cpfslt	(_loRa+152)& (0+255),b
 15436  02C0' D001               	goto	l764
 15437                           
 15438                           ; BSR set to: 2
 15439                           ;lorawan.c: 1645: {
 15440                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 15441  02C2' 2B00'              	incf	(_loRa+152)& (0+255),f,b
 15442  02C4'                    l764:
 15443                           
 15444                           ; BSR set to: 2
 15445                           
 15446                           ; BSR set to: 2
 15447  02C4' 0100               	movlb	0	; () banked
 15448  02C6' 5100'              	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15449  02C8' 0D01               	mullw	1
 15450  02CA' C05D' F060'        	movff	MacExecuteCommands@buffer,??_MacExecuteCommands
 15451  02CE' C05E' F061'        	movff	MacExecuteCommands@buffer+1,??_MacExecuteCommands+1
 15452  02D2' 50F3               	movf	prodl,w,c
 15453  02D4' 2700'              	addwf	??_MacExecuteCommands& (0+255),f,b
 15454  02D6' 50F4               	movf	prodh,w,c
 15455  02D8' 2300'              	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15456  02DA' 5100'              	movf	??_MacExecuteCommands& (0+255),w,b
 15457  02DC' 5D00'              	subwf	MacExecuteCommands@ptr& (0+255),w,b
 15458  02DE' 5100'              	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 15459  02E0' 5900'              	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 15460  02E2' B0D8               	btfsc	status,0,c
 15461  02E4' D003               	goto	u10320
 15462                           
 15463                           ; BSR set to: 0
 15464  02E6' 5100'              	movf	MacExecuteCommands@done& (0+255),w,b
 15465  02E8' B4D8               	btfsc	status,2,c
 15466  02EA' D692               	goto	l753
 15467  02EC'                    u10320:
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;lorawan.c: 1647: }
 15471                           ;lorawan.c: 1648: }
 15472                           ;lorawan.c: 1649: return ptr;
 15473                           
 15474                           ; BSR set to: 0
 15475                           
 15476                           ; BSR set to: 0
 15477  02EC' C063' F05D'        	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 15478  02F0' C064' F05E'        	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 15479  02F4' 0012               	return	
 15480  02F6'                    __end_of_MacExecuteCommands:
 15481                           	opt stack 0
 15482                           tosu	equ	0xFFF
 15483                           tosh	equ	0xFFE
 15484                           tosl	equ	0xFFD
 15485                           pclath	equ	0xFFA
 15486                           tblptru	equ	0xFF8
 15487                           tblptrh	equ	0xFF7
 15488                           tblptrl	equ	0xFF6
 15489                           tablat	equ	0xFF5
 15490                           prodh	equ	0xFF4
 15491                           prodl	equ	0xFF3
 15492                           intcon	equ	0xFF2
 15493                           intcon2	equ	0xFF1
 15494                           intcon3	equ	0xFF0
 15495                           indf0	equ	0xFEF
 15496                           postinc0	equ	0xFEE
 15497                           fsr0h	equ	0xFEA
 15498                           fsr0l	equ	0xFE9
 15499                           wreg	equ	0xFE8
 15500                           postinc1	equ	0xFE6
 15501                           postdec1	equ	0xFE5
 15502                           plusw1	equ	0xFE3
 15503                           fsr1h	equ	0xFE2
 15504                           fsr1l	equ	0xFE1
 15505                           indf2	equ	0xFDF
 15506                           postinc2	equ	0xFDE
 15507                           postdec2	equ	0xFDD
 15508                           fsr2h	equ	0xFDA
 15509                           fsr2l	equ	0xFD9
 15510                           status	equ	0xFD8
 15511                           
 15512 ;; *************** function _ExecuteRxTimingSetup *****************
 15513 ;; Defined at:
 15514 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15515 ;; Parameters:    Size  Location     Type
 15516 ;;  ptr             2    7[BANK0 ] PTR unsigned char 
 15517 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  delay           1    9[BANK0 ] unsigned char 
 15520 ;; Return value:  Size  Location     Type
 15521 ;;                  2    7[BANK0 ] PTR unsigned char 
 15522 ;; Registers used:
 15523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15532 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15533 ;;Total ram usage:        3 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    9
 15536 ;; This function calls:
 15537 ;;		_UpdateReceiveDelays
 15538 ;; This function is called by:
 15539 ;;		_MacExecuteCommands
 15540 ;; This function uses a non-reentrant model
 15541 ;;
 15542                           
 15543                           	psect	text76
 15544  0000'                    __ptext76:
 15545                           	opt stack 0
 15546  0000'                    _ExecuteRxTimingSetup:
 15547                           	opt stack 16
 15548                           
 15549                           ;lorawan.c: 1661: uint8_t delay;
 15550                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;incstack = 0
 15554  0000' C007' FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 15555  0004' C008' FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 15556  0008' 50DF               	movf	indf2,w,c
 15557  000A' 0B0F               	andlw	15
 15558  000C' 0100               	movlb	0	; () banked
 15559  000E' 6F00'              	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;lorawan.c: 1664: ptr++;
 15563  0010' 4B00'              	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 15564  0012' 2B00'              	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 15568  0014' 5100'              	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 15569  0016' EC00' F000'        	call	_UpdateReceiveDelays
 15570                           
 15571                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 15572  001A' 0102               	movlb	2	; () banked
 15573  001C' 8100'              	bsf	(_loRa+4)& (0+255),0,b
 15574                           
 15575                           ; BSR set to: 2
 15576                           ;lorawan.c: 1669: return ptr;
 15577  001E' C007' F007'        	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 15578  0022' C008' F008'        	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 15579  0026' 0012               	return	
 15580  0028'                    __end_of_ExecuteRxTimingSetup:
 15581                           	opt stack 0
 15582                           tosu	equ	0xFFF
 15583                           tosh	equ	0xFFE
 15584                           tosl	equ	0xFFD
 15585                           pclath	equ	0xFFA
 15586                           tblptru	equ	0xFF8
 15587                           tblptrh	equ	0xFF7
 15588                           tblptrl	equ	0xFF6
 15589                           tablat	equ	0xFF5
 15590                           prodh	equ	0xFF4
 15591                           prodl	equ	0xFF3
 15592                           intcon	equ	0xFF2
 15593                           intcon2	equ	0xFF1
 15594                           intcon3	equ	0xFF0
 15595                           indf0	equ	0xFEF
 15596                           postinc0	equ	0xFEE
 15597                           fsr0h	equ	0xFEA
 15598                           fsr0l	equ	0xFE9
 15599                           wreg	equ	0xFE8
 15600                           postinc1	equ	0xFE6
 15601                           postdec1	equ	0xFE5
 15602                           plusw1	equ	0xFE3
 15603                           fsr1h	equ	0xFE2
 15604                           fsr1l	equ	0xFE1
 15605                           indf2	equ	0xFDF
 15606                           postinc2	equ	0xFDE
 15607                           postdec2	equ	0xFDD
 15608                           fsr2h	equ	0xFDA
 15609                           fsr2l	equ	0xFD9
 15610                           status	equ	0xFD8
 15611                           
 15612 ;; *************** function _UpdateReceiveDelays *****************
 15613 ;; Defined at:
 15614 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15615 ;; Parameters:    Size  Location     Type
 15616 ;;  delay           1    wreg     unsigned char 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  delay           1    6[BANK0 ] unsigned char 
 15619 ;; Return value:  Size  Location     Type
 15620 ;;                  1    wreg      void 
 15621 ;; Registers used:
 15622 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15623 ;; Tracked objects:
 15624 ;;		On entry : 0/0
 15625 ;;		On exit  : 0/0
 15626 ;;		Unchanged: 0/0
 15627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;Total ram usage:        1 bytes
 15633 ;; Hardware stack levels used:    1
 15634 ;; Hardware stack levels required when called:    8
 15635 ;; This function calls:
 15636 ;;		___wmul
 15637 ;; This function is called by:
 15638 ;;		_LORAWAN_RxDone
 15639 ;;		_ExecuteRxTimingSetup
 15640 ;; This function uses a non-reentrant model
 15641 ;;
 15642                           
 15643                           	psect	text77
 15644  0000'                    __ptext77:
 15645                           	opt stack 0
 15646  0000'                    _UpdateReceiveDelays:
 15647                           	opt stack 18
 15648                           
 15649                           ; BSR set to: 2
 15650                           ;incstack = 0
 15651                           ;UpdateReceiveDelays@delay stored from wreg
 15652  0000' 0100               	movlb	0	; () banked
 15653  0002' 6F00'              	movwf	UpdateReceiveDelays@delay& (0+255),b
 15654                           
 15655                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 15656  0004' C006' F000'        	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 15657  0008' 0100               	movlb	0	; () banked
 15658  000A' 6B00'              	clrf	(___wmul@multiplier+1)& (0+255),b
 15659  000C' 0E03               	movlw	3
 15660  000E' 6F00'              	movwf	(___wmul@multiplicand+1)& (0+255),b
 15661  0010' 0EE8               	movlw	232
 15662  0012' 6F00'              	movwf	___wmul@multiplicand& (0+255),b
 15663  0014' EC00' F000'        	call	___wmul	;wreg free
 15664  0018' C000' F086'        	movff	?___wmul,_loRa+134
 15665  001C' C001' F087'        	movff	?___wmul+1,_loRa+135
 15666                           
 15667                           ;lorawan.c: 2029: if (delay == 0)
 15668  0020' 0100               	movlb	0	; () banked
 15669  0022' 5100'              	movf	UpdateReceiveDelays@delay& (0+255),w,b
 15670  0024' A4D8               	btfss	status,2,c
 15671  0026' D005               	goto	l863
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;lorawan.c: 2030: {
 15675                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 15676  0028' 0E03               	movlw	3
 15677  002A' 0102               	movlb	2	; () banked
 15678  002C' 6F00'              	movwf	(_loRa+135)& (0+255),b
 15679  002E' 0EE8               	movlw	232
 15680  0030' 6F00'              	movwf	(_loRa+134)& (0+255),b
 15681  0032'                    l863:
 15682                           
 15683                           ;lorawan.c: 2032: }
 15684                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 15685                           
 15686                           ; BSR set to: 2
 15687  0032' 0EE8               	movlw	232
 15688  0034' 0102               	movlb	2	; () banked
 15689  0036' 2500'              	addwf	(_loRa+134)& (0+255),w,b
 15690  0038' 6F00'              	movwf	(_loRa+136)& (0+255),b
 15691  003A' 0E03               	movlw	3
 15692  003C' 2100'              	addwfc	(_loRa+135)& (0+255),w,b
 15693  003E' 6F00'              	movwf	(_loRa+137)& (0+255),b
 15694                           
 15695                           ; BSR set to: 2
 15696  0040' 0012               	return		;funcret
 15697  0042'                    __end_of_UpdateReceiveDelays:
 15698                           	opt stack 0
 15699                           tosu	equ	0xFFF
 15700                           tosh	equ	0xFFE
 15701                           tosl	equ	0xFFD
 15702                           pclath	equ	0xFFA
 15703                           tblptru	equ	0xFF8
 15704                           tblptrh	equ	0xFF7
 15705                           tblptrl	equ	0xFF6
 15706                           tablat	equ	0xFF5
 15707                           prodh	equ	0xFF4
 15708                           prodl	equ	0xFF3
 15709                           intcon	equ	0xFF2
 15710                           intcon2	equ	0xFF1
 15711                           intcon3	equ	0xFF0
 15712                           indf0	equ	0xFEF
 15713                           postinc0	equ	0xFEE
 15714                           fsr0h	equ	0xFEA
 15715                           fsr0l	equ	0xFE9
 15716                           wreg	equ	0xFE8
 15717                           postinc1	equ	0xFE6
 15718                           postdec1	equ	0xFE5
 15719                           plusw1	equ	0xFE3
 15720                           fsr1h	equ	0xFE2
 15721                           fsr1l	equ	0xFE1
 15722                           indf2	equ	0xFDF
 15723                           postinc2	equ	0xFDE
 15724                           postdec2	equ	0xFDD
 15725                           fsr2h	equ	0xFDA
 15726                           fsr2l	equ	0xFD9
 15727                           status	equ	0xFD8
 15728                           
 15729 ;; *************** function ___wmul *****************
 15730 ;; Defined at:
 15731 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15732 ;; Parameters:    Size  Location     Type
 15733 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15734 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15735 ;; Auto vars:     Size  Location     Type
 15736 ;;  product         2    4[BANK0 ] unsigned int 
 15737 ;; Return value:  Size  Location     Type
 15738 ;;                  2    0[BANK0 ] unsigned int 
 15739 ;; Registers used:
 15740 ;;		wreg, status,2, status,0, prodl, prodh
 15741 ;; Tracked objects:
 15742 ;;		On entry : 0/0
 15743 ;;		On exit  : 0/0
 15744 ;;		Unchanged: 0/0
 15745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15747 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15749 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15750 ;;Total ram usage:        6 bytes
 15751 ;; Hardware stack levels used:    1
 15752 ;; Hardware stack levels required when called:    7
 15753 ;; This function calls:
 15754 ;;		Nothing
 15755 ;; This function is called by:
 15756 ;;		_UpdateReceiveDelays
 15757 ;;		_printf
 15758 ;; This function uses a non-reentrant model
 15759 ;;
 15760                           
 15761                           	psect	text78
 15762  0000'                    __ptext78:
 15763                           	opt stack 0
 15764  0000'                    ___wmul:
 15765                           	opt stack 22
 15766                           
 15767                           ; BSR set to: 2
 15768                           ;incstack = 0
 15769  0000' 0100               	movlb	0	; () banked
 15770  0002' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 15771  0004' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 15772  0006' CFF3 F004'         	movff	prodl,___wmul@product
 15773  000A' CFF4 F005'         	movff	prodh,___wmul@product+1
 15774  000E' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 15775  0010' 0300'              	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15776  0012' 50F3               	movf	prodl,w,c
 15777  0014' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 15778  0016' 5100'              	movf	(___wmul@multiplier+1)& (0+255),w,b
 15779  0018' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 15780  001A' 50F3               	movf	prodl,w,c
 15781  001C' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 15782                           
 15783                           ; BSR set to: 0
 15784  001E' C004' F000'        	movff	___wmul@product,?___wmul
 15785  0022' C005' F001'        	movff	___wmul@product+1,?___wmul+1
 15786  0026' 0012               	return	
 15787  0028'                    __end_of___wmul:
 15788                           	opt stack 0
 15789                           tosu	equ	0xFFF
 15790                           tosh	equ	0xFFE
 15791                           tosl	equ	0xFFD
 15792                           pclath	equ	0xFFA
 15793                           tblptru	equ	0xFF8
 15794                           tblptrh	equ	0xFF7
 15795                           tblptrl	equ	0xFF6
 15796                           tablat	equ	0xFF5
 15797                           prodh	equ	0xFF4
 15798                           prodl	equ	0xFF3
 15799                           intcon	equ	0xFF2
 15800                           intcon2	equ	0xFF1
 15801                           intcon3	equ	0xFF0
 15802                           indf0	equ	0xFEF
 15803                           postinc0	equ	0xFEE
 15804                           fsr0h	equ	0xFEA
 15805                           fsr0l	equ	0xFE9
 15806                           wreg	equ	0xFE8
 15807                           postinc1	equ	0xFE6
 15808                           postdec1	equ	0xFE5
 15809                           plusw1	equ	0xFE3
 15810                           fsr1h	equ	0xFE2
 15811                           fsr1l	equ	0xFE1
 15812                           indf2	equ	0xFDF
 15813                           postinc2	equ	0xFDE
 15814                           postdec2	equ	0xFDD
 15815                           fsr2h	equ	0xFDA
 15816                           fsr2l	equ	0xFD9
 15817                           status	equ	0xFD8
 15818                           
 15819 ;; *************** function _ExecuteRxParamSetupReq *****************
 15820 ;; Defined at:
 15821 ;;		line 587 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;  ptr             2   70[BANK0 ] PTR unsigned char 
 15824 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  frequency       4   74[BANK0 ] unsigned long 
 15827 ;;  dlSettings      1   78[BANK0 ] struct .
 15828 ;; Return value:  Size  Location     Type
 15829 ;;                  2   70[BANK0 ] PTR unsigned char 
 15830 ;; Registers used:
 15831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15832 ;; Tracked objects:
 15833 ;;		On entry : 0/0
 15834 ;;		On exit  : 0/0
 15835 ;;		Unchanged: 0/0
 15836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15841 ;;Total ram usage:        9 bytes
 15842 ;; Hardware stack levels used:    1
 15843 ;; Hardware stack levels required when called:    9
 15844 ;; This function calls:
 15845 ;;		_UpdateReceiveWindow2Parameters
 15846 ;;		_ValidateDataRateReception
 15847 ;;		_ValidateFrequency
 15848 ;;		_ValidateRxOffset
 15849 ;;		___lmul
 15850 ;; This function is called by:
 15851 ;;		_MacExecuteCommands
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855                           	psect	text79
 15856  0000'                    __ptext79:
 15857                           	opt stack 0
 15858  0000'                    _ExecuteRxParamSetupReq:
 15859                           	opt stack 16
 15860                           
 15861                           ;lorawan_na.c: 589: DlSettings_t dlSettings;
 15862                           ;lorawan_na.c: 590: uint32_t frequency = 0;
 15863                           
 15864                           ; BSR set to: 0
 15865                           ;incstack = 0
 15866  0000' 0E00               	movlw	0
 15867  0002' 0100               	movlb	0	; () banked
 15868  0004' 6F00'              	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 15869  0006' 0E00               	movlw	0
 15870  0008' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 15871  000A' 0E00               	movlw	0
 15872  000C' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 15873  000E' 0E00               	movlw	0
 15874  0010' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 15875                           
 15876                           ; BSR set to: 0
 15877                           ;lorawan_na.c: 594: dlSettings.value = *(ptr++);
 15878  0012' C046' FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 15879  0016' C047' FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 15880  001A' 50DF               	movf	indf2,w,c
 15881  001C' 6F00'              	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 15882                           
 15883                           ; BSR set to: 0
 15884  001E' 4B00'              	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 15885  0020' 2B00'              	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;lorawan_na.c: 596: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 15889  0022' C046' FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 15890  0026' C047' FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 15891  002A' 0EFF               	movlw	255
 15892  002C' 14DE               	andwf	postinc2,w,c
 15893  002E' 6F00'              	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 15894  0030' 0EFF               	movlw	255
 15895  0032' 14DE               	andwf	postinc2,w,c
 15896  0034' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 15897  0036' 0EFF               	movlw	255
 15898  0038' 14DE               	andwf	postinc2,w,c
 15899  003A' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 15900  003C' 0E00               	movlw	0
 15901  003E' 14DE               	andwf	postinc2,w,c
 15902  0040' 6F00'              	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;lorawan_na.c: 597: frequency = frequency * 100;
 15906  0042' C04A' F03A'        	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 15907  0046' C04B' F03B'        	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 15908  004A' C04C' F03C'        	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 15909  004E' C04D' F03D'        	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 15910  0052' 0E64               	movlw	100
 15911  0054' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 15912  0056' 0E00               	movlw	0
 15913  0058' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 15914  005A' 0E00               	movlw	0
 15915  005C' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 15916  005E' 0E00               	movlw	0
 15917  0060' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 15918  0062' EC00' F000'        	call	___lmul	;wreg free
 15919  0066' C03A' F04A'        	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 15920  006A' C03B' F04B'        	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 15921  006E' C03C' F04C'        	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 15922  0072' C03D' F04D'        	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 15923                           
 15924                           ;lorawan_na.c: 598: ptr = ptr + 3;
 15925  0076' 0E03               	movlw	3
 15926  0078' 0100               	movlb	0	; () banked
 15927  007A' 2500'              	addwf	ExecuteRxParamSetupReq@ptr& (0+255),w,b
 15928  007C' 6F00'              	movwf	ExecuteRxParamSetupReq@ptr& (0+255),b
 15929  007E' 0E00               	movlw	0
 15930  0080' 2100'              	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),w,b
 15931  0082' 6F00'              	movwf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),b
 15932                           
 15933                           ; BSR set to: 0
 15934                           ;lorawan_na.c: 600: if (ValidateFrequency (frequency) == OK)
 15935  0084' C04A' F016'        	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 15936  0088' C04B' F017'        	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 15937  008C' C04C' F018'        	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 15938  0090' C04D' F019'        	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 15939  0094' EC00' F000'        	call	_ValidateFrequency	;wreg free
 15940  0098' 0900               	iorlw	0
 15941  009A' A4D8               	btfss	status,2,c
 15942  009C' D018               	goto	l1510
 15943                           
 15944                           ;lorawan_na.c: 601: {
 15945                           ;lorawan_na.c: 602: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 15946  009E' 0102               	movlb	2	; () banked
 15947  00A0' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15948  00A2' 0D02               	mullw	2
 15949  00A4' 0E00'              	movlw	low _loRa
 15950  00A6' 0100               	movlb	0	; () banked
 15951  00A8' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 15952  00AA' 0E00'              	movlw	high _loRa
 15953  00AC' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 15954  00AE' 0E99               	movlw	153
 15955  00B0' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 15956  00B2' 0E00               	movlw	0
 15957  00B4' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 15958  00B6' 50F3               	movf	prodl,w,c
 15959  00B8' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 15960  00BA' 50F4               	movf	prodh,w,c
 15961  00BC' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 15962  00BE' 0E01               	movlw	1
 15963  00C0' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 15964  00C2' 6ED9               	movwf	fsr2l,c
 15965  00C4' 0E00               	movlw	0
 15966  00C6' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 15967  00C8' 6EDA               	movwf	fsr2h,c
 15968  00CA' 0102               	movlb	2	; () banked
 15969  00CC' 86DF               	bsf	indf2,3,c
 15970  00CE'                    l1510:
 15971                           
 15972                           ;lorawan_na.c: 603: }
 15973                           ;lorawan_na.c: 605: if (ValidateDataRateReception (dlSettings.bits.rx2DataRate) == OK)
 15974                           
 15975                           ; BSR set to: 2
 15976  00CE' 0100               	movlb	0	; () banked
 15977  00D0' 5100'              	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 15978  00D2' 0B0F               	andlw	15
 15979  00D4' EC00' F000'        	call	_ValidateDataRateReception
 15980  00D8' 0900               	iorlw	0
 15981  00DA' A4D8               	btfss	status,2,c
 15982  00DC' D018               	goto	l1511
 15983                           
 15984                           ;lorawan_na.c: 606: {
 15985                           ;lorawan_na.c: 607: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 15986  00DE' 0102               	movlb	2	; () banked
 15987  00E0' 5100'              	movf	(_loRa+152)& (0+255),w,b
 15988  00E2' 0D02               	mullw	2
 15989  00E4' 0E00'              	movlw	low _loRa
 15990  00E6' 0100               	movlb	0	; () banked
 15991  00E8' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 15992  00EA' 0E00'              	movlw	high _loRa
 15993  00EC' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 15994  00EE' 0E99               	movlw	153
 15995  00F0' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 15996  00F2' 0E00               	movlw	0
 15997  00F4' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 15998  00F6' 50F3               	movf	prodl,w,c
 15999  00F8' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16000  00FA' 50F4               	movf	prodh,w,c
 16001  00FC' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16002  00FE' 0E01               	movlw	1
 16003  0100' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16004  0102' 6ED9               	movwf	fsr2l,c
 16005  0104' 0E00               	movlw	0
 16006  0106' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16007  0108' 6EDA               	movwf	fsr2h,c
 16008  010A' 0102               	movlb	2	; () banked
 16009  010C' 88DF               	bsf	indf2,4,c
 16010  010E'                    l1511:
 16011                           
 16012                           ;lorawan_na.c: 608: }
 16013                           ;lorawan_na.c: 610: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 16014                           
 16015                           ; BSR set to: 2
 16016  010E' 0100               	movlb	0	; () banked
 16017  0110' 3900'              	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16018  0112' 0B07               	andlw	7
 16019  0114' EC00' F000'        	call	_ValidateRxOffset
 16020  0118' 0900               	iorlw	0
 16021  011A' A4D8               	btfss	status,2,c
 16022  011C' D018               	goto	l1512
 16023                           
 16024                           ;lorawan_na.c: 611: {
 16025                           ;lorawan_na.c: 612: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 16026  011E' 0102               	movlb	2	; () banked
 16027  0120' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16028  0122' 0D02               	mullw	2
 16029  0124' 0E00'              	movlw	low _loRa
 16030  0126' 0100               	movlb	0	; () banked
 16031  0128' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16032  012A' 0E00'              	movlw	high _loRa
 16033  012C' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16034  012E' 0E99               	movlw	153
 16035  0130' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16036  0132' 0E00               	movlw	0
 16037  0134' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16038  0136' 50F3               	movf	prodl,w,c
 16039  0138' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16040  013A' 50F4               	movf	prodh,w,c
 16041  013C' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16042  013E' 0E01               	movlw	1
 16043  0140' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16044  0142' 6ED9               	movwf	fsr2l,c
 16045  0144' 0E00               	movlw	0
 16046  0146' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16047  0148' 6EDA               	movwf	fsr2h,c
 16048  014A' 0102               	movlb	2	; () banked
 16049  014C' 8ADF               	bsf	indf2,5,c
 16050  014E'                    l1512:
 16051                           
 16052                           ;lorawan_na.c: 613: }
 16053                           ;lorawan_na.c: 615: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 16054  014E' 0102               	movlb	2	; () banked
 16055  0150' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16056  0152' 0D02               	mullw	2
 16057  0154' 0E00'              	movlw	low _loRa
 16058  0156' 0100               	movlb	0	; () banked
 16059  0158' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16060  015A' 0E00'              	movlw	high _loRa
 16061  015C' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16062  015E' 0E99               	movlw	153
 16063  0160' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16064  0162' 0E00               	movlw	0
 16065  0164' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16066  0166' 50F3               	movf	prodl,w,c
 16067  0168' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16068  016A' 50F4               	movf	prodh,w,c
 16069  016C' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16070  016E' 0E01               	movlw	1
 16071  0170' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16072  0172' 6ED9               	movwf	fsr2l,c
 16073  0174' 0E00               	movlw	0
 16074  0176' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16075  0178' 6EDA               	movwf	fsr2h,c
 16076  017A' 0102               	movlb	2	; () banked
 16077  017C' A8DF               	btfss	indf2,4,c
 16078  017E' D045               	goto	l1513
 16079                           
 16080                           ; BSR set to: 2
 16081  0180' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16082  0182' 0D02               	mullw	2
 16083  0184' 0E00'              	movlw	low _loRa
 16084  0186' 0100               	movlb	0	; () banked
 16085  0188' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16086  018A' 0E00'              	movlw	high _loRa
 16087  018C' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16088  018E' 0E99               	movlw	153
 16089  0190' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16090  0192' 0E00               	movlw	0
 16091  0194' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16092  0196' 50F3               	movf	prodl,w,c
 16093  0198' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16094  019A' 50F4               	movf	prodh,w,c
 16095  019C' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16096  019E' 0E01               	movlw	1
 16097  01A0' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16098  01A2' 6ED9               	movwf	fsr2l,c
 16099  01A4' 0E00               	movlw	0
 16100  01A6' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16101  01A8' 6EDA               	movwf	fsr2h,c
 16102  01AA' 0102               	movlb	2	; () banked
 16103  01AC' A6DF               	btfss	indf2,3,c
 16104  01AE' D02D               	goto	l1513
 16105                           
 16106                           ; BSR set to: 2
 16107  01B0' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16108  01B2' 0D02               	mullw	2
 16109  01B4' 0E00'              	movlw	low _loRa
 16110  01B6' 0100               	movlb	0	; () banked
 16111  01B8' 6F00'              	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16112  01BA' 0E00'              	movlw	high _loRa
 16113  01BC' 6F00'              	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16114  01BE' 0E99               	movlw	153
 16115  01C0' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16116  01C2' 0E00               	movlw	0
 16117  01C4' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16118  01C6' 50F3               	movf	prodl,w,c
 16119  01C8' 2700'              	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16120  01CA' 50F4               	movf	prodh,w,c
 16121  01CC' 2300'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16122  01CE' 0E01               	movlw	1
 16123  01D0' 2500'              	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16124  01D2' 6ED9               	movwf	fsr2l,c
 16125  01D4' 0E00               	movlw	0
 16126  01D6' 2100'              	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16127  01D8' 6EDA               	movwf	fsr2h,c
 16128  01DA' 0102               	movlb	2	; () banked
 16129  01DC' AADF               	btfss	indf2,5,c
 16130  01DE' D015               	goto	l1513
 16131                           
 16132                           ; BSR set to: 2
 16133                           ;lorawan_na.c: 616: {
 16134                           ;lorawan_na.c: 617: loRa.offset = dlSettings.bits.rx1DROffset;
 16135  01E0' 0100               	movlb	0	; () banked
 16136  01E2' 3900'              	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16137  01E4' 0B07               	andlw	7
 16138  01E6' 0102               	movlb	2	; () banked
 16139  01E8' 6F00'              	movwf	(_loRa+224)& (0+255),b
 16140                           
 16141                           ; BSR set to: 2
 16142                           ;lorawan_na.c: 618: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 16143  01EA' C04A' F000'        	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 16144  01EE' C04B' F001'        	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 16145  01F2' C04C' F002'        	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 16146  01F6' C04D' F003'        	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 16147  01FA' 0100               	movlb	0	; () banked
 16148  01FC' 5100'              	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16149  01FE' 0B0F               	andlw	15
 16150  0200' 6F00'              	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 16151  0202' EC00' F000'        	call	_UpdateReceiveWindow2Parameters	;wreg free
 16152                           
 16153                           ;lorawan_na.c: 619: loRa.macStatus.secondReceiveWindowModified = 1;
 16154  0206' 0102               	movlb	2	; () banked
 16155  0208' 8F00'              	bsf	(_loRa+3)& (0+255),7,b
 16156  020A'                    l1513:
 16157                           
 16158                           ; BSR set to: 2
 16159                           ;lorawan_na.c: 620: }
 16160                           ;lorawan_na.c: 622: return ptr;
 16161                           
 16162                           ; BSR set to: 2
 16163  020A' C046' F046'        	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 16164  020E' C047' F047'        	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 16165  0212' 0012               	return	
 16166  0214'                    __end_of_ExecuteRxParamSetupReq:
 16167                           	opt stack 0
 16168                           tosu	equ	0xFFF
 16169                           tosh	equ	0xFFE
 16170                           tosl	equ	0xFFD
 16171                           pclath	equ	0xFFA
 16172                           tblptru	equ	0xFF8
 16173                           tblptrh	equ	0xFF7
 16174                           tblptrl	equ	0xFF6
 16175                           tablat	equ	0xFF5
 16176                           prodh	equ	0xFF4
 16177                           prodl	equ	0xFF3
 16178                           intcon	equ	0xFF2
 16179                           intcon2	equ	0xFF1
 16180                           intcon3	equ	0xFF0
 16181                           indf0	equ	0xFEF
 16182                           postinc0	equ	0xFEE
 16183                           fsr0h	equ	0xFEA
 16184                           fsr0l	equ	0xFE9
 16185                           wreg	equ	0xFE8
 16186                           postinc1	equ	0xFE6
 16187                           postdec1	equ	0xFE5
 16188                           plusw1	equ	0xFE3
 16189                           fsr1h	equ	0xFE2
 16190                           fsr1l	equ	0xFE1
 16191                           indf2	equ	0xFDF
 16192                           postinc2	equ	0xFDE
 16193                           postdec2	equ	0xFDD
 16194                           fsr2h	equ	0xFDA
 16195                           fsr2l	equ	0xFD9
 16196                           status	equ	0xFD8
 16197                           
 16198 ;; *************** function _ValidateRxOffset *****************
 16199 ;; Defined at:
 16200 ;;		line 853 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 16201 ;; Parameters:    Size  Location     Type
 16202 ;;  rxOffset        1    wreg     unsigned char 
 16203 ;; Auto vars:     Size  Location     Type
 16204 ;;  rxOffset        1    0[BANK0 ] unsigned char 
 16205 ;;  result          1    1[BANK0 ] enum E7249
 16206 ;; Return value:  Size  Location     Type
 16207 ;;                  1    wreg      enum E7249
 16208 ;; Registers used:
 16209 ;;		wreg, status,2, status,0
 16210 ;; Tracked objects:
 16211 ;;		On entry : 0/0
 16212 ;;		On exit  : 0/0
 16213 ;;		Unchanged: 0/0
 16214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16219 ;;Total ram usage:        2 bytes
 16220 ;; Hardware stack levels used:    1
 16221 ;; Hardware stack levels required when called:    7
 16222 ;; This function calls:
 16223 ;;		Nothing
 16224 ;; This function is called by:
 16225 ;;		_ExecuteRxParamSetupReq
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           	psect	text80
 16230  0000'                    __ptext80:
 16231                           	opt stack 0
 16232  0000'                    _ValidateRxOffset:
 16233                           	opt stack 17
 16234                           
 16235                           ; BSR set to: 2
 16236                           ;incstack = 0
 16237                           ;ValidateRxOffset@rxOffset stored from wreg
 16238  0000' 0100               	movlb	0	; () banked
 16239  0002' 6F00'              	movwf	ValidateRxOffset@rxOffset& (0+255),b
 16240                           
 16241                           ;lorawan_na.c: 855: LorawanError_t result = OK;
 16242  0004' 0E00               	movlw	0
 16243  0006' 0100               	movlb	0	; () banked
 16244  0008' 6F00'              	movwf	ValidateRxOffset@result& (0+255),b
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;lorawan_na.c: 857: if (rxOffset > 3)
 16248  000A' 0E03               	movlw	3
 16249  000C' 6500'              	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 16250  000E' D002               	goto	l1582
 16251                           
 16252                           ; BSR set to: 0
 16253                           ;lorawan_na.c: 858: {
 16254                           ;lorawan_na.c: 859: result = INVALID_PARAMETER;
 16255  0010' 0E03               	movlw	3
 16256  0012' 6F00'              	movwf	ValidateRxOffset@result& (0+255),b
 16257  0014'                    l1582:
 16258                           
 16259                           ; BSR set to: 0
 16260                           ;lorawan_na.c: 860: }
 16261                           ;lorawan_na.c: 862: return result;
 16262  0014' 5100'              	movf	ValidateRxOffset@result& (0+255),w,b
 16263  0016' 0012               	return	
 16264  0018'                    __end_of_ValidateRxOffset:
 16265                           	opt stack 0
 16266                           tosu	equ	0xFFF
 16267                           tosh	equ	0xFFE
 16268                           tosl	equ	0xFFD
 16269                           pclath	equ	0xFFA
 16270                           tblptru	equ	0xFF8
 16271                           tblptrh	equ	0xFF7
 16272                           tblptrl	equ	0xFF6
 16273                           tablat	equ	0xFF5
 16274                           prodh	equ	0xFF4
 16275                           prodl	equ	0xFF3
 16276                           intcon	equ	0xFF2
 16277                           intcon2	equ	0xFF1
 16278                           intcon3	equ	0xFF0
 16279                           indf0	equ	0xFEF
 16280                           postinc0	equ	0xFEE
 16281                           fsr0h	equ	0xFEA
 16282                           fsr0l	equ	0xFE9
 16283                           wreg	equ	0xFE8
 16284                           postinc1	equ	0xFE6
 16285                           postdec1	equ	0xFE5
 16286                           plusw1	equ	0xFE3
 16287                           fsr1h	equ	0xFE2
 16288                           fsr1l	equ	0xFE1
 16289                           indf2	equ	0xFDF
 16290                           postinc2	equ	0xFDE
 16291                           postdec2	equ	0xFDD
 16292                           fsr2h	equ	0xFDA
 16293                           fsr2l	equ	0xFD9
 16294                           status	equ	0xFD8
 16295                           
 16296 ;; *************** function _ValidateFrequency *****************
 16297 ;; Defined at:
 16298 ;;		line 865 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;  frequencyNew    4   22[BANK0 ] unsigned long 
 16301 ;; Auto vars:     Size  Location     Type
 16302 ;;  result          1   26[BANK0 ] enum E7249
 16303 ;; Return value:  Size  Location     Type
 16304 ;;                  1    wreg      enum E7249
 16305 ;; Registers used:
 16306 ;;		wreg, status,2, status,0, cstack
 16307 ;; Tracked objects:
 16308 ;;		On entry : 0/0
 16309 ;;		On exit  : 0/0
 16310 ;;		Unchanged: 0/0
 16311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16315 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16316 ;;Total ram usage:        5 bytes
 16317 ;; Hardware stack levels used:    1
 16318 ;; Hardware stack levels required when called:    8
 16319 ;; This function calls:
 16320 ;;		___llmod
 16321 ;; This function is called by:
 16322 ;;		_ExecuteRxParamSetupReq
 16323 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16324 ;; This function uses a non-reentrant model
 16325 ;;
 16326                           
 16327                           	psect	text81
 16328  0000'                    __ptext81:
 16329                           	opt stack 0
 16330  0000'                    _ValidateFrequency:
 16331                           	opt stack 16
 16332                           
 16333                           ;lorawan_na.c: 867: LorawanError_t result = OK;
 16334                           
 16335                           ; BSR set to: 0
 16336                           ;incstack = 0
 16337  0000' 0E00               	movlw	0
 16338  0002' 0100               	movlb	0	; () banked
 16339  0004' 6F00'              	movwf	ValidateFrequency@result& (0+255),b
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;lorawan_na.c: 873: if ( (frequencyNew < 923300000) || (frequencyNew > 927500000) || ( (
      +                           (frequencyNew - 923300000) % 600000) != 0) )
 16343  0006' 0EA0               	movlw	160
 16344  0008' 5D00'              	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 16345  000A' 0E70               	movlw	112
 16346  000C' 5900'              	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 16347  000E' 0E08               	movlw	8
 16348  0010' 5900'              	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 16349  0012' 0E37               	movlw	55
 16350  0014' 5900'              	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 16351  0016' A0D8               	btfss	status,0,c
 16352  0018' D027               	goto	u8980
 16353                           
 16354                           ; BSR set to: 0
 16355  001A' 0EE1               	movlw	225
 16356  001C' 5D00'              	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 16357  001E' 0E86               	movlw	134
 16358  0020' 5900'              	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 16359  0022' 0E48               	movlw	72
 16360  0024' 5900'              	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 16361  0026' 0E37               	movlw	55
 16362  0028' 5900'              	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 16363  002A' B0D8               	btfsc	status,0,c
 16364  002C' D01D               	goto	u8980
 16365                           
 16366                           ; BSR set to: 0
 16367  002E' 0E60               	movlw	96
 16368  0030' 2500'              	addwf	ValidateFrequency@frequencyNew& (0+255),w,b
 16369  0032' 6F00'              	movwf	___llmod@dividend& (0+255),b
 16370  0034' 0E8F               	movlw	143
 16371  0036' 2100'              	addwfc	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 16372  0038' 6F00'              	movwf	(___llmod@dividend+1)& (0+255),b
 16373  003A' 0EF7               	movlw	247
 16374  003C' 2100'              	addwfc	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 16375  003E' 6F00'              	movwf	(___llmod@dividend+2)& (0+255),b
 16376  0040' 0EC8               	movlw	200
 16377  0042' 2100'              	addwfc	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 16378  0044' 6F00'              	movwf	(___llmod@dividend+3)& (0+255),b
 16379  0046' 0EC0               	movlw	192
 16380  0048' 6F00'              	movwf	___llmod@divisor& (0+255),b
 16381  004A' 0E27               	movlw	39
 16382  004C' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
 16383  004E' 0E09               	movlw	9
 16384  0050' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
 16385  0052' 0E00               	movlw	0
 16386  0054' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
 16387  0056' EC00' F000'        	call	___llmod	;wreg free
 16388  005A' 0100               	movlb	0	; () banked
 16389  005C' 5100'              	movf	?___llmod& (0+255),w,b
 16390  005E' 1100'              	iorwf	(?___llmod+1)& (0+255),w,b
 16391  0060' 1100'              	iorwf	(?___llmod+2)& (0+255),w,b
 16392  0062' 1100'              	iorwf	(?___llmod+3)& (0+255),w,b
 16393  0064' B4D8               	btfsc	status,2,c
 16394  0066' D002               	goto	l1586
 16395  0068'                    u8980:
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;lorawan_na.c: 874: {
 16399                           ;lorawan_na.c: 875: result = INVALID_PARAMETER ;
 16400                           
 16401                           ; BSR set to: 0
 16402  0068' 0E03               	movlw	3
 16403  006A' 6F00'              	movwf	ValidateFrequency@result& (0+255),b
 16404  006C'                    l1586:
 16405                           
 16406                           ; BSR set to: 0
 16407                           ;lorawan_na.c: 876: }
 16408                           ;lorawan_na.c: 877: return result;
 16409  006C' 5100'              	movf	ValidateFrequency@result& (0+255),w,b
 16410  006E' 0012               	return	
 16411  0070'                    __end_of_ValidateFrequency:
 16412                           	opt stack 0
 16413                           tosu	equ	0xFFF
 16414                           tosh	equ	0xFFE
 16415                           tosl	equ	0xFFD
 16416                           pclath	equ	0xFFA
 16417                           tblptru	equ	0xFF8
 16418                           tblptrh	equ	0xFF7
 16419                           tblptrl	equ	0xFF6
 16420                           tablat	equ	0xFF5
 16421                           prodh	equ	0xFF4
 16422                           prodl	equ	0xFF3
 16423                           intcon	equ	0xFF2
 16424                           intcon2	equ	0xFF1
 16425                           intcon3	equ	0xFF0
 16426                           indf0	equ	0xFEF
 16427                           postinc0	equ	0xFEE
 16428                           fsr0h	equ	0xFEA
 16429                           fsr0l	equ	0xFE9
 16430                           wreg	equ	0xFE8
 16431                           postinc1	equ	0xFE6
 16432                           postdec1	equ	0xFE5
 16433                           plusw1	equ	0xFE3
 16434                           fsr1h	equ	0xFE2
 16435                           fsr1l	equ	0xFE1
 16436                           indf2	equ	0xFDF
 16437                           postinc2	equ	0xFDE
 16438                           postdec2	equ	0xFDD
 16439                           fsr2h	equ	0xFDA
 16440                           fsr2l	equ	0xFD9
 16441                           status	equ	0xFD8
 16442                           
 16443 ;; *************** function _ValidateDataRateReception *****************
 16444 ;; Defined at:
 16445 ;;		line 1021 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 16446 ;; Parameters:    Size  Location     Type
 16447 ;;  dataRate        1    wreg     unsigned char 
 16448 ;; Auto vars:     Size  Location     Type
 16449 ;;  dataRate        1    1[BANK0 ] unsigned char 
 16450 ;;  result          1    0[BANK0 ] enum E7249
 16451 ;; Return value:  Size  Location     Type
 16452 ;;                  1    wreg      enum E7249
 16453 ;; Registers used:
 16454 ;;		wreg, status,2, status,0
 16455 ;; Tracked objects:
 16456 ;;		On entry : 0/0
 16457 ;;		On exit  : 0/0
 16458 ;;		Unchanged: 0/0
 16459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16464 ;;Total ram usage:        2 bytes
 16465 ;; Hardware stack levels used:    1
 16466 ;; Hardware stack levels required when called:    7
 16467 ;; This function calls:
 16468 ;;		Nothing
 16469 ;; This function is called by:
 16470 ;;		_ExecuteRxParamSetupReq
 16471 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16472 ;; This function uses a non-reentrant model
 16473 ;;
 16474                           
 16475                           	psect	text82
 16476  0000'                    __ptext82:
 16477                           	opt stack 0
 16478  0000'                    _ValidateDataRateReception:
 16479                           	opt stack 17
 16480                           
 16481                           ; BSR set to: 0
 16482                           ;incstack = 0
 16483                           ;ValidateDataRateReception@dataRate stored from wreg
 16484  0000' 0100               	movlb	0	; () banked
 16485  0002' 6F00'              	movwf	ValidateDataRateReception@dataRate& (0+255),b
 16486                           
 16487                           ;lorawan_na.c: 1023: LorawanError_t result = OK;
 16488  0004' 0E00               	movlw	0
 16489  0006' 0100               	movlb	0	; () banked
 16490  0008' 6F00'              	movwf	ValidateDataRateReception@result& (0+255),b
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;lorawan_na.c: 1025: if ( (dataRate > 13) || (dataRate < 8) )
 16494  000A' 0E0E               	movlw	14
 16495  000C' 6100'              	cpfslt	ValidateDataRateReception@dataRate& (0+255),b
 16496  000E' D003               	goto	u9000
 16497                           
 16498                           ; BSR set to: 0
 16499  0010' 0E08               	movlw	8
 16500  0012' 6100'              	cpfslt	ValidateDataRateReception@dataRate& (0+255),b
 16501  0014' D002               	goto	l1651
 16502  0016'                    u9000:
 16503                           
 16504                           ; BSR set to: 0
 16505                           ;lorawan_na.c: 1026: {
 16506                           ;lorawan_na.c: 1027: result = INVALID_PARAMETER;
 16507                           
 16508                           ; BSR set to: 0
 16509  0016' 0E03               	movlw	3
 16510  0018' 6F00'              	movwf	ValidateDataRateReception@result& (0+255),b
 16511  001A'                    l1651:
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;lorawan_na.c: 1028: }
 16515                           ;lorawan_na.c: 1030: return result;
 16516  001A' 5100'              	movf	ValidateDataRateReception@result& (0+255),w,b
 16517  001C' 0012               	return	
 16518  001E'                    __end_of_ValidateDataRateReception:
 16519                           	opt stack 0
 16520                           tosu	equ	0xFFF
 16521                           tosh	equ	0xFFE
 16522                           tosl	equ	0xFFD
 16523                           pclath	equ	0xFFA
 16524                           tblptru	equ	0xFF8
 16525                           tblptrh	equ	0xFF7
 16526                           tblptrl	equ	0xFF6
 16527                           tablat	equ	0xFF5
 16528                           prodh	equ	0xFF4
 16529                           prodl	equ	0xFF3
 16530                           intcon	equ	0xFF2
 16531                           intcon2	equ	0xFF1
 16532                           intcon3	equ	0xFF0
 16533                           indf0	equ	0xFEF
 16534                           postinc0	equ	0xFEE
 16535                           fsr0h	equ	0xFEA
 16536                           fsr0l	equ	0xFE9
 16537                           wreg	equ	0xFE8
 16538                           postinc1	equ	0xFE6
 16539                           postdec1	equ	0xFE5
 16540                           plusw1	equ	0xFE3
 16541                           fsr1h	equ	0xFE2
 16542                           fsr1l	equ	0xFE1
 16543                           indf2	equ	0xFDF
 16544                           postinc2	equ	0xFDE
 16545                           postdec2	equ	0xFDD
 16546                           fsr2h	equ	0xFDA
 16547                           fsr2l	equ	0xFD9
 16548                           status	equ	0xFD8
 16549                           
 16550 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 16551 ;; Defined at:
 16552 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16553 ;; Parameters:    Size  Location     Type
 16554 ;;  frequency       4    0[BANK0 ] unsigned long 
 16555 ;;  dataRate        1    4[BANK0 ] unsigned char 
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;		None
 16558 ;; Return value:  Size  Location     Type
 16559 ;;                  1    wreg      void 
 16560 ;; Registers used:
 16561 ;;		None
 16562 ;; Tracked objects:
 16563 ;;		On entry : 0/0
 16564 ;;		On exit  : 0/0
 16565 ;;		Unchanged: 0/0
 16566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16567 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;Total ram usage:        5 bytes
 16572 ;; Hardware stack levels used:    1
 16573 ;; Hardware stack levels required when called:    7
 16574 ;; This function calls:
 16575 ;;		Nothing
 16576 ;; This function is called by:
 16577 ;;		_ExecuteRxParamSetupReq
 16578 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16579 ;; This function uses a non-reentrant model
 16580 ;;
 16581                           
 16582                           	psect	text83
 16583  0000'                    __ptext83:
 16584                           	opt stack 0
 16585  0000'                    _UpdateReceiveWindow2Parameters:
 16586                           	opt stack 17
 16587                           
 16588                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 16589                           
 16590                           ; BSR set to: 0
 16591                           ;incstack = 0
 16592  0000' C004' F01C'        	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 16593                           
 16594                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 16595  0004' C000' F018'        	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 16596  0008' C001' F019'        	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 16597  000C' C002' F01A'        	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 16598  0010' C003' F01B'        	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 16599  0014' 0012               	return		;funcret
 16600  0016'                    __end_of_UpdateReceiveWindow2Parameters:
 16601                           	opt stack 0
 16602                           tosu	equ	0xFFF
 16603                           tosh	equ	0xFFE
 16604                           tosl	equ	0xFFD
 16605                           pclath	equ	0xFFA
 16606                           tblptru	equ	0xFF8
 16607                           tblptrh	equ	0xFF7
 16608                           tblptrl	equ	0xFF6
 16609                           tablat	equ	0xFF5
 16610                           prodh	equ	0xFF4
 16611                           prodl	equ	0xFF3
 16612                           intcon	equ	0xFF2
 16613                           intcon2	equ	0xFF1
 16614                           intcon3	equ	0xFF0
 16615                           indf0	equ	0xFEF
 16616                           postinc0	equ	0xFEE
 16617                           fsr0h	equ	0xFEA
 16618                           fsr0l	equ	0xFE9
 16619                           wreg	equ	0xFE8
 16620                           postinc1	equ	0xFE6
 16621                           postdec1	equ	0xFE5
 16622                           plusw1	equ	0xFE3
 16623                           fsr1h	equ	0xFE2
 16624                           fsr1l	equ	0xFE1
 16625                           indf2	equ	0xFDF
 16626                           postinc2	equ	0xFDE
 16627                           postdec2	equ	0xFDD
 16628                           fsr2h	equ	0xFDA
 16629                           fsr2l	equ	0xFD9
 16630                           status	equ	0xFD8
 16631                           
 16632 ;; *************** function _ExecuteNewChannel *****************
 16633 ;; Defined at:
 16634 ;;		line 545 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 16635 ;; Parameters:    Size  Location     Type
 16636 ;;  ptr             2   83[BANK0 ] PTR unsigned char 
 16637 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;  frequency       4   88[BANK0 ] unsigned long 
 16640 ;;  channelIndex    1   92[BANK0 ] unsigned char 
 16641 ;;  drRange         1   87[BANK0 ] struct .
 16642 ;; Return value:  Size  Location     Type
 16643 ;;                  2   83[BANK0 ] PTR unsigned char 
 16644 ;; Registers used:
 16645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16646 ;; Tracked objects:
 16647 ;;		On entry : 0/0
 16648 ;;		On exit  : 0/0
 16649 ;;		Unchanged: 0/0
 16650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16651 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16654 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16655 ;;Total ram usage:       10 bytes
 16656 ;; Hardware stack levels used:    1
 16657 ;; Hardware stack levels required when called:   10
 16658 ;; This function calls:
 16659 ;;		_GenerateUSFrequency1
 16660 ;;		_GenerateUSFrequency2
 16661 ;;		_LORAWAN_SetChannelIdStatus
 16662 ;;		_LORAWAN_SetDataRange
 16663 ;;		_ValidateChannelId
 16664 ;;		_ValidateDataRange
 16665 ;;		___lmul
 16666 ;; This function is called by:
 16667 ;;		_MacExecuteCommands
 16668 ;; This function uses a non-reentrant model
 16669 ;;
 16670                           
 16671                           	psect	text84
 16672  0000'                    __ptext84:
 16673                           	opt stack 0
 16674  0000'                    _ExecuteNewChannel:
 16675                           	opt stack 15
 16676                           
 16677                           ;lorawan_na.c: 547: uint8_t channelIndex;
 16678                           ;lorawan_na.c: 548: DataRange_t drRange;
 16679                           ;lorawan_na.c: 549: uint32_t frequency = 0;
 16680                           
 16681                           ;incstack = 0
 16682  0000' 0E00               	movlw	0
 16683  0002' 0100               	movlb	0	; () banked
 16684  0004' 6F00'              	movwf	ExecuteNewChannel@frequency& (0+255),b
 16685  0006' 0E00               	movlw	0
 16686  0008' 6F00'              	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16687  000A' 0E00               	movlw	0
 16688  000C' 6F00'              	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16689  000E' 0E00               	movlw	0
 16690  0010' 6F00'              	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;lorawan_na.c: 551: channelIndex = *(ptr++);
 16694  0012' C053' FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16695  0016' C054' FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16696  001A' 50DF               	movf	indf2,w,c
 16697  001C' 6F00'              	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 16698                           
 16699                           ; BSR set to: 0
 16700  001E' 4B00'              	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16701  0020' 2B00'              	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;lorawan_na.c: 553: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 16705  0022' C053' FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16706  0026' C054' FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16707  002A' 0EFF               	movlw	255
 16708  002C' 14DE               	andwf	postinc2,w,c
 16709  002E' 6F00'              	movwf	ExecuteNewChannel@frequency& (0+255),b
 16710  0030' 0EFF               	movlw	255
 16711  0032' 14DE               	andwf	postinc2,w,c
 16712  0034' 6F00'              	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16713  0036' 0EFF               	movlw	255
 16714  0038' 14DE               	andwf	postinc2,w,c
 16715  003A' 6F00'              	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16716  003C' 0E00               	movlw	0
 16717  003E' 14DE               	andwf	postinc2,w,c
 16718  0040' 6F00'              	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;lorawan_na.c: 554: frequency = frequency * 100;
 16722  0042' C058' F03A'        	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 16723  0046' C059' F03B'        	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 16724  004A' C05A' F03C'        	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 16725  004E' C05B' F03D'        	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 16726  0052' 0E64               	movlw	100
 16727  0054' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 16728  0056' 0E00               	movlw	0
 16729  0058' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 16730  005A' 0E00               	movlw	0
 16731  005C' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 16732  005E' 0E00               	movlw	0
 16733  0060' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 16734  0062' EC00' F000'        	call	___lmul	;wreg free
 16735  0066' C03A' F058'        	movff	?___lmul,ExecuteNewChannel@frequency
 16736  006A' C03B' F059'        	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 16737  006E' C03C' F05A'        	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 16738  0072' C03D' F05B'        	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 16739                           
 16740                           ;lorawan_na.c: 555: ptr = ptr + 3;
 16741  0076' 0E03               	movlw	3
 16742  0078' 0100               	movlb	0	; () banked
 16743  007A' 2500'              	addwf	ExecuteNewChannel@ptr& (0+255),w,b
 16744  007C' 6F00'              	movwf	ExecuteNewChannel@ptr& (0+255),b
 16745  007E' 0E00               	movlw	0
 16746  0080' 2100'              	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),w,b
 16747  0082' 6F00'              	movwf	(ExecuteNewChannel@ptr+1)& (0+255),b
 16748                           
 16749                           ; BSR set to: 0
 16750                           ;lorawan_na.c: 557: drRange.value = *(ptr++);
 16751  0084' C053' FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16752  0088' C054' FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16753  008C' 50DF               	movf	indf2,w,c
 16754  008E' 6F00'              	movwf	ExecuteNewChannel@drRange& (0+255),b
 16755                           
 16756                           ; BSR set to: 0
 16757  0090' 4B00'              	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16758  0092' 2B00'              	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;lorawan_na.c: 559: if (ValidateChannelId (channelIndex) == OK)
 16762  0094' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16763  0096' EC00' F000'        	call	_ValidateChannelId
 16764  009A' 0900               	iorlw	0
 16765  009C' A4D8               	btfss	status,2,c
 16766  009E' D062               	goto	l1503
 16767                           
 16768                           ;lorawan_na.c: 560: {
 16769                           ;lorawan_na.c: 561: if ( (frequency == GenerateUSFrequency1 (channelIndex)) || (frequenc
      +                          y == GenerateUSFrequency2 (channelIndex)) || (frequency == 0) )
 16770  00A0' 0100               	movlb	0	; () banked
 16771  00A2' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16772  00A4' EC00' F000'        	call	_GenerateUSFrequency1
 16773  00A8' 0100               	movlb	0	; () banked
 16774  00AA' 5100'              	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16775  00AC' 1900'              	xorwf	?_GenerateUSFrequency1& (0+255),w,b
 16776  00AE' E10A               	bnz	u9810
 16777  00B0' 5100'              	movf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16778  00B2' 1900'              	xorwf	(?_GenerateUSFrequency1+1)& (0+255),w,b
 16779  00B4' E107               	bnz	u9810
 16780  00B6' 5100'              	movf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16781  00B8' 1900'              	xorwf	(?_GenerateUSFrequency1+2)& (0+255),w,b
 16782  00BA' E104               	bnz	u9810
 16783  00BC' 5100'              	movf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16784  00BE' 1900'              	xorwf	(?_GenerateUSFrequency1+3)& (0+255),w,b
 16785  00C0' B4D8               	btfsc	status,2,c
 16786  00C2' D017               	goto	u9830
 16787  00C4'                    u9810:
 16788                           
 16789                           ; BSR set to: 0
 16790  00C4' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16791  00C6' EC00' F000'        	call	_GenerateUSFrequency2
 16792  00CA' 0100               	movlb	0	; () banked
 16793  00CC' 5100'              	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16794  00CE' 1900'              	xorwf	?_GenerateUSFrequency2& (0+255),w,b
 16795  00D0' E10A               	bnz	u9820
 16796  00D2' 5100'              	movf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16797  00D4' 1900'              	xorwf	(?_GenerateUSFrequency2+1)& (0+255),w,b
 16798  00D6' E107               	bnz	u9820
 16799  00D8' 5100'              	movf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16800  00DA' 1900'              	xorwf	(?_GenerateUSFrequency2+2)& (0+255),w,b
 16801  00DC' E104               	bnz	u9820
 16802  00DE' 5100'              	movf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16803  00E0' 1900'              	xorwf	(?_GenerateUSFrequency2+3)& (0+255),w,b
 16804  00E2' B4D8               	btfsc	status,2,c
 16805  00E4' D006               	goto	u9830
 16806  00E6'                    u9820:
 16807                           
 16808                           ; BSR set to: 0
 16809  00E6' 5100'              	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16810  00E8' 1100'              	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16811  00EA' 1100'              	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16812  00EC' 1100'              	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16813  00EE' A4D8               	btfss	status,2,c
 16814  00F0' D018               	goto	l1500
 16815  00F2'                    u9830:
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;lorawan_na.c: 562: {
 16819                           ;lorawan_na.c: 563: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 16820                           
 16821                           ; BSR set to: 0
 16822  00F2' 0102               	movlb	2	; () banked
 16823  00F4' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16824  00F6' 0D02               	mullw	2
 16825  00F8' 0E00'              	movlw	low _loRa
 16826  00FA' 0100               	movlb	0	; () banked
 16827  00FC' 6F00'              	movwf	??_ExecuteNewChannel& (0+255),b
 16828  00FE' 0E00'              	movlw	high _loRa
 16829  0100' 6F00'              	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16830  0102' 0E99               	movlw	153
 16831  0104' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16832  0106' 0E00               	movlw	0
 16833  0108' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16834  010A' 50F3               	movf	prodl,w,c
 16835  010C' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16836  010E' 50F4               	movf	prodh,w,c
 16837  0110' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16838  0112' 0E01               	movlw	1
 16839  0114' 2500'              	addwf	??_ExecuteNewChannel& (0+255),w,b
 16840  0116' 6ED9               	movwf	fsr2l,c
 16841  0118' 0E00               	movlw	0
 16842  011A' 2100'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16843  011C' 6EDA               	movwf	fsr2h,c
 16844  011E' 0102               	movlb	2	; () banked
 16845  0120' 8EDF               	bsf	indf2,7,c
 16846  0122'                    l1500:
 16847                           
 16848                           ;lorawan_na.c: 564: }
 16849                           ;lorawan_na.c: 566: if (ValidateDataRange (channelIndex, drRange.value) == OK)
 16850                           
 16851                           ; BSR set to: 2
 16852  0122' C057' F002'        	movff	ExecuteNewChannel@drRange,ValidateDataRange@dataRangeNew
 16853  0126' 0100               	movlb	0	; () banked
 16854  0128' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16855  012A' EC00' F000'        	call	_ValidateDataRange
 16856  012E' 0900               	iorlw	0
 16857  0130' A4D8               	btfss	status,2,c
 16858  0132' D018               	goto	l1503
 16859                           
 16860                           ;lorawan_na.c: 567: {
 16861                           ;lorawan_na.c: 568: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 16862  0134' 0102               	movlb	2	; () banked
 16863  0136' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16864  0138' 0D02               	mullw	2
 16865  013A' 0E00'              	movlw	low _loRa
 16866  013C' 0100               	movlb	0	; () banked
 16867  013E' 6F00'              	movwf	??_ExecuteNewChannel& (0+255),b
 16868  0140' 0E00'              	movlw	high _loRa
 16869  0142' 6F00'              	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16870  0144' 0E99               	movlw	153
 16871  0146' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16872  0148' 0E00               	movlw	0
 16873  014A' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16874  014C' 50F3               	movf	prodl,w,c
 16875  014E' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16876  0150' 50F4               	movf	prodh,w,c
 16877  0152' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16878  0154' 0E01               	movlw	1
 16879  0156' 2500'              	addwf	??_ExecuteNewChannel& (0+255),w,b
 16880  0158' 6ED9               	movwf	fsr2l,c
 16881  015A' 0E00               	movlw	0
 16882  015C' 2100'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16883  015E' 6EDA               	movwf	fsr2h,c
 16884  0160' 0102               	movlb	2	; () banked
 16885  0162' 8CDF               	bsf	indf2,6,c
 16886  0164'                    l1503:
 16887                           
 16888                           ;lorawan_na.c: 569: }
 16889                           ;lorawan_na.c: 570: }
 16890                           ;lorawan_na.c: 572: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 16891                           
 16892                           ; BSR set to: 2
 16893  0164' 0102               	movlb	2	; () banked
 16894  0166' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16895  0168' 0D02               	mullw	2
 16896  016A' 0E00'              	movlw	low _loRa
 16897  016C' 0100               	movlb	0	; () banked
 16898  016E' 6F00'              	movwf	??_ExecuteNewChannel& (0+255),b
 16899  0170' 0E00'              	movlw	high _loRa
 16900  0172' 6F00'              	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16901  0174' 0E99               	movlw	153
 16902  0176' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16903  0178' 0E00               	movlw	0
 16904  017A' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16905  017C' 50F3               	movf	prodl,w,c
 16906  017E' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16907  0180' 50F4               	movf	prodh,w,c
 16908  0182' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16909  0184' 0E01               	movlw	1
 16910  0186' 2500'              	addwf	??_ExecuteNewChannel& (0+255),w,b
 16911  0188' 6ED9               	movwf	fsr2l,c
 16912  018A' 0E00               	movlw	0
 16913  018C' 2100'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16914  018E' 6EDA               	movwf	fsr2h,c
 16915  0190' 0102               	movlb	2	; () banked
 16916  0192' AEDF               	btfss	indf2,7,c
 16917  0194' D02B               	goto	l1506
 16918                           
 16919                           ; BSR set to: 2
 16920  0196' 5100'              	movf	(_loRa+152)& (0+255),w,b
 16921  0198' 0D02               	mullw	2
 16922  019A' 0E00'              	movlw	low _loRa
 16923  019C' 0100               	movlb	0	; () banked
 16924  019E' 6F00'              	movwf	??_ExecuteNewChannel& (0+255),b
 16925  01A0' 0E00'              	movlw	high _loRa
 16926  01A2' 6F00'              	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16927  01A4' 0E99               	movlw	153
 16928  01A6' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16929  01A8' 0E00               	movlw	0
 16930  01AA' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16931  01AC' 50F3               	movf	prodl,w,c
 16932  01AE' 2700'              	addwf	??_ExecuteNewChannel& (0+255),f,b
 16933  01B0' 50F4               	movf	prodh,w,c
 16934  01B2' 2300'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16935  01B4' 0E01               	movlw	1
 16936  01B6' 2500'              	addwf	??_ExecuteNewChannel& (0+255),w,b
 16937  01B8' 6ED9               	movwf	fsr2l,c
 16938  01BA' 0E00               	movlw	0
 16939  01BC' 2100'              	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16940  01BE' 6EDA               	movwf	fsr2h,c
 16941  01C0' 0102               	movlb	2	; () banked
 16942  01C2' ACDF               	btfss	indf2,6,c
 16943  01C4' D013               	goto	l1506
 16944                           
 16945                           ; BSR set to: 2
 16946                           ;lorawan_na.c: 573: {
 16947                           ;lorawan_na.c: 575: if (frequency == 0)
 16948  01C6' 0100               	movlb	0	; () banked
 16949  01C8' 5100'              	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16950  01CA' 1100'              	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16951  01CC' 1100'              	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16952  01CE' 1100'              	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16953  01D0' A4D8               	btfss	status,2,c
 16954  01D2' D006               	goto	l1505
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;lorawan_na.c: 576: {
 16958                           ;lorawan_na.c: 577: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 16959  01D4' 0E00               	movlw	0
 16960  01D6' 6F00'              	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 16961  01D8' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16962  01DA' EC00' F000'        	call	_LORAWAN_SetChannelIdStatus
 16963                           
 16964                           ;lorawan_na.c: 578: }
 16965  01DE' D006               	goto	l1506
 16966  01E0'                    l1505:
 16967                           
 16968                           ;lorawan_na.c: 579: else
 16969                           ;lorawan_na.c: 580: {
 16970                           ;lorawan_na.c: 581: LORAWAN_SetDataRange (channelIndex, drRange.value);
 16971  01E0' C057' F007'        	movff	ExecuteNewChannel@drRange,LORAWAN_SetDataRange@dataRangeNew
 16972  01E4' 0100               	movlb	0	; () banked
 16973  01E6' 5100'              	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16974  01E8' EC00' F000'        	call	_LORAWAN_SetDataRange
 16975  01EC'                    l1506:
 16976                           
 16977                           ;lorawan_na.c: 582: }
 16978                           ;lorawan_na.c: 583: }
 16979                           ;lorawan_na.c: 584: return ptr;
 16980  01EC' C053' F053'        	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 16981  01F0' C054' F054'        	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 16982  01F4' 0012               	return	
 16983  01F6'                    __end_of_ExecuteNewChannel:
 16984                           	opt stack 0
 16985                           tosu	equ	0xFFF
 16986                           tosh	equ	0xFFE
 16987                           tosl	equ	0xFFD
 16988                           pclath	equ	0xFFA
 16989                           tblptru	equ	0xFF8
 16990                           tblptrh	equ	0xFF7
 16991                           tblptrl	equ	0xFF6
 16992                           tablat	equ	0xFF5
 16993                           prodh	equ	0xFF4
 16994                           prodl	equ	0xFF3
 16995                           intcon	equ	0xFF2
 16996                           intcon2	equ	0xFF1
 16997                           intcon3	equ	0xFF0
 16998                           indf0	equ	0xFEF
 16999                           postinc0	equ	0xFEE
 17000                           fsr0h	equ	0xFEA
 17001                           fsr0l	equ	0xFE9
 17002                           wreg	equ	0xFE8
 17003                           postinc1	equ	0xFE6
 17004                           postdec1	equ	0xFE5
 17005                           plusw1	equ	0xFE3
 17006                           fsr1h	equ	0xFE2
 17007                           fsr1l	equ	0xFE1
 17008                           indf2	equ	0xFDF
 17009                           postinc2	equ	0xFDE
 17010                           postdec2	equ	0xFDD
 17011                           fsr2h	equ	0xFDA
 17012                           fsr2l	equ	0xFD9
 17013                           status	equ	0xFD8
 17014                           
 17015 ;; *************** function _LORAWAN_SetDataRange *****************
 17016 ;; Defined at:
 17017 ;;		line 243 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 17018 ;; Parameters:    Size  Location     Type
 17019 ;;  channelId       1    wreg     unsigned char 
 17020 ;;  dataRangeNew    1    7[BANK0 ] unsigned char 
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;  channelId       1    9[BANK0 ] unsigned char 
 17023 ;;  result          1    8[BANK0 ] enum E7249
 17024 ;; Return value:  Size  Location     Type
 17025 ;;                  1    wreg      enum E7249
 17026 ;; Registers used:
 17027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17028 ;; Tracked objects:
 17029 ;;		On entry : 0/0
 17030 ;;		On exit  : 0/0
 17031 ;;		Unchanged: 0/0
 17032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17033 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17037 ;;Total ram usage:        3 bytes
 17038 ;; Hardware stack levels used:    1
 17039 ;; Hardware stack levels required when called:    9
 17040 ;; This function calls:
 17041 ;;		_UpdateDataRange
 17042 ;;		_ValidateDataRange
 17043 ;; This function is called by:
 17044 ;;		_ExecuteNewChannel
 17045 ;; This function uses a non-reentrant model
 17046 ;;
 17047                           
 17048                           	psect	text85
 17049  0000'                    __ptext85:
 17050                           	opt stack 0
 17051  0000'                    _LORAWAN_SetDataRange:
 17052                           	opt stack 15
 17053                           
 17054                           ;incstack = 0
 17055                           ;LORAWAN_SetDataRange@channelId stored from wreg
 17056  0000' 0100               	movlb	0	; () banked
 17057  0002' 6F00'              	movwf	LORAWAN_SetDataRange@channelId& (0+255),b
 17058                           
 17059                           ;lorawan_na.c: 245: LorawanError_t result = OK;
 17060  0004' 0E00               	movlw	0
 17061  0006' 0100               	movlb	0	; () banked
 17062  0008' 6F00'              	movwf	LORAWAN_SetDataRange@result& (0+255),b
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;lorawan_na.c: 247: if (ValidateDataRange (channelId, dataRangeNew) != OK)
 17066  000A' C007' F002'        	movff	LORAWAN_SetDataRange@dataRangeNew,ValidateDataRange@dataRangeNew
 17067  000E' 5100'              	movf	LORAWAN_SetDataRange@channelId& (0+255),w,b
 17068  0010' EC00' F000'        	call	_ValidateDataRange
 17069  0014' 0900               	iorlw	0
 17070  0016' B4D8               	btfsc	status,2,c
 17071  0018' D004               	goto	l1407
 17072                           
 17073                           ;lorawan_na.c: 248: {
 17074                           ;lorawan_na.c: 249: result = INVALID_PARAMETER;
 17075  001A' 0E03               	movlw	3
 17076  001C' 0100               	movlb	0	; () banked
 17077  001E' 6F00'              	movwf	LORAWAN_SetDataRange@result& (0+255),b
 17078                           
 17079                           ;lorawan_na.c: 250: }
 17080  0020' 0012               	return	
 17081  0022'                    l1407:
 17082                           
 17083                           ;lorawan_na.c: 251: else
 17084                           ;lorawan_na.c: 252: {
 17085                           ;lorawan_na.c: 253: UpdateDataRange (channelId, dataRangeNew);
 17086                           
 17087                           ; BSR set to: 0
 17088  0022' C007' F000'        	movff	LORAWAN_SetDataRange@dataRangeNew,UpdateDataRange@dataRangeNew
 17089  0026' 0100               	movlb	0	; () banked
 17090  0028' 5100'              	movf	LORAWAN_SetDataRange@channelId& (0+255),w,b
 17091  002A' EC00' F000'        	call	_UpdateDataRange
 17092  002E' 0012               	return	
 17093  0030'                    __end_of_LORAWAN_SetDataRange:
 17094                           	opt stack 0
 17095                           tosu	equ	0xFFF
 17096                           tosh	equ	0xFFE
 17097                           tosl	equ	0xFFD
 17098                           pclath	equ	0xFFA
 17099                           tblptru	equ	0xFF8
 17100                           tblptrh	equ	0xFF7
 17101                           tblptrl	equ	0xFF6
 17102                           tablat	equ	0xFF5
 17103                           prodh	equ	0xFF4
 17104                           prodl	equ	0xFF3
 17105                           intcon	equ	0xFF2
 17106                           intcon2	equ	0xFF1
 17107                           intcon3	equ	0xFF0
 17108                           indf0	equ	0xFEF
 17109                           postinc0	equ	0xFEE
 17110                           fsr0h	equ	0xFEA
 17111                           fsr0l	equ	0xFE9
 17112                           wreg	equ	0xFE8
 17113                           postinc1	equ	0xFE6
 17114                           postdec1	equ	0xFE5
 17115                           plusw1	equ	0xFE3
 17116                           fsr1h	equ	0xFE2
 17117                           fsr1l	equ	0xFE1
 17118                           indf2	equ	0xFDF
 17119                           postinc2	equ	0xFDE
 17120                           postdec2	equ	0xFDD
 17121                           fsr2h	equ	0xFDA
 17122                           fsr2l	equ	0xFD9
 17123                           status	equ	0xFD8
 17124                           
 17125 ;; *************** function _ValidateDataRange *****************
 17126 ;; Defined at:
 17127 ;;		line 880 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;  channelId       1    wreg     unsigned char 
 17130 ;;  dataRangeNew    1    2[BANK0 ] unsigned char 
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  channelId       1    6[BANK0 ] unsigned char 
 17133 ;;  dataRateMin     1    5[BANK0 ] unsigned char 
 17134 ;;  dataRateMax     1    4[BANK0 ] unsigned char 
 17135 ;;  result          1    3[BANK0 ] enum E7249
 17136 ;; Return value:  Size  Location     Type
 17137 ;;                  1    wreg      enum E7249
 17138 ;; Registers used:
 17139 ;;		wreg, status,2, status,0, cstack
 17140 ;; Tracked objects:
 17141 ;;		On entry : 0/0
 17142 ;;		On exit  : 0/0
 17143 ;;		Unchanged: 0/0
 17144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17145 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17146 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17149 ;;Total ram usage:        5 bytes
 17150 ;; Hardware stack levels used:    1
 17151 ;; Hardware stack levels required when called:    8
 17152 ;; This function calls:
 17153 ;;		_ValidateDataRate
 17154 ;; This function is called by:
 17155 ;;		_LORAWAN_SetDataRange
 17156 ;;		_ExecuteNewChannel
 17157 ;; This function uses a non-reentrant model
 17158 ;;
 17159                           
 17160                           	psect	text86
 17161  0000'                    __ptext86:
 17162                           	opt stack 0
 17163  0000'                    _ValidateDataRange:
 17164                           	opt stack 16
 17165                           
 17166                           ;incstack = 0
 17167                           ;ValidateDataRange@channelId stored from wreg
 17168  0000' 0100               	movlb	0	; () banked
 17169  0002' 6F00'              	movwf	ValidateDataRange@channelId& (0+255),b
 17170                           
 17171                           ;lorawan_na.c: 882: LorawanError_t result = OK;
 17172  0004' 0E00               	movlw	0
 17173  0006' 0100               	movlb	0	; () banked
 17174  0008' 6F00'              	movwf	ValidateDataRange@result& (0+255),b
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;lorawan_na.c: 883: uint8_t dataRateMax, dataRateMin;
 17178                           ;lorawan_na.c: 885: dataRateMin = dataRangeNew & 0x0F;
 17179  000A' 5100'              	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17180  000C' 0B0F               	andlw	15
 17181  000E' 6F00'              	movwf	ValidateDataRange@dataRateMin& (0+255),b
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;lorawan_na.c: 886: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 17185  0010' 3900'              	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17186  0012' 0B0F               	andlw	15
 17187  0014' 0B0F               	andlw	15
 17188  0016' 6F00'              	movwf	ValidateDataRange@dataRateMax& (0+255),b
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;lorawan_na.c: 888: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (da
      +                          taRateMin) != OK ) || (dataRateMax < dataRateMin) ||
 17192                           ;lorawan_na.c: 889: ((channelId < 64) && ((dataRateMin == 4) || (dataRateMax == 4))) ||
 17193                           ;lorawan_na.c: 890: ((channelId >= 64) && (channelId < 72) && (dataRateMin != 4)) ||
 17194                           ;lorawan_na.c: 891: ((channelId >= 64) && (channelId < 72) && (dataRateMax != 4)))
 17195  0018' 5100'              	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 17196  001A' EC00' F000'        	call	_ValidateDataRate
 17197  001E' 0900               	iorlw	0
 17198  0020' A4D8               	btfss	status,2,c
 17199  0022' D02B               	goto	u7880
 17200  0024' 0100               	movlb	0	; () banked
 17201  0026' 5100'              	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17202  0028' EC00' F000'        	call	_ValidateDataRate
 17203  002C' 0900               	iorlw	0
 17204  002E' A4D8               	btfss	status,2,c
 17205  0030' D024               	goto	u7880
 17206  0032' 0100               	movlb	0	; () banked
 17207  0034' 5100'              	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17208  0036' 5D00'              	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 17209  0038' A0D8               	btfss	status,0,c
 17210  003A' D01F               	goto	u7880
 17211                           
 17212                           ; BSR set to: 0
 17213  003C' 0E40               	movlw	64
 17214  003E' 6100'              	cpfslt	ValidateDataRange@channelId& (0+255),b
 17215  0040' D008               	goto	u7820
 17216                           
 17217                           ; BSR set to: 0
 17218  0042' 0E04               	movlw	4
 17219  0044' 1900'              	xorwf	ValidateDataRange@dataRateMin& (0+255),w,b
 17220  0046' B4D8               	btfsc	status,2,c
 17221  0048' D018               	goto	u7880
 17222                           
 17223                           ; BSR set to: 0
 17224  004A' 0E04               	movlw	4
 17225  004C' 1900'              	xorwf	ValidateDataRange@dataRateMax& (0+255),w,b
 17226  004E' B4D8               	btfsc	status,2,c
 17227  0050' D014               	goto	u7880
 17228  0052'                    u7820:
 17229                           
 17230                           ; BSR set to: 0
 17231                           
 17232                           ; BSR set to: 0
 17233  0052' 0E3F               	movlw	63
 17234  0054' 6500'              	cpfsgt	ValidateDataRange@channelId& (0+255),b
 17235  0056' D007               	goto	u7850
 17236                           
 17237                           ; BSR set to: 0
 17238  0058' 0E48               	movlw	72
 17239  005A' 6100'              	cpfslt	ValidateDataRange@channelId& (0+255),b
 17240  005C' D004               	goto	u7850
 17241                           
 17242                           ; BSR set to: 0
 17243  005E' 0E04               	movlw	4
 17244  0060' 1900'              	xorwf	ValidateDataRange@dataRateMin& (0+255),w,b
 17245  0062' A4D8               	btfss	status,2,c
 17246  0064' D00A               	goto	u7880
 17247  0066'                    u7850:
 17248                           
 17249                           ; BSR set to: 0
 17250                           
 17251                           ; BSR set to: 0
 17252  0066' 0E3F               	movlw	63
 17253  0068' 6500'              	cpfsgt	ValidateDataRange@channelId& (0+255),b
 17254  006A' D00A               	goto	l1592
 17255                           
 17256                           ; BSR set to: 0
 17257  006C' 0E48               	movlw	72
 17258  006E' 6100'              	cpfslt	ValidateDataRange@channelId& (0+255),b
 17259  0070' D007               	goto	l1592
 17260                           
 17261                           ; BSR set to: 0
 17262  0072' 0E04               	movlw	4
 17263  0074' 1900'              	xorwf	ValidateDataRange@dataRateMax& (0+255),w,b
 17264  0076' B4D8               	btfsc	status,2,c
 17265  0078' D003               	goto	l1592
 17266  007A'                    u7880:
 17267                           
 17268                           ;lorawan_na.c: 892: {
 17269                           ;lorawan_na.c: 893: result = INVALID_PARAMETER;
 17270                           
 17271                           ; BSR set to: 0
 17272  007A' 0E03               	movlw	3
 17273  007C' 0100               	movlb	0	; () banked
 17274  007E' 6F00'              	movwf	ValidateDataRange@result& (0+255),b
 17275  0080'                    l1592:
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;lorawan_na.c: 894: }
 17279                           ;lorawan_na.c: 895: return result;
 17280  0080' 5100'              	movf	ValidateDataRange@result& (0+255),w,b
 17281  0082' 0012               	return	
 17282  0084'                    __end_of_ValidateDataRange:
 17283                           	opt stack 0
 17284                           tosu	equ	0xFFF
 17285                           tosh	equ	0xFFE
 17286                           tosl	equ	0xFFD
 17287                           pclath	equ	0xFFA
 17288                           tblptru	equ	0xFF8
 17289                           tblptrh	equ	0xFF7
 17290                           tblptrl	equ	0xFF6
 17291                           tablat	equ	0xFF5
 17292                           prodh	equ	0xFF4
 17293                           prodl	equ	0xFF3
 17294                           intcon	equ	0xFF2
 17295                           intcon2	equ	0xFF1
 17296                           intcon3	equ	0xFF0
 17297                           indf0	equ	0xFEF
 17298                           postinc0	equ	0xFEE
 17299                           fsr0h	equ	0xFEA
 17300                           fsr0l	equ	0xFE9
 17301                           wreg	equ	0xFE8
 17302                           postinc1	equ	0xFE6
 17303                           postdec1	equ	0xFE5
 17304                           plusw1	equ	0xFE3
 17305                           fsr1h	equ	0xFE2
 17306                           fsr1l	equ	0xFE1
 17307                           indf2	equ	0xFDF
 17308                           postinc2	equ	0xFDE
 17309                           postdec2	equ	0xFDD
 17310                           fsr2h	equ	0xFDA
 17311                           fsr2l	equ	0xFD9
 17312                           status	equ	0xFD8
 17313                           
 17314 ;; *************** function _UpdateDataRange *****************
 17315 ;; Defined at:
 17316 ;;		line 838 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  channelId       1    wreg     unsigned char 
 17319 ;;  dataRangeNew    1    0[BANK0 ] unsigned char 
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;  channelId       1    1[BANK0 ] unsigned char 
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1    wreg      void 
 17324 ;; Registers used:
 17325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17326 ;; Tracked objects:
 17327 ;;		On entry : 0/0
 17328 ;;		On exit  : 0/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17331 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;Total ram usage:        2 bytes
 17336 ;; Hardware stack levels used:    1
 17337 ;; Hardware stack levels required when called:    7
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_LORAWAN_SetDataRange
 17342 ;; This function uses a non-reentrant model
 17343 ;;
 17344                           
 17345                           	psect	text87
 17346  0000'                    __ptext87:
 17347                           	opt stack 0
 17348  0000'                    _UpdateDataRange:
 17349                           	opt stack 16
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;incstack = 0
 17353                           ;UpdateDataRange@channelId stored from wreg
 17354  0000' 0100               	movlb	0	; () banked
 17355  0002' 6F00'              	movwf	UpdateDataRange@channelId& (0+255),b
 17356                           
 17357                           ;lorawan_na.c: 840: Channels[channelId].dataRange.value = dataRangeNew;
 17358  0004' 0100               	movlb	0	; () banked
 17359  0006' 5100'              	movf	UpdateDataRange@channelId& (0+255),w,b
 17360  0008' 0D02               	mullw	2
 17361  000A' 0E01               	movlw	1
 17362  000C' 26F3               	addwf	prodl,f,c
 17363  000E' 0E00               	movlw	0
 17364  0010' 22F4               	addwfc	prodh,f,c
 17365  0012' 0E00'              	movlw	low _Channels
 17366  0014' 24F3               	addwf	prodl,w,c
 17367  0016' 6ED9               	movwf	fsr2l,c
 17368  0018' 0E00'              	movlw	high _Channels
 17369  001A' 20F4               	addwfc	prodh,w,c
 17370  001C' 6EDA               	movwf	fsr2h,c
 17371  001E' C000' FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 17372                           
 17373                           ; BSR set to: 0
 17374  0022' 0012               	return		;funcret
 17375  0024'                    __end_of_UpdateDataRange:
 17376                           	opt stack 0
 17377                           tosu	equ	0xFFF
 17378                           tosh	equ	0xFFE
 17379                           tosl	equ	0xFFD
 17380                           pclath	equ	0xFFA
 17381                           tblptru	equ	0xFF8
 17382                           tblptrh	equ	0xFF7
 17383                           tblptrl	equ	0xFF6
 17384                           tablat	equ	0xFF5
 17385                           prodh	equ	0xFF4
 17386                           prodl	equ	0xFF3
 17387                           intcon	equ	0xFF2
 17388                           intcon2	equ	0xFF1
 17389                           intcon3	equ	0xFF0
 17390                           indf0	equ	0xFEF
 17391                           postinc0	equ	0xFEE
 17392                           fsr0h	equ	0xFEA
 17393                           fsr0l	equ	0xFE9
 17394                           wreg	equ	0xFE8
 17395                           postinc1	equ	0xFE6
 17396                           postdec1	equ	0xFE5
 17397                           plusw1	equ	0xFE3
 17398                           fsr1h	equ	0xFE2
 17399                           fsr1l	equ	0xFE1
 17400                           indf2	equ	0xFDF
 17401                           postinc2	equ	0xFDE
 17402                           postdec2	equ	0xFDD
 17403                           fsr2h	equ	0xFDA
 17404                           fsr2l	equ	0xFD9
 17405                           status	equ	0xFD8
 17406                           
 17407 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 17408 ;; Defined at:
 17409 ;;		line 270 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 17410 ;; Parameters:    Size  Location     Type
 17411 ;;  channelId       1    wreg     unsigned char 
 17412 ;;  statusNew       1    4[BANK0 ] unsigned char 
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;  channelId       1    6[BANK0 ] unsigned char 
 17415 ;;  result          1    5[BANK0 ] enum E7249
 17416 ;; Return value:  Size  Location     Type
 17417 ;;                  1    wreg      enum E7249
 17418 ;; Registers used:
 17419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17420 ;; Tracked objects:
 17421 ;;		On entry : 0/0
 17422 ;;		On exit  : 0/0
 17423 ;;		Unchanged: 0/0
 17424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17425 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17429 ;;Total ram usage:        3 bytes
 17430 ;; Hardware stack levels used:    1
 17431 ;; Hardware stack levels required when called:    9
 17432 ;; This function calls:
 17433 ;;		_UpdateChannelIdStatus
 17434 ;;		_ValidateChannelId
 17435 ;; This function is called by:
 17436 ;;		_ExecuteNewChannel
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text88
 17441  0000'                    __ptext88:
 17442                           	opt stack 0
 17443  0000'                    _LORAWAN_SetChannelIdStatus:
 17444                           	opt stack 15
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;incstack = 0
 17448                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 17449  0000' 0100               	movlb	0	; () banked
 17450  0002' 6F00'              	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 17451                           
 17452                           ;lorawan_na.c: 272: LorawanError_t result = OK;
 17453  0004' 0E00               	movlw	0
 17454  0006' 0100               	movlb	0	; () banked
 17455  0008' 6F00'              	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;lorawan_na.c: 274: if (ValidateChannelId (channelId) == OK)
 17459  000A' 5100'              	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17460  000C' EC00' F000'        	call	_ValidateChannelId
 17461  0010' 0900               	iorlw	0
 17462  0012' A4D8               	btfss	status,2,c
 17463  0014' D007               	goto	l1416
 17464                           
 17465                           ;lorawan_na.c: 275: {
 17466                           ;lorawan_na.c: 276: UpdateChannelIdStatus (channelId, statusNew);
 17467  0016' C004' F002'        	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 17468  001A' 0100               	movlb	0	; () banked
 17469  001C' 5100'              	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17470  001E' EC00' F000'        	call	_UpdateChannelIdStatus
 17471                           
 17472                           ;lorawan_na.c: 277: }
 17473  0022' 0012               	return	
 17474  0024'                    l1416:
 17475                           
 17476                           ;lorawan_na.c: 278: else
 17477                           ;lorawan_na.c: 279: {
 17478                           ;lorawan_na.c: 280: result = INVALID_PARAMETER;
 17479  0024' 0E03               	movlw	3
 17480  0026' 0100               	movlb	0	; () banked
 17481  0028' 6F00'              	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17482                           
 17483                           ; BSR set to: 0
 17484  002A' 0012               	return	
 17485  002C'                    __end_of_LORAWAN_SetChannelIdStatus:
 17486                           	opt stack 0
 17487                           tosu	equ	0xFFF
 17488                           tosh	equ	0xFFE
 17489                           tosl	equ	0xFFD
 17490                           pclath	equ	0xFFA
 17491                           tblptru	equ	0xFF8
 17492                           tblptrh	equ	0xFF7
 17493                           tblptrl	equ	0xFF6
 17494                           tablat	equ	0xFF5
 17495                           prodh	equ	0xFF4
 17496                           prodl	equ	0xFF3
 17497                           intcon	equ	0xFF2
 17498                           intcon2	equ	0xFF1
 17499                           intcon3	equ	0xFF0
 17500                           indf0	equ	0xFEF
 17501                           postinc0	equ	0xFEE
 17502                           fsr0h	equ	0xFEA
 17503                           fsr0l	equ	0xFE9
 17504                           wreg	equ	0xFE8
 17505                           postinc1	equ	0xFE6
 17506                           postdec1	equ	0xFE5
 17507                           plusw1	equ	0xFE3
 17508                           fsr1h	equ	0xFE2
 17509                           fsr1l	equ	0xFE1
 17510                           indf2	equ	0xFDF
 17511                           postinc2	equ	0xFDE
 17512                           postdec2	equ	0xFDD
 17513                           fsr2h	equ	0xFDA
 17514                           fsr2l	equ	0xFD9
 17515                           status	equ	0xFD8
 17516                           
 17517 ;; *************** function _ExecuteLinkCheck *****************
 17518 ;; Defined at:
 17519 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17520 ;; Parameters:    Size  Location     Type
 17521 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17522 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17523 ;; Auto vars:     Size  Location     Type
 17524 ;;		None
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  2    0[BANK0 ] PTR unsigned char 
 17527 ;; Registers used:
 17528 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17534 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;Total ram usage:        2 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    7
 17541 ;; This function calls:
 17542 ;;		Nothing
 17543 ;; This function is called by:
 17544 ;;		_MacExecuteCommands
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           	psect	text89
 17549  0000'                    __ptext89:
 17550                           	opt stack 0
 17551  0000'                    _ExecuteLinkCheck:
 17552                           	opt stack 18
 17553                           
 17554                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 17555                           
 17556                           ;incstack = 0
 17557  0000' C000' FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 17558  0004' C001' FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 17559  0008' 50DF               	movf	indf2,w,c
 17560  000A' 0102               	movlb	2	; () banked
 17561  000C' 6F00'              	movwf	(_loRa+206)& (0+255),b
 17562                           
 17563                           ; BSR set to: 2
 17564  000E' 0100               	movlb	0	; () banked
 17565  0010' 4B00'              	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 17566  0012' 2B00'              	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 17567                           
 17568                           ; BSR set to: 0
 17569                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 17570  0014' C000' FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 17571  0018' C001' FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 17572  001C' 50DF               	movf	indf2,w,c
 17573  001E' 0102               	movlb	2	; () banked
 17574  0020' 6F00'              	movwf	(_loRa+207)& (0+255),b
 17575  0022' 0100               	movlb	0	; () banked
 17576  0024' 4B00'              	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 17577  0026' 2B00'              	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 17578                           
 17579                           ; BSR set to: 0
 17580                           ;lorawan.c: 1656: return ptr;
 17581  0028' C000' F000'        	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 17582  002C' C001' F001'        	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 17583  0030' 0012               	return	
 17584  0032'                    __end_of_ExecuteLinkCheck:
 17585                           	opt stack 0
 17586                           tosu	equ	0xFFF
 17587                           tosh	equ	0xFFE
 17588                           tosl	equ	0xFFD
 17589                           pclath	equ	0xFFA
 17590                           tblptru	equ	0xFF8
 17591                           tblptrh	equ	0xFF7
 17592                           tblptrl	equ	0xFF6
 17593                           tablat	equ	0xFF5
 17594                           prodh	equ	0xFF4
 17595                           prodl	equ	0xFF3
 17596                           intcon	equ	0xFF2
 17597                           intcon2	equ	0xFF1
 17598                           intcon3	equ	0xFF0
 17599                           indf0	equ	0xFEF
 17600                           postinc0	equ	0xFEE
 17601                           fsr0h	equ	0xFEA
 17602                           fsr0l	equ	0xFE9
 17603                           wreg	equ	0xFE8
 17604                           postinc1	equ	0xFE6
 17605                           postdec1	equ	0xFE5
 17606                           plusw1	equ	0xFE3
 17607                           fsr1h	equ	0xFE2
 17608                           fsr1l	equ	0xFE1
 17609                           indf2	equ	0xFDF
 17610                           postinc2	equ	0xFDE
 17611                           postdec2	equ	0xFDD
 17612                           fsr2h	equ	0xFDA
 17613                           fsr2l	equ	0xFD9
 17614                           status	equ	0xFD8
 17615                           
 17616 ;; *************** function _ExecuteLinkAdr *****************
 17617 ;; Defined at:
 17618 ;;		line 418 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 17619 ;; Parameters:    Size  Location     Type
 17620 ;;  ptr             2   16[BANK0 ] PTR unsigned char 
 17621 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17622 ;; Auto vars:     Size  Location     Type
 17623 ;;  redundancy      2   31[BANK0 ] PTR struct .
 17624 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 17625 ;;  auxChannelMa    2   29[BANK0 ] unsigned int 
 17626 ;;  channelMask     2   23[BANK0 ] unsigned int 
 17627 ;;  i               1   33[BANK0 ] unsigned char 
 17628 ;;  auxMaxDataRa    1   28[BANK0 ] unsigned char 
 17629 ;;  dataRate        1   27[BANK0 ] unsigned char 
 17630 ;;  txPower         1   26[BANK0 ] unsigned char 
 17631 ;;  auxMinDataRa    1   25[BANK0 ] unsigned char 
 17632 ;;  startingInde    1   22[BANK0 ] unsigned char 
 17633 ;;  txPowerNew      1   21[BANK0 ] unsigned char 
 17634 ;;  endingIndex     1   20[BANK0 ] unsigned char 
 17635 ;; Return value:  Size  Location     Type
 17636 ;;                  2   16[BANK0 ] PTR unsigned char 
 17637 ;; Registers used:
 17638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17639 ;; Tracked objects:
 17640 ;;		On entry : 0/0
 17641 ;;		On exit  : 0/0
 17642 ;;		Unchanged: 0/0
 17643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17647 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17648 ;;Total ram usage:       18 bytes
 17649 ;; Hardware stack levels used:    1
 17650 ;; Hardware stack levels required when called:   11
 17651 ;; This function calls:
 17652 ;;		_EnableChannels
 17653 ;;		_UpdateCurrentDataRate
 17654 ;;		_UpdateTxPower
 17655 ;;		_ValidateChannelMaskCntl
 17656 ;;		_ValidateDataRate
 17657 ;; This function is called by:
 17658 ;;		_MacExecuteCommands
 17659 ;; This function uses a non-reentrant model
 17660 ;;
 17661                           
 17662                           	psect	text90
 17663  0000'                    __ptext90:
 17664                           	opt stack 0
 17665  0000'                    _ExecuteLinkAdr:
 17666                           	opt stack 14
 17667                           
 17668                           ;lorawan_na.c: 420: uint8_t txPower, dataRate;
 17669                           ;lorawan_na.c: 421: uint16_t channelMask, auxChannelMask;
 17670                           ;lorawan_na.c: 422: uint8_t auxMinDataRate = 7, auxMaxDataRate = 0, i;
 17671                           
 17672                           ; BSR set to: 0
 17673                           ;incstack = 0
 17674  0000' 0E07               	movlw	7
 17675  0002' 0100               	movlb	0	; () banked
 17676  0004' 6F00'              	movwf	ExecuteLinkAdr@auxMinDataRate& (0+255),b
 17677  0006' 0E00               	movlw	0
 17678  0008' 6F00'              	movwf	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;lorawan_na.c: 423: uint8_t startingIndex, endingIndex;
 17682                           ;lorawan_na.c: 424: uint8_t txPowerNew;
 17683                           ;lorawan_na.c: 426: txPower = *(ptr) & 0x0F;
 17684  000A' C010' FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 17685  000E' C011' FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 17686  0012' 50DF               	movf	indf2,w,c
 17687  0014' 0B0F               	andlw	15
 17688  0016' 6F00'              	movwf	ExecuteLinkAdr@txPower& (0+255),b
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;lorawan_na.c: 427: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 17692  0018' C010' FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 17693  001C' C011' FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 17694  0020' 50DF               	movf	indf2,w,c
 17695  0022' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 17696  0024' 3900'              	swapf	??_ExecuteLinkAdr& (0+255),w,b
 17697  0026' 0B0F               	andlw	15
 17698  0028' 0B0F               	andlw	15
 17699  002A' 6F00'              	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;lorawan_na.c: 428: ptr++;
 17703  002C' 4B00'              	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 17704  002E' 2B00'              	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;lorawan_na.c: 429: channelMask = (*((uint16_t*)ptr));
 17708  0030' C010' FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 17709  0034' C011' FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 17710  0038' CFDE F017'         	movff	postinc2,ExecuteLinkAdr@channelMask
 17711  003C' CFDD F018'         	movff	postdec2,ExecuteLinkAdr@channelMask+1
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;lorawan_na.c: 430: auxChannelMask = channelMask;
 17715  0040' C017' F01D'        	movff	ExecuteLinkAdr@channelMask,ExecuteLinkAdr@auxChannelMask
 17716  0044' C018' F01E'        	movff	ExecuteLinkAdr@channelMask+1,ExecuteLinkAdr@auxChannelMask+1
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;lorawan_na.c: 431: ptr = ptr + sizeof (channelMask);
 17720  0048' 0E02               	movlw	2
 17721  004A' 2500'              	addwf	ExecuteLinkAdr@ptr& (0+255),w,b
 17722  004C' 6F00'              	movwf	ExecuteLinkAdr@ptr& (0+255),b
 17723  004E' 0E00               	movlw	0
 17724  0050' 2100'              	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),w,b
 17725  0052' 6F00'              	movwf	(ExecuteLinkAdr@ptr+1)& (0+255),b
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;lorawan_na.c: 432: Redundancy_t *redundancy;
 17729                           ;lorawan_na.c: 433: redundancy = (Redundancy_t*)(ptr++);
 17730  0054' C010' F01F'        	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 17731  0058' C011' F020'        	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 17732                           
 17733                           ; BSR set to: 0
 17734  005C' 4B00'              	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 17735  005E' 2B00'              	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;lorawan_na.c: 435: if (1 == loRa.macStatus.adr)
 17739  0060' 0102               	movlb	2	; () banked
 17740  0062' AD00'              	btfss	(_loRa+2)& (0+255),6,b
 17741  0064' D1DD               	goto	l1460
 17742                           
 17743                           ; BSR set to: 2
 17744                           ;lorawan_na.c: 436: {
 17745                           ;lorawan_na.c: 437: if (ValidateChannelMaskCntl(redundancy->chMaskCntl, channelMask) == 
      +                          OK)
 17746  0066' C017' F000'        	movff	ExecuteLinkAdr@channelMask,ValidateChannelMaskCntl@channelMask
 17747  006A' C018' F001'        	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMaskCntl@channelMask+1
 17748  006E' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 17749  0072' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 17750  0076' 0100               	movlb	0	; () banked
 17751  0078' 38DF               	swapf	223,w,c
 17752  007A' 0B07               	andlw	7
 17753  007C' EC00' F000'        	call	_ValidateChannelMaskCntl
 17754  0080' 0900               	iorlw	0
 17755  0082' A4D8               	btfss	status,2,c
 17756  0084' D103               	goto	l1476
 17757                           
 17758                           ;lorawan_na.c: 438: {
 17759                           ;lorawan_na.c: 439: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 17760  0086' 0102               	movlb	2	; () banked
 17761  0088' 5100'              	movf	(_loRa+152)& (0+255),w,b
 17762  008A' 0D02               	mullw	2
 17763  008C' 0E00'              	movlw	low _loRa
 17764  008E' 0100               	movlb	0	; () banked
 17765  0090' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 17766  0092' 0E00'              	movlw	high _loRa
 17767  0094' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 17768  0096' 0E99               	movlw	153
 17769  0098' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 17770  009A' 0E00               	movlw	0
 17771  009C' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 17772  009E' 50F3               	movf	prodl,w,c
 17773  00A0' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 17774  00A2' 50F4               	movf	prodh,w,c
 17775  00A4' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 17776  00A6' 0E01               	movlw	1
 17777  00A8' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 17778  00AA' 6ED9               	movwf	fsr2l,c
 17779  00AC' 0E00               	movlw	0
 17780  00AE' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 17781  00B0' 6EDA               	movwf	fsr2h,c
 17782  00B2' 0102               	movlb	2	; () banked
 17783  00B4' 80DF               	bsf	indf2,0,c
 17784                           
 17785                           ;lorawan_na.c: 440: switch (redundancy->chMaskCntl)
 17786  00B6' D0CE               	goto	l1462
 17787  00B8'                    
 17788                           ;lorawan_na.c: 443: case 1:
 17789                           ;lorawan_na.c: 444: case 2:
 17790                           ;lorawan_na.c: 445: case 3:
 17791                           ;lorawan_na.c: 446: {
 17792                           ;lorawan_na.c: 447: startingIndex = redundancy->chMaskCntl << (4);
 17793                           
 17794                           ; BSR set to: 2
 17795                           
 17796                           ; BSR set to: 2
 17797                           
 17798                           ; BSR set to: 2
 17799                           
 17800                           ; BSR set to: 2
 17801  00B8' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 17802  00BC' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 17803  00C0' 0100               	movlb	0	; () banked
 17804  00C2' 38DF               	swapf	223,w,c
 17805  00C4' 0B07               	andlw	7
 17806  00C6' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 17807  00C8' 3900'              	swapf	??_ExecuteLinkAdr& (0+255),w,b
 17808  00CA' 0BF0               	andlw	240
 17809  00CC' 6F00'              	movwf	ExecuteLinkAdr@startingIndex& (0+255),b
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;lorawan_na.c: 448: endingIndex = startingIndex + 16;
 17813  00CE' 5100'              	movf	ExecuteLinkAdr@startingIndex& (0+255),w,b
 17814  00D0' 0F10               	addlw	16
 17815  00D2' 6F00'              	movwf	ExecuteLinkAdr@endingIndex& (0+255),b
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;lorawan_na.c: 449: for (i = startingIndex; i < endingIndex; i++)
 17819  00D4' C016' F021'        	movff	ExecuteLinkAdr@startingIndex,ExecuteLinkAdr@i
 17820  00D8' D05D               	goto	l1467
 17821  00DA'                    
 17822                           ; BSR set to: 0
 17823                           ;lorawan_na.c: 450: {
 17824                           ;lorawan_na.c: 451: if ((Channels[i].dataRange.min < auxMinDataRate) && (((auxChannelMas
      +                          k & 0x0001) == 0x0001) || (auxChannelMask == 0)))
 17825                           
 17826                           ; BSR set to: 0
 17827  00DA' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 17828  00DC' 0D02               	mullw	2
 17829  00DE' 0E01               	movlw	1
 17830  00E0' 26F3               	addwf	prodl,f,c
 17831  00E2' 0E00               	movlw	0
 17832  00E4' 22F4               	addwfc	prodh,f,c
 17833  00E6' 0E00'              	movlw	low _Channels
 17834  00E8' 24F3               	addwf	prodl,w,c
 17835  00EA' 6ED9               	movwf	fsr2l,c
 17836  00EC' 0E00'              	movlw	high _Channels
 17837  00EE' 20F4               	addwfc	prodh,w,c
 17838  00F0' 6EDA               	movwf	fsr2h,c
 17839  00F2' 0104               	movlb	4	; () banked
 17840  00F4' 50DF               	movf	223,w,c
 17841  00F6' 0B0F               	andlw	15
 17842  00F8' 0100               	movlb	0	; () banked
 17843  00FA' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 17844  00FC' 5100'              	movf	ExecuteLinkAdr@auxMinDataRate& (0+255),w,b
 17845  00FE' 5D00'              	subwf	??_ExecuteLinkAdr& (0+255),w,b
 17846  0100' B0D8               	btfsc	status,0,c
 17847  0102' D017               	goto	l1469
 17848                           
 17849                           ; BSR set to: 0
 17850  0104' B100'              	btfsc	ExecuteLinkAdr@auxChannelMask& (0+255),0,b
 17851  0106' D004               	goto	u9530
 17852                           
 17853                           ; BSR set to: 0
 17854  0108' 5100'              	movf	ExecuteLinkAdr@auxChannelMask& (0+255),w,b
 17855  010A' 1100'              	iorwf	(ExecuteLinkAdr@auxChannelMask+1)& (0+255),w,b
 17856  010C' A4D8               	btfss	status,2,c
 17857  010E' D011               	goto	l1469
 17858  0110'                    u9530:
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;lorawan_na.c: 452: {
 17862                           ;lorawan_na.c: 453: auxMinDataRate = Channels[i].dataRange.min;
 17863                           
 17864                           ; BSR set to: 0
 17865  0110' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 17866  0112' 0D02               	mullw	2
 17867  0114' 0E01               	movlw	1
 17868  0116' 26F3               	addwf	prodl,f,c
 17869  0118' 0E00               	movlw	0
 17870  011A' 22F4               	addwfc	prodh,f,c
 17871  011C' 0E00'              	movlw	low _Channels
 17872  011E' 24F3               	addwf	prodl,w,c
 17873  0120' 6ED9               	movwf	fsr2l,c
 17874  0122' 0E00'              	movlw	high _Channels
 17875  0124' 20F4               	addwfc	prodh,w,c
 17876  0126' 6EDA               	movwf	fsr2h,c
 17877  0128' 0104               	movlb	4	; () banked
 17878  012A' 50DF               	movf	223,w,c
 17879  012C' 0B0F               	andlw	15
 17880  012E' 0100               	movlb	0	; () banked
 17881  0130' 6F00'              	movwf	ExecuteLinkAdr@auxMinDataRate& (0+255),b
 17882  0132'                    l1469:
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;lorawan_na.c: 454: }
 17886                           ;lorawan_na.c: 455: if ((Channels[i].dataRange.max > auxMaxDataRate) && (((auxChannelMas
      +                          k & 0x0001) == 0x0001) || (auxChannelMask == 0)))
 17887  0132' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 17888  0134' 0D02               	mullw	2
 17889  0136' 0E01               	movlw	1
 17890  0138' 26F3               	addwf	prodl,f,c
 17891  013A' 0E00               	movlw	0
 17892  013C' 22F4               	addwfc	prodh,f,c
 17893  013E' 0E00'              	movlw	low _Channels
 17894  0140' 24F3               	addwf	prodl,w,c
 17895  0142' 6ED9               	movwf	fsr2l,c
 17896  0144' 0E00'              	movlw	high _Channels
 17897  0146' 20F4               	addwfc	prodh,w,c
 17898  0148' 6EDA               	movwf	fsr2h,c
 17899  014A' 0104               	movlb	4	; () banked
 17900  014C' 38DF               	swapf	223,w,c
 17901  014E' 0B0F               	andlw	15
 17902  0150' 0100               	movlb	0	; () banked
 17903  0152' 6100'              	cpfslt	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 17904  0154' D017               	goto	l1472
 17905                           
 17906                           ; BSR set to: 0
 17907  0156' B100'              	btfsc	ExecuteLinkAdr@auxChannelMask& (0+255),0,b
 17908  0158' D004               	goto	u9560
 17909                           
 17910                           ; BSR set to: 0
 17911  015A' 5100'              	movf	ExecuteLinkAdr@auxChannelMask& (0+255),w,b
 17912  015C' 1100'              	iorwf	(ExecuteLinkAdr@auxChannelMask+1)& (0+255),w,b
 17913  015E' A4D8               	btfss	status,2,c
 17914  0160' D011               	goto	l1472
 17915  0162'                    u9560:
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;lorawan_na.c: 456: {
 17919                           ;lorawan_na.c: 457: auxMaxDataRate = Channels[i].dataRange.max;
 17920                           
 17921                           ; BSR set to: 0
 17922  0162' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 17923  0164' 0D02               	mullw	2
 17924  0166' 0E01               	movlw	1
 17925  0168' 26F3               	addwf	prodl,f,c
 17926  016A' 0E00               	movlw	0
 17927  016C' 22F4               	addwfc	prodh,f,c
 17928  016E' 0E00'              	movlw	low _Channels
 17929  0170' 24F3               	addwf	prodl,w,c
 17930  0172' 6ED9               	movwf	fsr2l,c
 17931  0174' 0E00'              	movlw	high _Channels
 17932  0176' 20F4               	addwfc	prodh,w,c
 17933  0178' 6EDA               	movwf	fsr2h,c
 17934  017A' 0104               	movlb	4	; () banked
 17935  017C' 38DF               	swapf	223,w,c
 17936  017E' 0B0F               	andlw	15
 17937  0180' 0100               	movlb	0	; () banked
 17938  0182' 6F00'              	movwf	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 17939  0184'                    l1472:
 17940                           
 17941                           ; BSR set to: 0
 17942                           ;lorawan_na.c: 458: }
 17943                           ;lorawan_na.c: 459: auxChannelMask = auxChannelMask >> (1);
 17944                           
 17945                           ; BSR set to: 0
 17946  0184' 90D8               	bcf	status,0,c
 17947  0186' 3100'              	rrcf	(ExecuteLinkAdr@auxChannelMask+1)& (0+255),w,b
 17948  0188' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 17949  018A' 3100'              	rrcf	ExecuteLinkAdr@auxChannelMask& (0+255),w,b
 17950  018C' 6F00'              	movwf	ExecuteLinkAdr@auxChannelMask& (0+255),b
 17951  018E' C012' F01E'        	movff	??_ExecuteLinkAdr,ExecuteLinkAdr@auxChannelMask+1
 17952                           
 17953                           ; BSR set to: 0
 17954  0192' 2B00'              	incf	ExecuteLinkAdr@i& (0+255),f,b
 17955  0194'                    l1467:
 17956                           
 17957                           ; BSR set to: 0
 17958                           
 17959                           ; BSR set to: 0
 17960  0194' 5100'              	movf	ExecuteLinkAdr@endingIndex& (0+255),w,b
 17961  0196' 5D00'              	subwf	ExecuteLinkAdr@i& (0+255),w,b
 17962  0198' B0D8               	btfsc	status,0,c
 17963  019A' D078               	goto	l1476
 17964  019C' D79E               	goto	l1468
 17965  019E'                    
 17966                           ; BSR set to: 0
 17967                           ;lorawan_na.c: 464: case 7:
 17968                           ;lorawan_na.c: 465: {
 17969                           ;lorawan_na.c: 466: auxMinDataRate = 4;
 17970                           
 17971                           ; BSR set to: 0
 17972                           
 17973                           ; BSR set to: 0
 17974  019E' 0E04               	movlw	4
 17975  01A0' 6F00'              	movwf	ExecuteLinkAdr@auxMinDataRate& (0+255),b
 17976  01A2' D055               	goto	u9620
 17977  01A4'                    
 17978                           ; BSR set to: 0
 17979                           ;lorawan_na.c: 471: {
 17980                           ;lorawan_na.c: 473: for (i = 0; i < 64; i++)
 17981                           
 17982                           ; BSR set to: 0
 17983  01A4' 0E00               	movlw	0
 17984  01A6' 6F00'              	movwf	ExecuteLinkAdr@i& (0+255),b
 17985  01A8'                    l9932:
 17986                           
 17987                           ; BSR set to: 0
 17988  01A8' 0E3F               	movlw	63
 17989  01AA' 6500'              	cpfsgt	ExecuteLinkAdr@i& (0+255),b
 17990  01AC' D001               	goto	l1480
 17991  01AE' D04B               	goto	u9610
 17992  01B0'                    l1480:
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;lorawan_na.c: 474: {
 17996                           ;lorawan_na.c: 475: if (Channels[i].dataRange.min < auxMinDataRate)
 17997                           
 17998                           ; BSR set to: 0
 17999  01B0' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 18000  01B2' 0D02               	mullw	2
 18001  01B4' 0E01               	movlw	1
 18002  01B6' 26F3               	addwf	prodl,f,c
 18003  01B8' 0E00               	movlw	0
 18004  01BA' 22F4               	addwfc	prodh,f,c
 18005  01BC' 0E00'              	movlw	low _Channels
 18006  01BE' 24F3               	addwf	prodl,w,c
 18007  01C0' 6ED9               	movwf	fsr2l,c
 18008  01C2' 0E00'              	movlw	high _Channels
 18009  01C4' 20F4               	addwfc	prodh,w,c
 18010  01C6' 6EDA               	movwf	fsr2h,c
 18011  01C8' 0104               	movlb	4	; () banked
 18012  01CA' 50DF               	movf	223,w,c
 18013  01CC' 0B0F               	andlw	15
 18014  01CE' 0100               	movlb	0	; () banked
 18015  01D0' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18016  01D2' 5100'              	movf	ExecuteLinkAdr@auxMinDataRate& (0+255),w,b
 18017  01D4' 5D00'              	subwf	??_ExecuteLinkAdr& (0+255),w,b
 18018  01D6' B0D8               	btfsc	status,0,c
 18019  01D8' D011               	goto	l1482
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;lorawan_na.c: 476: {
 18023                           ;lorawan_na.c: 477: auxMinDataRate = Channels[i].dataRange.min;
 18024  01DA' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 18025  01DC' 0D02               	mullw	2
 18026  01DE' 0E01               	movlw	1
 18027  01E0' 26F3               	addwf	prodl,f,c
 18028  01E2' 0E00               	movlw	0
 18029  01E4' 22F4               	addwfc	prodh,f,c
 18030  01E6' 0E00'              	movlw	low _Channels
 18031  01E8' 24F3               	addwf	prodl,w,c
 18032  01EA' 6ED9               	movwf	fsr2l,c
 18033  01EC' 0E00'              	movlw	high _Channels
 18034  01EE' 20F4               	addwfc	prodh,w,c
 18035  01F0' 6EDA               	movwf	fsr2h,c
 18036  01F2' 0104               	movlb	4	; () banked
 18037  01F4' 50DF               	movf	223,w,c
 18038  01F6' 0B0F               	andlw	15
 18039  01F8' 0100               	movlb	0	; () banked
 18040  01FA' 6F00'              	movwf	ExecuteLinkAdr@auxMinDataRate& (0+255),b
 18041  01FC'                    l1482:
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;lorawan_na.c: 478: }
 18045                           ;lorawan_na.c: 479: if (Channels[i].dataRange.max > auxMaxDataRate)
 18046  01FC' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 18047  01FE' 0D02               	mullw	2
 18048  0200' 0E01               	movlw	1
 18049  0202' 26F3               	addwf	prodl,f,c
 18050  0204' 0E00               	movlw	0
 18051  0206' 22F4               	addwfc	prodh,f,c
 18052  0208' 0E00'              	movlw	low _Channels
 18053  020A' 24F3               	addwf	prodl,w,c
 18054  020C' 6ED9               	movwf	fsr2l,c
 18055  020E' 0E00'              	movlw	high _Channels
 18056  0210' 20F4               	addwfc	prodh,w,c
 18057  0212' 6EDA               	movwf	fsr2h,c
 18058  0214' 0104               	movlb	4	; () banked
 18059  0216' 38DF               	swapf	223,w,c
 18060  0218' 0B0F               	andlw	15
 18061  021A' 0100               	movlb	0	; () banked
 18062  021C' 6100'              	cpfslt	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 18063  021E' D011               	goto	l1483
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;lorawan_na.c: 480: {
 18067                           ;lorawan_na.c: 481: auxMaxDataRate = Channels[i].dataRange.max;
 18068  0220' 5100'              	movf	ExecuteLinkAdr@i& (0+255),w,b
 18069  0222' 0D02               	mullw	2
 18070  0224' 0E01               	movlw	1
 18071  0226' 26F3               	addwf	prodl,f,c
 18072  0228' 0E00               	movlw	0
 18073  022A' 22F4               	addwfc	prodh,f,c
 18074  022C' 0E00'              	movlw	low _Channels
 18075  022E' 24F3               	addwf	prodl,w,c
 18076  0230' 6ED9               	movwf	fsr2l,c
 18077  0232' 0E00'              	movlw	high _Channels
 18078  0234' 20F4               	addwfc	prodh,w,c
 18079  0236' 6EDA               	movwf	fsr2h,c
 18080  0238' 0104               	movlb	4	; () banked
 18081  023A' 38DF               	swapf	223,w,c
 18082  023C' 0B0F               	andlw	15
 18083  023E' 0100               	movlb	0	; () banked
 18084  0240' 6F00'              	movwf	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 18085  0242'                    l1483:
 18086                           
 18087                           ; BSR set to: 0
 18088                           
 18089                           ; BSR set to: 0
 18090  0242' 2B00'              	incf	ExecuteLinkAdr@i& (0+255),f,b
 18091  0244' D7B1               	goto	l9932
 18092  0246'                    u9610:
 18093                           
 18094                           ; BSR set to: 0
 18095                           ;lorawan_na.c: 482: }
 18096                           ;lorawan_na.c: 483: }
 18097                           ;lorawan_na.c: 484: if (channelMask != 0)
 18098                           
 18099                           ; BSR set to: 0
 18100  0246' 5100'              	movf	ExecuteLinkAdr@channelMask& (0+255),w,b
 18101  0248' 1100'              	iorwf	(ExecuteLinkAdr@channelMask+1)& (0+255),w,b
 18102  024A' B4D8               	btfsc	status,2,c
 18103  024C' D01F               	goto	l1476
 18104  024E'                    u9620:
 18105                           
 18106                           ; BSR set to: 0
 18107                           ;lorawan_na.c: 485: {
 18108                           ;lorawan_na.c: 486: auxMaxDataRate = 4;
 18109  024E' 0E04               	movlw	4
 18110  0250' 6F00'              	movwf	ExecuteLinkAdr@auxMaxDataRate& (0+255),b
 18111                           
 18112                           ; BSR set to: 0
 18113                           ;lorawan_na.c: 489: }
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;lorawan_na.c: 487: }
 18117                           ;lorawan_na.c: 488: } break;
 18118  0252' D01C               	goto	l1476
 18119  0254'                    l1462:
 18120                           
 18121                           ; BSR set to: 0
 18122  0254' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18123  0258' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18124  025C' 0100               	movlb	0	; () banked
 18125  025E' 38DF               	swapf	223,w,c
 18126  0260' 0B07               	andlw	7
 18127                           
 18128                           ; Switch size 1, requested type "space"
 18129                           ; Number of cases is 7, Range of values is 0 to 7
 18130                           ; switch strategies available:
 18131                           ; Name         Instructions Cycles
 18132                           ; simple_byte           22    12 (average)
 18133                           ;	Chosen strategy is simple_byte
 18134  0262' 0A00               	xorlw	0	; case 0
 18135  0264' B4D8               	btfsc	status,2,c
 18136  0266' D728               	goto	l1463
 18137  0268' 0A01               	xorlw	1	; case 1
 18138  026A' B4D8               	btfsc	status,2,c
 18139  026C' D725               	goto	l1463
 18140  026E' 0A03               	xorlw	3	; case 2
 18141  0270' B4D8               	btfsc	status,2,c
 18142  0272' D722               	goto	l1463
 18143  0274' 0A01               	xorlw	1	; case 3
 18144  0276' B4D8               	btfsc	status,2,c
 18145  0278' D71F               	goto	l1463
 18146  027A' 0A07               	xorlw	7	; case 4
 18147  027C' B4D8               	btfsc	status,2,c
 18148  027E' D78F               	goto	l1477
 18149  0280' 0A02               	xorlw	2	; case 6
 18150  0282' B4D8               	btfsc	status,2,c
 18151  0284' D78F               	goto	l1479
 18152  0286' 0A01               	xorlw	1	; case 7
 18153  0288' B4D8               	btfsc	status,2,c
 18154  028A' D789               	goto	l1477
 18155  028C'                    l1476:
 18156                           
 18157                           ;lorawan_na.c: 490: }
 18158                           ;lorawan_na.c: 492: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= auxMinDataR
      +                          ate) && (dataRate <= auxMaxDataRate) )
 18159                           
 18160                           ; BSR set to: 0
 18161                           
 18162                           ; BSR set to: 0
 18163  028C' 0100               	movlb	0	; () banked
 18164  028E' 5100'              	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18165  0290' EC00' F000'        	call	_ValidateDataRate
 18166  0294' 0900               	iorlw	0
 18167  0296' A4D8               	btfss	status,2,c
 18168  0298' D021               	goto	l1485
 18169  029A' 0100               	movlb	0	; () banked
 18170  029C' 5100'              	movf	ExecuteLinkAdr@auxMinDataRate& (0+255),w,b
 18171  029E' 5D00'              	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18172  02A0' A0D8               	btfss	status,0,c
 18173  02A2' D01C               	goto	l1485
 18174                           
 18175                           ; BSR set to: 0
 18176  02A4' 5100'              	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18177  02A6' 5D00'              	subwf	ExecuteLinkAdr@auxMaxDataRate& (0+255),w,b
 18178  02A8' A0D8               	btfss	status,0,c
 18179  02AA' D018               	goto	l1485
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;lorawan_na.c: 493: {
 18183                           ;lorawan_na.c: 494: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 18184  02AC' 0102               	movlb	2	; () banked
 18185  02AE' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18186  02B0' 0D02               	mullw	2
 18187  02B2' 0E00'              	movlw	low _loRa
 18188  02B4' 0100               	movlb	0	; () banked
 18189  02B6' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18190  02B8' 0E00'              	movlw	high _loRa
 18191  02BA' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18192  02BC' 0E99               	movlw	153
 18193  02BE' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18194  02C0' 0E00               	movlw	0
 18195  02C2' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18196  02C4' 50F3               	movf	prodl,w,c
 18197  02C6' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18198  02C8' 50F4               	movf	prodh,w,c
 18199  02CA' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18200  02CC' 0E01               	movlw	1
 18201  02CE' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18202  02D0' 6ED9               	movwf	fsr2l,c
 18203  02D2' 0E00               	movlw	0
 18204  02D4' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18205  02D6' 6EDA               	movwf	fsr2h,c
 18206  02D8' 0102               	movlb	2	; () banked
 18207  02DA' 82DF               	bsf	indf2,1,c
 18208  02DC'                    l1485:
 18209                           
 18210                           ;lorawan_na.c: 495: }
 18211                           ;lorawan_na.c: 497: if ((txPower <= 10) && (txPower != 6))
 18212                           
 18213                           ; BSR set to: 2
 18214  02DC' 0E0B               	movlw	11
 18215  02DE' 0100               	movlb	0	; () banked
 18216  02E0' 6100'              	cpfslt	ExecuteLinkAdr@txPower& (0+255),b
 18217  02E2' D01C               	goto	l1486
 18218                           
 18219                           ; BSR set to: 0
 18220  02E4' 0E06               	movlw	6
 18221  02E6' 1900'              	xorwf	ExecuteLinkAdr@txPower& (0+255),w,b
 18222  02E8' B4D8               	btfsc	status,2,c
 18223  02EA' D018               	goto	l1486
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;lorawan_na.c: 498: {
 18227                           ;lorawan_na.c: 499: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 18228  02EC' 0102               	movlb	2	; () banked
 18229  02EE' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18230  02F0' 0D02               	mullw	2
 18231  02F2' 0E00'              	movlw	low _loRa
 18232  02F4' 0100               	movlb	0	; () banked
 18233  02F6' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18234  02F8' 0E00'              	movlw	high _loRa
 18235  02FA' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18236  02FC' 0E99               	movlw	153
 18237  02FE' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18238  0300' 0E00               	movlw	0
 18239  0302' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18240  0304' 50F3               	movf	prodl,w,c
 18241  0306' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18242  0308' 50F4               	movf	prodh,w,c
 18243  030A' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18244  030C' 0E01               	movlw	1
 18245  030E' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18246  0310' 6ED9               	movwf	fsr2l,c
 18247  0312' 0E00               	movlw	0
 18248  0314' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18249  0316' 6EDA               	movwf	fsr2h,c
 18250  0318' 0102               	movlb	2	; () banked
 18251  031A' 84DF               	bsf	indf2,2,c
 18252  031C'                    l1486:
 18253                           
 18254                           ;lorawan_na.c: 500: }
 18255                           ;lorawan_na.c: 502: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 18256  031C' 0102               	movlb	2	; () banked
 18257  031E' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18258  0320' 0D02               	mullw	2
 18259  0322' 0E00'              	movlw	low _loRa
 18260  0324' 0100               	movlb	0	; () banked
 18261  0326' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18262  0328' 0E00'              	movlw	high _loRa
 18263  032A' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18264  032C' 0E99               	movlw	153
 18265  032E' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18266  0330' 0E00               	movlw	0
 18267  0332' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18268  0334' 50F3               	movf	prodl,w,c
 18269  0336' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18270  0338' 50F4               	movf	prodh,w,c
 18271  033A' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18272  033C' 0E01               	movlw	1
 18273  033E' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18274  0340' 6ED9               	movwf	fsr2l,c
 18275  0342' 0E00               	movlw	0
 18276  0344' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18277  0346' 6EDA               	movwf	fsr2h,c
 18278  0348' 0102               	movlb	2	; () banked
 18279  034A' A4DF               	btfss	indf2,2,c
 18280  034C' D0AE               	goto	l1492
 18281                           
 18282                           ; BSR set to: 2
 18283  034E' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18284  0350' 0D02               	mullw	2
 18285  0352' 0E00'              	movlw	low _loRa
 18286  0354' 0100               	movlb	0	; () banked
 18287  0356' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18288  0358' 0E00'              	movlw	high _loRa
 18289  035A' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18290  035C' 0E99               	movlw	153
 18291  035E' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18292  0360' 0E00               	movlw	0
 18293  0362' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18294  0364' 50F3               	movf	prodl,w,c
 18295  0366' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18296  0368' 50F4               	movf	prodh,w,c
 18297  036A' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18298  036C' 0E01               	movlw	1
 18299  036E' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18300  0370' 6ED9               	movwf	fsr2l,c
 18301  0372' 0E00               	movlw	0
 18302  0374' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18303  0376' 6EDA               	movwf	fsr2h,c
 18304  0378' 0102               	movlb	2	; () banked
 18305  037A' A2DF               	btfss	indf2,1,c
 18306  037C' D096               	goto	l1492
 18307                           
 18308                           ; BSR set to: 2
 18309  037E' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18310  0380' 0D02               	mullw	2
 18311  0382' 0E00'              	movlw	low _loRa
 18312  0384' 0100               	movlb	0	; () banked
 18313  0386' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18314  0388' 0E00'              	movlw	high _loRa
 18315  038A' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18316  038C' 0E99               	movlw	153
 18317  038E' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18318  0390' 0E00               	movlw	0
 18319  0392' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18320  0394' 50F3               	movf	prodl,w,c
 18321  0396' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18322  0398' 50F4               	movf	prodh,w,c
 18323  039A' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18324  039C' 0E01               	movlw	1
 18325  039E' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18326  03A0' 6ED9               	movwf	fsr2l,c
 18327  03A2' 0E00               	movlw	0
 18328  03A4' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18329  03A6' 6EDA               	movwf	fsr2h,c
 18330  03A8' 0102               	movlb	2	; () banked
 18331  03AA' A0DF               	btfss	indf2,0,c
 18332  03AC' D07E               	goto	l1492
 18333                           
 18334                           ; BSR set to: 2
 18335                           ;lorawan_na.c: 503: {
 18336                           ;lorawan_na.c: 504: EnableChannels (channelMask, redundancy->chMaskCntl);
 18337  03AE' C017' F00B'        	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 18338  03B2' C018' F00C'        	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 18339  03B6' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18340  03BA' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18341  03BE' 0100               	movlb	0	; () banked
 18342  03C0' 38DF               	swapf	223,w,c
 18343  03C2' 0B07               	andlw	7
 18344  03C4' 6F00'              	movwf	EnableChannels@channelMaskCntl& (0+255),b
 18345  03C6' EC00' F000'        	call	_EnableChannels	;wreg free
 18346                           
 18347                           ;lorawan_na.c: 506: if(txPower < 5)
 18348  03CA' 0E05               	movlw	5
 18349  03CC' 0100               	movlb	0	; () banked
 18350  03CE' 6100'              	cpfslt	ExecuteLinkAdr@txPower& (0+255),b
 18351  03D0' D003               	goto	l1488
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;lorawan_na.c: 507: {
 18355                           ;lorawan_na.c: 508: txPowerNew = 5;
 18356  03D2' 0E05               	movlw	5
 18357  03D4' 6F00'              	movwf	ExecuteLinkAdr@txPowerNew& (0+255),b
 18358                           
 18359                           ;lorawan_na.c: 509: }
 18360  03D6' D002               	goto	l1489
 18361  03D8'                    l1488:
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;lorawan_na.c: 510: else
 18365                           ;lorawan_na.c: 511: {
 18366                           ;lorawan_na.c: 512: txPowerNew = txPower;
 18367  03D8' C01A' F015'        	movff	ExecuteLinkAdr@txPower,ExecuteLinkAdr@txPowerNew
 18368  03DC'                    l1489:
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;lorawan_na.c: 513: }
 18372                           ;lorawan_na.c: 514: UpdateTxPower (txPowerNew);
 18373                           
 18374                           ; BSR set to: 0
 18375  03DC' 5100'              	movf	ExecuteLinkAdr@txPowerNew& (0+255),w,b
 18376  03DE' EC00' F000'        	call	_UpdateTxPower
 18377                           
 18378                           ;lorawan_na.c: 516: loRa.macStatus.txPowerModified = 1;
 18379  03E2' 0102               	movlb	2	; () banked
 18380  03E4' 8900'              	bsf	(_loRa+3)& (0+255),4,b
 18381                           
 18382                           ;lorawan_na.c: 517: UpdateCurrentDataRate (dataRate);
 18383  03E6' 0100               	movlb	0	; () banked
 18384  03E8' 5100'              	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18385  03EA' EC00' F000'        	call	_UpdateCurrentDataRate
 18386                           
 18387                           ;lorawan_na.c: 519: if (redundancy->nbRep == 0)
 18388  03EE' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18389  03F2' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18390  03F6' 0100               	movlb	0	; () banked
 18391  03F8' 50DF               	movf	223,w,c
 18392  03FA' 0B0F               	andlw	15
 18393  03FC' 0900               	iorlw	0
 18394  03FE' A4D8               	btfss	status,2,c
 18395  0400' D002               	goto	l1490
 18396                           
 18397                           ; BSR set to: 0
 18398                           ;lorawan_na.c: 520: {
 18399                           ;lorawan_na.c: 521: loRa.maxRepetitionsUnconfirmedUplink = 0;
 18400  0402' 0E00               	movlw	0
 18401  0404' D009               	goto	L11
 18402  0406'                    l1490:
 18403                           
 18404                           ;lorawan_na.c: 523: else
 18405                           ;lorawan_na.c: 524: {
 18406                           ;lorawan_na.c: 525: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 18407                           
 18408                           ; BSR set to: 2
 18409  0406' C01F' FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18410  040A' C020' FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18411  040E' 0100               	movlb	0	; () banked
 18412  0410' 50DF               	movf	223,w,c
 18413  0412' 0B0F               	andlw	15
 18414  0414' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18415  0416' 0500'              	decf	??_ExecuteLinkAdr& (0+255),w,b
 18416  0418'                    L11:
 18417  0418' 0102               	movlb	2	; () banked
 18418  041A' 6F00'              	movwf	(_loRa+199)& (0+255),b
 18419                           
 18420                           ; BSR set to: 2
 18421                           ;lorawan_na.c: 526: }
 18422                           ;lorawan_na.c: 527: loRa.macStatus.nbRepModified = 1;
 18423                           
 18424                           ; BSR set to: 2
 18425  041C' 8B00'              	bsf	(_loRa+3)& (0+255),5,b
 18426                           
 18427                           ; BSR set to: 2
 18428                           ;lorawan_na.c: 528: }
 18429                           ;lorawan_na.c: 529: }
 18430  041E' D045               	goto	l1492
 18431  0420'                    l1460:
 18432                           
 18433                           ; BSR set to: 2
 18434                           ;lorawan_na.c: 530: else
 18435                           ;lorawan_na.c: 531: {
 18436                           ;lorawan_na.c: 532: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 18437                           
 18438                           ; BSR set to: 2
 18439  0420' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18440  0422' 0D02               	mullw	2
 18441  0424' 0E00'              	movlw	low _loRa
 18442  0426' 0100               	movlb	0	; () banked
 18443  0428' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18444  042A' 0E00'              	movlw	high _loRa
 18445  042C' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18446  042E' 0E99               	movlw	153
 18447  0430' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18448  0432' 0E00               	movlw	0
 18449  0434' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18450  0436' 50F3               	movf	prodl,w,c
 18451  0438' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18452  043A' 50F4               	movf	prodh,w,c
 18453  043C' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18454  043E' 0E01               	movlw	1
 18455  0440' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18456  0442' 6ED9               	movwf	fsr2l,c
 18457  0444' 0E00               	movlw	0
 18458  0446' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18459  0448' 6EDA               	movwf	fsr2h,c
 18460  044A' 0102               	movlb	2	; () banked
 18461  044C' 90DF               	bcf	indf2,0,c
 18462                           
 18463                           ;lorawan_na.c: 533: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 18464  044E' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18465  0450' 0D02               	mullw	2
 18466  0452' 0E00'              	movlw	low _loRa
 18467  0454' 0100               	movlb	0	; () banked
 18468  0456' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18469  0458' 0E00'              	movlw	high _loRa
 18470  045A' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18471  045C' 0E99               	movlw	153
 18472  045E' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18473  0460' 0E00               	movlw	0
 18474  0462' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18475  0464' 50F3               	movf	prodl,w,c
 18476  0466' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18477  0468' 50F4               	movf	prodh,w,c
 18478  046A' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18479  046C' 0E01               	movlw	1
 18480  046E' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18481  0470' 6ED9               	movwf	fsr2l,c
 18482  0472' 0E00               	movlw	0
 18483  0474' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18484  0476' 6EDA               	movwf	fsr2h,c
 18485  0478' 0102               	movlb	2	; () banked
 18486  047A' 92DF               	bcf	indf2,1,c
 18487                           
 18488                           ;lorawan_na.c: 534: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 18489  047C' 5100'              	movf	(_loRa+152)& (0+255),w,b
 18490  047E' 0D02               	mullw	2
 18491  0480' 0E00'              	movlw	low _loRa
 18492  0482' 0100               	movlb	0	; () banked
 18493  0484' 6F00'              	movwf	??_ExecuteLinkAdr& (0+255),b
 18494  0486' 0E00'              	movlw	high _loRa
 18495  0488' 6F00'              	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18496  048A' 0E99               	movlw	153
 18497  048C' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18498  048E' 0E00               	movlw	0
 18499  0490' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18500  0492' 50F3               	movf	prodl,w,c
 18501  0494' 2700'              	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18502  0496' 50F4               	movf	prodh,w,c
 18503  0498' 2300'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18504  049A' 0E01               	movlw	1
 18505  049C' 2500'              	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18506  049E' 6ED9               	movwf	fsr2l,c
 18507  04A0' 0E00               	movlw	0
 18508  04A2' 2100'              	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18509  04A4' 6EDA               	movwf	fsr2h,c
 18510  04A6' 0102               	movlb	2	; () banked
 18511  04A8' 94DF               	bcf	indf2,2,c
 18512  04AA'                    l1492:
 18513                           
 18514                           ; BSR set to: 2
 18515                           ;lorawan_na.c: 535: }
 18516                           ;lorawan_na.c: 537: return ptr;
 18517                           
 18518                           ; BSR set to: 2
 18519  04AA' C010' F010'        	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 18520  04AE' C011' F011'        	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 18521  04B2' 0012               	return	
 18522  04B4'                    __end_of_ExecuteLinkAdr:
 18523                           	opt stack 0
 18524                           tosu	equ	0xFFF
 18525                           tosh	equ	0xFFE
 18526                           tosl	equ	0xFFD
 18527                           pclath	equ	0xFFA
 18528                           tblptru	equ	0xFF8
 18529                           tblptrh	equ	0xFF7
 18530                           tblptrl	equ	0xFF6
 18531                           tablat	equ	0xFF5
 18532                           prodh	equ	0xFF4
 18533                           prodl	equ	0xFF3
 18534                           intcon	equ	0xFF2
 18535                           intcon2	equ	0xFF1
 18536                           intcon3	equ	0xFF0
 18537                           indf0	equ	0xFEF
 18538                           postinc0	equ	0xFEE
 18539                           fsr0h	equ	0xFEA
 18540                           fsr0l	equ	0xFE9
 18541                           wreg	equ	0xFE8
 18542                           postinc1	equ	0xFE6
 18543                           postdec1	equ	0xFE5
 18544                           plusw1	equ	0xFE3
 18545                           fsr1h	equ	0xFE2
 18546                           fsr1l	equ	0xFE1
 18547                           indf2	equ	0xFDF
 18548                           postinc2	equ	0xFDE
 18549                           postdec2	equ	0xFDD
 18550                           fsr2h	equ	0xFDA
 18551                           fsr2l	equ	0xFD9
 18552                           status	equ	0xFD8
 18553                           
 18554 ;; *************** function _ValidateDataRate *****************
 18555 ;; Defined at:
 18556 ;;		line 380 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;  dataRate        1    wreg     unsigned char 
 18559 ;; Auto vars:     Size  Location     Type
 18560 ;;  dataRate        1    0[BANK0 ] unsigned char 
 18561 ;;  result          1    1[BANK0 ] enum E7249
 18562 ;; Return value:  Size  Location     Type
 18563 ;;                  1    wreg      enum E7190
 18564 ;; Registers used:
 18565 ;;		wreg, status,2, status,0
 18566 ;; Tracked objects:
 18567 ;;		On entry : 0/0
 18568 ;;		On exit  : 0/0
 18569 ;;		Unchanged: 0/0
 18570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18575 ;;Total ram usage:        2 bytes
 18576 ;; Hardware stack levels used:    1
 18577 ;; Hardware stack levels required when called:    7
 18578 ;; This function calls:
 18579 ;;		Nothing
 18580 ;; This function is called by:
 18581 ;;		_ExecuteLinkAdr
 18582 ;;		_ValidateDataRange
 18583 ;;		_LORAWAN_SetCurrentDataRate
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           	psect	text91
 18588  0000'                    __ptext91:
 18589                           	opt stack 0
 18590  0000'                    _ValidateDataRate:
 18591                           	opt stack 16
 18592                           
 18593                           ; BSR set to: 2
 18594                           ;incstack = 0
 18595                           ;ValidateDataRate@dataRate stored from wreg
 18596  0000' 0100               	movlb	0	; () banked
 18597  0002' 6F00'              	movwf	ValidateDataRate@dataRate& (0+255),b
 18598                           
 18599                           ;lorawan_na.c: 382: LorawanError_t result = OK;
 18600  0004' 0E00               	movlw	0
 18601  0006' 0100               	movlb	0	; () banked
 18602  0008' 6F00'              	movwf	ValidateDataRate@result& (0+255),b
 18603                           
 18604                           ; BSR set to: 0
 18605                           ;lorawan_na.c: 384: if (dataRate > 4)
 18606  000A' 0E04               	movlw	4
 18607  000C' 6500'              	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 18608  000E' D002               	goto	l1446
 18609                           
 18610                           ; BSR set to: 0
 18611                           ;lorawan_na.c: 385: {
 18612                           ;lorawan_na.c: 386: result = INVALID_PARAMETER;
 18613  0010' 0E03               	movlw	3
 18614  0012' 6F00'              	movwf	ValidateDataRate@result& (0+255),b
 18615  0014'                    l1446:
 18616                           
 18617                           ; BSR set to: 0
 18618                           ;lorawan_na.c: 387: }
 18619                           ;lorawan_na.c: 389: return result;
 18620  0014' 5100'              	movf	ValidateDataRate@result& (0+255),w,b
 18621  0016' 0012               	return	
 18622  0018'                    __end_of_ValidateDataRate:
 18623                           	opt stack 0
 18624                           tosu	equ	0xFFF
 18625                           tosh	equ	0xFFE
 18626                           tosl	equ	0xFFD
 18627                           pclath	equ	0xFFA
 18628                           tblptru	equ	0xFF8
 18629                           tblptrh	equ	0xFF7
 18630                           tblptrl	equ	0xFF6
 18631                           tablat	equ	0xFF5
 18632                           prodh	equ	0xFF4
 18633                           prodl	equ	0xFF3
 18634                           intcon	equ	0xFF2
 18635                           intcon2	equ	0xFF1
 18636                           intcon3	equ	0xFF0
 18637                           indf0	equ	0xFEF
 18638                           postinc0	equ	0xFEE
 18639                           fsr0h	equ	0xFEA
 18640                           fsr0l	equ	0xFE9
 18641                           wreg	equ	0xFE8
 18642                           postinc1	equ	0xFE6
 18643                           postdec1	equ	0xFE5
 18644                           plusw1	equ	0xFE3
 18645                           fsr1h	equ	0xFE2
 18646                           fsr1l	equ	0xFE1
 18647                           indf2	equ	0xFDF
 18648                           postinc2	equ	0xFDE
 18649                           postdec2	equ	0xFDD
 18650                           fsr2h	equ	0xFDA
 18651                           fsr2l	equ	0xFD9
 18652                           status	equ	0xFD8
 18653                           
 18654 ;; *************** function _ValidateChannelMaskCntl *****************
 18655 ;; Defined at:
 18656 ;;		line 910 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 18657 ;; Parameters:    Size  Location     Type
 18658 ;;  channelMaskC    1    wreg     unsigned char 
 18659 ;;  channelMask     2    0[BANK0 ] unsigned int 
 18660 ;; Auto vars:     Size  Location     Type
 18661 ;;  channelMaskC    1    3[BANK0 ] unsigned char 
 18662 ;;  result          1    2[BANK0 ] enum E7249
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  1    wreg      enum E7249
 18665 ;; Registers used:
 18666 ;;		wreg, status,2, status,0
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18673 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;Total ram usage:        4 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:    7
 18679 ;; This function calls:
 18680 ;;		Nothing
 18681 ;; This function is called by:
 18682 ;;		_ExecuteLinkAdr
 18683 ;; This function uses a non-reentrant model
 18684 ;;
 18685                           
 18686                           	psect	text92
 18687  0000'                    __ptext92:
 18688                           	opt stack 0
 18689  0000'                    _ValidateChannelMaskCntl:
 18690                           	opt stack 17
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;incstack = 0
 18694                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 18695  0000' 0100               	movlb	0	; () banked
 18696  0002' 6F00'              	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 18697                           
 18698                           ;lorawan_na.c: 912: LorawanError_t result = OK;
 18699  0004' 0E00               	movlw	0
 18700  0006' 0100               	movlb	0	; () banked
 18701  0008' 6F00'              	movwf	ValidateChannelMaskCntl@result& (0+255),b
 18702                           
 18703                           ; BSR set to: 0
 18704                           ;lorawan_na.c: 915: if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
 18705  000A' 0E05               	movlw	5
 18706  000C' 1900'              	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 18707  000E' B4D8               	btfsc	status,2,c
 18708  0010' D003               	goto	u9040
 18709                           
 18710                           ; BSR set to: 0
 18711  0012' 0E07               	movlw	7
 18712  0014' 6500'              	cpfsgt	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 18713  0016' D002               	goto	l1606
 18714  0018'                    u9040:
 18715                           
 18716                           ; BSR set to: 0
 18717                           ;lorawan_na.c: 916: {
 18718                           ;lorawan_na.c: 917: result = INVALID_PARAMETER;
 18719                           
 18720                           ; BSR set to: 0
 18721  0018' 0E03               	movlw	3
 18722  001A' 6F00'              	movwf	ValidateChannelMaskCntl@result& (0+255),b
 18723  001C'                    l1606:
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;lorawan_na.c: 918: }
 18727                           ;lorawan_na.c: 920: return result;
 18728  001C' 5100'              	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 18729  001E' 0012               	return	
 18730  0020'                    __end_of_ValidateChannelMaskCntl:
 18731                           	opt stack 0
 18732                           tosu	equ	0xFFF
 18733                           tosh	equ	0xFFE
 18734                           tosl	equ	0xFFD
 18735                           pclath	equ	0xFFA
 18736                           tblptru	equ	0xFF8
 18737                           tblptrh	equ	0xFF7
 18738                           tblptrl	equ	0xFF6
 18739                           tablat	equ	0xFF5
 18740                           prodh	equ	0xFF4
 18741                           prodl	equ	0xFF3
 18742                           intcon	equ	0xFF2
 18743                           intcon2	equ	0xFF1
 18744                           intcon3	equ	0xFF0
 18745                           indf0	equ	0xFEF
 18746                           postinc0	equ	0xFEE
 18747                           fsr0h	equ	0xFEA
 18748                           fsr0l	equ	0xFE9
 18749                           wreg	equ	0xFE8
 18750                           postinc1	equ	0xFE6
 18751                           postdec1	equ	0xFE5
 18752                           plusw1	equ	0xFE3
 18753                           fsr1h	equ	0xFE2
 18754                           fsr1l	equ	0xFE1
 18755                           indf2	equ	0xFDF
 18756                           postinc2	equ	0xFDE
 18757                           postdec2	equ	0xFDD
 18758                           fsr2h	equ	0xFDA
 18759                           fsr2l	equ	0xFD9
 18760                           status	equ	0xFD8
 18761                           
 18762 ;; *************** function _UpdateTxPower *****************
 18763 ;; Defined at:
 18764 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;  txPowerNew      1    wreg     unsigned char 
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;  txPowerNew      1    0[BANK0 ] unsigned char 
 18769 ;; Return value:  Size  Location     Type
 18770 ;;                  1    wreg      void 
 18771 ;; Registers used:
 18772 ;;		wreg
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18781 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18782 ;;Total ram usage:        1 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    7
 18785 ;; This function calls:
 18786 ;;		Nothing
 18787 ;; This function is called by:
 18788 ;;		_ExecuteLinkAdr
 18789 ;;		_LORAWAN_SetTxPower
 18790 ;; This function uses a non-reentrant model
 18791 ;;
 18792                           
 18793                           	psect	text93
 18794  0000'                    __ptext93:
 18795                           	opt stack 0
 18796  0000'                    _UpdateTxPower:
 18797                           	opt stack 17
 18798                           
 18799                           ; BSR set to: 0
 18800                           ;incstack = 0
 18801                           ;UpdateTxPower@txPowerNew stored from wreg
 18802  0000' 0100               	movlb	0	; () banked
 18803  0002' 6F00'              	movwf	UpdateTxPower@txPowerNew& (0+255),b
 18804                           
 18805                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 18806  0004' C000' F0D2'        	movff	UpdateTxPower@txPowerNew,_loRa+210
 18807  0008' 0012               	return		;funcret
 18808  000A'                    __end_of_UpdateTxPower:
 18809                           	opt stack 0
 18810                           tosu	equ	0xFFF
 18811                           tosh	equ	0xFFE
 18812                           tosl	equ	0xFFD
 18813                           pclath	equ	0xFFA
 18814                           tblptru	equ	0xFF8
 18815                           tblptrh	equ	0xFF7
 18816                           tblptrl	equ	0xFF6
 18817                           tablat	equ	0xFF5
 18818                           prodh	equ	0xFF4
 18819                           prodl	equ	0xFF3
 18820                           intcon	equ	0xFF2
 18821                           intcon2	equ	0xFF1
 18822                           intcon3	equ	0xFF0
 18823                           indf0	equ	0xFEF
 18824                           postinc0	equ	0xFEE
 18825                           fsr0h	equ	0xFEA
 18826                           fsr0l	equ	0xFE9
 18827                           wreg	equ	0xFE8
 18828                           postinc1	equ	0xFE6
 18829                           postdec1	equ	0xFE5
 18830                           plusw1	equ	0xFE3
 18831                           fsr1h	equ	0xFE2
 18832                           fsr1l	equ	0xFE1
 18833                           indf2	equ	0xFDF
 18834                           postinc2	equ	0xFDE
 18835                           postdec2	equ	0xFDD
 18836                           fsr2h	equ	0xFDA
 18837                           fsr2l	equ	0xFD9
 18838                           status	equ	0xFD8
 18839                           
 18840 ;; *************** function _UpdateCurrentDataRate *****************
 18841 ;; Defined at:
 18842 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18843 ;; Parameters:    Size  Location     Type
 18844 ;;  valueNew        1    wreg     unsigned char 
 18845 ;; Auto vars:     Size  Location     Type
 18846 ;;  valueNew        1    0[BANK0 ] unsigned char 
 18847 ;; Return value:  Size  Location     Type
 18848 ;;                  1    wreg      void 
 18849 ;; Registers used:
 18850 ;;		wreg
 18851 ;; Tracked objects:
 18852 ;;		On entry : 0/0
 18853 ;;		On exit  : 0/0
 18854 ;;		Unchanged: 0/0
 18855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18860 ;;Total ram usage:        1 bytes
 18861 ;; Hardware stack levels used:    1
 18862 ;; Hardware stack levels required when called:    7
 18863 ;; This function calls:
 18864 ;;		Nothing
 18865 ;; This function is called by:
 18866 ;;		_ExecuteLinkAdr
 18867 ;;		_LORAWAN_SetCurrentDataRate
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           	psect	text94
 18872  0000'                    __ptext94:
 18873                           	opt stack 0
 18874  0000'                    _UpdateCurrentDataRate:
 18875                           	opt stack 17
 18876                           
 18877                           ;incstack = 0
 18878                           ;UpdateCurrentDataRate@valueNew stored from wreg
 18879  0000' 0100               	movlb	0	; () banked
 18880  0002' 6F00'              	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 18881                           
 18882                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 18883  0004' C000' F0D0'        	movff	UpdateCurrentDataRate@valueNew,_loRa+208
 18884  0008' 0012               	return		;funcret
 18885  000A'                    __end_of_UpdateCurrentDataRate:
 18886                           	opt stack 0
 18887                           tosu	equ	0xFFF
 18888                           tosh	equ	0xFFE
 18889                           tosl	equ	0xFFD
 18890                           pclath	equ	0xFFA
 18891                           tblptru	equ	0xFF8
 18892                           tblptrh	equ	0xFF7
 18893                           tblptrl	equ	0xFF6
 18894                           tablat	equ	0xFF5
 18895                           prodh	equ	0xFF4
 18896                           prodl	equ	0xFF3
 18897                           intcon	equ	0xFF2
 18898                           intcon2	equ	0xFF1
 18899                           intcon3	equ	0xFF0
 18900                           indf0	equ	0xFEF
 18901                           postinc0	equ	0xFEE
 18902                           fsr0h	equ	0xFEA
 18903                           fsr0l	equ	0xFE9
 18904                           wreg	equ	0xFE8
 18905                           postinc1	equ	0xFE6
 18906                           postdec1	equ	0xFE5
 18907                           plusw1	equ	0xFE3
 18908                           fsr1h	equ	0xFE2
 18909                           fsr1l	equ	0xFE1
 18910                           indf2	equ	0xFDF
 18911                           postinc2	equ	0xFDE
 18912                           postdec2	equ	0xFDD
 18913                           fsr2h	equ	0xFDA
 18914                           fsr2l	equ	0xFD9
 18915                           status	equ	0xFD8
 18916                           
 18917 ;; *************** function _EnableChannels *****************
 18918 ;; Defined at:
 18919 ;;		line 923 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;  channelMask     2   11[BANK0 ] unsigned int 
 18922 ;;  channelMaskC    1   13[BANK0 ] unsigned char 
 18923 ;; Auto vars:     Size  Location     Type
 18924 ;;  i               1   15[BANK0 ] unsigned char 
 18925 ;;  channel         1   14[BANK0 ] unsigned char 
 18926 ;; Return value:  Size  Location     Type
 18927 ;;                  1    wreg      void 
 18928 ;; Registers used:
 18929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18930 ;; Tracked objects:
 18931 ;;		On entry : 0/0
 18932 ;;		On exit  : 0/0
 18933 ;;		Unchanged: 0/0
 18934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18935 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18938 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;Total ram usage:        5 bytes
 18940 ;; Hardware stack levels used:    1
 18941 ;; Hardware stack levels required when called:   10
 18942 ;; This function calls:
 18943 ;;		_EnableChannels2
 18944 ;;		_UpdateChannelIdStatus
 18945 ;; This function is called by:
 18946 ;;		_ExecuteLinkAdr
 18947 ;; This function uses a non-reentrant model
 18948 ;;
 18949                           
 18950                           	psect	text95
 18951  0000'                    __ptext95:
 18952                           	opt stack 0
 18953  0000'                    _EnableChannels:
 18954                           	opt stack 14
 18955                           
 18956                           ;lorawan_na.c: 925: uint8_t i, channel;
 18957                           ;lorawan_na.c: 927: channel = channelMaskCntl << (4);
 18958                           
 18959                           ;incstack = 0
 18960  0000' 0100               	movlb	0	; () banked
 18961  0002' 3900'              	swapf	EnableChannels@channelMaskCntl& (0+255),w,b
 18962  0004' 0BF0               	andlw	240
 18963  0006' 6F00'              	movwf	EnableChannels@channel& (0+255),b
 18964                           
 18965                           ;lorawan_na.c: 929: switch (channelMaskCntl)
 18966  0008' D03D               	goto	l1612
 18967  000A'                    
 18968                           ; BSR set to: 0
 18969                           ;lorawan_na.c: 932: case 1:
 18970                           ;lorawan_na.c: 933: case 2:
 18971                           ;lorawan_na.c: 934: case 3:
 18972                           ;lorawan_na.c: 935: case 4:
 18973                           ;lorawan_na.c: 936: {
 18974                           ;lorawan_na.c: 937: EnableChannels2 (channel, channel + 15, channelMask);
 18975                           
 18976                           ; BSR set to: 0
 18977                           
 18978                           ; BSR set to: 0
 18979                           
 18980                           ; BSR set to: 0
 18981                           
 18982                           ; BSR set to: 0
 18983                           
 18984                           ; BSR set to: 0
 18985  000A' 5100'              	movf	EnableChannels@channel& (0+255),w,b
 18986  000C' 0F0F               	addlw	15
 18987  000E' 6F00'              	movwf	EnableChannels2@endIndex& (0+255),b
 18988  0010' C00B' F005'        	movff	EnableChannels@channelMask,EnableChannels2@channelMask
 18989  0014' C00C' F006'        	movff	EnableChannels@channelMask+1,EnableChannels2@channelMask+1
 18990  0018' 5100'              	movf	EnableChannels@channel& (0+255),w,b
 18991  001A' EC00' F000'        	call	_EnableChannels2
 18992                           
 18993                           ;lorawan_na.c: 941: {
 18994                           ;lorawan_na.c: 942: } break;
 18995                           
 18996                           ;lorawan_na.c: 940: case 5:
 18997                           
 18998                           ;lorawan_na.c: 938: } break;
 18999  001E' 0012               	return	
 19000  0020'                    
 19001                           ;lorawan_na.c: 945: {
 19002                           ;lorawan_na.c: 946: for (i = 0; i <= 63; i++)
 19003  0020' 0E00               	movlw	0
 19004  0022' 0100               	movlb	0	; () banked
 19005  0024' 6F00'              	movwf	EnableChannels@i& (0+255),b
 19006  0026'                    l9514:
 19007                           
 19008                           ; BSR set to: 0
 19009  0026' 0E3F               	movlw	63
 19010  0028' 6500'              	cpfsgt	EnableChannels@i& (0+255),b
 19011  002A' D001               	goto	l1621
 19012  002C' D008               	goto	u9060
 19013  002E'                    l1621:
 19014                           
 19015                           ; BSR set to: 0
 19016                           ;lorawan_na.c: 947: {
 19017                           ;lorawan_na.c: 948: UpdateChannelIdStatus (i, 1);
 19018                           
 19019                           ; BSR set to: 0
 19020  002E' 0E01               	movlw	1
 19021  0030' 6F00'              	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19022  0032' 5100'              	movf	EnableChannels@i& (0+255),w,b
 19023  0034' EC00' F000'        	call	_UpdateChannelIdStatus
 19024  0038' 0100               	movlb	0	; () banked
 19025  003A' 2B00'              	incf	EnableChannels@i& (0+255),f,b
 19026  003C' D7F4               	goto	l9514
 19027  003E'                    u9060:
 19028                           
 19029                           ; BSR set to: 0
 19030                           ;lorawan_na.c: 949: }
 19031                           ;lorawan_na.c: 950: EnableChannels2 (64, 71, channelMask);
 19032                           
 19033                           ; BSR set to: 0
 19034  003E' 0E47               	movlw	71
 19035  0040' 6F00'              	movwf	EnableChannels2@endIndex& (0+255),b
 19036  0042' C00B' F005'        	movff	EnableChannels@channelMask,EnableChannels2@channelMask
 19037  0046' C00C' F006'        	movff	EnableChannels@channelMask+1,EnableChannels2@channelMask+1
 19038  004A' 0E40               	movlw	64
 19039  004C' EC00' F000'        	call	_EnableChannels2
 19040                           
 19041                           ;lorawan_na.c: 951: } break;
 19042  0050' 0012               	return	
 19043  0052'                    
 19044                           ;lorawan_na.c: 954: {
 19045                           ;lorawan_na.c: 955: for (i = 0; i <= 63; i++)
 19046  0052' 0E00               	movlw	0
 19047  0054' 0100               	movlb	0	; () banked
 19048  0056' 6F00'              	movwf	EnableChannels@i& (0+255),b
 19049  0058'                    l9528:
 19050                           
 19051                           ; BSR set to: 0
 19052  0058' 0E3F               	movlw	63
 19053  005A' 6500'              	cpfsgt	EnableChannels@i& (0+255),b
 19054  005C' D001               	goto	l1624
 19055  005E' D008               	goto	u9080
 19056  0060'                    l1624:
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;lorawan_na.c: 956: {
 19060                           ;lorawan_na.c: 957: UpdateChannelIdStatus (i, 0);
 19061                           
 19062                           ; BSR set to: 0
 19063  0060' 0E00               	movlw	0
 19064  0062' 6F00'              	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19065  0064' 5100'              	movf	EnableChannels@i& (0+255),w,b
 19066  0066' EC00' F000'        	call	_UpdateChannelIdStatus
 19067  006A' 0100               	movlb	0	; () banked
 19068  006C' 2B00'              	incf	EnableChannels@i& (0+255),f,b
 19069  006E' D7F4               	goto	l9528
 19070  0070'                    u9080:
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;lorawan_na.c: 958: }
 19074                           ;lorawan_na.c: 959: EnableChannels2 (64, 71, channelMask);
 19075                           
 19076                           ; BSR set to: 0
 19077  0070' 0E47               	movlw	71
 19078  0072' 6F00'              	movwf	EnableChannels2@endIndex& (0+255),b
 19079  0074' C00B' F005'        	movff	EnableChannels@channelMask,EnableChannels2@channelMask
 19080  0078' C00C' F006'        	movff	EnableChannels@channelMask+1,EnableChannels2@channelMask+1
 19081  007C' 0E40               	movlw	64
 19082  007E' EC00' F000'        	call	_EnableChannels2
 19083                           
 19084                           ;lorawan_na.c: 961: }
 19085                           
 19086                           ;lorawan_na.c: 960: } break;
 19087  0082' 0012               	return	
 19088  0084'                    l1612:
 19089  0084' 0100               	movlb	0	; () banked
 19090  0086' 5100'              	movf	EnableChannels@channelMaskCntl& (0+255),w,b
 19091                           
 19092                           ; Switch size 1, requested type "space"
 19093                           ; Number of cases is 8, Range of values is 0 to 7
 19094                           ; switch strategies available:
 19095                           ; Name         Instructions Cycles
 19096                           ; simple_byte           25    13 (average)
 19097                           ;	Chosen strategy is simple_byte
 19098  0088' 0A00               	xorlw	0	; case 0
 19099  008A' B4D8               	btfsc	status,2,c
 19100  008C' D7BE               	goto	l1613
 19101  008E' 0A01               	xorlw	1	; case 1
 19102  0090' B4D8               	btfsc	status,2,c
 19103  0092' D7BB               	goto	l1613
 19104  0094' 0A03               	xorlw	3	; case 2
 19105  0096' B4D8               	btfsc	status,2,c
 19106  0098' D7B8               	goto	l1613
 19107  009A' 0A01               	xorlw	1	; case 3
 19108  009C' B4D8               	btfsc	status,2,c
 19109  009E' D7B5               	goto	l1613
 19110  00A0' 0A07               	xorlw	7	; case 4
 19111  00A2' B4D8               	btfsc	status,2,c
 19112  00A4' D7B2               	goto	l1613
 19113  00A6' 0A01               	xorlw	1	; case 5
 19114  00A8' B4D8               	btfsc	status,2,c
 19115  00AA' 0012               	return	
 19116  00AC' 0A03               	xorlw	3	; case 6
 19117  00AE' B4D8               	btfsc	status,2,c
 19118  00B0' D7B7               	goto	l1620
 19119  00B2' 0A01               	xorlw	1	; case 7
 19120  00B4' A4D8               	btfss	status,2,c
 19121  00B6' 0012               	return	
 19122  00B8' D7CC               	goto	l1623
 19123  00BA'                    __end_of_EnableChannels:
 19124                           	opt stack 0
 19125                           tosu	equ	0xFFF
 19126                           tosh	equ	0xFFE
 19127                           tosl	equ	0xFFD
 19128                           pclath	equ	0xFFA
 19129                           tblptru	equ	0xFF8
 19130                           tblptrh	equ	0xFF7
 19131                           tblptrl	equ	0xFF6
 19132                           tablat	equ	0xFF5
 19133                           prodh	equ	0xFF4
 19134                           prodl	equ	0xFF3
 19135                           intcon	equ	0xFF2
 19136                           intcon2	equ	0xFF1
 19137                           intcon3	equ	0xFF0
 19138                           indf0	equ	0xFEF
 19139                           postinc0	equ	0xFEE
 19140                           fsr0h	equ	0xFEA
 19141                           fsr0l	equ	0xFE9
 19142                           wreg	equ	0xFE8
 19143                           postinc1	equ	0xFE6
 19144                           postdec1	equ	0xFE5
 19145                           plusw1	equ	0xFE3
 19146                           fsr1h	equ	0xFE2
 19147                           fsr1l	equ	0xFE1
 19148                           indf2	equ	0xFDF
 19149                           postinc2	equ	0xFDE
 19150                           postdec2	equ	0xFDD
 19151                           fsr2h	equ	0xFDA
 19152                           fsr2l	equ	0xFD9
 19153                           status	equ	0xFD8
 19154                           
 19155 ;; *************** function _EnableChannels2 *****************
 19156 ;; Defined at:
 19157 ;;		line 1003 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;  startIndex      1    wreg     unsigned char 
 19160 ;;  endIndex        1    4[BANK0 ] unsigned char 
 19161 ;;  channelMask     2    5[BANK0 ] unsigned int 
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;  startIndex      1    9[BANK0 ] unsigned char 
 19164 ;;  i               1   10[BANK0 ] unsigned char 
 19165 ;; Return value:  Size  Location     Type
 19166 ;;                  1    wreg      void 
 19167 ;; Registers used:
 19168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19174 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19177 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;Total ram usage:        7 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    9
 19181 ;; This function calls:
 19182 ;;		_UpdateChannelIdStatus
 19183 ;; This function is called by:
 19184 ;;		_EnableChannels
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           	psect	text96
 19189  0000'                    __ptext96:
 19190                           	opt stack 0
 19191  0000'                    _EnableChannels2:
 19192                           	opt stack 14
 19193                           
 19194                           ;incstack = 0
 19195                           ;EnableChannels2@startIndex stored from wreg
 19196  0000' 0100               	movlb	0	; () banked
 19197  0002' 6F00'              	movwf	EnableChannels2@startIndex& (0+255),b
 19198                           
 19199                           ;lorawan_na.c: 1005: uint8_t i;
 19200                           ;lorawan_na.c: 1007: for (i = startIndex; i <= endIndex; i++)
 19201  0004' C009' F00A'        	movff	EnableChannels2@startIndex,EnableChannels2@i
 19202  0008' D017               	goto	l1643
 19203  000A'                    l1644:
 19204                           
 19205                           ; BSR set to: 0
 19206                           ;lorawan_na.c: 1008: {
 19207                           ;lorawan_na.c: 1009: if ((channelMask & 0x0001) == 0x0001)
 19208  000A' A100'              	btfss	EnableChannels2@channelMask& (0+255),0,b
 19209  000C' D006               	goto	l1645
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;lorawan_na.c: 1010: {
 19213                           ;lorawan_na.c: 1011: UpdateChannelIdStatus (i, 1);
 19214  000E' 0E01               	movlw	1
 19215  0010' 6F00'              	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19216  0012' 5100'              	movf	EnableChannels2@i& (0+255),w,b
 19217  0014' EC00' F000'        	call	_UpdateChannelIdStatus
 19218                           
 19219                           ;lorawan_na.c: 1012: }
 19220  0018' D006               	goto	l1646
 19221  001A'                    l1645:
 19222                           
 19223                           ;lorawan_na.c: 1013: else
 19224                           ;lorawan_na.c: 1014: {
 19225                           ;lorawan_na.c: 1015: UpdateChannelIdStatus (i, 0);
 19226  001A' 0E00               	movlw	0
 19227  001C' 0100               	movlb	0	; () banked
 19228  001E' 6F00'              	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19229  0020' 5100'              	movf	EnableChannels2@i& (0+255),w,b
 19230  0022' EC00' F000'        	call	_UpdateChannelIdStatus
 19231  0026'                    l1646:
 19232                           
 19233                           ;lorawan_na.c: 1016: }
 19234                           ;lorawan_na.c: 1017: channelMask = channelMask >> (1);
 19235  0026' 90D8               	bcf	status,0,c
 19236  0028' 0100               	movlb	0	; () banked
 19237  002A' 3100'              	rrcf	(EnableChannels2@channelMask+1)& (0+255),w,b
 19238  002C' 6F00'              	movwf	??_EnableChannels2& (0+255),b
 19239  002E' 3100'              	rrcf	EnableChannels2@channelMask& (0+255),w,b
 19240  0030' 6F00'              	movwf	EnableChannels2@channelMask& (0+255),b
 19241  0032' C007' F006'        	movff	??_EnableChannels2,EnableChannels2@channelMask+1
 19242                           
 19243                           ; BSR set to: 0
 19244  0036' 2B00'              	incf	EnableChannels2@i& (0+255),f,b
 19245  0038'                    l1643:
 19246                           
 19247                           ; BSR set to: 0
 19248  0038' 0100               	movlb	0	; () banked
 19249  003A' 5100'              	movf	EnableChannels2@i& (0+255),w,b
 19250  003C' 5D00'              	subwf	EnableChannels2@endIndex& (0+255),w,b
 19251  003E' A0D8               	btfss	status,0,c
 19252  0040' 0012               	return	
 19253  0042' D7E3               	goto	l1644
 19254  0044'                    __end_of_EnableChannels2:
 19255                           	opt stack 0
 19256                           tosu	equ	0xFFF
 19257                           tosh	equ	0xFFE
 19258                           tosl	equ	0xFFD
 19259                           pclath	equ	0xFFA
 19260                           tblptru	equ	0xFF8
 19261                           tblptrh	equ	0xFF7
 19262                           tblptrl	equ	0xFF6
 19263                           tablat	equ	0xFF5
 19264                           prodh	equ	0xFF4
 19265                           prodl	equ	0xFF3
 19266                           intcon	equ	0xFF2
 19267                           intcon2	equ	0xFF1
 19268                           intcon3	equ	0xFF0
 19269                           indf0	equ	0xFEF
 19270                           postinc0	equ	0xFEE
 19271                           fsr0h	equ	0xFEA
 19272                           fsr0l	equ	0xFE9
 19273                           wreg	equ	0xFE8
 19274                           postinc1	equ	0xFE6
 19275                           postdec1	equ	0xFE5
 19276                           plusw1	equ	0xFE3
 19277                           fsr1h	equ	0xFE2
 19278                           fsr1l	equ	0xFE1
 19279                           indf2	equ	0xFDF
 19280                           postinc2	equ	0xFDE
 19281                           postdec2	equ	0xFDD
 19282                           fsr2h	equ	0xFDA
 19283                           fsr2l	equ	0xFD9
 19284                           status	equ	0xFD8
 19285                           
 19286 ;; *************** function _UpdateChannelIdStatus *****************
 19287 ;; Defined at:
 19288 ;;		line 843 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;  channelId       1    wreg     unsigned char 
 19291 ;;  statusNew       1    2[BANK0 ] unsigned char 
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;  channelId       1    3[BANK0 ] unsigned char 
 19294 ;; Return value:  Size  Location     Type
 19295 ;;                  1    wreg      void 
 19296 ;; Registers used:
 19297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19298 ;; Tracked objects:
 19299 ;;		On entry : 0/0
 19300 ;;		On exit  : 0/0
 19301 ;;		Unchanged: 0/0
 19302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19307 ;;Total ram usage:        2 bytes
 19308 ;; Hardware stack levels used:    1
 19309 ;; Hardware stack levels required when called:    8
 19310 ;; This function calls:
 19311 ;;		_UpdateCurrentDataRateAfterDataRangeChanges
 19312 ;;		_UpdateMinMaxChDataRate
 19313 ;; This function is called by:
 19314 ;;		_LORAWAN_SetChannelIdStatus
 19315 ;;		_EnableChannels
 19316 ;;		_EnableChannels2
 19317 ;; This function uses a non-reentrant model
 19318 ;;
 19319                           
 19320                           	psect	text97
 19321  0000'                    __ptext97:
 19322                           	opt stack 0
 19323  0000'                    _UpdateChannelIdStatus:
 19324                           	opt stack 15
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;incstack = 0
 19328                           ;UpdateChannelIdStatus@channelId stored from wreg
 19329  0000' 0100               	movlb	0	; () banked
 19330  0002' 6F00'              	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 19331                           
 19332                           ;lorawan_na.c: 845: Channels[channelId].status = statusNew;
 19333  0004' 0100               	movlb	0	; () banked
 19334  0006' 5100'              	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19335  0008' 0D02               	mullw	2
 19336  000A' 0E00'              	movlw	low _Channels
 19337  000C' 24F3               	addwf	prodl,w,c
 19338  000E' 6ED9               	movwf	fsr2l,c
 19339  0010' 0E00'              	movlw	high _Channels
 19340  0012' 20F4               	addwfc	prodh,w,c
 19341  0014' 6EDA               	movwf	fsr2h,c
 19342  0016' C002' FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;lorawan_na.c: 848: UpdateMinMaxChDataRate ();
 19346  001A' EC00' F000'        	call	_UpdateMinMaxChDataRate	;wreg free
 19347                           
 19348                           ;lorawan_na.c: 850: UpdateCurrentDataRateAfterDataRangeChanges ();
 19349  001E' EC00' F000'        	call	_UpdateCurrentDataRateAfterDataRangeChanges	;wreg free
 19350  0022' 0012               	return		;funcret
 19351  0024'                    __end_of_UpdateChannelIdStatus:
 19352                           	opt stack 0
 19353                           tosu	equ	0xFFF
 19354                           tosh	equ	0xFFE
 19355                           tosl	equ	0xFFD
 19356                           pclath	equ	0xFFA
 19357                           tblptru	equ	0xFF8
 19358                           tblptrh	equ	0xFF7
 19359                           tblptrl	equ	0xFF6
 19360                           tablat	equ	0xFF5
 19361                           prodh	equ	0xFF4
 19362                           prodl	equ	0xFF3
 19363                           intcon	equ	0xFF2
 19364                           intcon2	equ	0xFF1
 19365                           intcon3	equ	0xFF0
 19366                           indf0	equ	0xFEF
 19367                           postinc0	equ	0xFEE
 19368                           fsr0h	equ	0xFEA
 19369                           fsr0l	equ	0xFE9
 19370                           wreg	equ	0xFE8
 19371                           postinc1	equ	0xFE6
 19372                           postdec1	equ	0xFE5
 19373                           plusw1	equ	0xFE3
 19374                           fsr1h	equ	0xFE2
 19375                           fsr1l	equ	0xFE1
 19376                           indf2	equ	0xFDF
 19377                           postinc2	equ	0xFDE
 19378                           postdec2	equ	0xFDD
 19379                           fsr2h	equ	0xFDA
 19380                           fsr2l	equ	0xFD9
 19381                           status	equ	0xFD8
 19382                           
 19383 ;; *************** function _UpdateCurrentDataRateAfterDataRangeChanges *****************
 19384 ;; Defined at:
 19385 ;;		line 964 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 19386 ;; Parameters:    Size  Location     Type
 19387 ;;		None
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;		None
 19390 ;; Return value:  Size  Location     Type
 19391 ;;                  1    wreg      void 
 19392 ;; Registers used:
 19393 ;;		wreg, status,2, status,0
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;Total ram usage:        0 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; Hardware stack levels required when called:    7
 19406 ;; This function calls:
 19407 ;;		Nothing
 19408 ;; This function is called by:
 19409 ;;		_UpdateChannelIdStatus
 19410 ;; This function uses a non-reentrant model
 19411 ;;
 19412                           
 19413                           	psect	text98
 19414  0000'                    __ptext98:
 19415                           	opt stack 0
 19416  0000'                    _UpdateCurrentDataRateAfterDataRangeChanges:
 19417                           	opt stack 15
 19418                           
 19419                           ;lorawan_na.c: 966: if (loRa.currentDataRate > loRa.maxDataRate)
 19420                           
 19421                           ;incstack = 0
 19422  0000' 0102               	movlb	2	; () banked
 19423  0002' 5100'              	movf	(_loRa+208)& (0+255),w,b
 19424  0004' 5D00'              	subwf	(_loRa+221)& (0+255),w,b
 19425  0006' A0D8               	btfss	status,0,c
 19426                           
 19427                           ; BSR set to: 2
 19428                           ;lorawan_na.c: 967: {
 19429                           ;lorawan_na.c: 968: loRa.currentDataRate = loRa.maxDataRate;
 19430  0008' C0DD' F0D0'        	movff	_loRa+221,_loRa+208
 19431                           
 19432                           ; BSR set to: 2
 19433                           ;lorawan_na.c: 969: }
 19434                           ;lorawan_na.c: 971: if (loRa.currentDataRate < loRa.minDataRate)
 19435                           
 19436                           ; BSR set to: 2
 19437  000C' 5100'              	movf	(_loRa+220)& (0+255),w,b
 19438  000E' 5D00'              	subwf	(_loRa+208)& (0+255),w,b
 19439  0010' B0D8               	btfsc	status,0,c
 19440  0012' 0012               	return	
 19441                           
 19442                           ; BSR set to: 2
 19443                           ;lorawan_na.c: 972: {
 19444                           ;lorawan_na.c: 973: loRa.currentDataRate = loRa.minDataRate;
 19445  0014' C0DC' F0D0'        	movff	_loRa+220,_loRa+208
 19446  0018' 0012               	return	
 19447  001A'                    __end_of_UpdateCurrentDataRateAfterDataRangeChanges:
 19448                           	opt stack 0
 19449                           tosu	equ	0xFFF
 19450                           tosh	equ	0xFFE
 19451                           tosl	equ	0xFFD
 19452                           pclath	equ	0xFFA
 19453                           tblptru	equ	0xFF8
 19454                           tblptrh	equ	0xFF7
 19455                           tblptrl	equ	0xFF6
 19456                           tablat	equ	0xFF5
 19457                           prodh	equ	0xFF4
 19458                           prodl	equ	0xFF3
 19459                           intcon	equ	0xFF2
 19460                           intcon2	equ	0xFF1
 19461                           intcon3	equ	0xFF0
 19462                           indf0	equ	0xFEF
 19463                           postinc0	equ	0xFEE
 19464                           fsr0h	equ	0xFEA
 19465                           fsr0l	equ	0xFE9
 19466                           wreg	equ	0xFE8
 19467                           postinc1	equ	0xFE6
 19468                           postdec1	equ	0xFE5
 19469                           plusw1	equ	0xFE3
 19470                           fsr1h	equ	0xFE2
 19471                           fsr1l	equ	0xFE1
 19472                           indf2	equ	0xFDF
 19473                           postinc2	equ	0xFDE
 19474                           postdec2	equ	0xFDD
 19475                           fsr2h	equ	0xFDA
 19476                           fsr2l	equ	0xFD9
 19477                           status	equ	0xFD8
 19478                           
 19479 ;; *************** function _ExecuteDutyCycle *****************
 19480 ;; Defined at:
 19481 ;;		line 404 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 19482 ;; Parameters:    Size  Location     Type
 19483 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 19484 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;  maxDCycle       1    2[BANK0 ] unsigned char 
 19487 ;; Return value:  Size  Location     Type
 19488 ;;                  2    0[BANK0 ] PTR unsigned char 
 19489 ;; Registers used:
 19490 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19491 ;; Tracked objects:
 19492 ;;		On entry : 0/0
 19493 ;;		On exit  : 0/0
 19494 ;;		Unchanged: 0/0
 19495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19500 ;;Total ram usage:        3 bytes
 19501 ;; Hardware stack levels used:    1
 19502 ;; Hardware stack levels required when called:    7
 19503 ;; This function calls:
 19504 ;;		Nothing
 19505 ;; This function is called by:
 19506 ;;		_MacExecuteCommands
 19507 ;; This function uses a non-reentrant model
 19508 ;;
 19509                           
 19510                           	psect	text99
 19511  0000'                    __ptext99:
 19512                           	opt stack 0
 19513  0000'                    _ExecuteDutyCycle:
 19514                           	opt stack 18
 19515                           
 19516                           ;lorawan_na.c: 406: uint8_t maxDCycle;
 19517                           ;lorawan_na.c: 408: maxDCycle = *(ptr++);
 19518                           
 19519                           ; BSR set to: 2
 19520                           ;incstack = 0
 19521  0000' C000' FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 19522  0004' C001' FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 19523  0008' 50DF               	movf	indf2,w,c
 19524  000A' 0100               	movlb	0	; () banked
 19525  000C' 6F00'              	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 19526                           
 19527                           ; BSR set to: 0
 19528  000E' 4B00'              	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 19529  0010' 2B00'              	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 19530                           
 19531                           ; BSR set to: 0
 19532                           ;lorawan_na.c: 410: if (maxDCycle == 255)
 19533  0012' 2900'              	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 19534  0014' A4D8               	btfss	status,2,c
 19535  0016' D002               	goto	l1456
 19536                           
 19537                           ; BSR set to: 0
 19538                           ;lorawan_na.c: 411: {
 19539                           ;lorawan_na.c: 412: loRa.macStatus.silentImmediately = 1;
 19540  0018' 0102               	movlb	2	; () banked
 19541  001A' 8F00'              	bsf	(_loRa+2)& (0+255),7,b
 19542  001C'                    l1456:
 19543                           
 19544                           ;lorawan_na.c: 413: }
 19545                           ;lorawan_na.c: 415: return ptr;
 19546                           
 19547                           ; BSR set to: 2
 19548  001C' C000' F000'        	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 19549  0020' C001' F001'        	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 19550  0024' 0012               	return	
 19551  0026'                    __end_of_ExecuteDutyCycle:
 19552                           	opt stack 0
 19553                           tosu	equ	0xFFF
 19554                           tosh	equ	0xFFE
 19555                           tosl	equ	0xFFD
 19556                           pclath	equ	0xFFA
 19557                           tblptru	equ	0xFF8
 19558                           tblptrh	equ	0xFF7
 19559                           tblptrl	equ	0xFF6
 19560                           tablat	equ	0xFF5
 19561                           prodh	equ	0xFF4
 19562                           prodl	equ	0xFF3
 19563                           intcon	equ	0xFF2
 19564                           intcon2	equ	0xFF1
 19565                           intcon3	equ	0xFF0
 19566                           indf0	equ	0xFEF
 19567                           postinc0	equ	0xFEE
 19568                           fsr0h	equ	0xFEA
 19569                           fsr0l	equ	0xFE9
 19570                           wreg	equ	0xFE8
 19571                           postinc1	equ	0xFE6
 19572                           postdec1	equ	0xFE5
 19573                           plusw1	equ	0xFE3
 19574                           fsr1h	equ	0xFE2
 19575                           fsr1l	equ	0xFE1
 19576                           indf2	equ	0xFDF
 19577                           postinc2	equ	0xFDE
 19578                           postdec2	equ	0xFDD
 19579                           fsr2h	equ	0xFDA
 19580                           fsr2l	equ	0xFD9
 19581                           status	equ	0xFD8
 19582                           
 19583 ;; *************** function _ExecuteDevStatus *****************
 19584 ;; Defined at:
 19585 ;;		line 540 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 19586 ;; Parameters:    Size  Location     Type
 19587 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 19588 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 19589 ;; Auto vars:     Size  Location     Type
 19590 ;;		None
 19591 ;; Return value:  Size  Location     Type
 19592 ;;                  2    0[BANK0 ] PTR unsigned char 
 19593 ;; Registers used:
 19594 ;;		wreg, status,2, status,0
 19595 ;; Tracked objects:
 19596 ;;		On entry : 0/0
 19597 ;;		On exit  : 0/0
 19598 ;;		Unchanged: 0/0
 19599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19600 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19604 ;;Total ram usage:        2 bytes
 19605 ;; Hardware stack levels used:    1
 19606 ;; Hardware stack levels required when called:    7
 19607 ;; This function calls:
 19608 ;;		Nothing
 19609 ;; This function is called by:
 19610 ;;		_MacExecuteCommands
 19611 ;; This function uses a non-reentrant model
 19612 ;;
 19613                           
 19614                           	psect	text100
 19615  0000'                    __ptext100:
 19616                           	opt stack 0
 19617  0000'                    _ExecuteDevStatus:
 19618                           	opt stack 18
 19619                           
 19620                           ;lorawan_na.c: 542: return ptr;
 19621                           
 19622                           ;incstack = 0
 19623  0000' C000' F000'        	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 19624  0004' C001' F001'        	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 19625  0008' 0012               	return	
 19626  000A'                    __end_of_ExecuteDevStatus:
 19627                           	opt stack 0
 19628                           tosu	equ	0xFFF
 19629                           tosh	equ	0xFFE
 19630                           tosl	equ	0xFFD
 19631                           pclath	equ	0xFFA
 19632                           tblptru	equ	0xFF8
 19633                           tblptrh	equ	0xFF7
 19634                           tblptrl	equ	0xFF6
 19635                           tablat	equ	0xFF5
 19636                           prodh	equ	0xFF4
 19637                           prodl	equ	0xFF3
 19638                           intcon	equ	0xFF2
 19639                           intcon2	equ	0xFF1
 19640                           intcon3	equ	0xFF0
 19641                           indf0	equ	0xFEF
 19642                           postinc0	equ	0xFEE
 19643                           fsr0h	equ	0xFEA
 19644                           fsr0l	equ	0xFE9
 19645                           wreg	equ	0xFE8
 19646                           postinc1	equ	0xFE6
 19647                           postdec1	equ	0xFE5
 19648                           plusw1	equ	0xFE3
 19649                           fsr1h	equ	0xFE2
 19650                           fsr1l	equ	0xFE1
 19651                           indf2	equ	0xFDF
 19652                           postinc2	equ	0xFDE
 19653                           postdec2	equ	0xFDD
 19654                           fsr2h	equ	0xFDA
 19655                           fsr2l	equ	0xFD9
 19656                           status	equ	0xFD8
 19657                           
 19658 ;; *************** function _LORAWAN_Send *****************
 19659 ;; Defined at:
 19660 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19661 ;; Parameters:    Size  Location     Type
 19662 ;;  confirmed       1    wreg     enum E7217
 19663 ;;  port            1  115[BANK0 ] unsigned char 
 19664 ;;  buffer          2  116[BANK0 ] PTR void 
 19665 ;;		 -> STR_4(5), NULL(0), 
 19666 ;;  bufferLength    1  118[BANK0 ] unsigned char 
 19667 ;; Auto vars:     Size  Location     Type
 19668 ;;  confirmed       1  121[BANK0 ] enum E7217
 19669 ;;  result          1  120[BANK0 ] enum E7190
 19670 ;; Return value:  Size  Location     Type
 19671 ;;                  1    wreg      enum E7190
 19672 ;; Registers used:
 19673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19674 ;; Tracked objects:
 19675 ;;		On entry : 0/0
 19676 ;;		On exit  : 0/0
 19677 ;;		Unchanged: 0/0
 19678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19679 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19682 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19683 ;;Total ram usage:        7 bytes
 19684 ;; Hardware stack levels used:    1
 19685 ;; Hardware stack levels required when called:   13
 19686 ;; This function calls:
 19687 ;;		_AssemblePacket
 19688 ;;		_LORAWAN_GetMaxPayloadSize
 19689 ;;		_RADIO_ReceiveStop
 19690 ;;		_RADIO_Transmit
 19691 ;;		_SelectChannelForTransmission
 19692 ;; This function is called by:
 19693 ;;		_AutomaticReplyCallback
 19694 ;;		_LORAWAN_RxDone
 19695 ;;		_main
 19696 ;; This function uses a non-reentrant model
 19697 ;;
 19698                           
 19699                           	psect	text101
 19700  0000'                    __ptext101:
 19701                           	opt stack 0
 19702  0000'                    _LORAWAN_Send:
 19703                           	opt stack 17
 19704                           
 19705                           ;incstack = 0
 19706                           ;LORAWAN_Send@confirmed stored from wreg
 19707  0000' 0100               	movlb	0	; () banked
 19708  0002' 6F00'              	movwf	LORAWAN_Send@confirmed& (0+255),b
 19709                           
 19710                           ;lorawan.c: 187: LorawanError_t result;
 19711                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 19712  0004' 0102               	movlb	2	; () banked
 19713  0006' B100'              	btfsc	(_loRa+3)& (0+255),0,b
 19714  0008' 0012               	return	
 19715                           
 19716                           ; BSR set to: 2
 19717                           ;lorawan.c: 192: }
 19718                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 19719                           
 19720                           ; BSR set to: 2
 19721                           ;lorawan.c: 190: {
 19722                           ;lorawan.c: 191: return MAC_PAUSED;
 19723                           ;	Return value of _LORAWAN_Send is never used
 19724  000A' BF00'              	btfsc	(_loRa+2)& (0+255),7,b
 19725  000C' 0012               	return	
 19726                           
 19727                           ; BSR set to: 2
 19728                           ;lorawan.c: 197: }
 19729                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 19730                           
 19731                           ; BSR set to: 2
 19732                           ;lorawan.c: 195: {
 19733                           ;lorawan.c: 196: return SILENT_IMMEDIATELY_ACTIVE;
 19734                           ;	Return value of _LORAWAN_Send is never used
 19735  000E' A900'              	btfss	(_loRa+2)& (0+255),4,b
 19736  0010' 0012               	return	
 19737                           
 19738                           ; BSR set to: 2
 19739                           ;lorawan.c: 202: }
 19740                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 19741                           
 19742                           ; BSR set to: 2
 19743                           
 19744                           ; BSR set to: 2
 19745                           ;lorawan.c: 200: {
 19746                           ;lorawan.c: 201: return NETWORK_NOT_JOINED;
 19747                           ;	Return value of _LORAWAN_Send is never used
 19748  0012' 0100               	movlb	0	; () banked
 19749  0014' 5100'              	movf	LORAWAN_Send@port& (0+255),w,b
 19750  0016' A4D8               	btfss	status,2,c
 19751  0018' D003               	goto	l285
 19752                           
 19753                           ; BSR set to: 0
 19754  001A' 5100'              	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 19755  001C' A4D8               	btfss	status,2,c
 19756  001E' 0012               	return	
 19757  0020'                    l285:
 19758                           
 19759                           ; BSR set to: 0
 19760                           ;lorawan.c: 207: }
 19761                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 19762                           
 19763                           ; BSR set to: 0
 19764  0020' EC00' F000'        	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 19765  0024' 0100               	movlb	0	; () banked
 19766  0026' 6F00'              	movwf	??_LORAWAN_Send& (0+255),b
 19767  0028' 5100'              	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 19768  002A' 5D00'              	subwf	??_LORAWAN_Send& (0+255),w,b
 19769  002C' A0D8               	btfss	status,0,c
 19770  002E' 0012               	return	
 19771                           
 19772                           ; BSR set to: 0
 19773                           ;lorawan.c: 213: }
 19774                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 19775                           
 19776                           ; BSR set to: 0
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;lorawan.c: 211: {
 19780                           ;lorawan.c: 212: return INVALID_BUFFER_LENGTH;
 19781                           ;	Return value of _LORAWAN_Send is never used
 19782  0030' 0102               	movlb	2	; () banked
 19783  0032' 2900'              	incf	(_loRa+6)& (0+255),w,b
 19784  0034' E109               	bnz	l10150
 19785  0036' 2900'              	incf	(_loRa+7)& (0+255),w,b
 19786  0038' E107               	bnz	l10150
 19787  003A' 2900'              	incf	(_loRa+8)& (0+255),w,b
 19788  003C' E105               	bnz	l10150
 19789  003E' 2900'              	incf	(_loRa+9)& (0+255),w,b
 19790  0040' A4D8               	btfss	status,2,c
 19791  0042' D002               	goto	l287
 19792                           
 19793                           ; BSR set to: 2
 19794                           ;lorawan.c: 216: {
 19795                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 19796  0044' 8300'              	bsf	(_loRa+4)& (0+255),1,b
 19797                           
 19798                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 19799                           ;	Return value of _LORAWAN_Send is never used
 19800  0046' 0012               	return	
 19801  0048'                    l287:
 19802  0048'                    l10150:
 19803                           
 19804                           ; BSR set to: 2
 19805                           ;lorawan.c: 220: }
 19806                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 19807  0048' 5100'              	movf	(_loRa+2)& (0+255),w,b
 19808  004A' 0B0F               	andlw	15
 19809  004C' 0900               	iorlw	0
 19810  004E' B4D8               	btfsc	status,2,c
 19811  0050' D003               	goto	l288
 19812                           
 19813                           ; BSR set to: 2
 19814  0052' 5100'              	movf	(_loRa+18)& (0+255),w,b
 19815  0054' B4D8               	btfsc	status,2,c
 19816  0056' 0012               	return	
 19817  0058'                    l288:
 19818                           
 19819                           ; BSR set to: 2
 19820                           ;lorawan.c: 225: }
 19821                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 19822                           
 19823                           ; BSR set to: 2
 19824  0058' 0E01               	movlw	1
 19825  005A' EC00' F000'        	call	_SelectChannelForTransmission
 19826  005E' 0100               	movlb	0	; () banked
 19827  0060' 6F00'              	movwf	LORAWAN_Send@result& (0+255),b
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;lorawan.c: 228: if (result != OK)
 19831  0062' 5100'              	movf	LORAWAN_Send@result& (0+255),w,b
 19832  0064' A4D8               	btfss	status,2,c
 19833  0066' 0012               	return	
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;lorawan.c: 232: else
 19837                           ;lorawan.c: 233: {
 19838                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 19839                           
 19840                           ; BSR set to: 0
 19841                           
 19842                           ; BSR set to: 0
 19843                           ;lorawan.c: 231: }
 19844                           
 19845                           ; BSR set to: 0
 19846                           ;lorawan.c: 229: {
 19847                           ;lorawan.c: 230: return result;
 19848                           ;	Return value of _LORAWAN_Send is never used
 19849  0068' 0E02               	movlw	2
 19850  006A' 0102               	movlb	2	; () banked
 19851  006C' 1900'              	xorwf	(_loRa+18)& (0+255),w,b
 19852  006E' B4D8               	btfsc	status,2,c
 19853                           
 19854                           ; BSR set to: 2
 19855                           ;lorawan.c: 235: {
 19856                           ;lorawan.c: 236: RADIO_ReceiveStop();
 19857  0070' EC00' F000'        	call	_RADIO_ReceiveStop	;wreg free
 19858                           
 19859                           ;lorawan.c: 237: }
 19860                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 19861  0074' C073' F067'        	movff	LORAWAN_Send@port,AssemblePacket@port
 19862  0078' C074' F068'        	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 19863  007C' C075' F069'        	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 19864  0080' C076' F06A'        	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 19865  0084' 0100               	movlb	0	; () banked
 19866  0086' 6B00'              	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 19867  0088' 5100'              	movf	LORAWAN_Send@confirmed& (0+255),w,b
 19868  008A' EC00' F000'        	call	_AssemblePacket
 19869                           
 19870                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 19871  008E' 0E00'              	movlw	low (_macBuffer+16)
 19872  0090' 0100               	movlb	0	; () banked
 19873  0092' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
 19874  0094' 0E00'              	movlw	high (_macBuffer+16)
 19875  0096' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 19876  0098' C0C5' F053'        	movff	_loRa+197,RADIO_Transmit@bufferLen
 19877  009C' EC00' F000'        	call	_RADIO_Transmit	;wreg free
 19878  00A0' 0100               	movlb	0	; () banked
 19879  00A2' 5100'              	movf	?_RADIO_Transmit& (0+255),w,b
 19880  00A4' 1100'              	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 19881  00A6' A4D8               	btfss	status,2,c
 19882  00A8' 0012               	return	
 19883                           
 19884                           ; BSR set to: 0
 19885                           ;lorawan.c: 242: {
 19886                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 19887  00AA' 0E01               	movlw	1
 19888  00AC' 0102               	movlb	2	; () banked
 19889  00AE' 2700'              	addwf	(_loRa+6)& (0+255),f,b
 19890  00B0' 0E00               	movlw	0
 19891  00B2' 2300'              	addwfc	(_loRa+7)& (0+255),f,b
 19892  00B4' 2300'              	addwfc	(_loRa+8)& (0+255),f,b
 19893  00B6' 2300'              	addwfc	(_loRa+9)& (0+255),f,b
 19894                           
 19895                           ;lorawan.c: 245: if (CNF == confirmed)
 19896  00B8' 0100               	movlb	0	; () banked
 19897  00BA' 0500'              	decf	LORAWAN_Send@confirmed& (0+255),w,b
 19898  00BC' A4D8               	btfss	status,2,c
 19899  00BE' D002               	goto	l293
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;lorawan.c: 246: {
 19903                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 19904  00C0' 0102               	movlb	2	; () banked
 19905  00C2' 8100'              	bsf	_loRa& (0+255),0,b
 19906  00C4'                    l293:
 19907                           
 19908                           ;lorawan.c: 248: }
 19909                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 19910  00C4' 0102               	movlb	2	; () banked
 19911  00C6' 8B00'              	bsf	_loRa& (0+255),5,b
 19912                           
 19913                           ; BSR set to: 2
 19914                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 19915  00C8' 5100'              	movf	(_loRa+2)& (0+255),w,b
 19916  00CA' 0BF0               	andlw	-16
 19917  00CC' 0901               	iorlw	1
 19918  00CE' 6F00'              	movwf	(_loRa+2)& (0+255),b
 19919                           
 19920                           ; BSR set to: 2
 19921                           
 19922                           ; BSR set to: 2
 19923                           ;lorawan.c: 252: else
 19924                           ;lorawan.c: 253: {
 19925                           ;lorawan.c: 254: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 19926                           ;	Return value of _LORAWAN_Send is never used
 19927                           
 19928                           ;lorawan.c: 251: }
 19929  00D0' 0012               	return	
 19930  00D2'                    __end_of_LORAWAN_Send:
 19931                           	opt stack 0
 19932                           tosu	equ	0xFFF
 19933                           tosh	equ	0xFFE
 19934                           tosl	equ	0xFFD
 19935                           pclath	equ	0xFFA
 19936                           tblptru	equ	0xFF8
 19937                           tblptrh	equ	0xFF7
 19938                           tblptrl	equ	0xFF6
 19939                           tablat	equ	0xFF5
 19940                           prodh	equ	0xFF4
 19941                           prodl	equ	0xFF3
 19942                           intcon	equ	0xFF2
 19943                           intcon2	equ	0xFF1
 19944                           intcon3	equ	0xFF0
 19945                           indf0	equ	0xFEF
 19946                           postinc0	equ	0xFEE
 19947                           fsr0h	equ	0xFEA
 19948                           fsr0l	equ	0xFE9
 19949                           wreg	equ	0xFE8
 19950                           postinc1	equ	0xFE6
 19951                           postdec1	equ	0xFE5
 19952                           plusw1	equ	0xFE3
 19953                           fsr1h	equ	0xFE2
 19954                           fsr1l	equ	0xFE1
 19955                           indf2	equ	0xFDF
 19956                           postinc2	equ	0xFDE
 19957                           postdec2	equ	0xFDD
 19958                           fsr2h	equ	0xFDA
 19959                           fsr2l	equ	0xFD9
 19960                           status	equ	0xFD8
 19961                           
 19962 ;; *************** function _RADIO_ReceiveStop *****************
 19963 ;; Defined at:
 19964 ;;		line 1007 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 19965 ;; Parameters:    Size  Location     Type
 19966 ;;		None
 19967 ;; Auto vars:     Size  Location     Type
 19968 ;;		None
 19969 ;; Return value:  Size  Location     Type
 19970 ;;                  1    wreg      void 
 19971 ;; Registers used:
 19972 ;;		wreg, status,2, status,0, cstack
 19973 ;; Tracked objects:
 19974 ;;		On entry : 0/0
 19975 ;;		On exit  : 0/0
 19976 ;;		Unchanged: 0/0
 19977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19982 ;;Total ram usage:        0 bytes
 19983 ;; Hardware stack levels used:    1
 19984 ;; Hardware stack levels required when called:   11
 19985 ;; This function calls:
 19986 ;;		_RADIO_WriteMode
 19987 ;; This function is called by:
 19988 ;;		_LORAWAN_Send
 19989 ;;		_LORAWAN_ReceiveWindow1Callback
 19990 ;;		_LORAWAN_ReceiveWindow2Callback
 19991 ;;		_LORAWAN_EnterContinuousReceive
 19992 ;;		_LORAWAN_SetClass
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           	psect	text102
 19997  0000'                    __ptext102:
 19998                           	opt stack 0
 19999  0000'                    _RADIO_ReceiveStop:
 20000                           	opt stack 18
 20001                           
 20002                           ;radio_driver_SX1276.c: 1009: if ((1 << (1)) == RadioConfiguration.flags)
 20003                           
 20004                           ;incstack = 0
 20005  0000' 0E02               	movlw	2
 20006  0002' 0101               	movlb	1	; () banked
 20007  0004' 1900'              	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 20008  0006' A4D8               	btfss	status,2,c
 20009  0008' 0012               	return	
 20010                           
 20011                           ; BSR set to: 1
 20012                           ;radio_driver_SX1276.c: 1010: {
 20013                           ;radio_driver_SX1276.c: 1011: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20014  000A' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 20015  000E' 0E00               	movlw	0
 20016  0010' 0100               	movlb	0	; () banked
 20017  0012' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 20018  0014' 0E00               	movlw	0
 20019  0016' EC00' F000'        	call	_RADIO_WriteMode
 20020                           
 20021                           ;radio_driver_SX1276.c: 1012: RadioConfiguration.flags &= ~(1 << (1));
 20022  001A' 0101               	movlb	1	; () banked
 20023  001C' 9300'              	bcf	(_RadioConfiguration+35)& (0+255),1,b
 20024                           
 20025                           ; BSR set to: 1
 20026                           
 20027                           ; BSR set to: 1
 20028                           
 20029                           ;radio_driver_SX1276.c: 1015: do { LATB3 = 0; } while(0);
 20030  001E' 968A               	bcf	3978,3,c	;volatile
 20031                           
 20032                           ; BSR set to: 1
 20033  0020' 0012               	return	
 20034  0022'                    __end_of_RADIO_ReceiveStop:
 20035                           	opt stack 0
 20036                           tosu	equ	0xFFF
 20037                           tosh	equ	0xFFE
 20038                           tosl	equ	0xFFD
 20039                           pclath	equ	0xFFA
 20040                           tblptru	equ	0xFF8
 20041                           tblptrh	equ	0xFF7
 20042                           tblptrl	equ	0xFF6
 20043                           tablat	equ	0xFF5
 20044                           prodh	equ	0xFF4
 20045                           prodl	equ	0xFF3
 20046                           intcon	equ	0xFF2
 20047                           intcon2	equ	0xFF1
 20048                           intcon3	equ	0xFF0
 20049                           indf0	equ	0xFEF
 20050                           postinc0	equ	0xFEE
 20051                           fsr0h	equ	0xFEA
 20052                           fsr0l	equ	0xFE9
 20053                           wreg	equ	0xFE8
 20054                           postinc1	equ	0xFE6
 20055                           postdec1	equ	0xFE5
 20056                           plusw1	equ	0xFE3
 20057                           fsr1h	equ	0xFE2
 20058                           fsr1l	equ	0xFE1
 20059                           indf2	equ	0xFDF
 20060                           postinc2	equ	0xFDE
 20061                           postdec2	equ	0xFDD
 20062                           fsr2h	equ	0xFDA
 20063                           fsr2l	equ	0xFD9
 20064                           status	equ	0xFD8
 20065                           
 20066 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 20067 ;; Defined at:
 20068 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20069 ;; Parameters:    Size  Location     Type
 20070 ;;		None
 20071 ;; Auto vars:     Size  Location     Type
 20072 ;;  result          1   10[BANK0 ] unsigned char 
 20073 ;;  macCommandsL    1    9[BANK0 ] unsigned char 
 20074 ;; Return value:  Size  Location     Type
 20075 ;;                  1    wreg      unsigned char 
 20076 ;; Registers used:
 20077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20078 ;; Tracked objects:
 20079 ;;		On entry : 0/0
 20080 ;;		On exit  : 0/0
 20081 ;;		Unchanged: 0/0
 20082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20086 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20087 ;;Total ram usage:        3 bytes
 20088 ;; Hardware stack levels used:    1
 20089 ;; Hardware stack levels required when called:    8
 20090 ;; This function calls:
 20091 ;;		_CountfOptsLength
 20092 ;; This function is called by:
 20093 ;;		_LORAWAN_Send
 20094 ;;		_AckRetransmissionCallback
 20095 ;; This function uses a non-reentrant model
 20096 ;;
 20097                           
 20098                           	psect	text103
 20099  0000'                    __ptext103:
 20100                           	opt stack 0
 20101  0000'                    _LORAWAN_GetMaxPayloadSize:
 20102                           	opt stack 21
 20103                           
 20104                           ;lorawan.c: 1558: uint8_t result = 0;
 20105                           
 20106                           ; BSR set to: 1
 20107                           ;incstack = 0
 20108  0000' 0E00               	movlw	0
 20109  0002' 0100               	movlb	0	; () banked
 20110  0004' 6F00'              	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20111                           
 20112                           ; BSR set to: 0
 20113                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 20114                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 20115  0006' EC00' F000'        	call	_CountfOptsLength	;wreg free
 20116  000A' 0100               	movlb	0	; () banked
 20117  000C' 6F00'              	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 20118                           
 20119                           ; BSR set to: 0
 20120                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 20121  000E' 0102               	movlb	2	; () banked
 20122  0010' 5100'              	movf	(_loRa+152)& (0+255),w,b
 20123  0012' A4D8               	btfss	status,2,c
 20124  0014' D00F               	goto	l747
 20125                           
 20126                           ; BSR set to: 2
 20127                           ;lorawan.c: 1564: {
 20128                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 20129  0016' 5100'              	movf	(_loRa+208)& (0+255),w,b
 20130  0018' 0D01               	mullw	1
 20131  001A' 0E00'              	movlw	low _maxPayloadSize
 20132  001C' 24F3               	addwf	prodl,w,c
 20133  001E' 6EF6               	movwf	tblptrl,c
 20134  0020' 0E00'              	movlw	high _maxPayloadSize
 20135  0022' 20F4               	addwfc	prodh,w,c
 20136  0024' 6EF7               	movwf	tblptrh,c
 20137  0026'                    	if	1	;There are 3 active tblptr bytes
 20138  0026' 6AF8               	clrf	tblptru,c
 20139  0028' 0E00'              	movlw	low (__mediumconst shr (0+16))
 20140  002A' 22F8               	addwfc	tblptru,f,c
 20141  002C'                    	endif
 20142  002C' 0008               	tblrd		*
 20143  002E' CFF5 F00A'         	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 20144                           
 20145                           ;lorawan.c: 1566: }
 20146  0032' D013               	goto	l748
 20147  0034'                    l747:
 20148                           
 20149                           ; BSR set to: 2
 20150                           ;lorawan.c: 1567: else
 20151                           ;lorawan.c: 1568: {
 20152                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 20153                           
 20154                           ; BSR set to: 2
 20155  0034' 5100'              	movf	(_loRa+208)& (0+255),w,b
 20156  0036' 0D01               	mullw	1
 20157  0038' 0E00'              	movlw	low _maxPayloadSize
 20158  003A' 24F3               	addwf	prodl,w,c
 20159  003C' 6EF6               	movwf	tblptrl,c
 20160  003E' 0E00'              	movlw	high _maxPayloadSize
 20161  0040' 20F4               	addwfc	prodh,w,c
 20162  0042' 6EF7               	movwf	tblptrh,c
 20163  0044'                    	if	1	;There are 3 active tblptr bytes
 20164  0044' 6AF8               	clrf	tblptru,c
 20165  0046' 0E00'              	movlw	low (__mediumconst shr (0+16))
 20166  0048' 22F8               	addwfc	tblptru,f,c
 20167  004A'                    	endif
 20168  004A' 0008               	tblrd		*
 20169  004C' CFF5 F008'         	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 20170  0050' 0100               	movlb	0	; () banked
 20171  0052' 5100'              	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 20172  0054' 0800               	sublw	0
 20173  0056' 2500'              	addwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 20174  0058' 6F00'              	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20175  005A'                    l748:
 20176                           
 20177                           ;lorawan.c: 1570: }
 20178                           ;lorawan.c: 1572: return result;
 20179                           
 20180                           ; BSR set to: 0
 20181  005A' 0100               	movlb	0	; () banked
 20182  005C' 5100'              	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 20183  005E' 0012               	return	
 20184  0060'                    __end_of_LORAWAN_GetMaxPayloadSize:
 20185                           	opt stack 0
 20186                           tosu	equ	0xFFF
 20187                           tosh	equ	0xFFE
 20188                           tosl	equ	0xFFD
 20189                           pclath	equ	0xFFA
 20190                           tblptru	equ	0xFF8
 20191                           tblptrh	equ	0xFF7
 20192                           tblptrl	equ	0xFF6
 20193                           tablat	equ	0xFF5
 20194                           prodh	equ	0xFF4
 20195                           prodl	equ	0xFF3
 20196                           intcon	equ	0xFF2
 20197                           intcon2	equ	0xFF1
 20198                           intcon3	equ	0xFF0
 20199                           indf0	equ	0xFEF
 20200                           postinc0	equ	0xFEE
 20201                           fsr0h	equ	0xFEA
 20202                           fsr0l	equ	0xFE9
 20203                           wreg	equ	0xFE8
 20204                           postinc1	equ	0xFE6
 20205                           postdec1	equ	0xFE5
 20206                           plusw1	equ	0xFE3
 20207                           fsr1h	equ	0xFE2
 20208                           fsr1l	equ	0xFE1
 20209                           indf2	equ	0xFDF
 20210                           postinc2	equ	0xFDE
 20211                           postdec2	equ	0xFDD
 20212                           fsr2h	equ	0xFDA
 20213                           fsr2l	equ	0xFD9
 20214                           status	equ	0xFD8
 20215                           
 20216 ;; *************** function _AssemblePacket *****************
 20217 ;; Defined at:
 20218 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;  confirmed       1    wreg     unsigned char 
 20221 ;;  port            1  103[BANK0 ] unsigned char 
 20222 ;;  buffer          2  104[BANK0 ] PTR unsigned char 
 20223 ;;		 -> STR_4(5), NULL(0), 
 20224 ;;  bufferLength    2  106[BANK0 ] unsigned int 
 20225 ;; Auto vars:     Size  Location     Type
 20226 ;;  confirmed       1  110[BANK0 ] unsigned char 
 20227 ;;  bufferIndex     1  114[BANK0 ] unsigned char 
 20228 ;;  macCmdIdx       1  113[BANK0 ] unsigned char 
 20229 ;;  fCtrl           1  112[BANK0 ] struct .
 20230 ;;  mhdr            1  111[BANK0 ] struct .
 20231 ;; Return value:  Size  Location     Type
 20232 ;;                  1    wreg      void 
 20233 ;; Registers used:
 20234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20235 ;; Tracked objects:
 20236 ;;		On entry : 0/0
 20237 ;;		On exit  : 0/0
 20238 ;;		Unchanged: 0/0
 20239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20240 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20244 ;;Total ram usage:       12 bytes
 20245 ;; Hardware stack levels used:    1
 20246 ;; Hardware stack levels required when called:   12
 20247 ;; This function calls:
 20248 ;;		_AESCmac
 20249 ;;		_AssembleEncryptionBlock
 20250 ;;		_CountfOptsLength
 20251 ;;		_EncryptFRMPayload
 20252 ;;		_FindSmallestDataRate
 20253 ;;		_IncludeMacCommandsResponse
 20254 ;;		_memcpy
 20255 ;;		_memset
 20256 ;; This function is called by:
 20257 ;;		_LORAWAN_Send
 20258 ;; This function uses a non-reentrant model
 20259 ;;
 20260                           
 20261                           	psect	text104
 20262  0000'                    __ptext104:
 20263                           	opt stack 0
 20264  0000'                    _AssemblePacket:
 20265                           	opt stack 17
 20266                           
 20267                           ; BSR set to: 0
 20268                           ;incstack = 0
 20269                           ;AssemblePacket@confirmed stored from wreg
 20270  0000' 0100               	movlb	0	; () banked
 20271  0002' 6F00'              	movwf	AssemblePacket@confirmed& (0+255),b
 20272                           
 20273                           ;lorawan.c: 1674: Mhdr_t mhdr;
 20274                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 20275  0004' 0E10               	movlw	16
 20276  0006' 0100               	movlb	0	; () banked
 20277  0008' 6F00'              	movwf	AssemblePacket@bufferIndex& (0+255),b
 20278                           
 20279                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 20280                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 20281  000A' 0E00               	movlw	0
 20282  000C' 6F00'              	movwf	AssemblePacket@macCmdIdx& (0+255),b
 20283                           
 20284                           ; BSR set to: 0
 20285                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 20286  000E' 0E00'              	movlw	low AssemblePacket@mhdr
 20287  0010' 6F00'              	movwf	memset@p1& (0+255),b
 20288  0012' 0E00'              	movlw	high AssemblePacket@mhdr
 20289  0014' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 20290  0016' 0E00               	movlw	0
 20291  0018' 6F00'              	movwf	(memset@c+1)& (0+255),b
 20292  001A' 0E00               	movlw	0
 20293  001C' 6F00'              	movwf	memset@c& (0+255),b
 20294  001E' 0E00               	movlw	0
 20295  0020' 6F00'              	movwf	(memset@n+1)& (0+255),b
 20296  0022' 0E01               	movlw	1
 20297  0024' 6F00'              	movwf	memset@n& (0+255),b
 20298  0026' EC00' F000'        	call	_memset	;wreg free
 20299                           
 20300                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 20301  002A' 0E00'              	movlw	low _macBuffer
 20302  002C' 0100               	movlb	0	; () banked
 20303  002E' 6F00'              	movwf	memset@p1& (0+255),b
 20304  0030' 0E00'              	movlw	high _macBuffer
 20305  0032' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 20306  0034' 0E00               	movlw	0
 20307  0036' 6F00'              	movwf	(memset@c+1)& (0+255),b
 20308  0038' 0E00               	movlw	0
 20309  003A' 6F00'              	movwf	memset@c& (0+255),b
 20310  003C' 0E01               	movlw	1
 20311  003E' 6F00'              	movwf	(memset@n+1)& (0+255),b
 20312  0040' 0E0F               	movlw	15
 20313  0042' 6F00'              	movwf	memset@n& (0+255),b
 20314  0044' EC00' F000'        	call	_memset	;wreg free
 20315                           
 20316                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 20317  0048' 0E00'              	movlw	low _aesBuffer
 20318  004A' 0100               	movlb	0	; () banked
 20319  004C' 6F00'              	movwf	memset@p1& (0+255),b
 20320  004E' 0E00'              	movlw	high _aesBuffer
 20321  0050' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 20322  0052' 0E00               	movlw	0
 20323  0054' 6F00'              	movwf	(memset@c+1)& (0+255),b
 20324  0056' 0E00               	movlw	0
 20325  0058' 6F00'              	movwf	memset@c& (0+255),b
 20326  005A' 0E00               	movlw	0
 20327  005C' 6F00'              	movwf	(memset@n+1)& (0+255),b
 20328  005E' 0E10               	movlw	16
 20329  0060' 6F00'              	movwf	memset@n& (0+255),b
 20330  0062' EC00' F000'        	call	_memset	;wreg free
 20331                           
 20332                           ;lorawan.c: 1683: if (confirmed == 1)
 20333  0066' 0100               	movlb	0	; () banked
 20334  0068' 0500'              	decf	AssemblePacket@confirmed& (0+255),w,b
 20335  006A' A4D8               	btfss	status,2,c
 20336  006C' D007               	goto	l777
 20337                           
 20338                           ; BSR set to: 0
 20339                           ;lorawan.c: 1684: {
 20340                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 20341  006E' 5100'              	movf	AssemblePacket@mhdr& (0+255),w,b
 20342  0070' 0B1F               	andlw	-225
 20343  0072' 0980               	iorlw	128
 20344  0074' 6F00'              	movwf	AssemblePacket@mhdr& (0+255),b
 20345                           
 20346                           ; BSR set to: 0
 20347                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 20348  0076' 0102               	movlb	2	; () banked
 20349  0078' 8100'              	bsf	_loRa& (0+255),0,b
 20350                           
 20351                           ;lorawan.c: 1687: }
 20352  007A' D005               	goto	l778
 20353  007C'                    l777:
 20354                           
 20355                           ;lorawan.c: 1688: else
 20356                           ;lorawan.c: 1689: {
 20357                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 20358                           
 20359                           ; BSR set to: 2
 20360  007C' 0100               	movlb	0	; () banked
 20361  007E' 5100'              	movf	AssemblePacket@mhdr& (0+255),w,b
 20362  0080' 0B1F               	andlw	-225
 20363  0082' 0940               	iorlw	64
 20364  0084' 6F00'              	movwf	AssemblePacket@mhdr& (0+255),b
 20365  0086'                    l778:
 20366                           
 20367                           ;lorawan.c: 1691: }
 20368                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 20369  0086' 0EFC               	movlw	-4
 20370  0088' 0100               	movlb	0	; () banked
 20371  008A' 1700'              	andwf	AssemblePacket@mhdr& (0+255),f,b
 20372                           
 20373                           ; BSR set to: 0
 20374                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 20375  008C' 9500'              	bcf	AssemblePacket@mhdr& (0+255),2,b
 20376  008E' 9700'              	bcf	AssemblePacket@mhdr& (0+255),3,b
 20377  0090' 9900'              	bcf	AssemblePacket@mhdr& (0+255),4,b
 20378                           
 20379                           ; BSR set to: 0
 20380                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 20381  0092' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20382  0094' 0D01               	mullw	1
 20383  0096' 0E00'              	movlw	low _macBuffer
 20384  0098' 24F3               	addwf	prodl,w,c
 20385  009A' 6ED9               	movwf	fsr2l,c
 20386  009C' 0E00'              	movlw	high _macBuffer
 20387  009E' 20F4               	addwfc	prodh,w,c
 20388  00A0' 6EDA               	movwf	fsr2h,c
 20389  00A2' C06F' FFDF         	movff	AssemblePacket@mhdr,indf2
 20390                           
 20391                           ; BSR set to: 0
 20392  00A6' 2B00'              	incf	AssemblePacket@bufferIndex& (0+255),f,b
 20393                           
 20394                           ; BSR set to: 0
 20395                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 20396  00A8' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20397  00AA' 0D01               	mullw	1
 20398  00AC' 0E00'              	movlw	low _macBuffer
 20399  00AE' 24F3               	addwf	prodl,w,c
 20400  00B0' 6F00'              	movwf	memcpy@d1& (0+255),b
 20401  00B2' 0E00'              	movlw	high _macBuffer
 20402  00B4' 20F4               	addwfc	prodh,w,c
 20403  00B6' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 20404  00B8' 0E00'              	movlw	low (_loRa+30)
 20405  00BA' 6F00'              	movwf	memcpy@s1& (0+255),b
 20406  00BC' 0E00'              	movlw	high (_loRa+30)
 20407  00BE' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 20408  00C0' 0E00               	movlw	0
 20409  00C2' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 20410  00C4' 0E04               	movlw	4
 20411  00C6' 6F00'              	movwf	memcpy@n& (0+255),b
 20412  00C8' EC00' F000'        	call	_memcpy	;wreg free
 20413                           
 20414                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 20415  00CC' 0100               	movlb	0	; () banked
 20416  00CE' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20417  00D0' 0F04               	addlw	4
 20418  00D2' 6F00'              	movwf	AssemblePacket@bufferIndex& (0+255),b
 20419                           
 20420                           ; BSR set to: 0
 20421                           ;lorawan.c: 1699: fCtrl.value = 0;
 20422  00D4' 0E00               	movlw	0
 20423  00D6' 6F00'              	movwf	AssemblePacket@fCtrl& (0+255),b
 20424                           
 20425                           ; BSR set to: 0
 20426                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 20427  00D8' 0102               	movlb	2	; () banked
 20428  00DA' AD00'              	btfss	(_loRa+2)& (0+255),6,b
 20429  00DC' D047               	goto	l787
 20430                           
 20431                           ; BSR set to: 2
 20432                           ;lorawan.c: 1702: {
 20433                           ;lorawan.c: 1703: fCtrl.adr = 1;
 20434  00DE' 0100               	movlb	0	; () banked
 20435  00E0' 8F00'              	bsf	AssemblePacket@fCtrl& (0+255),7,b
 20436                           
 20437                           ; BSR set to: 0
 20438                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 20439  00E2' 0102               	movlb	2	; () banked
 20440  00E4' 5100'              	movf	(_loRa+208)& (0+255),w,b
 20441  00E6' 5D00'              	subwf	(_loRa+220)& (0+255),w,b
 20442  00E8' B0D8               	btfsc	status,0,c
 20443  00EA' D03F               	goto	l780
 20444                           
 20445                           ; BSR set to: 2
 20446                           ;lorawan.c: 1705: {
 20447                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 20448  00EC' 0100               	movlb	0	; () banked
 20449  00EE' 8D00'              	bsf	AssemblePacket@fCtrl& (0+255),6,b
 20450                           
 20451                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 20452  00F0' 0102               	movlb	2	; () banked
 20453  00F2' 8900'              	bsf	_loRa& (0+255),4,b
 20454                           
 20455                           ; BSR set to: 2
 20456                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 20457  00F4' 4B00'              	infsnz	(_loRa+193)& (0+255),f,b
 20458  00F6' 2B00'              	incf	(_loRa+194)& (0+255),f,b
 20459                           
 20460                           ; BSR set to: 2
 20461                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 20462  00F8' 5100'              	movf	(_loRa+148)& (0+255),w,b
 20463  00FA' 0100               	movlb	0	; () banked
 20464  00FC' 6F00'              	movwf	??_AssemblePacket& (0+255),b
 20465  00FE' 6B00'              	clrf	(??_AssemblePacket+1)& (0+255),b
 20466  0100' 0102               	movlb	2	; () banked
 20467  0102' 5100'              	movf	(_loRa+193)& (0+255),w,b
 20468  0104' 0100               	movlb	0	; () banked
 20469  0106' 1900'              	xorwf	??_AssemblePacket& (0+255),w,b
 20470  0108' E10C               	bnz	l9780
 20471  010A' 0102               	movlb	2	; () banked
 20472  010C' 5100'              	movf	(_loRa+194)& (0+255),w,b
 20473  010E' 0100               	movlb	0	; () banked
 20474  0110' 1900'              	xorwf	(??_AssemblePacket+1)& (0+255),w,b
 20475  0112' A4D8               	btfss	status,2,c
 20476  0114' D006               	goto	l781
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;lorawan.c: 1711: {
 20480                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 20481  0116' 0E00               	movlw	0
 20482  0118' 0102               	movlb	2	; () banked
 20483  011A' 6F00'              	movwf	(_loRa+223)& (0+255),b
 20484  011C' D023               	goto	l9792
 20485  011E'                    l9778:
 20486                           
 20487                           ; BSR set to: 0
 20488                           ;lorawan.c: 1714: loRa.lorawanMacStatus.adrAckRequest = 0;
 20489  011E' 0102               	movlb	2	; () banked
 20490  0120' D024               	goto	l780
 20491  0122'                    l781:
 20492  0122'                    l9780:
 20493                           
 20494                           ;lorawan.c: 1716: else
 20495                           ;lorawan.c: 1717: {
 20496                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 20497  0122' 0102               	movlb	2	; () banked
 20498  0124' 5100'              	movf	(_loRa+148)& (0+255),w,b
 20499  0126' 0100               	movlb	0	; () banked
 20500  0128' 6F00'              	movwf	??_AssemblePacket& (0+255),b
 20501  012A' 6B00'              	clrf	(??_AssemblePacket+1)& (0+255),b
 20502  012C' 0102               	movlb	2	; () banked
 20503  012E' 5100'              	movf	(_loRa+193)& (0+255),w,b
 20504  0130' 0100               	movlb	0	; () banked
 20505  0132' 5D00'              	subwf	??_AssemblePacket& (0+255),w,b
 20506  0134' 0102               	movlb	2	; () banked
 20507  0136' 5100'              	movf	(_loRa+194)& (0+255),w,b
 20508  0138' 0100               	movlb	0	; () banked
 20509  013A' 5900'              	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 20510  013C' B0D8               	btfsc	status,0,c
 20511  013E' D013               	goto	l783
 20512                           
 20513                           ; BSR set to: 0
 20514                           ;lorawan.c: 1719: {
 20515                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 20516  0140' 0102               	movlb	2	; () banked
 20517  0142' 2B00'              	incf	(_loRa+223)& (0+255),f,b
 20518                           
 20519                           ; BSR set to: 2
 20520                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 20521  0144' 5100'              	movf	(_loRa+223)& (0+255),w,b
 20522  0146' 5D00'              	subwf	(_loRa+149)& (0+255),w,b
 20523  0148' B0D8               	btfsc	status,0,c
 20524  014A' D010               	goto	l787
 20525                           
 20526                           ; BSR set to: 2
 20527                           ;lorawan.c: 1725: {
 20528                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 20529  014C' 0E00               	movlw	0
 20530  014E' 6F00'              	movwf	(_loRa+223)& (0+255),b
 20531                           
 20532                           ; BSR set to: 2
 20533                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 20534  0150' EC00' F000'        	call	_FindSmallestDataRate	;wreg free
 20535  0154' 0900               	iorlw	0
 20536  0156' A4D8               	btfss	status,2,c
 20537  0158' D009               	goto	l787
 20538                           
 20539                           ;lorawan.c: 1729: {
 20540                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 20541  015A' 0E00               	movlw	0
 20542  015C' 0102               	movlb	2	; () banked
 20543  015E' 6F00'              	movwf	(_loRa+194)& (0+255),b
 20544  0160' 0E00               	movlw	0
 20545  0162' 6F00'              	movwf	(_loRa+193)& (0+255),b
 20546  0164'                    l9792:
 20547                           
 20548                           ; BSR set to: 2
 20549                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 20550  0164' 0100               	movlb	0	; () banked
 20551  0166'                    l783:
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;lorawan.c: 1737: else
 20555                           ;lorawan.c: 1738: {
 20556                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 20557  0166' 9D00'              	bcf	AssemblePacket@fCtrl& (0+255),6,b
 20558  0168' D7DA               	goto	l9778
 20559  016A'                    l780:
 20560                           
 20561                           ; BSR set to: 2
 20562                           ;lorawan.c: 1744: else
 20563                           ;lorawan.c: 1745: {
 20564                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 20565  016A' 9900'              	bcf	_loRa& (0+255),4,b
 20566  016C'                    l787:
 20567                           
 20568                           ;lorawan.c: 1747: }
 20569                           ;lorawan.c: 1748: }
 20570                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 20571                           
 20572                           ; BSR set to: 2
 20573  016C' 0102               	movlb	2	; () banked
 20574  016E' A300'              	btfss	_loRa& (0+255),1,b
 20575  0170' D004               	goto	l788
 20576                           
 20577                           ; BSR set to: 2
 20578                           ;lorawan.c: 1751: {
 20579                           ;lorawan.c: 1752: fCtrl.ack = 1;
 20580  0172' 0100               	movlb	0	; () banked
 20581  0174' 8B00'              	bsf	AssemblePacket@fCtrl& (0+255),5,b
 20582                           
 20583                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 20584  0176' 0102               	movlb	2	; () banked
 20585  0178' 9300'              	bcf	_loRa& (0+255),1,b
 20586  017A'                    l788:
 20587                           
 20588                           ; BSR set to: 2
 20589                           ;lorawan.c: 1754: }
 20590                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 20591  017A' 0100               	movlb	0	; () banked
 20592  017C' 9900'              	bcf	AssemblePacket@fCtrl& (0+255),4,b
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 20596  017E' 0102               	movlb	2	; () banked
 20597  0180' 5100'              	movf	(_loRa+152)& (0+255),w,b
 20598  0182' B4D8               	btfsc	status,2,c
 20599  0184' D005               	goto	u9400
 20600                           
 20601                           ; BSR set to: 2
 20602  0186' 0100               	movlb	0	; () banked
 20603  0188' 5100'              	movf	AssemblePacket@bufferLength& (0+255),w,b
 20604  018A' 1100'              	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 20605  018C' A4D8               	btfss	status,2,c
 20606  018E' D006               	goto	l789
 20607  0190'                    u9400:
 20608                           
 20609                           ;lorawan.c: 1759: {
 20610                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 20611  0190' 0100               	movlb	0	; () banked
 20612  0192' 9100'              	bcf	AssemblePacket@fCtrl& (0+255),0,b
 20613  0194' 9300'              	bcf	AssemblePacket@fCtrl& (0+255),1,b
 20614  0196' 9500'              	bcf	AssemblePacket@fCtrl& (0+255),2,b
 20615  0198' 9700'              	bcf	AssemblePacket@fCtrl& (0+255),3,b
 20616                           
 20617                           ;lorawan.c: 1761: }
 20618  019A' D009               	goto	l792
 20619  019C'                    l789:
 20620                           
 20621                           ; BSR set to: 0
 20622                           ;lorawan.c: 1763: else
 20623                           ;lorawan.c: 1764: {
 20624                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 20625                           
 20626                           ; BSR set to: 0
 20627  019C' EC00' F000'        	call	_CountfOptsLength	;wreg free
 20628  01A0' 0100               	movlb	0	; () banked
 20629  01A2' 6F00'              	movwf	??_AssemblePacket& (0+255),b
 20630  01A4' 5100'              	movf	AssemblePacket@fCtrl& (0+255),w,b
 20631  01A6' 1900'              	xorwf	??_AssemblePacket& (0+255),w,b
 20632  01A8' 0BF0               	andlw	-16
 20633  01AA' 1900'              	xorwf	??_AssemblePacket& (0+255),w,b
 20634  01AC' 6F00'              	movwf	AssemblePacket@fCtrl& (0+255),b
 20635  01AE'                    l792:
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;lorawan.c: 1766: }
 20639                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 20640                           
 20641                           ; BSR set to: 0
 20642  01AE' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20643  01B0' 0D01               	mullw	1
 20644  01B2' 0E00'              	movlw	low _macBuffer
 20645  01B4' 24F3               	addwf	prodl,w,c
 20646  01B6' 6ED9               	movwf	fsr2l,c
 20647  01B8' 0E00'              	movlw	high _macBuffer
 20648  01BA' 20F4               	addwfc	prodh,w,c
 20649  01BC' 6EDA               	movwf	fsr2h,c
 20650  01BE' C070' FFDF         	movff	AssemblePacket@fCtrl,indf2
 20651                           
 20652                           ; BSR set to: 0
 20653  01C2' 2B00'              	incf	AssemblePacket@bufferIndex& (0+255),f,b
 20654                           
 20655                           ; BSR set to: 0
 20656                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 20657  01C4' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20658  01C6' 0D01               	mullw	1
 20659  01C8' 0E00'              	movlw	low _macBuffer
 20660  01CA' 24F3               	addwf	prodl,w,c
 20661  01CC' 6F00'              	movwf	memcpy@d1& (0+255),b
 20662  01CE' 0E00'              	movlw	high _macBuffer
 20663  01D0' 20F4               	addwfc	prodh,w,c
 20664  01D2' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 20665  01D4' 0E00'              	movlw	low (_loRa+6)
 20666  01D6' 6F00'              	movwf	memcpy@s1& (0+255),b
 20667  01D8' 0E00'              	movlw	high (_loRa+6)
 20668  01DA' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 20669  01DC' 0E00               	movlw	0
 20670  01DE' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 20671  01E0' 0E02               	movlw	2
 20672  01E2' 6F00'              	movwf	memcpy@n& (0+255),b
 20673  01E4' EC00' F000'        	call	_memcpy	;wreg free
 20674                           
 20675                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 20676  01E8' 0100               	movlb	0	; () banked
 20677  01EA' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20678  01EC' 0F02               	addlw	2
 20679  01EE' 6F00'              	movwf	AssemblePacket@bufferIndex& (0+255),b
 20680                           
 20681                           ; BSR set to: 0
 20682                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 20683  01F0' 0102               	movlb	2	; () banked
 20684  01F2' 5100'              	movf	(_loRa+152)& (0+255),w,b
 20685  01F4' B4D8               	btfsc	status,2,c
 20686  01F6' D011               	goto	l793
 20687                           
 20688                           ; BSR set to: 2
 20689  01F8' 0100               	movlb	0	; () banked
 20690  01FA' 5100'              	movf	AssemblePacket@bufferLength& (0+255),w,b
 20691  01FC' 1100'              	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 20692  01FE' B4D8               	btfsc	status,2,c
 20693  0200' D00C               	goto	l793
 20694                           
 20695                           ; BSR set to: 0
 20696                           ;lorawan.c: 1774: {
 20697                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 20698  0202' 0E00'              	movlw	low _macBuffer
 20699  0204' 6F00'              	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 20700  0206' 0E00'              	movlw	high _macBuffer
 20701  0208' 6F00'              	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 20702  020A' 0E00'              	movlw	low AssemblePacket@bufferIndex
 20703  020C' 6F00'              	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 20704  020E' 0E00'              	movlw	high AssemblePacket@bufferIndex
 20705  0210' 6F00'              	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 20706  0212' 0E01               	movlw	1
 20707  0214' 6F00'              	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 20708  0216' EC00' F000'        	call	_IncludeMacCommandsResponse	;wreg free
 20709  021A'                    l793:
 20710                           
 20711                           ;lorawan.c: 1776: }
 20712                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 20713  021A' 0100               	movlb	0	; () banked
 20714  021C' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20715  021E' 0D01               	mullw	1
 20716  0220' 0E00'              	movlw	low _macBuffer
 20717  0222' 24F3               	addwf	prodl,w,c
 20718  0224' 6ED9               	movwf	fsr2l,c
 20719  0226' 0E00'              	movlw	high _macBuffer
 20720  0228' 20F4               	addwfc	prodh,w,c
 20721  022A' 6EDA               	movwf	fsr2h,c
 20722  022C' C067' FFDF         	movff	AssemblePacket@port,indf2
 20723                           
 20724                           ; BSR set to: 0
 20725  0230' 2B00'              	incf	AssemblePacket@bufferIndex& (0+255),f,b
 20726                           
 20727                           ; BSR set to: 0
 20728                           ;lorawan.c: 1780: if (bufferLength != 0)
 20729  0232' 5100'              	movf	AssemblePacket@bufferLength& (0+255),w,b
 20730  0234' 1100'              	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 20731  0236' B4D8               	btfsc	status,2,c
 20732  0238' D035               	goto	l794
 20733                           
 20734                           ; BSR set to: 0
 20735                           ;lorawan.c: 1781: {
 20736                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 20737  023A' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20738  023C' 0D01               	mullw	1
 20739  023E' 0E00'              	movlw	low _macBuffer
 20740  0240' 24F3               	addwf	prodl,w,c
 20741  0242' 6F00'              	movwf	memcpy@d1& (0+255),b
 20742  0244' 0E00'              	movlw	high _macBuffer
 20743  0246' 20F4               	addwfc	prodh,w,c
 20744  0248' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 20745  024A' C068' F002'        	movff	AssemblePacket@buffer,memcpy@s1
 20746  024E' C069' F003'        	movff	AssemblePacket@buffer+1,memcpy@s1+1
 20747  0252' C06A' F004'        	movff	AssemblePacket@bufferLength,memcpy@n
 20748  0256' C06B' F005'        	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 20749  025A' EC00' F000'        	call	_memcpy	;wreg free
 20750                           
 20751                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 20752  025E' C068' F031'        	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 20753  0262' C069' F032'        	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 20754  0266' C06A' F033'        	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 20755  026A' 0E00               	movlw	0
 20756  026C' 0100               	movlb	0	; () banked
 20757  026E' 6F00'              	movwf	EncryptFRMPayload@dir& (0+255),b
 20758  0270' C006' F035'        	movff	_loRa+6,EncryptFRMPayload@frameCounter
 20759  0274' C007' F036'        	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 20760  0278' C008' F037'        	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 20761  027C' C009' F038'        	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 20762  0280' 0E00'              	movlw	low (_loRa+50)
 20763  0282' 6F00'              	movwf	EncryptFRMPayload@key& (0+255),b
 20764  0284' 0E00'              	movlw	high (_loRa+50)
 20765  0286' 6F00'              	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 20766  0288' C072' F03B'        	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 20767  028C' 0E00'              	movlw	low _macBuffer
 20768  028E' 6F00'              	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 20769  0290' 0E00'              	movlw	high _macBuffer
 20770  0292' 6F00'              	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 20771  0294' 0E00               	movlw	0
 20772  0296' 6F00'              	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 20773  0298' EC00' F000'        	call	_EncryptFRMPayload	;wreg free
 20774                           
 20775                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 20776  029C' 0100               	movlb	0	; () banked
 20777  029E' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20778  02A0' 2500'              	addwf	AssemblePacket@bufferLength& (0+255),w,b
 20779  02A2' D033               	goto	L12
 20780  02A4'                    l794:
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 20784                           
 20785                           ; BSR set to: 0
 20786  02A4' 0102               	movlb	2	; () banked
 20787  02A6' 5100'              	movf	(_loRa+152)& (0+255),w,b
 20788  02A8' B4D8               	btfsc	status,2,c
 20789  02AA' D030               	goto	l796
 20790                           
 20791                           ; BSR set to: 2
 20792                           ;lorawan.c: 1787: {
 20793                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 20794  02AC' 0E00'              	movlw	low _radioBuffer
 20795  02AE' 0100               	movlb	0	; () banked
 20796  02B0' 6F00'              	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 20797  02B2' 0E00'              	movlw	high _radioBuffer
 20798  02B4' 6F00'              	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 20799  02B6' 0E00'              	movlw	low AssemblePacket@macCmdIdx
 20800  02B8' 6F00'              	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 20801  02BA' 0E00'              	movlw	high AssemblePacket@macCmdIdx
 20802  02BC' 6F00'              	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 20803  02BE' 0E00               	movlw	0
 20804  02C0' 6F00'              	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 20805  02C2' EC00' F000'        	call	_IncludeMacCommandsResponse	;wreg free
 20806                           
 20807                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 20808  02C6' 0E00'              	movlw	low _radioBuffer
 20809  02C8' 0100               	movlb	0	; () banked
 20810  02CA' 6F00'              	movwf	EncryptFRMPayload@buffer& (0+255),b
 20811  02CC' 0E00'              	movlw	high _radioBuffer
 20812  02CE' 6F00'              	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 20813  02D0' C071' F033'        	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 20814  02D4' 0E00               	movlw	0
 20815  02D6' 6F00'              	movwf	EncryptFRMPayload@dir& (0+255),b
 20816  02D8' C006' F035'        	movff	_loRa+6,EncryptFRMPayload@frameCounter
 20817  02DC' C007' F036'        	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 20818  02E0' C008' F037'        	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 20819  02E4' C009' F038'        	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 20820  02E8' 0E00'              	movlw	low (_loRa+34)
 20821  02EA' 6F00'              	movwf	EncryptFRMPayload@key& (0+255),b
 20822  02EC' 0E00'              	movlw	high (_loRa+34)
 20823  02EE' 6F00'              	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 20824  02F0' C072' F03B'        	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 20825  02F4' 0E00'              	movlw	low _macBuffer
 20826  02F6' 6F00'              	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 20827  02F8' 0E00'              	movlw	high _macBuffer
 20828  02FA' 6F00'              	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 20829  02FC' 0E00               	movlw	0
 20830  02FE' 6F00'              	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 20831  0300' EC00' F000'        	call	_EncryptFRMPayload	;wreg free
 20832                           
 20833                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 20834  0304' 0100               	movlb	0	; () banked
 20835  0306' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20836  0308' 2500'              	addwf	AssemblePacket@macCmdIdx& (0+255),w,b
 20837  030A'                    L12:
 20838  030A' 6F00'              	movwf	AssemblePacket@bufferIndex& (0+255),b
 20839  030C'                    l796:
 20840                           
 20841                           ;lorawan.c: 1793: }
 20842                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 20843                           
 20844                           ; BSR set to: 0
 20845                           
 20846                           ; BSR set to: 0
 20847  030C' C006' F00B'        	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 20848  0310' C007' F00C'        	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 20849  0314' C008' F00D'        	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 20850  0318' C009' F00E'        	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 20851  031C' 0100               	movlb	0	; () banked
 20852  031E' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20853  0320' 0FF0               	addlw	240
 20854  0322' 6F00'              	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 20855  0324' 0E49               	movlw	73
 20856  0326' 6F00'              	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 20857  0328' 0E00               	movlw	0
 20858  032A' 6F00'              	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 20859  032C' 0E00               	movlw	0
 20860  032E' EC00' F000'        	call	_AssembleEncryptionBlock
 20861                           
 20862                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 20863  0332' 0E00'              	movlw	low _macBuffer
 20864  0334' 0100               	movlb	0	; () banked
 20865  0336' 6F00'              	movwf	memcpy@d1& (0+255),b
 20866  0338' 0E00'              	movlw	high _macBuffer
 20867  033A' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 20868  033C' 0E00'              	movlw	low _aesBuffer
 20869  033E' 6F00'              	movwf	memcpy@s1& (0+255),b
 20870  0340' 0E00'              	movlw	high _aesBuffer
 20871  0342' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 20872  0344' 0E00               	movlw	0
 20873  0346' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 20874  0348' 0E10               	movlw	16
 20875  034A' 6F00'              	movwf	memcpy@n& (0+255),b
 20876  034C' EC00' F000'        	call	_memcpy	;wreg free
 20877                           
 20878                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 20879  0350' 0E00'              	movlw	low (_loRa+34)
 20880  0352' 0100               	movlb	0	; () banked
 20881  0354' 6F00'              	movwf	AESCmac@key& (0+255),b
 20882  0356' 0E00'              	movlw	high (_loRa+34)
 20883  0358' 6F00'              	movwf	(AESCmac@key+1)& (0+255),b
 20884  035A' 0E00'              	movlw	low _aesBuffer
 20885  035C' 6F00'              	movwf	AESCmac@output& (0+255),b
 20886  035E' 0E00'              	movlw	high _aesBuffer
 20887  0360' 6F00'              	movwf	(AESCmac@output+1)& (0+255),b
 20888  0362' 0E00'              	movlw	low _macBuffer
 20889  0364' 6F00'              	movwf	AESCmac@input& (0+255),b
 20890  0366' 0E00'              	movlw	high _macBuffer
 20891  0368' 6F00'              	movwf	(AESCmac@input+1)& (0+255),b
 20892  036A' C072' F05F'        	movff	AssemblePacket@bufferIndex,AESCmac@size
 20893  036E' EC00' F000'        	call	_AESCmac	;wreg free
 20894                           
 20895                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 20896  0372' 0100               	movlb	0	; () banked
 20897  0374' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20898  0376' 0D01               	mullw	1
 20899  0378' 0E00'              	movlw	low _macBuffer
 20900  037A' 24F3               	addwf	prodl,w,c
 20901  037C' 6F00'              	movwf	memcpy@d1& (0+255),b
 20902  037E' 0E00'              	movlw	high _macBuffer
 20903  0380' 20F4               	addwfc	prodh,w,c
 20904  0382' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 20905  0384' 0E00'              	movlw	low _aesBuffer
 20906  0386' 6F00'              	movwf	memcpy@s1& (0+255),b
 20907  0388' 0E00'              	movlw	high _aesBuffer
 20908  038A' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 20909  038C' 0E00               	movlw	0
 20910  038E' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 20911  0390' 0E04               	movlw	4
 20912  0392' 6F00'              	movwf	memcpy@n& (0+255),b
 20913  0394' EC00' F000'        	call	_memcpy	;wreg free
 20914                           
 20915                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 20916  0398' 0100               	movlb	0	; () banked
 20917  039A' 5100'              	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20918  039C' 0F04               	addlw	4
 20919  039E' 6F00'              	movwf	AssemblePacket@bufferIndex& (0+255),b
 20920                           
 20921                           ; BSR set to: 0
 20922                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 20923  03A0' 0EF0               	movlw	240
 20924  03A2' 2500'              	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 20925  03A4' 0102               	movlb	2	; () banked
 20926  03A6' 6F00'              	movwf	(_loRa+197)& (0+255),b
 20927  03A8' 6B00'              	clrf	(_loRa+198)& (0+255),b
 20928  03AA' 0EFF               	movlw	255
 20929  03AC' 2300'              	addwfc	(_loRa+198)& (0+255),f,b
 20930                           
 20931                           ; BSR set to: 2
 20932  03AE' 0012               	return		;funcret
 20933  03B0'                    __end_of_AssemblePacket:
 20934                           	opt stack 0
 20935                           tosu	equ	0xFFF
 20936                           tosh	equ	0xFFE
 20937                           tosl	equ	0xFFD
 20938                           pclath	equ	0xFFA
 20939                           tblptru	equ	0xFF8
 20940                           tblptrh	equ	0xFF7
 20941                           tblptrl	equ	0xFF6
 20942                           tablat	equ	0xFF5
 20943                           prodh	equ	0xFF4
 20944                           prodl	equ	0xFF3
 20945                           intcon	equ	0xFF2
 20946                           intcon2	equ	0xFF1
 20947                           intcon3	equ	0xFF0
 20948                           indf0	equ	0xFEF
 20949                           postinc0	equ	0xFEE
 20950                           fsr0h	equ	0xFEA
 20951                           fsr0l	equ	0xFE9
 20952                           wreg	equ	0xFE8
 20953                           postinc1	equ	0xFE6
 20954                           postdec1	equ	0xFE5
 20955                           plusw1	equ	0xFE3
 20956                           fsr1h	equ	0xFE2
 20957                           fsr1l	equ	0xFE1
 20958                           indf2	equ	0xFDF
 20959                           postinc2	equ	0xFDE
 20960                           postdec2	equ	0xFDD
 20961                           fsr2h	equ	0xFDA
 20962                           fsr2l	equ	0xFD9
 20963                           status	equ	0xFD8
 20964                           
 20965 ;; *************** function _IncludeMacCommandsResponse *****************
 20966 ;; Defined at:
 20967 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20968 ;; Parameters:    Size  Location     Type
 20969 ;;  macBuffer       2    0[BANK0 ] PTR unsigned char 
 20970 ;;		 -> radioBuffer(271), macBuffer(271), 
 20971 ;;  pBufferIndex    2    2[BANK0 ] PTR unsigned char 
 20972 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 20973 ;;  bIncludeInFo    1    4[BANK0 ] unsigned char 
 20974 ;; Auto vars:     Size  Location     Type
 20975 ;;  bufferIndex     1   14[BANK0 ] unsigned char 
 20976 ;;  i               1   13[BANK0 ] unsigned char 
 20977 ;; Return value:  Size  Location     Type
 20978 ;;                  1    wreg      void 
 20979 ;; Registers used:
 20980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20981 ;; Tracked objects:
 20982 ;;		On entry : 0/0
 20983 ;;		On exit  : 0/0
 20984 ;;		Unchanged: 0/0
 20985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20986 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;Total ram usage:       15 bytes
 20991 ;; Hardware stack levels used:    1
 20992 ;; Hardware stack levels required when called:    8
 20993 ;; This function calls:
 20994 ;;		_RADIO_GetPacketSnr
 20995 ;; This function is called by:
 20996 ;;		_AssemblePacket
 20997 ;; This function uses a non-reentrant model
 20998 ;;
 20999                           
 21000                           	psect	text105
 21001  0000'                    __ptext105:
 21002                           	opt stack 0
 21003  0000'                    _IncludeMacCommandsResponse:
 21004                           	opt stack 20
 21005                           
 21006                           ;lorawan.c: 1847: uint8_t i = 0;
 21007                           
 21008                           ; BSR set to: 2
 21009                           ;incstack = 0
 21010  0000' 0E00               	movlw	0
 21011  0002' 0100               	movlb	0	; () banked
 21012  0004' 6F00'              	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21013                           
 21014                           ; BSR set to: 0
 21015                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 21016  0006' C002' FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21017  000A' C003' FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21018  000E' 50DF               	movf	indf2,w,c
 21019  0010' 6F00'              	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 21023  0012' 0E00               	movlw	0
 21024  0014' 6F00'              	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21025  0016' D218               	goto	l807
 21026  0018'                    
 21027                           ; BSR set to: 0
 21028                           ;lorawan.c: 1851: {
 21029                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 21030                           
 21031                           ; BSR set to: 0
 21032  0018' 5100'              	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 21033  001A' B4D8               	btfsc	status,2,c
 21034  001C' D1F6               	goto	l812
 21035                           
 21036                           ; BSR set to: 0
 21037  001E' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21038  0020' 0D02               	mullw	2
 21039  0022' 0E00'              	movlw	low (_loRa+153)
 21040  0024' 24F3               	addwf	prodl,w,c
 21041  0026' 6ED9               	movwf	fsr2l,c
 21042  0028' 0E00'              	movlw	high (_loRa+153)
 21043  002A' 20F4               	addwfc	prodh,w,c
 21044  002C' 6EDA               	movwf	fsr2h,c
 21045  002E' 28DE               	incf	postinc2,w,c
 21046  0030' B4D8               	btfsc	status,2,c
 21047  0032' D1EB               	goto	l812
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;lorawan.c: 1853: {
 21051                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 21052  0034' C002' FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21053  0038' C003' FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21054  003C' 50DF               	movf	indf2,w,c
 21055  003E' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21056  0040' 6B00'              	clrf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21057  0042' 1F00'              	comf	??_IncludeMacCommandsResponse& (0+255),f,b
 21058  0044' 1F00'              	comf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21059  0046' 4B00'              	infsnz	??_IncludeMacCommandsResponse& (0+255),f,b
 21060  0048' 2B00'              	incf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21061  004A' 0EFE               	movlw	254
 21062  004C' 6F00'              	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 21063  004E' 0EFF               	movlw	255
 21064  0050' 6F00'              	movwf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 21065  0052' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21066  0054' 0D02               	mullw	2
 21067  0056' 0E00'              	movlw	low (_loRa+153)
 21068  0058' 24F3               	addwf	prodl,w,c
 21069  005A' 6ED9               	movwf	fsr2l,c
 21070  005C' 0E00'              	movlw	high (_loRa+153)
 21071  005E' 20F4               	addwfc	prodh,w,c
 21072  0060' 6EDA               	movwf	fsr2h,c
 21073  0062' 50DF               	movf	indf2,w,c
 21074  0064' 6F00'              	movwf	(??_IncludeMacCommandsResponse+4)& (0+255),b
 21075  0066' 6B00'              	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 21076  0068' 5100'              	movf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 21077  006A' 2700'              	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 21078  006C' 5100'              	movf	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 21079  006E' 2300'              	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 21080  0070' 0E00'              	movlw	low _macEndDevCmdReplyLen
 21081  0072' 2500'              	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 21082  0074' 6EF6               	movwf	tblptrl,c
 21083  0076' 0E00'              	movlw	high _macEndDevCmdReplyLen
 21084  0078' 2100'              	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 21085  007A' 6EF7               	movwf	tblptrh,c
 21086  007C'                    	if	1	;There are 3 active tblptr bytes
 21087  007C' 6AF8               	clrf	tblptru,c
 21088  007E' 0E00'              	movlw	low (__mediumconst shr (0+16))
 21089  0080' 22F8               	addwfc	tblptru,f,c
 21090  0082'                    	endif
 21091  0082' 0008               	tblrd		*
 21092  0084' 50F5               	movf	tablat,w,c
 21093  0086' C00E' F00B'        	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+6
 21094  008A' 6B00'              	clrf	(??_IncludeMacCommandsResponse+7)& (0+255),b
 21095  008C' 2700'              	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21096  008E' 0E00               	movlw	0
 21097  0090' 2300'              	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21098  0092' 5100'              	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 21099  0094' 2700'              	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21100  0096' 5100'              	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21101  0098' 2300'              	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21102  009A' BF00'              	btfsc	(??_IncludeMacCommandsResponse+7)& (0+255),7,b
 21103  009C' D1B6               	goto	l812
 21104  009E' 5100'              	movf	(??_IncludeMacCommandsResponse+7)& (0+255),w,b
 21105  00A0' E105               	bnz	u8840
 21106  00A2' 0E10               	movlw	16
 21107  00A4' 5D00'              	subwf	(??_IncludeMacCommandsResponse+6)& (0+255),w,b
 21108  00A6' B0D8               	btfsc	status,0,c
 21109  00A8' D1D5               	goto	u8950
 21110  00AA' D1AF               	goto	l812
 21111  00AC'                    u8840:
 21112                           
 21113                           ; BSR set to: 0
 21114                           ;lorawan.c: 1855: {
 21115                           ;lorawan.c: 1856: break;
 21116  00AC' D1D3               	goto	u8950
 21117  00AE'                    
 21118                           ; BSR set to: 0
 21119                           ;lorawan.c: 1862: {
 21120                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 21121                           
 21122                           ; BSR set to: 0
 21123  00AE' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21124  00B0' 0D01               	mullw	1
 21125  00B2' 50F3               	movf	prodl,w,c
 21126  00B4' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21127  00B6' 6ED9               	movwf	fsr2l,c
 21128  00B8' 50F4               	movf	prodh,w,c
 21129  00BA' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21130  00BC' 6EDA               	movwf	fsr2h,c
 21131  00BE' 0E03               	movlw	3
 21132  00C0' 6EDF               	movwf	indf2,c
 21133                           
 21134                           ; BSR set to: 0
 21135  00C2' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21136                           
 21137                           ; BSR set to: 0
 21138                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 21139  00C4' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21140  00C6' 0D01               	mullw	1
 21141  00C8' 50F3               	movf	prodl,w,c
 21142  00CA' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21143  00CC' 6ED9               	movwf	fsr2l,c
 21144  00CE' 50F4               	movf	prodh,w,c
 21145  00D0' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21146  00D2' 6EDA               	movwf	fsr2h,c
 21147  00D4' 0E00               	movlw	0
 21148  00D6' 6EDF               	movwf	indf2,c
 21149                           
 21150                           ; BSR set to: 0
 21151                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 21152  00D8' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21153  00DA' 0D02               	mullw	2
 21154  00DC' 0E00'              	movlw	low _loRa
 21155  00DE' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21156  00E0' 0E00'              	movlw	high _loRa
 21157  00E2' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21158  00E4' 0E99               	movlw	153
 21159  00E6' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21160  00E8' 0E00               	movlw	0
 21161  00EA' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21162  00EC' 50F3               	movf	prodl,w,c
 21163  00EE' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21164  00F0' 50F4               	movf	prodh,w,c
 21165  00F2' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21166  00F4' 0E01               	movlw	1
 21167  00F6' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21168  00F8' 6ED9               	movwf	fsr2l,c
 21169  00FA' 0E00               	movlw	0
 21170  00FC' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21171  00FE' 6EDA               	movwf	fsr2h,c
 21172  0100' 0102               	movlb	2	; () banked
 21173  0102' A0DF               	btfss	indf2,0,c
 21174  0104' D00B               	goto	l814
 21175                           
 21176                           ; BSR set to: 2
 21177                           ;lorawan.c: 1866: {
 21178                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 21179  0106' 0100               	movlb	0	; () banked
 21180  0108' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21181  010A' 0D01               	mullw	1
 21182  010C' 50F3               	movf	prodl,w,c
 21183  010E' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21184  0110' 6ED9               	movwf	fsr2l,c
 21185  0112' 50F4               	movf	prodh,w,c
 21186  0114' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21187  0116' 6EDA               	movwf	fsr2h,c
 21188  0118' 0E00               	movlw	0
 21189  011A' 80DB               	bsf	plusw2,0,c
 21190  011C'                    l814:
 21191                           
 21192                           ;lorawan.c: 1868: }
 21193                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 21194  011C' 0100               	movlb	0	; () banked
 21195  011E' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21196  0120' 0D02               	mullw	2
 21197  0122' 0E00'              	movlw	low _loRa
 21198  0124' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21199  0126' 0E00'              	movlw	high _loRa
 21200  0128' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21201  012A' 0E99               	movlw	153
 21202  012C' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21203  012E' 0E00               	movlw	0
 21204  0130' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21205  0132' 50F3               	movf	prodl,w,c
 21206  0134' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21207  0136' 50F4               	movf	prodh,w,c
 21208  0138' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21209  013A' 0E01               	movlw	1
 21210  013C' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21211  013E' 6ED9               	movwf	fsr2l,c
 21212  0140' 0E00               	movlw	0
 21213  0142' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21214  0144' 6EDA               	movwf	fsr2h,c
 21215  0146' 0102               	movlb	2	; () banked
 21216  0148' A2DF               	btfss	indf2,1,c
 21217  014A' D00B               	goto	l815
 21218                           
 21219                           ; BSR set to: 2
 21220                           ;lorawan.c: 1871: {
 21221                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 21222  014C' 0100               	movlb	0	; () banked
 21223  014E' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21224  0150' 0D01               	mullw	1
 21225  0152' 50F3               	movf	prodl,w,c
 21226  0154' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21227  0156' 6ED9               	movwf	fsr2l,c
 21228  0158' 50F4               	movf	prodh,w,c
 21229  015A' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21230  015C' 6EDA               	movwf	fsr2h,c
 21231  015E' 0E00               	movlw	0
 21232  0160' 82DB               	bsf	plusw2,1,c
 21233  0162'                    l815:
 21234                           
 21235                           ;lorawan.c: 1873: }
 21236                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 21237  0162' 0100               	movlb	0	; () banked
 21238  0164' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21239  0166' 0D02               	mullw	2
 21240  0168' 0E00'              	movlw	low _loRa
 21241  016A' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21242  016C' 0E00'              	movlw	high _loRa
 21243  016E' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21244  0170' 0E99               	movlw	153
 21245  0172' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21246  0174' 0E00               	movlw	0
 21247  0176' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21248  0178' 50F3               	movf	prodl,w,c
 21249  017A' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21250  017C' 50F4               	movf	prodh,w,c
 21251  017E' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21252  0180' 0E01               	movlw	1
 21253  0182' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21254  0184' 6ED9               	movwf	fsr2l,c
 21255  0186' 0E00               	movlw	0
 21256  0188' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21257  018A' 6EDA               	movwf	fsr2h,c
 21258  018C' 0102               	movlb	2	; () banked
 21259  018E' A4DF               	btfss	indf2,2,c
 21260  0190' D089               	goto	l821
 21261                           
 21262                           ; BSR set to: 2
 21263                           ;lorawan.c: 1876: {
 21264                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 21265  0192' 0100               	movlb	0	; () banked
 21266  0194' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21267  0196' 0D01               	mullw	1
 21268  0198' 50F3               	movf	prodl,w,c
 21269  019A' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21270  019C' 6ED9               	movwf	fsr2l,c
 21271  019E' 50F4               	movf	prodh,w,c
 21272  01A0' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21273  01A2' 6EDA               	movwf	fsr2h,c
 21274  01A4' 0E00               	movlw	0
 21275  01A6' 84DB               	bsf	plusw2,2,c
 21276                           
 21277                           ; BSR set to: 0
 21278  01A8' D07D               	goto	l821
 21279  01AA'                    
 21280                           ; BSR set to: 0
 21281                           ;lorawan.c: 1884: {
 21282                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 21283                           
 21284                           ; BSR set to: 0
 21285  01AA' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21286  01AC' 0D01               	mullw	1
 21287  01AE' 50F3               	movf	prodl,w,c
 21288  01B0' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21289  01B2' 6ED9               	movwf	fsr2l,c
 21290  01B4' 50F4               	movf	prodh,w,c
 21291  01B6' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21292  01B8' 6EDA               	movwf	fsr2h,c
 21293  01BA' 0E05               	movlw	5
 21294  01BC' 6EDF               	movwf	indf2,c
 21295                           
 21296                           ; BSR set to: 0
 21297  01BE' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21298                           
 21299                           ; BSR set to: 0
 21300                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 21301  01C0' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21302  01C2' 0D01               	mullw	1
 21303  01C4' 50F3               	movf	prodl,w,c
 21304  01C6' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21305  01C8' 6ED9               	movwf	fsr2l,c
 21306  01CA' 50F4               	movf	prodh,w,c
 21307  01CC' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21308  01CE' 6EDA               	movwf	fsr2h,c
 21309  01D0' 0E00               	movlw	0
 21310  01D2' 6EDF               	movwf	indf2,c
 21311                           
 21312                           ; BSR set to: 0
 21313                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 21314  01D4' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21315  01D6' 0D02               	mullw	2
 21316  01D8' 0E00'              	movlw	low _loRa
 21317  01DA' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21318  01DC' 0E00'              	movlw	high _loRa
 21319  01DE' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21320  01E0' 0E99               	movlw	153
 21321  01E2' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21322  01E4' 0E00               	movlw	0
 21323  01E6' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21324  01E8' 50F3               	movf	prodl,w,c
 21325  01EA' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21326  01EC' 50F4               	movf	prodh,w,c
 21327  01EE' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21328  01F0' 0E01               	movlw	1
 21329  01F2' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21330  01F4' 6ED9               	movwf	fsr2l,c
 21331  01F6' 0E00               	movlw	0
 21332  01F8' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21333  01FA' 6EDA               	movwf	fsr2h,c
 21334  01FC' 0102               	movlb	2	; () banked
 21335  01FE' A6DF               	btfss	indf2,3,c
 21336  0200' D00B               	goto	l819
 21337                           
 21338                           ; BSR set to: 2
 21339                           ;lorawan.c: 1888: {
 21340                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 21341  0202' 0100               	movlb	0	; () banked
 21342  0204' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21343  0206' 0D01               	mullw	1
 21344  0208' 50F3               	movf	prodl,w,c
 21345  020A' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21346  020C' 6ED9               	movwf	fsr2l,c
 21347  020E' 50F4               	movf	prodh,w,c
 21348  0210' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21349  0212' 6EDA               	movwf	fsr2h,c
 21350  0214' 0E00               	movlw	0
 21351  0216' 80DB               	bsf	plusw2,0,c
 21352  0218'                    l819:
 21353                           
 21354                           ;lorawan.c: 1890: }
 21355                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 21356  0218' 0100               	movlb	0	; () banked
 21357  021A' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21358  021C' 0D02               	mullw	2
 21359  021E' 0E00'              	movlw	low _loRa
 21360  0220' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21361  0222' 0E00'              	movlw	high _loRa
 21362  0224' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21363  0226' 0E99               	movlw	153
 21364  0228' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21365  022A' 0E00               	movlw	0
 21366  022C' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21367  022E' 50F3               	movf	prodl,w,c
 21368  0230' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21369  0232' 50F4               	movf	prodh,w,c
 21370  0234' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21371  0236' 0E01               	movlw	1
 21372  0238' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21373  023A' 6ED9               	movwf	fsr2l,c
 21374  023C' 0E00               	movlw	0
 21375  023E' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21376  0240' 6EDA               	movwf	fsr2h,c
 21377  0242' 0102               	movlb	2	; () banked
 21378  0244' A8DF               	btfss	indf2,4,c
 21379  0246' D00B               	goto	l820
 21380                           
 21381                           ; BSR set to: 2
 21382                           ;lorawan.c: 1893: {
 21383                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 21384  0248' 0100               	movlb	0	; () banked
 21385  024A' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21386  024C' 0D01               	mullw	1
 21387  024E' 50F3               	movf	prodl,w,c
 21388  0250' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21389  0252' 6ED9               	movwf	fsr2l,c
 21390  0254' 50F4               	movf	prodh,w,c
 21391  0256' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21392  0258' 6EDA               	movwf	fsr2h,c
 21393  025A' 0E00               	movlw	0
 21394  025C' 82DB               	bsf	plusw2,1,c
 21395  025E'                    l820:
 21396                           
 21397                           ;lorawan.c: 1895: }
 21398                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 21399  025E' 0100               	movlb	0	; () banked
 21400  0260' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21401  0262' 0D02               	mullw	2
 21402  0264' 0E00'              	movlw	low _loRa
 21403  0266' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21404  0268' 0E00'              	movlw	high _loRa
 21405  026A' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21406  026C' 0E99               	movlw	153
 21407  026E' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21408  0270' 0E00               	movlw	0
 21409  0272' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21410  0274' 50F3               	movf	prodl,w,c
 21411  0276' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21412  0278' 50F4               	movf	prodh,w,c
 21413  027A' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21414  027C' 0E01               	movlw	1
 21415  027E' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21416  0280' 6ED9               	movwf	fsr2l,c
 21417  0282' 0E00               	movlw	0
 21418  0284' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21419  0286' 6EDA               	movwf	fsr2h,c
 21420  0288' 0102               	movlb	2	; () banked
 21421  028A' AADF               	btfss	indf2,5,c
 21422  028C' D00B               	goto	l821
 21423                           
 21424                           ; BSR set to: 2
 21425                           ;lorawan.c: 1898: {
 21426                           ;lorawan.c: 1899: macBuffer[bufferIndex] |= 0x04;
 21427  028E' 0100               	movlb	0	; () banked
 21428  0290' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21429  0292' 0D01               	mullw	1
 21430  0294' 50F3               	movf	prodl,w,c
 21431  0296' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21432  0298' 6ED9               	movwf	fsr2l,c
 21433  029A' 50F4               	movf	prodh,w,c
 21434  029C' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21435  029E' 6EDA               	movwf	fsr2h,c
 21436  02A0' 0E00               	movlw	0
 21437  02A2' 84DB               	bsf	plusw2,2,c
 21438  02A4'                    l821:
 21439                           
 21440                           ;lorawan.c: 1900: }
 21441                           ;lorawan.c: 1902: bufferIndex ++;
 21442                           
 21443                           ; BSR set to: 0
 21444  02A4' 0100               	movlb	0	; () banked
 21445  02A6' D03C               	goto	L13
 21446  02A8'                    
 21447                           ; BSR set to: 0
 21448                           ;lorawan.c: 1907: {
 21449                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 21450                           
 21451                           ; BSR set to: 0
 21452  02A8' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21453  02AA' 0D01               	mullw	1
 21454  02AC' 50F3               	movf	prodl,w,c
 21455  02AE' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21456  02B0' 6ED9               	movwf	fsr2l,c
 21457  02B2' 50F4               	movf	prodh,w,c
 21458  02B4' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21459  02B6' 6EDA               	movwf	fsr2h,c
 21460  02B8' 0E06               	movlw	6
 21461  02BA' 6EDF               	movwf	indf2,c
 21462                           
 21463                           ; BSR set to: 0
 21464  02BC' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21465                           
 21466                           ; BSR set to: 0
 21467                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 21468  02BE' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21469  02C0' 0D01               	mullw	1
 21470  02C2' 50F3               	movf	prodl,w,c
 21471  02C4' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21472  02C6' 6ED9               	movwf	fsr2l,c
 21473  02C8' 50F4               	movf	prodh,w,c
 21474  02CA' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21475  02CC' 6EDA               	movwf	fsr2h,c
 21476  02CE' C0D1' FFDF         	movff	_loRa+209,indf2
 21477  02D2' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21478                           
 21479                           ; BSR set to: 0
 21480                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 21481  02D4' EC00' F000'        	call	_RADIO_GetPacketSnr	;wreg free
 21482  02D8' 0A80               	xorlw	128
 21483  02DA' 0FA0               	addlw	160
 21484  02DC' A0D8               	btfss	status,0,c
 21485  02DE' D006               	goto	u8920
 21486  02E0' EC00' F000'        	call	_RADIO_GetPacketSnr	;wreg free
 21487  02E4' 0A80               	xorlw	128
 21488  02E6' 0F60               	addlw	-160
 21489  02E8' A0D8               	btfss	status,0,c
 21490  02EA' D00C               	goto	l823
 21491  02EC'                    u8920:
 21492                           
 21493                           ;lorawan.c: 1911: {
 21494                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 21495  02EC' 0100               	movlb	0	; () banked
 21496  02EE' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21497  02F0' 0D01               	mullw	1
 21498  02F2' 50F3               	movf	prodl,w,c
 21499  02F4' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21500  02F6' 6ED9               	movwf	fsr2l,c
 21501  02F8' 50F4               	movf	prodh,w,c
 21502  02FA' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21503  02FC' 6EDA               	movwf	fsr2h,c
 21504  02FE' 0E20               	movlw	32
 21505  0300' 6EDF               	movwf	indf2,c
 21506  0302' D00E               	goto	L13
 21507  0304'                    l823:
 21508                           
 21509                           ;lorawan.c: 1914: else
 21510                           ;lorawan.c: 1915: {
 21511                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 21512                           
 21513                           ; BSR set to: 0
 21514  0304' 0100               	movlb	0	; () banked
 21515  0306' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21516  0308' 0D01               	mullw	1
 21517  030A' 50F3               	movf	prodl,w,c
 21518  030C' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21519  030E' 6ED9               	movwf	fsr2l,c
 21520  0310' 50F4               	movf	prodh,w,c
 21521  0312' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21522  0314' 6EDA               	movwf	fsr2h,c
 21523  0316' EC00' F000'        	call	_RADIO_GetPacketSnr	;wreg free
 21524  031A' 0B3F               	andlw	63
 21525  031C' 6EDF               	movwf	indf2,c
 21526  031E' D7C2               	goto	l821
 21527  0320'                    L13:
 21528  0320' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21529                           
 21530                           ; BSR set to: 0
 21531                           ;lorawan.c: 1917: }
 21532                           ;lorawan.c: 1918: }
 21533                           ;lorawan.c: 1919: break;
 21534  0322' D091               	goto	l817
 21535  0324'                    
 21536                           ; BSR set to: 0
 21537                           ;lorawan.c: 1922: {
 21538                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 21539                           
 21540                           ; BSR set to: 0
 21541  0324' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21542  0326' 0D01               	mullw	1
 21543  0328' 50F3               	movf	prodl,w,c
 21544  032A' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21545  032C' 6ED9               	movwf	fsr2l,c
 21546  032E' 50F4               	movf	prodh,w,c
 21547  0330' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21548  0332' 6EDA               	movwf	fsr2h,c
 21549  0334' 0E07               	movlw	7
 21550  0336' 6EDF               	movwf	indf2,c
 21551                           
 21552                           ; BSR set to: 0
 21553  0338' 2B00'              	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21554                           
 21555                           ; BSR set to: 0
 21556                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 21557  033A' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21558  033C' 0D01               	mullw	1
 21559  033E' 50F3               	movf	prodl,w,c
 21560  0340' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21561  0342' 6ED9               	movwf	fsr2l,c
 21562  0344' 50F4               	movf	prodh,w,c
 21563  0346' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21564  0348' 6EDA               	movwf	fsr2h,c
 21565  034A' 0E00               	movlw	0
 21566  034C' 6EDF               	movwf	indf2,c
 21567                           
 21568                           ; BSR set to: 0
 21569                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 21570  034E' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21571  0350' 0D02               	mullw	2
 21572  0352' 0E00'              	movlw	low _loRa
 21573  0354' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21574  0356' 0E00'              	movlw	high _loRa
 21575  0358' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21576  035A' 0E99               	movlw	153
 21577  035C' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21578  035E' 0E00               	movlw	0
 21579  0360' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21580  0362' 50F3               	movf	prodl,w,c
 21581  0364' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21582  0366' 50F4               	movf	prodh,w,c
 21583  0368' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21584  036A' 0E01               	movlw	1
 21585  036C' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21586  036E' 6ED9               	movwf	fsr2l,c
 21587  0370' 0E00               	movlw	0
 21588  0372' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21589  0374' 6EDA               	movwf	fsr2h,c
 21590  0376' 0102               	movlb	2	; () banked
 21591  0378' AEDF               	btfss	indf2,7,c
 21592  037A' D00B               	goto	l828
 21593                           
 21594                           ; BSR set to: 2
 21595                           ;lorawan.c: 1926: {
 21596                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 21597  037C' 0100               	movlb	0	; () banked
 21598  037E' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21599  0380' 0D01               	mullw	1
 21600  0382' 50F3               	movf	prodl,w,c
 21601  0384' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21602  0386' 6ED9               	movwf	fsr2l,c
 21603  0388' 50F4               	movf	prodh,w,c
 21604  038A' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21605  038C' 6EDA               	movwf	fsr2h,c
 21606  038E' 0E00               	movlw	0
 21607  0390' 80DB               	bsf	plusw2,0,c
 21608  0392'                    l828:
 21609                           
 21610                           ;lorawan.c: 1928: }
 21611                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 21612  0392' 0100               	movlb	0	; () banked
 21613  0394' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21614  0396' 0D02               	mullw	2
 21615  0398' 0E00'              	movlw	low _loRa
 21616  039A' 6F00'              	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21617  039C' 0E00'              	movlw	high _loRa
 21618  039E' 6F00'              	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21619  03A0' 0E99               	movlw	153
 21620  03A2' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21621  03A4' 0E00               	movlw	0
 21622  03A6' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21623  03A8' 50F3               	movf	prodl,w,c
 21624  03AA' 2700'              	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21625  03AC' 50F4               	movf	prodh,w,c
 21626  03AE' 2300'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21627  03B0' 0E01               	movlw	1
 21628  03B2' 2500'              	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21629  03B4' 6ED9               	movwf	fsr2l,c
 21630  03B6' 0E00               	movlw	0
 21631  03B8' 2100'              	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21632  03BA' 6EDA               	movwf	fsr2h,c
 21633  03BC' 0102               	movlb	2	; () banked
 21634  03BE' ACDF               	btfss	indf2,6,c
 21635  03C0' D771               	goto	l821
 21636                           
 21637                           ; BSR set to: 2
 21638                           ;lorawan.c: 1931: {
 21639                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 21640  03C2' 0100               	movlb	0	; () banked
 21641  03C4' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21642  03C6' 0D01               	mullw	1
 21643  03C8' 50F3               	movf	prodl,w,c
 21644  03CA' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21645  03CC' 6ED9               	movwf	fsr2l,c
 21646  03CE' 50F4               	movf	prodh,w,c
 21647  03D0' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21648  03D2' 6EDA               	movwf	fsr2h,c
 21649  03D4' 0E00               	movlw	0
 21650  03D6' 82DB               	bsf	plusw2,1,c
 21651                           
 21652                           ; BSR set to: 0
 21653  03D8' D765               	goto	l821
 21654  03DA'                    l830:
 21655                           
 21656                           ; BSR set to: 0
 21657                           ;lorawan.c: 1939: {
 21658                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 21659  03DA' 0102               	movlb	2	; () banked
 21660  03DC' 6900'              	setf	(_loRa+206)& (0+255),b
 21661                           
 21662                           ; BSR set to: 2
 21663                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 21664  03DE' 0E00               	movlw	0
 21665  03E0' 6F00'              	movwf	(_loRa+207)& (0+255),b
 21666                           
 21667                           ; BSR set to: 2
 21668                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 21669  03E2' 0100               	movlb	0	; () banked
 21670  03E4'                    
 21671                           ; BSR set to: 0
 21672                           ;lorawan.c: 1947: case DUTY_CYCLE_CID:
 21673                           ;lorawan.c: 1948: {
 21674                           ;lorawan.c: 1949: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 21675                           
 21676                           ; BSR set to: 0
 21677                           
 21678                           ; BSR set to: 0
 21679  03E4' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21680  03E6' 0D02               	mullw	2
 21681  03E8' 0E00'              	movlw	low (_loRa+153)
 21682  03EA' 24F3               	addwf	prodl,w,c
 21683  03EC' 6ED9               	movwf	fsr2l,c
 21684  03EE' 0E00'              	movlw	high (_loRa+153)
 21685  03F0' 20F4               	addwfc	prodh,w,c
 21686  03F2' 6EDA               	movwf	fsr2h,c
 21687  03F4' 5100'              	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21688  03F6' 0D01               	mullw	1
 21689  03F8' 50F3               	movf	prodl,w,c
 21690  03FA' 2500'              	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21691  03FC' 6EE9               	movwf	fsr0l,c
 21692  03FE' 50F4               	movf	prodh,w,c
 21693  0400' 2100'              	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21694  0402' 6EEA               	movwf	fsr0h,c
 21695  0404' CFDF FFEF          	movff	indf2,indf0
 21696  0408' D78B               	goto	L13
 21697  040A'                    l812:
 21698                           
 21699                           ; BSR set to: 0
 21700                           
 21701                           ; BSR set to: 0
 21702  040A' 5100'              	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21703  040C' 0D02               	mullw	2
 21704  040E' 0E00'              	movlw	low (_loRa+153)
 21705  0410' 24F3               	addwf	prodl,w,c
 21706  0412' 6ED9               	movwf	fsr2l,c
 21707  0414' 0E00'              	movlw	high (_loRa+153)
 21708  0416' 20F4               	addwfc	prodh,w,c
 21709  0418' 6EDA               	movwf	fsr2h,c
 21710  041A' 50DF               	movf	indf2,w,c
 21711                           
 21712                           ; Switch size 1, requested type "space"
 21713                           ; Number of cases is 7, Range of values is 2 to 8
 21714                           ; switch strategies available:
 21715                           ; Name         Instructions Cycles
 21716                           ; simple_byte           22    12 (average)
 21717                           ;	Chosen strategy is simple_byte
 21718  041C' 0A02               	xorlw	2	; case 2
 21719  041E' B4D8               	btfsc	status,2,c
 21720  0420' D7DC               	goto	l830
 21721  0422' 0A01               	xorlw	1	; case 3
 21722  0424' B4D8               	btfsc	status,2,c
 21723  0426' D643               	goto	l813
 21724  0428' 0A07               	xorlw	7	; case 4
 21725  042A' B4D8               	btfsc	status,2,c
 21726  042C' D7DB               	goto	l831
 21727  042E' 0A01               	xorlw	1	; case 5
 21728  0430' B4D8               	btfsc	status,2,c
 21729  0432' D6BB               	goto	l818
 21730  0434' 0A03               	xorlw	3	; case 6
 21731  0436' B4D8               	btfsc	status,2,c
 21732  0438' D737               	goto	l822
 21733  043A' 0A01               	xorlw	1	; case 7
 21734  043C' B4D8               	btfsc	status,2,c
 21735  043E' D772               	goto	l827
 21736  0440' 0A0F               	xorlw	15	; case 8
 21737  0442' B4D8               	btfsc	status,2,c
 21738  0444' D7CF               	goto	l831
 21739  0446'                    l817:
 21740                           
 21741                           ; BSR set to: 0
 21742                           
 21743                           ; BSR set to: 0
 21744  0446' 2B00'              	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 21745  0448'                    l807:
 21746                           
 21747                           ; BSR set to: 0
 21748                           
 21749                           ; BSR set to: 0
 21750  0448' 0102               	movlb	2	; () banked
 21751  044A' 5100'              	movf	(_loRa+152)& (0+255),w,b
 21752  044C' 0100               	movlb	0	; () banked
 21753  044E' 5D00'              	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 21754  0450' A0D8               	btfss	status,0,c
 21755  0452' D5E2               	goto	l808
 21756  0454'                    u8950:
 21757                           
 21758                           ; BSR set to: 0
 21759                           ;lorawan.c: 1957: }
 21760                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 21761                           
 21762                           ; BSR set to: 0
 21763  0454' C002' FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21764  0458' C003' FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21765  045C' C00E' FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 21766                           
 21767                           ; BSR set to: 0
 21768  0460' 0012               	return		;funcret
 21769  0462'                    __end_of_IncludeMacCommandsResponse:
 21770                           	opt stack 0
 21771                           tosu	equ	0xFFF
 21772                           tosh	equ	0xFFE
 21773                           tosl	equ	0xFFD
 21774                           pclath	equ	0xFFA
 21775                           tblptru	equ	0xFF8
 21776                           tblptrh	equ	0xFF7
 21777                           tblptrl	equ	0xFF6
 21778                           tablat	equ	0xFF5
 21779                           prodh	equ	0xFF4
 21780                           prodl	equ	0xFF3
 21781                           intcon	equ	0xFF2
 21782                           intcon2	equ	0xFF1
 21783                           intcon3	equ	0xFF0
 21784                           indf0	equ	0xFEF
 21785                           postinc0	equ	0xFEE
 21786                           fsr0h	equ	0xFEA
 21787                           fsr0l	equ	0xFE9
 21788                           wreg	equ	0xFE8
 21789                           postinc1	equ	0xFE6
 21790                           postdec1	equ	0xFE5
 21791                           plusw1	equ	0xFE3
 21792                           fsr1h	equ	0xFE2
 21793                           fsr1l	equ	0xFE1
 21794                           indf2	equ	0xFDF
 21795                           postinc2	equ	0xFDE
 21796                           postdec2	equ	0xFDD
 21797                           plusw2	equ	0xFDB
 21798                           fsr2h	equ	0xFDA
 21799                           fsr2l	equ	0xFD9
 21800                           status	equ	0xFD8
 21801                           
 21802 ;; *************** function _RADIO_GetPacketSnr *****************
 21803 ;; Defined at:
 21804 ;;		line 1522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 21805 ;; Parameters:    Size  Location     Type
 21806 ;;		None
 21807 ;; Auto vars:     Size  Location     Type
 21808 ;;		None
 21809 ;; Return value:  Size  Location     Type
 21810 ;;                  1    wreg      char 
 21811 ;; Registers used:
 21812 ;;		wreg, status,2
 21813 ;; Tracked objects:
 21814 ;;		On entry : 0/0
 21815 ;;		On exit  : 0/0
 21816 ;;		Unchanged: 0/0
 21817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21822 ;;Total ram usage:        0 bytes
 21823 ;; Hardware stack levels used:    1
 21824 ;; Hardware stack levels required when called:    7
 21825 ;; This function calls:
 21826 ;;		Nothing
 21827 ;; This function is called by:
 21828 ;;		_IncludeMacCommandsResponse
 21829 ;; This function uses a non-reentrant model
 21830 ;;
 21831                           
 21832                           	psect	text106
 21833  0000'                    __ptext106:
 21834                           	opt stack 0
 21835  0000'                    _RADIO_GetPacketSnr:
 21836                           	opt stack 20
 21837                           
 21838                           ;radio_driver_SX1276.c: 1524: return RadioConfiguration.packetSNR;
 21839                           
 21840                           ; BSR set to: 0
 21841                           ;incstack = 0
 21842  0000' 0101               	movlb	1	; () banked
 21843  0002' 5100'              	movf	(_RadioConfiguration+50)& (0+255),w,b
 21844  0004' 0012               	return	
 21845  0006'                    __end_of_RADIO_GetPacketSnr:
 21846                           	opt stack 0
 21847                           tosu	equ	0xFFF
 21848                           tosh	equ	0xFFE
 21849                           tosl	equ	0xFFD
 21850                           pclath	equ	0xFFA
 21851                           tblptru	equ	0xFF8
 21852                           tblptrh	equ	0xFF7
 21853                           tblptrl	equ	0xFF6
 21854                           tablat	equ	0xFF5
 21855                           prodh	equ	0xFF4
 21856                           prodl	equ	0xFF3
 21857                           intcon	equ	0xFF2
 21858                           intcon2	equ	0xFF1
 21859                           intcon3	equ	0xFF0
 21860                           indf0	equ	0xFEF
 21861                           postinc0	equ	0xFEE
 21862                           fsr0h	equ	0xFEA
 21863                           fsr0l	equ	0xFE9
 21864                           wreg	equ	0xFE8
 21865                           postinc1	equ	0xFE6
 21866                           postdec1	equ	0xFE5
 21867                           plusw1	equ	0xFE3
 21868                           fsr1h	equ	0xFE2
 21869                           fsr1l	equ	0xFE1
 21870                           indf2	equ	0xFDF
 21871                           postinc2	equ	0xFDE
 21872                           postdec2	equ	0xFDD
 21873                           plusw2	equ	0xFDB
 21874                           fsr2h	equ	0xFDA
 21875                           fsr2l	equ	0xFD9
 21876                           status	equ	0xFD8
 21877                           
 21878 ;; *************** function _FindSmallestDataRate *****************
 21879 ;; Defined at:
 21880 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 21881 ;; Parameters:    Size  Location     Type
 21882 ;;		None
 21883 ;; Auto vars:     Size  Location     Type
 21884 ;;  dataRate        1    3[BANK0 ] unsigned char 
 21885 ;;  i               1    2[BANK0 ] unsigned char 
 21886 ;;  found           1    1[BANK0 ] unsigned char 
 21887 ;; Return value:  Size  Location     Type
 21888 ;;                  1    wreg      unsigned char 
 21889 ;; Registers used:
 21890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21891 ;; Tracked objects:
 21892 ;;		On entry : 0/0
 21893 ;;		On exit  : 0/0
 21894 ;;		Unchanged: 0/0
 21895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21897 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21899 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;Total ram usage:        4 bytes
 21901 ;; Hardware stack levels used:    1
 21902 ;; Hardware stack levels required when called:    7
 21903 ;; This function calls:
 21904 ;;		Nothing
 21905 ;; This function is called by:
 21906 ;;		_AckRetransmissionCallback
 21907 ;;		_AssemblePacket
 21908 ;; This function uses a non-reentrant model
 21909 ;;
 21910                           
 21911                           	psect	text107
 21912  0000'                    __ptext107:
 21913                           	opt stack 0
 21914  0000'                    _FindSmallestDataRate:
 21915                           	opt stack 21
 21916                           
 21917                           ;lorawan.c: 1965: uint8_t i = 0, dataRate;
 21918                           
 21919                           ; BSR set to: 1
 21920                           ;incstack = 0
 21921  0000' 0E00               	movlw	0
 21922  0002' 0100               	movlb	0	; () banked
 21923  0004' 6F00'              	movwf	FindSmallestDataRate@i& (0+255),b
 21924                           
 21925                           ;lorawan.c: 1966: bool found = 0;
 21926  0006' 0E00               	movlw	0
 21927  0008' 6F00'              	movwf	FindSmallestDataRate@found& (0+255),b
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 21931  000A' 0102               	movlb	2	; () banked
 21932  000C' 5100'              	movf	(_loRa+208)& (0+255),w,b
 21933  000E' 5D00'              	subwf	(_loRa+220)& (0+255),w,b
 21934  0010' B0D8               	btfsc	status,0,c
 21935  0012' D05E               	goto	l848
 21936                           
 21937                           ; BSR set to: 2
 21938                           ;lorawan.c: 1969: {
 21939                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 21940  0014' 0500'              	decf	(_loRa+208)& (0+255),w,b
 21941  0016' 0100               	movlb	0	; () banked
 21942  0018' D04C               	goto	L14
 21943  001A'                    
 21944                           ; BSR set to: 0
 21945                           ;lorawan.c: 1973: {
 21946                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 21947                           
 21948                           ; BSR set to: 0
 21949  001A' 0E00               	movlw	0
 21950  001C' 6F00'              	movwf	FindSmallestDataRate@i& (0+255),b
 21951  001E' D039               	goto	l840
 21952  0020'                    
 21953                           ; BSR set to: 0
 21954                           ;lorawan.c: 1975: {
 21955                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 21956                           
 21957                           ; BSR set to: 0
 21958  0020' 5100'              	movf	FindSmallestDataRate@i& (0+255),w,b
 21959  0022' 0D02               	mullw	2
 21960  0024' 0E01               	movlw	1
 21961  0026' 26F3               	addwf	prodl,f,c
 21962  0028' 0E00               	movlw	0
 21963  002A' 22F4               	addwfc	prodh,f,c
 21964  002C' 0E00'              	movlw	low _Channels
 21965  002E' 24F3               	addwf	prodl,w,c
 21966  0030' 6ED9               	movwf	fsr2l,c
 21967  0032' 0E00'              	movlw	high _Channels
 21968  0034' 20F4               	addwfc	prodh,w,c
 21969  0036' 6EDA               	movwf	fsr2h,c
 21970  0038' 0104               	movlb	4	; () banked
 21971  003A' 50DF               	movf	223,w,c
 21972  003C' 0B0F               	andlw	15
 21973  003E' 0100               	movlb	0	; () banked
 21974  0040' 6F00'              	movwf	??_FindSmallestDataRate& (0+255),b
 21975  0042' 5100'              	movf	??_FindSmallestDataRate& (0+255),w,b
 21976  0044' 5D00'              	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 21977  0046' A0D8               	btfss	status,0,c
 21978  0048' D023               	goto	l842
 21979                           
 21980                           ; BSR set to: 0
 21981  004A' 5100'              	movf	FindSmallestDataRate@i& (0+255),w,b
 21982  004C' 0D02               	mullw	2
 21983  004E' 0E01               	movlw	1
 21984  0050' 26F3               	addwf	prodl,f,c
 21985  0052' 0E00               	movlw	0
 21986  0054' 22F4               	addwfc	prodh,f,c
 21987  0056' 0E00'              	movlw	low _Channels
 21988  0058' 24F3               	addwf	prodl,w,c
 21989  005A' 6ED9               	movwf	fsr2l,c
 21990  005C' 0E00'              	movlw	high _Channels
 21991  005E' 20F4               	addwfc	prodh,w,c
 21992  0060' 6EDA               	movwf	fsr2h,c
 21993  0062' 0104               	movlb	4	; () banked
 21994  0064' 38DF               	swapf	223,w,c
 21995  0066' 0B0F               	andlw	15
 21996  0068' 0100               	movlb	0	; () banked
 21997  006A' 6F00'              	movwf	??_FindSmallestDataRate& (0+255),b
 21998  006C' 5100'              	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 21999  006E' 5D00'              	subwf	??_FindSmallestDataRate& (0+255),w,b
 22000  0070' A0D8               	btfss	status,0,c
 22001  0072' D00E               	goto	l842
 22002                           
 22003                           ; BSR set to: 0
 22004  0074' 5100'              	movf	FindSmallestDataRate@i& (0+255),w,b
 22005  0076' 0D02               	mullw	2
 22006  0078' 0E00'              	movlw	low _Channels
 22007  007A' 24F3               	addwf	prodl,w,c
 22008  007C' 6ED9               	movwf	fsr2l,c
 22009  007E' 0E00'              	movlw	high _Channels
 22010  0080' 20F4               	addwfc	prodh,w,c
 22011  0082' 6EDA               	movwf	fsr2h,c
 22012  0084' 04DE               	decf	postinc2,w,c
 22013  0086' A4D8               	btfss	status,2,c
 22014  0088' D003               	goto	l842
 22015                           
 22016                           ; BSR set to: 0
 22017                           ;lorawan.c: 1977: {
 22018                           ;lorawan.c: 1978: found = 1;
 22019  008A' 0E01               	movlw	1
 22020  008C' 6F00'              	movwf	FindSmallestDataRate@found& (0+255),b
 22021                           
 22022                           ;lorawan.c: 1979: break;
 22023  008E' D007               	goto	u8390
 22024  0090'                    l842:
 22025                           
 22026                           ; BSR set to: 0
 22027                           
 22028                           ; BSR set to: 0
 22029  0090' 2B00'              	incf	FindSmallestDataRate@i& (0+255),f,b
 22030  0092'                    l840:
 22031                           
 22032                           ; BSR set to: 0
 22033                           
 22034                           ; BSR set to: 0
 22035  0092' 0102               	movlb	2	; () banked
 22036  0094' 5100'              	movf	(_loRa+222)& (0+255),w,b
 22037  0096' 0100               	movlb	0	; () banked
 22038  0098' 5D00'              	subwf	FindSmallestDataRate@i& (0+255),w,b
 22039  009A' A0D8               	btfss	status,0,c
 22040  009C' D7C1               	goto	l841
 22041  009E'                    u8390:
 22042                           
 22043                           ; BSR set to: 0
 22044                           ;lorawan.c: 1980: }
 22045                           ;lorawan.c: 1981: }
 22046                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 22047                           
 22048                           ; BSR set to: 0
 22049  009E' 5100'              	movf	FindSmallestDataRate@found& (0+255),w,b
 22050  00A0' A4D8               	btfss	status,2,c
 22051  00A2' D008               	goto	l844
 22052                           
 22053                           ; BSR set to: 0
 22054  00A4' 5100'              	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 22055  00A6' 0102               	movlb	2	; () banked
 22056  00A8' 5D00'              	subwf	(_loRa+220)& (0+255),w,b
 22057  00AA' B0D8               	btfsc	status,0,c
 22058  00AC' D003               	goto	l844
 22059                           
 22060                           ; BSR set to: 2
 22061                           ;lorawan.c: 1983: {
 22062                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 22063  00AE' 0100               	movlb	0	; () banked
 22064  00B0' 0500'              	decf	FindSmallestDataRate@dataRate& (0+255),w,b
 22065  00B2'                    L14:
 22066  00B2' 6F00'              	movwf	FindSmallestDataRate@dataRate& (0+255),b
 22067  00B4'                    l844:
 22068                           
 22069                           ; BSR set to: 0
 22070                           
 22071                           ; BSR set to: 0
 22072  00B4' 0100               	movlb	0	; () banked
 22073  00B6' 5100'              	movf	FindSmallestDataRate@found& (0+255),w,b
 22074  00B8' A4D8               	btfss	status,2,c
 22075  00BA' D006               	goto	u8430
 22076                           
 22077                           ; BSR set to: 0
 22078  00BC' 0102               	movlb	2	; () banked
 22079  00BE' 5100'              	movf	(_loRa+220)& (0+255),w,b
 22080  00C0' 0100               	movlb	0	; () banked
 22081  00C2' 5D00'              	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 22082  00C4' B0D8               	btfsc	status,0,c
 22083  00C6' D7A9               	goto	l839
 22084  00C8'                    u8430:
 22085                           
 22086                           ; BSR set to: 0
 22087                           ;lorawan.c: 1985: }
 22088                           ;lorawan.c: 1986: }
 22089                           ;lorawan.c: 1988: if (found == 1)
 22090                           
 22091                           ; BSR set to: 0
 22092                           
 22093                           ; BSR set to: 0
 22094  00C8' 0500'              	decf	FindSmallestDataRate@found& (0+255),w,b
 22095  00CA' B4D8               	btfsc	status,2,c
 22096                           
 22097                           ; BSR set to: 0
 22098                           ;lorawan.c: 1989: {
 22099                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 22100  00CC' C003' F0D0'        	movff	FindSmallestDataRate@dataRate,_loRa+208
 22101  00D0'                    l848:
 22102                           
 22103                           ;lorawan.c: 1991: }
 22104                           ;lorawan.c: 1992: }
 22105                           ;lorawan.c: 1994: return found;
 22106                           
 22107                           ; BSR set to: 0
 22108                           
 22109                           ; BSR set to: 0
 22110  00D0' 0100               	movlb	0	; () banked
 22111  00D2' 5100'              	movf	FindSmallestDataRate@found& (0+255),w,b
 22112  00D4' 0012               	return	
 22113  00D6'                    __end_of_FindSmallestDataRate:
 22114                           	opt stack 0
 22115                           tosu	equ	0xFFF
 22116                           tosh	equ	0xFFE
 22117                           tosl	equ	0xFFD
 22118                           pclath	equ	0xFFA
 22119                           tblptru	equ	0xFF8
 22120                           tblptrh	equ	0xFF7
 22121                           tblptrl	equ	0xFF6
 22122                           tablat	equ	0xFF5
 22123                           prodh	equ	0xFF4
 22124                           prodl	equ	0xFF3
 22125                           intcon	equ	0xFF2
 22126                           intcon2	equ	0xFF1
 22127                           intcon3	equ	0xFF0
 22128                           indf0	equ	0xFEF
 22129                           postinc0	equ	0xFEE
 22130                           fsr0h	equ	0xFEA
 22131                           fsr0l	equ	0xFE9
 22132                           wreg	equ	0xFE8
 22133                           postinc1	equ	0xFE6
 22134                           postdec1	equ	0xFE5
 22135                           plusw1	equ	0xFE3
 22136                           fsr1h	equ	0xFE2
 22137                           fsr1l	equ	0xFE1
 22138                           indf2	equ	0xFDF
 22139                           postinc2	equ	0xFDE
 22140                           postdec2	equ	0xFDD
 22141                           plusw2	equ	0xFDB
 22142                           fsr2h	equ	0xFDA
 22143                           fsr2l	equ	0xFD9
 22144                           status	equ	0xFD8
 22145                           
 22146 ;; *************** function _EncryptFRMPayload *****************
 22147 ;; Defined at:
 22148 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22149 ;; Parameters:    Size  Location     Type
 22150 ;;  buffer          2   49[BANK0 ] PTR unsigned char 
 22151 ;;		 -> STR_4(5), radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 22152 ;;  bufferLength    1   51[BANK0 ] unsigned char 
 22153 ;;  dir             1   52[BANK0 ] unsigned char 
 22154 ;;  frameCounter    4   53[BANK0 ] unsigned long 
 22155 ;;  key             2   57[BANK0 ] PTR unsigned char 
 22156 ;;		 -> loRa.activationParameters(105), loRa(231), 
 22157 ;;  macBufferInd    1   59[BANK0 ] unsigned char 
 22158 ;;  bufferToBeEn    2   60[BANK0 ] PTR unsigned char 
 22159 ;;		 -> radioBuffer(271), macBuffer(271), 
 22160 ;;  multicastSta    1   62[BANK0 ] unsigned char 
 22161 ;; Auto vars:     Size  Location     Type
 22162 ;;  j               1   72[BANK0 ] unsigned char 
 22163 ;;  i               1   71[BANK0 ] unsigned char 
 22164 ;;  k               1   70[BANK0 ] unsigned char 
 22165 ;; Return value:  Size  Location     Type
 22166 ;;                  1    wreg      void 
 22167 ;; Registers used:
 22168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22169 ;; Tracked objects:
 22170 ;;		On entry : 0/0
 22171 ;;		On exit  : 0/0
 22172 ;;		Unchanged: 0/0
 22173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22174 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22175 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22176 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22177 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22178 ;;Total ram usage:       24 bytes
 22179 ;; Hardware stack levels used:    1
 22180 ;; Hardware stack levels required when called:   10
 22181 ;; This function calls:
 22182 ;;		_AESEncodeLoRa
 22183 ;;		_AssembleEncryptionBlock
 22184 ;;		___awdiv
 22185 ;; This function is called by:
 22186 ;;		_LORAWAN_RxDone
 22187 ;;		_AssemblePacket
 22188 ;; This function uses a non-reentrant model
 22189 ;;
 22190                           
 22191                           	psect	text108
 22192  0000'                    __ptext108:
 22193                           	opt stack 0
 22194  0000'                    _EncryptFRMPayload:
 22195                           	opt stack 18
 22196                           
 22197                           ;lorawan.c: 2207: uint8_t k = 0, i = 0, j = 0;
 22198                           
 22199                           ; BSR set to: 0
 22200                           ;incstack = 0
 22201  0000' 0E00               	movlw	0
 22202  0002' 0100               	movlb	0	; () banked
 22203  0004' 6F00'              	movwf	EncryptFRMPayload@k& (0+255),b
 22204  0006' 0E00               	movlw	0
 22205  0008' 6F00'              	movwf	EncryptFRMPayload@i& (0+255),b
 22206  000A' 0E00               	movlw	0
 22207  000C' 6F00'              	movwf	EncryptFRMPayload@j& (0+255),b
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;lorawan.c: 2209: k = bufferLength / 16;
 22211  000E' C033' F000'        	movff	EncryptFRMPayload@bufferLength,___awdiv@dividend
 22212  0012' 6B00'              	clrf	(___awdiv@dividend+1)& (0+255),b
 22213  0014' 0E00               	movlw	0
 22214  0016' 6F00'              	movwf	(___awdiv@divisor+1)& (0+255),b
 22215  0018' 0E10               	movlw	16
 22216  001A' 6F00'              	movwf	___awdiv@divisor& (0+255),b
 22217  001C' EC00' F000'        	call	___awdiv	;wreg free
 22218  0020' 0100               	movlb	0	; () banked
 22219  0022' 5100'              	movf	?___awdiv& (0+255),w,b
 22220  0024' 6F00'              	movwf	EncryptFRMPayload@k& (0+255),b
 22221                           
 22222                           ; BSR set to: 0
 22223                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 22224  0026' 0E01               	movlw	1
 22225  0028' 6F00'              	movwf	EncryptFRMPayload@i& (0+255),b
 22226  002A' D06D               	goto	l913
 22227  002C'                    
 22228                           ; BSR set to: 0
 22229                           ;lorawan.c: 2211: {
 22230                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22231                           
 22232                           ; BSR set to: 0
 22233  002C' C035' F00B'        	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22234  0030' C036' F00C'        	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22235  0034' C037' F00D'        	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22236  0038' C038' F00E'        	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22237  003C' C047' F00F'        	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22238  0040' 0E01               	movlw	1
 22239  0042' 6F00'              	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22240  0044' C03E' F011'        	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22241  0048' 5100'              	movf	EncryptFRMPayload@dir& (0+255),w,b
 22242  004A' EC00' F000'        	call	_AssembleEncryptionBlock
 22243                           
 22244                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 22245  004E' 0E00'              	movlw	low _aesBuffer
 22246  0050' 0100               	movlb	0	; () banked
 22247  0052' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 22248  0054' 0E00'              	movlw	high _aesBuffer
 22249  0056' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22250  0058' C039' F01F'        	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22251  005C' C03A' F020'        	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22252  0060' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 22253                           
 22254                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 22255  0064' 0E00               	movlw	0
 22256  0066' 0100               	movlb	0	; () banked
 22257  0068' 6F00'              	movwf	EncryptFRMPayload@j& (0+255),b
 22258  006A'                    l9262:
 22259                           
 22260                           ; BSR set to: 0
 22261  006A' 0E0F               	movlw	15
 22262  006C' 6500'              	cpfsgt	EncryptFRMPayload@j& (0+255),b
 22263  006E' D001               	goto	l915
 22264  0070' D049               	goto	u8650
 22265  0072'                    l915:
 22266                           
 22267                           ; BSR set to: 0
 22268                           ;lorawan.c: 2216: {
 22269                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 22270                           
 22271                           ; BSR set to: 0
 22272  0072' 5100'              	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22273  0074' 0D01               	mullw	1
 22274  0076' 50F3               	movf	prodl,w,c
 22275  0078' 2500'              	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22276  007A' 6ED9               	movwf	fsr2l,c
 22277  007C' 50F4               	movf	prodh,w,c
 22278  007E' 2100'              	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22279  0080' 6EDA               	movwf	fsr2h,c
 22280  0082' 0EF0               	movlw	240
 22281  0084' 6F00'              	movwf	??_EncryptFRMPayload& (0+255),b
 22282  0086' 0EFF               	movlw	255
 22283  0088' 6F00'              	movwf	(??_EncryptFRMPayload+1)& (0+255),b
 22284  008A' 5100'              	movf	EncryptFRMPayload@i& (0+255),w,b
 22285  008C' 6F00'              	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 22286  008E' 6B00'              	clrf	(??_EncryptFRMPayload+3)& (0+255),b
 22287  0090' 3B00'              	swapf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22288  0092' 3B00'              	swapf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22289  0094' 0EF0               	movlw	240
 22290  0096' 1700'              	andwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22291  0098' 5100'              	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22292  009A' 0B0F               	andlw	15
 22293  009C' 1300'              	iorwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22294  009E' 0EF0               	movlw	240
 22295  00A0' 1700'              	andwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22296  00A2' 5100'              	movf	EncryptFRMPayload@j& (0+255),w,b
 22297  00A4' 2700'              	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22298  00A6' 0E00               	movlw	0
 22299  00A8' 2300'              	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22300  00AA' 5100'              	movf	??_EncryptFRMPayload& (0+255),w,b
 22301  00AC' 2700'              	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22302  00AE' 5100'              	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 22303  00B0' 2300'              	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22304  00B2' C031' F043'        	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+4
 22305  00B6' C032' F044'        	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+5
 22306  00BA' 5100'              	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22307  00BC' 2700'              	addwf	(??_EncryptFRMPayload+4)& (0+255),f,b
 22308  00BE' 5100'              	movf	(??_EncryptFRMPayload+3)& (0+255),w,b
 22309  00C0' 2300'              	addwfc	(??_EncryptFRMPayload+5)& (0+255),f,b
 22310  00C2' C043' FFF6         	movff	??_EncryptFRMPayload+4,tblptrl
 22311  00C6' C044' FFF7         	movff	??_EncryptFRMPayload+5,tblptrh
 22312  00CA' 0E00'              	movlw	low (__mediumconst shr (0+16))
 22313  00CC' 6EF8               	movwf	tblptru,c
 22314  00CE' 0EFF'              	movlw	(high __ramtop+-1)
 22315  00D0' 64F7               	cpfsgt	tblptrh,c
 22316  00D2' D003               	bra	u8647
 22317  00D4' 0008               	tblrd		*
 22318  00D6' 50F5               	movf	tablat,w,c
 22319  00D8' D005               	bra	u8640
 22320  00DA'                    u8647:
 22321  00DA' CFF6 FFE9          	movff	tblptrl,fsr0l
 22322  00DE' CFF7 FFEA          	movff	tblptrh,fsr0h
 22323  00E2' 50EF               	movf	indf0,w,c
 22324  00E4'                    u8640:
 22325  00E4' 0100               	movlb	0	; () banked
 22326  00E6' 6F00'              	movwf	(??_EncryptFRMPayload+6)& (0+255),b
 22327  00E8' 5100'              	movf	EncryptFRMPayload@j& (0+255),w,b
 22328  00EA' 0D01               	mullw	1
 22329  00EC' 0E00'              	movlw	low _aesBuffer
 22330  00EE' 24F3               	addwf	prodl,w,c
 22331  00F0' 6EE9               	movwf	fsr0l,c
 22332  00F2' 0E00'              	movlw	high _aesBuffer
 22333  00F4' 20F4               	addwfc	prodh,w,c
 22334  00F6' 6EEA               	movwf	fsr0h,c
 22335  00F8' 50EF               	movf	indf0,w,c
 22336  00FA' 1900'              	xorwf	(??_EncryptFRMPayload+6)& (0+255),w,b
 22337  00FC' 6EDF               	movwf	indf2,c
 22338                           
 22339                           ; BSR set to: 0
 22340  00FE' 2B00'              	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22341                           
 22342                           ; BSR set to: 0
 22343  0100' 2B00'              	incf	EncryptFRMPayload@j& (0+255),f,b
 22344  0102' D7B3               	goto	l9262
 22345  0104'                    u8650:
 22346                           
 22347                           ; BSR set to: 0
 22348                           
 22349                           ; BSR set to: 0
 22350  0104' 2B00'              	incf	EncryptFRMPayload@i& (0+255),f,b
 22351  0106'                    l913:
 22352                           
 22353                           ; BSR set to: 0
 22354                           
 22355                           ; BSR set to: 0
 22356  0106' 5100'              	movf	EncryptFRMPayload@i& (0+255),w,b
 22357  0108' 5D00'              	subwf	EncryptFRMPayload@k& (0+255),w,b
 22358  010A' B0D8               	btfsc	status,0,c
 22359  010C' D78F               	goto	l914
 22360                           
 22361                           ; BSR set to: 0
 22362                           ;lorawan.c: 2218: }
 22363                           ;lorawan.c: 2219: }
 22364                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 22365                           
 22366                           ; BSR set to: 0
 22367  010E' C033' F03F'        	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22368  0112' 0E0F               	movlw	15
 22369  0114' 1700'              	andwf	??_EncryptFRMPayload& (0+255),f,b
 22370  0116' B4D8               	btfsc	status,2,c
 22371  0118' 0012               	return	
 22372                           
 22373                           ; BSR set to: 0
 22374                           ;lorawan.c: 2222: {
 22375                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22376  011A' C035' F00B'        	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22377  011E' C036' F00C'        	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22378  0122' C037' F00D'        	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22379  0126' C038' F00E'        	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22380  012A' C047' F00F'        	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22381  012E' 0E01               	movlw	1
 22382  0130' 6F00'              	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22383  0132' C03E' F011'        	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22384  0136' 5100'              	movf	EncryptFRMPayload@dir& (0+255),w,b
 22385  0138' EC00' F000'        	call	_AssembleEncryptionBlock
 22386                           
 22387                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 22388  013C' 0E00'              	movlw	low _aesBuffer
 22389  013E' 0100               	movlb	0	; () banked
 22390  0140' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 22391  0142' 0E00'              	movlw	high _aesBuffer
 22392  0144' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22393  0146' C039' F01F'        	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22394  014A' C03A' F020'        	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22395  014E' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 22396                           
 22397                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 22398  0152' 0E00               	movlw	0
 22399  0154' 0100               	movlb	0	; () banked
 22400  0156' 6F00'              	movwf	EncryptFRMPayload@j& (0+255),b
 22401  0158' D036               	goto	l919
 22402  015A'                    
 22403                           ; BSR set to: 0
 22404                           ;lorawan.c: 2227: {
 22405                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 22406                           
 22407                           ; BSR set to: 0
 22408  015A' 5100'              	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22409  015C' 0D01               	mullw	1
 22410  015E' 50F3               	movf	prodl,w,c
 22411  0160' 2500'              	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22412  0162' 6ED9               	movwf	fsr2l,c
 22413  0164' 50F4               	movf	prodh,w,c
 22414  0166' 2100'              	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22415  0168' 6EDA               	movwf	fsr2h,c
 22416  016A' 5100'              	movf	EncryptFRMPayload@k& (0+255),w,b
 22417  016C' 0D10               	mullw	16
 22418  016E' 5100'              	movf	EncryptFRMPayload@j& (0+255),w,b
 22419  0170' 26F3               	addwf	prodl,f,c
 22420  0172' 0E00               	movlw	0
 22421  0174' 22F4               	addwfc	prodh,f,c
 22422  0176' C031' F03F'        	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 22423  017A' C032' F040'        	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 22424  017E' 50F3               	movf	prodl,w,c
 22425  0180' 2700'              	addwf	??_EncryptFRMPayload& (0+255),f,b
 22426  0182' 50F4               	movf	prodh,w,c
 22427  0184' 2300'              	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 22428  0186' C03F' FFF6         	movff	??_EncryptFRMPayload,tblptrl
 22429  018A' C040' FFF7         	movff	??_EncryptFRMPayload+1,tblptrh
 22430  018E' 0E00'              	movlw	low (__mediumconst shr (0+16))
 22431  0190' 6EF8               	movwf	tblptru,c
 22432  0192' 0EFF'              	movlw	(high __ramtop+-1)
 22433  0194' 64F7               	cpfsgt	tblptrh,c
 22434  0196' D003               	bra	u8687
 22435  0198' 0008               	tblrd		*
 22436  019A' 50F5               	movf	tablat,w,c
 22437  019C' D005               	bra	u8680
 22438  019E'                    u8687:
 22439  019E' CFF6 FFE9          	movff	tblptrl,fsr0l
 22440  01A2' CFF7 FFEA          	movff	tblptrh,fsr0h
 22441  01A6' 50EF               	movf	indf0,w,c
 22442  01A8'                    u8680:
 22443  01A8' 0100               	movlb	0	; () banked
 22444  01AA' 6F00'              	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 22445  01AC' 5100'              	movf	EncryptFRMPayload@j& (0+255),w,b
 22446  01AE' 0D01               	mullw	1
 22447  01B0' 0E00'              	movlw	low _aesBuffer
 22448  01B2' 24F3               	addwf	prodl,w,c
 22449  01B4' 6EE9               	movwf	fsr0l,c
 22450  01B6' 0E00'              	movlw	high _aesBuffer
 22451  01B8' 20F4               	addwfc	prodh,w,c
 22452  01BA' 6EEA               	movwf	fsr0h,c
 22453  01BC' 50EF               	movf	indf0,w,c
 22454  01BE' 1900'              	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22455  01C0' 6EDF               	movwf	indf2,c
 22456                           
 22457                           ; BSR set to: 0
 22458  01C2' 2B00'              	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22459                           
 22460                           ; BSR set to: 0
 22461  01C4' 2B00'              	incf	EncryptFRMPayload@j& (0+255),f,b
 22462  01C6'                    l919:
 22463                           
 22464                           ; BSR set to: 0
 22465                           
 22466                           ; BSR set to: 0
 22467  01C6' C033' F03F'        	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22468  01CA' 0E0F               	movlw	15
 22469  01CC' 1700'              	andwf	??_EncryptFRMPayload& (0+255),f,b
 22470  01CE' 5100'              	movf	??_EncryptFRMPayload& (0+255),w,b
 22471  01D0' 5D00'              	subwf	EncryptFRMPayload@j& (0+255),w,b
 22472  01D2' B0D8               	btfsc	status,0,c
 22473  01D4' 0012               	return	
 22474  01D6' D7C1               	goto	l920
 22475  01D8'                    __end_of_EncryptFRMPayload:
 22476                           	opt stack 0
 22477                           tosu	equ	0xFFF
 22478                           tosh	equ	0xFFE
 22479                           tosl	equ	0xFFD
 22480                           pclath	equ	0xFFA
 22481                           tblptru	equ	0xFF8
 22482                           tblptrh	equ	0xFF7
 22483                           tblptrl	equ	0xFF6
 22484                           tablat	equ	0xFF5
 22485                           prodh	equ	0xFF4
 22486                           prodl	equ	0xFF3
 22487                           intcon	equ	0xFF2
 22488                           intcon2	equ	0xFF1
 22489                           intcon3	equ	0xFF0
 22490                           indf0	equ	0xFEF
 22491                           postinc0	equ	0xFEE
 22492                           fsr0h	equ	0xFEA
 22493                           fsr0l	equ	0xFE9
 22494                           wreg	equ	0xFE8
 22495                           postinc1	equ	0xFE6
 22496                           postdec1	equ	0xFE5
 22497                           plusw1	equ	0xFE3
 22498                           fsr1h	equ	0xFE2
 22499                           fsr1l	equ	0xFE1
 22500                           indf2	equ	0xFDF
 22501                           postinc2	equ	0xFDE
 22502                           postdec2	equ	0xFDD
 22503                           plusw2	equ	0xFDB
 22504                           fsr2h	equ	0xFDA
 22505                           fsr2l	equ	0xFD9
 22506                           status	equ	0xFD8
 22507                           
 22508 ;; *************** function ___awdiv *****************
 22509 ;; Defined at:
 22510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 22511 ;; Parameters:    Size  Location     Type
 22512 ;;  dividend        2    0[BANK0 ] int 
 22513 ;;  divisor         2    2[BANK0 ] int 
 22514 ;; Auto vars:     Size  Location     Type
 22515 ;;  quotient        2    6[BANK0 ] int 
 22516 ;;  sign            1    5[BANK0 ] unsigned char 
 22517 ;;  counter         1    4[BANK0 ] unsigned char 
 22518 ;; Return value:  Size  Location     Type
 22519 ;;                  2    0[BANK0 ] int 
 22520 ;; Registers used:
 22521 ;;		wreg, status,2, status,0
 22522 ;; Tracked objects:
 22523 ;;		On entry : 0/0
 22524 ;;		On exit  : 0/0
 22525 ;;		Unchanged: 0/0
 22526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22528 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22530 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22531 ;;Total ram usage:        8 bytes
 22532 ;; Hardware stack levels used:    1
 22533 ;; Hardware stack levels required when called:    7
 22534 ;; This function calls:
 22535 ;;		Nothing
 22536 ;; This function is called by:
 22537 ;;		_EncryptFRMPayload
 22538 ;; This function uses a non-reentrant model
 22539 ;;
 22540                           
 22541                           	psect	text109
 22542  0000'                    __ptext109:
 22543                           	opt stack 0
 22544  0000'                    ___awdiv:
 22545                           	opt stack 20
 22546                           
 22547                           ; BSR set to: 0
 22548                           ;incstack = 0
 22549  0000' 0E00               	movlw	0
 22550  0002' 0100               	movlb	0	; () banked
 22551  0004' 6F00'              	movwf	___awdiv@sign& (0+255),b
 22552                           
 22553                           ; BSR set to: 0
 22554  0006' AF00'              	btfss	(___awdiv@divisor+1)& (0+255),7,b
 22555  0008' D006               	goto	l2793
 22556                           
 22557                           ; BSR set to: 0
 22558  000A' 6D00'              	negf	___awdiv@divisor& (0+255),b
 22559  000C' 1F00'              	comf	(___awdiv@divisor+1)& (0+255),f,b
 22560  000E' B0D8               	btfsc	status,0,c
 22561  0010' 2B00'              	incf	(___awdiv@divisor+1)& (0+255),f,b
 22562                           
 22563                           ; BSR set to: 0
 22564  0012' 0E01               	movlw	1
 22565  0014' 6F00'              	movwf	___awdiv@sign& (0+255),b
 22566  0016'                    l2793:
 22567                           
 22568                           ; BSR set to: 0
 22569                           
 22570                           ; BSR set to: 0
 22571  0016' AF00'              	btfss	(___awdiv@dividend+1)& (0+255),7,b
 22572  0018' D006               	goto	l2794
 22573                           
 22574                           ; BSR set to: 0
 22575  001A' 6D00'              	negf	___awdiv@dividend& (0+255),b
 22576  001C' 1F00'              	comf	(___awdiv@dividend+1)& (0+255),f,b
 22577  001E' B0D8               	btfsc	status,0,c
 22578  0020' 2B00'              	incf	(___awdiv@dividend+1)& (0+255),f,b
 22579                           
 22580                           ; BSR set to: 0
 22581  0022' 0E01               	movlw	1
 22582  0024' 1B00'              	xorwf	___awdiv@sign& (0+255),f,b
 22583  0026'                    l2794:
 22584                           
 22585                           ; BSR set to: 0
 22586                           
 22587                           ; BSR set to: 0
 22588  0026' 0E00               	movlw	0
 22589  0028' 6F00'              	movwf	(___awdiv@quotient+1)& (0+255),b
 22590  002A' 0E00               	movlw	0
 22591  002C' 6F00'              	movwf	___awdiv@quotient& (0+255),b
 22592                           
 22593                           ; BSR set to: 0
 22594  002E' 5100'              	movf	___awdiv@divisor& (0+255),w,b
 22595  0030' 1100'              	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 22596  0032' B4D8               	btfsc	status,2,c
 22597  0034' D01C               	goto	l2801
 22598                           
 22599                           ; BSR set to: 0
 22600  0036' 0E01               	movlw	1
 22601  0038' 6F00'              	movwf	___awdiv@counter& (0+255),b
 22602  003A' D004               	goto	l2796
 22603  003C'                    
 22604                           ; BSR set to: 0
 22605                           
 22606                           ; BSR set to: 0
 22607  003C' 90D8               	bcf	status,0,c
 22608  003E' 3700'              	rlcf	___awdiv@divisor& (0+255),f,b
 22609  0040' 3700'              	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 22610  0042' 2B00'              	incf	___awdiv@counter& (0+255),f,b
 22611  0044'                    l2796:
 22612                           
 22613                           ; BSR set to: 0
 22614                           
 22615                           ; BSR set to: 0
 22616  0044' AF00'              	btfss	(___awdiv@divisor+1)& (0+255),7,b
 22617  0046' D7FA               	goto	l2797
 22618  0048'                    u8200:
 22619                           
 22620                           ; BSR set to: 0
 22621                           
 22622                           ; BSR set to: 0
 22623                           
 22624                           ; BSR set to: 0
 22625  0048' 90D8               	bcf	status,0,c
 22626  004A' 3700'              	rlcf	___awdiv@quotient& (0+255),f,b
 22627  004C' 3700'              	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 22628                           
 22629                           ; BSR set to: 0
 22630  004E' 5100'              	movf	___awdiv@divisor& (0+255),w,b
 22631  0050' 5D00'              	subwf	___awdiv@dividend& (0+255),w,b
 22632  0052' 5100'              	movf	(___awdiv@divisor+1)& (0+255),w,b
 22633  0054' 5900'              	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 22634  0056' A0D8               	btfss	status,0,c
 22635  0058' D005               	goto	l2800
 22636                           
 22637                           ; BSR set to: 0
 22638  005A' 5100'              	movf	___awdiv@divisor& (0+255),w,b
 22639  005C' 5F00'              	subwf	___awdiv@dividend& (0+255),f,b
 22640  005E' 5100'              	movf	(___awdiv@divisor+1)& (0+255),w,b
 22641  0060' 5B00'              	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 22642                           
 22643                           ; BSR set to: 0
 22644  0062' 8100'              	bsf	___awdiv@quotient& (0+255),0,b
 22645  0064'                    l2800:
 22646                           
 22647                           ; BSR set to: 0
 22648                           
 22649                           ; BSR set to: 0
 22650  0064' 90D8               	bcf	status,0,c
 22651  0066' 3300'              	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 22652  0068' 3300'              	rrcf	___awdiv@divisor& (0+255),f,b
 22653                           
 22654                           ; BSR set to: 0
 22655  006A' 2F00'              	decfsz	___awdiv@counter& (0+255),f,b
 22656  006C' D7ED               	goto	u8200
 22657  006E'                    l2801:
 22658                           
 22659                           ; BSR set to: 0
 22660                           
 22661                           ; BSR set to: 0
 22662                           
 22663                           ; BSR set to: 0
 22664  006E' 5100'              	movf	___awdiv@sign& (0+255),w,b
 22665  0070' B4D8               	btfsc	status,2,c
 22666  0072' D004               	goto	l2802
 22667                           
 22668                           ; BSR set to: 0
 22669  0074' 6D00'              	negf	___awdiv@quotient& (0+255),b
 22670  0076' 1F00'              	comf	(___awdiv@quotient+1)& (0+255),f,b
 22671  0078' B0D8               	btfsc	status,0,c
 22672  007A' 2B00'              	incf	(___awdiv@quotient+1)& (0+255),f,b
 22673  007C'                    l2802:
 22674                           
 22675                           ; BSR set to: 0
 22676                           
 22677                           ; BSR set to: 0
 22678  007C' C006' F000'        	movff	___awdiv@quotient,?___awdiv
 22679  0080' C007' F001'        	movff	___awdiv@quotient+1,?___awdiv+1
 22680  0084' 0012               	return	
 22681  0086'                    __end_of___awdiv:
 22682                           	opt stack 0
 22683                           tosu	equ	0xFFF
 22684                           tosh	equ	0xFFE
 22685                           tosl	equ	0xFFD
 22686                           pclath	equ	0xFFA
 22687                           tblptru	equ	0xFF8
 22688                           tblptrh	equ	0xFF7
 22689                           tblptrl	equ	0xFF6
 22690                           tablat	equ	0xFF5
 22691                           prodh	equ	0xFF4
 22692                           prodl	equ	0xFF3
 22693                           intcon	equ	0xFF2
 22694                           intcon2	equ	0xFF1
 22695                           intcon3	equ	0xFF0
 22696                           indf0	equ	0xFEF
 22697                           postinc0	equ	0xFEE
 22698                           fsr0h	equ	0xFEA
 22699                           fsr0l	equ	0xFE9
 22700                           wreg	equ	0xFE8
 22701                           postinc1	equ	0xFE6
 22702                           postdec1	equ	0xFE5
 22703                           plusw1	equ	0xFE3
 22704                           fsr1h	equ	0xFE2
 22705                           fsr1l	equ	0xFE1
 22706                           indf2	equ	0xFDF
 22707                           postinc2	equ	0xFDE
 22708                           postdec2	equ	0xFDD
 22709                           plusw2	equ	0xFDB
 22710                           fsr2h	equ	0xFDA
 22711                           fsr2l	equ	0xFD9
 22712                           status	equ	0xFD8
 22713                           
 22714 ;; *************** function _AssembleEncryptionBlock *****************
 22715 ;; Defined at:
 22716 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22717 ;; Parameters:    Size  Location     Type
 22718 ;;  dir             1    wreg     unsigned char 
 22719 ;;  frameCounter    4   11[BANK0 ] unsigned long 
 22720 ;;  blockId         1   15[BANK0 ] unsigned char 
 22721 ;;  firstByte       1   16[BANK0 ] unsigned char 
 22722 ;;  multicastSta    1   17[BANK0 ] unsigned char 
 22723 ;; Auto vars:     Size  Location     Type
 22724 ;;  dir             1   18[BANK0 ] unsigned char 
 22725 ;;  bufferIndex     1   19[BANK0 ] unsigned char 
 22726 ;; Return value:  Size  Location     Type
 22727 ;;                  1    wreg      void 
 22728 ;; Registers used:
 22729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22730 ;; Tracked objects:
 22731 ;;		On entry : 0/0
 22732 ;;		On exit  : 0/0
 22733 ;;		Unchanged: 0/0
 22734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22735 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22736 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22738 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22739 ;;Total ram usage:        9 bytes
 22740 ;; Hardware stack levels used:    1
 22741 ;; Hardware stack levels required when called:    8
 22742 ;; This function calls:
 22743 ;;		_memcpy
 22744 ;;		_memset
 22745 ;; This function is called by:
 22746 ;;		_LORAWAN_RxDone
 22747 ;;		_AssemblePacket
 22748 ;;		_EncryptFRMPayload
 22749 ;; This function uses a non-reentrant model
 22750 ;;
 22751                           
 22752                           	psect	text110
 22753  0000'                    __ptext110:
 22754                           	opt stack 0
 22755  0000'                    _AssembleEncryptionBlock:
 22756                           	opt stack 19
 22757                           
 22758                           ; BSR set to: 0
 22759                           ;incstack = 0
 22760                           ;AssembleEncryptionBlock@dir stored from wreg
 22761  0000' 0100               	movlb	0	; () banked
 22762  0002' 6F00'              	movwf	AssembleEncryptionBlock@dir& (0+255),b
 22763                           
 22764                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 22765  0004' 0E00               	movlw	0
 22766  0006' 0100               	movlb	0	; () banked
 22767  0008' 6F00'              	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 22768                           
 22769                           ; BSR set to: 0
 22770                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 22771  000A' 0E00'              	movlw	low _aesBuffer
 22772  000C' 6F00'              	movwf	memset@p1& (0+255),b
 22773  000E' 0E00'              	movlw	high _aesBuffer
 22774  0010' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 22775  0012' 0E00               	movlw	0
 22776  0014' 6F00'              	movwf	(memset@c+1)& (0+255),b
 22777  0016' 0E00               	movlw	0
 22778  0018' 6F00'              	movwf	memset@c& (0+255),b
 22779  001A' 0E00               	movlw	0
 22780  001C' 6F00'              	movwf	(memset@n+1)& (0+255),b
 22781  001E' 0E10               	movlw	16
 22782  0020' 6F00'              	movwf	memset@n& (0+255),b
 22783  0022' EC00' F000'        	call	_memset	;wreg free
 22784                           
 22785                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 22786  0026' 0100               	movlb	0	; () banked
 22787  0028' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22788  002A' 0D01               	mullw	1
 22789  002C' 0E00'              	movlw	low _aesBuffer
 22790  002E' 24F3               	addwf	prodl,w,c
 22791  0030' 6ED9               	movwf	fsr2l,c
 22792  0032' 0E00'              	movlw	high _aesBuffer
 22793  0034' 20F4               	addwfc	prodh,w,c
 22794  0036' 6EDA               	movwf	fsr2h,c
 22795  0038' C010' FFDF         	movff	AssembleEncryptionBlock@firstByte,indf2
 22796                           
 22797                           ; BSR set to: 0
 22798                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 22799  003C' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22800  003E' 0F05               	addlw	5
 22801  0040' 6F00'              	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 22802                           
 22803                           ; BSR set to: 0
 22804                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 22805  0042' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22806  0044' 0D01               	mullw	1
 22807  0046' 0E00'              	movlw	low _aesBuffer
 22808  0048' 24F3               	addwf	prodl,w,c
 22809  004A' 6ED9               	movwf	fsr2l,c
 22810  004C' 0E00'              	movlw	high _aesBuffer
 22811  004E' 20F4               	addwfc	prodh,w,c
 22812  0050' 6EDA               	movwf	fsr2h,c
 22813  0052' C012' FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 22814                           
 22815                           ; BSR set to: 0
 22816  0056' 2B00'              	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 22817                           
 22818                           ; BSR set to: 0
 22819                           ;lorawan.c: 2168: if (0 == multicastStatus)
 22820  0058' 5100'              	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 22821  005A' A4D8               	btfss	status,2,c
 22822  005C' D013               	goto	l902
 22823                           
 22824                           ; BSR set to: 0
 22825                           ;lorawan.c: 2169: {
 22826                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 22827  005E' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22828  0060' 0D01               	mullw	1
 22829  0062' 0E00'              	movlw	low _aesBuffer
 22830  0064' 24F3               	addwf	prodl,w,c
 22831  0066' 6F00'              	movwf	memcpy@d1& (0+255),b
 22832  0068' 0E00'              	movlw	high _aesBuffer
 22833  006A' 20F4               	addwfc	prodh,w,c
 22834  006C' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 22835  006E' 0E00'              	movlw	low (_loRa+30)
 22836  0070' 6F00'              	movwf	memcpy@s1& (0+255),b
 22837  0072' 0E00'              	movlw	high (_loRa+30)
 22838  0074' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 22839  0076' 0E00               	movlw	0
 22840  0078' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 22841  007A' 0E04               	movlw	4
 22842  007C' 6F00'              	movwf	memcpy@n& (0+255),b
 22843  007E' EC00' F000'        	call	_memcpy	;wreg free
 22844  0082' D012               	goto	l8670
 22845  0084'                    l902:
 22846                           
 22847                           ; BSR set to: 0
 22848                           ;lorawan.c: 2173: else
 22849                           ;lorawan.c: 2174: {
 22850                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 22851                           
 22852                           ; BSR set to: 0
 22853  0084' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22854  0086' 0D01               	mullw	1
 22855  0088' 0E00'              	movlw	low _aesBuffer
 22856  008A' 24F3               	addwf	prodl,w,c
 22857  008C' 6F00'              	movwf	memcpy@d1& (0+255),b
 22858  008E' 0E00'              	movlw	high _aesBuffer
 22859  0090' 20F4               	addwfc	prodh,w,c
 22860  0092' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 22861  0094' 0E00'              	movlw	low (_loRa+98)
 22862  0096' 6F00'              	movwf	memcpy@s1& (0+255),b
 22863  0098' 0E00'              	movlw	high (_loRa+98)
 22864  009A' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 22865  009C' 0E00               	movlw	0
 22866  009E' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 22867  00A0' 0E04               	movlw	4
 22868  00A2' 6F00'              	movwf	memcpy@n& (0+255),b
 22869  00A4' EC00' F000'        	call	_memcpy	;wreg free
 22870  00A8'                    l8670:
 22871                           
 22872                           ;lorawan.c: 2176: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.mcastDev
      +                          iceAddress);
 22873  00A8' 0100               	movlb	0	; () banked
 22874  00AA' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22875  00AC' 0F04               	addlw	4
 22876  00AE' 6F00'              	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 22877                           
 22878                           ; BSR set to: 0
 22879                           ;lorawan.c: 2177: }
 22880                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 22881                           
 22882                           ; BSR set to: 0
 22883  00B0' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22884  00B2' 0D01               	mullw	1
 22885  00B4' 0E00'              	movlw	low _aesBuffer
 22886  00B6' 24F3               	addwf	prodl,w,c
 22887  00B8' 6F00'              	movwf	memcpy@d1& (0+255),b
 22888  00BA' 0E00'              	movlw	high _aesBuffer
 22889  00BC' 20F4               	addwfc	prodh,w,c
 22890  00BE' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 22891  00C0' 0E00'              	movlw	low AssembleEncryptionBlock@frameCounter
 22892  00C2' 6F00'              	movwf	memcpy@s1& (0+255),b
 22893  00C4' 0E00'              	movlw	high AssembleEncryptionBlock@frameCounter
 22894  00C6' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 22895  00C8' 0E00               	movlw	0
 22896  00CA' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 22897  00CC' 0E04               	movlw	4
 22898  00CE' 6F00'              	movwf	memcpy@n& (0+255),b
 22899  00D0' EC00' F000'        	call	_memcpy	;wreg free
 22900                           
 22901                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 22902  00D4' 0100               	movlb	0	; () banked
 22903  00D6' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22904  00D8' 0F04               	addlw	4
 22905  00DA' 6F00'              	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 22906                           
 22907                           ; BSR set to: 0
 22908                           ;lorawan.c: 2182: bufferIndex ++;
 22909  00DC' 2B00'              	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 22913  00DE' 5100'              	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 22914  00E0' 0D01               	mullw	1
 22915  00E2' 0E00'              	movlw	low _aesBuffer
 22916  00E4' 24F3               	addwf	prodl,w,c
 22917  00E6' 6ED9               	movwf	fsr2l,c
 22918  00E8' 0E00'              	movlw	high _aesBuffer
 22919  00EA' 20F4               	addwfc	prodh,w,c
 22920  00EC' 6EDA               	movwf	fsr2h,c
 22921  00EE' C00F' FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 22922                           
 22923                           ; BSR set to: 0
 22924  00F2' 0012               	return		;funcret
 22925  00F4'                    __end_of_AssembleEncryptionBlock:
 22926                           	opt stack 0
 22927                           tosu	equ	0xFFF
 22928                           tosh	equ	0xFFE
 22929                           tosl	equ	0xFFD
 22930                           pclath	equ	0xFFA
 22931                           tblptru	equ	0xFF8
 22932                           tblptrh	equ	0xFF7
 22933                           tblptrl	equ	0xFF6
 22934                           tablat	equ	0xFF5
 22935                           prodh	equ	0xFF4
 22936                           prodl	equ	0xFF3
 22937                           intcon	equ	0xFF2
 22938                           intcon2	equ	0xFF1
 22939                           intcon3	equ	0xFF0
 22940                           indf0	equ	0xFEF
 22941                           postinc0	equ	0xFEE
 22942                           fsr0h	equ	0xFEA
 22943                           fsr0l	equ	0xFE9
 22944                           wreg	equ	0xFE8
 22945                           postinc1	equ	0xFE6
 22946                           postdec1	equ	0xFE5
 22947                           plusw1	equ	0xFE3
 22948                           fsr1h	equ	0xFE2
 22949                           fsr1l	equ	0xFE1
 22950                           indf2	equ	0xFDF
 22951                           postinc2	equ	0xFDE
 22952                           postdec2	equ	0xFDD
 22953                           plusw2	equ	0xFDB
 22954                           fsr2h	equ	0xFDA
 22955                           fsr2l	equ	0xFD9
 22956                           status	equ	0xFD8
 22957                           
 22958 ;; *************** function _CountfOptsLength *****************
 22959 ;; Defined at:
 22960 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22961 ;; Parameters:    Size  Location     Type
 22962 ;;		None
 22963 ;; Auto vars:     Size  Location     Type
 22964 ;;  i               1    7[BANK0 ] unsigned char 
 22965 ;;  macCommandLe    1    6[BANK0 ] unsigned char 
 22966 ;; Return value:  Size  Location     Type
 22967 ;;                  1    wreg      unsigned char 
 22968 ;; Registers used:
 22969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22970 ;; Tracked objects:
 22971 ;;		On entry : 0/0
 22972 ;;		On exit  : 0/0
 22973 ;;		Unchanged: 0/0
 22974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22978 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22979 ;;Total ram usage:        8 bytes
 22980 ;; Hardware stack levels used:    1
 22981 ;; Hardware stack levels required when called:    7
 22982 ;; This function calls:
 22983 ;;		Nothing
 22984 ;; This function is called by:
 22985 ;;		_LORAWAN_GetMaxPayloadSize
 22986 ;;		_AssemblePacket
 22987 ;; This function uses a non-reentrant model
 22988 ;;
 22989                           
 22990                           	psect	text111
 22991  0000'                    __ptext111:
 22992                           	opt stack 0
 22993  0000'                    _CountfOptsLength:
 22994                           	opt stack 21
 22995                           
 22996                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 22997                           
 22998                           ; BSR set to: 0
 22999                           ;incstack = 0
 23000  0000' 0E00               	movlw	0
 23001  0002' 0100               	movlb	0	; () banked
 23002  0004' 6F00'              	movwf	CountfOptsLength@macCommandLength& (0+255),b
 23003                           
 23004                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 23005  0006' 0E00               	movlw	0
 23006  0008' 6F00'              	movwf	CountfOptsLength@i& (0+255),b
 23007  000A' D057               	goto	l893
 23008  000C'                    
 23009                           ; BSR set to: 0
 23010                           ;lorawan.c: 2139: {
 23011                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 23012                           
 23013                           ; BSR set to: 0
 23014  000C' 5100'              	movf	CountfOptsLength@i& (0+255),w,b
 23015  000E' 0D02               	mullw	2
 23016  0010' 0E00'              	movlw	low (_loRa+153)
 23017  0012' 24F3               	addwf	prodl,w,c
 23018  0014' 6ED9               	movwf	fsr2l,c
 23019  0016' 0E00'              	movlw	high (_loRa+153)
 23020  0018' 20F4               	addwfc	prodh,w,c
 23021  001A' 6EDA               	movwf	fsr2h,c
 23022  001C' 28DE               	incf	postinc2,w,c
 23023  001E' B4D8               	btfsc	status,2,c
 23024  0020' D04B               	goto	l897
 23025                           
 23026                           ; BSR set to: 0
 23027                           ;lorawan.c: 2141: {
 23028                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 23029  0022' 0EFE               	movlw	254
 23030  0024' 6F00'              	movwf	??_CountfOptsLength& (0+255),b
 23031  0026' 0EFF               	movlw	255
 23032  0028' 6F00'              	movwf	(??_CountfOptsLength+1)& (0+255),b
 23033  002A' 5100'              	movf	CountfOptsLength@i& (0+255),w,b
 23034  002C' 0D02               	mullw	2
 23035  002E' 0E00'              	movlw	low (_loRa+153)
 23036  0030' 24F3               	addwf	prodl,w,c
 23037  0032' 6ED9               	movwf	fsr2l,c
 23038  0034' 0E00'              	movlw	high (_loRa+153)
 23039  0036' 20F4               	addwfc	prodh,w,c
 23040  0038' 6EDA               	movwf	fsr2h,c
 23041  003A' 50DF               	movf	indf2,w,c
 23042  003C' 6F00'              	movwf	(??_CountfOptsLength+2)& (0+255),b
 23043  003E' 6B00'              	clrf	(??_CountfOptsLength+3)& (0+255),b
 23044  0040' 5100'              	movf	??_CountfOptsLength& (0+255),w,b
 23045  0042' 2700'              	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23046  0044' 5100'              	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23047  0046' 2300'              	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23048  0048' 0E00'              	movlw	low _macEndDevCmdReplyLen
 23049  004A' 2500'              	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23050  004C' 6EF6               	movwf	tblptrl,c
 23051  004E' 0E00'              	movlw	high _macEndDevCmdReplyLen
 23052  0050' 2100'              	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23053  0052' 6EF7               	movwf	tblptrh,c
 23054  0054'                    	if	1	;There are 3 active tblptr bytes
 23055  0054' 6AF8               	clrf	tblptru,c
 23056  0056' 0E00'              	movlw	low (__mediumconst shr (0+16))
 23057  0058' 22F8               	addwfc	tblptru,f,c
 23058  005A'                    	endif
 23059  005A' 0008               	tblrd		*
 23060  005C' 50F5               	movf	tablat,w,c
 23061  005E' C006' F004'        	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 23062  0062' 6B00'              	clrf	(??_CountfOptsLength+5)& (0+255),b
 23063  0064' 2700'              	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 23064  0066' 0E00               	movlw	0
 23065  0068' 2300'              	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 23066  006A' BF00'              	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 23067  006C' D006               	goto	u8800
 23068  006E' 5100'              	movf	(??_CountfOptsLength+5)& (0+255),w,b
 23069  0070' E12A               	bnz	l9342
 23070  0072' 0E10               	movlw	16
 23071  0074' 5D00'              	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 23072  0076' B0D8               	btfsc	status,0,c
 23073  0078' D026               	goto	u8810
 23074  007A'                    u8800:
 23075                           
 23076                           ; BSR set to: 0
 23077                           ;lorawan.c: 2143: {
 23078                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 23079  007A' 0EFE               	movlw	254
 23080  007C' 6F00'              	movwf	??_CountfOptsLength& (0+255),b
 23081  007E' 0EFF               	movlw	255
 23082  0080' 6F00'              	movwf	(??_CountfOptsLength+1)& (0+255),b
 23083  0082' 5100'              	movf	CountfOptsLength@i& (0+255),w,b
 23084  0084' 0D02               	mullw	2
 23085  0086' 0E00'              	movlw	low (_loRa+153)
 23086  0088' 24F3               	addwf	prodl,w,c
 23087  008A' 6ED9               	movwf	fsr2l,c
 23088  008C' 0E00'              	movlw	high (_loRa+153)
 23089  008E' 20F4               	addwfc	prodh,w,c
 23090  0090' 6EDA               	movwf	fsr2h,c
 23091  0092' 50DF               	movf	indf2,w,c
 23092  0094' 6F00'              	movwf	(??_CountfOptsLength+2)& (0+255),b
 23093  0096' 6B00'              	clrf	(??_CountfOptsLength+3)& (0+255),b
 23094  0098' 5100'              	movf	??_CountfOptsLength& (0+255),w,b
 23095  009A' 2700'              	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23096  009C' 5100'              	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23097  009E' 2300'              	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23098  00A0' 0E00'              	movlw	low _macEndDevCmdReplyLen
 23099  00A2' 2500'              	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23100  00A4' 6EF6               	movwf	tblptrl,c
 23101  00A6' 0E00'              	movlw	high _macEndDevCmdReplyLen
 23102  00A8' 2100'              	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23103  00AA' 6EF7               	movwf	tblptrh,c
 23104  00AC'                    	if	1	;There are 3 active tblptr bytes
 23105  00AC' 6AF8               	clrf	tblptru,c
 23106  00AE' 0E00'              	movlw	low (__mediumconst shr (0+16))
 23107  00B0' 22F8               	addwfc	tblptru,f,c
 23108  00B2'                    	endif
 23109  00B2' 0008               	tblrd		*
 23110  00B4' 50F5               	movf	tablat,w,c
 23111  00B6' 2700'              	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 23112  00B8'                    l897:
 23113                           
 23114                           ; BSR set to: 0
 23115                           
 23116                           ; BSR set to: 0
 23117                           
 23118                           ; BSR set to: 0
 23119  00B8' 2B00'              	incf	CountfOptsLength@i& (0+255),f,b
 23120  00BA'                    l893:
 23121                           
 23122                           ; BSR set to: 0
 23123                           
 23124                           ; BSR set to: 0
 23125  00BA' 0102               	movlb	2	; () banked
 23126  00BC' 5100'              	movf	(_loRa+152)& (0+255),w,b
 23127  00BE' 0100               	movlb	0	; () banked
 23128  00C0' 5D00'              	subwf	CountfOptsLength@i& (0+255),w,b
 23129  00C2' A0D8               	btfss	status,0,c
 23130  00C4' D7A3               	goto	l894
 23131  00C6'                    u8810:
 23132  00C6'                    l9342:
 23133                           
 23134                           ; BSR set to: 0
 23135                           ;lorawan.c: 2149: }
 23136                           ;lorawan.c: 2150: }
 23137                           ;lorawan.c: 2151: }
 23138                           ;lorawan.c: 2153: return macCommandLength;
 23139  00C6' 5100'              	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 23140  00C8' 0012               	return	
 23141  00CA'                    __end_of_CountfOptsLength:
 23142                           	opt stack 0
 23143                           tosu	equ	0xFFF
 23144                           tosh	equ	0xFFE
 23145                           tosl	equ	0xFFD
 23146                           pclath	equ	0xFFA
 23147                           tblptru	equ	0xFF8
 23148                           tblptrh	equ	0xFF7
 23149                           tblptrl	equ	0xFF6
 23150                           tablat	equ	0xFF5
 23151                           prodh	equ	0xFF4
 23152                           prodl	equ	0xFF3
 23153                           intcon	equ	0xFF2
 23154                           intcon2	equ	0xFF1
 23155                           intcon3	equ	0xFF0
 23156                           indf0	equ	0xFEF
 23157                           postinc0	equ	0xFEE
 23158                           fsr0h	equ	0xFEA
 23159                           fsr0l	equ	0xFE9
 23160                           wreg	equ	0xFE8
 23161                           postinc1	equ	0xFE6
 23162                           postdec1	equ	0xFE5
 23163                           plusw1	equ	0xFE3
 23164                           fsr1h	equ	0xFE2
 23165                           fsr1l	equ	0xFE1
 23166                           indf2	equ	0xFDF
 23167                           postinc2	equ	0xFDE
 23168                           postdec2	equ	0xFDD
 23169                           plusw2	equ	0xFDB
 23170                           fsr2h	equ	0xFDA
 23171                           fsr2l	equ	0xFD9
 23172                           status	equ	0xFD8
 23173                           
 23174 ;; *************** function _ExtractMic *****************
 23175 ;; Defined at:
 23176 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23177 ;; Parameters:    Size  Location     Type
 23178 ;;  buffer          2   11[BANK0 ] PTR unsigned char 
 23179 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23180 ;;  bufferLength    1   13[BANK0 ] unsigned char 
 23181 ;; Auto vars:     Size  Location     Type
 23182 ;;  mic             4   19[BANK0 ] unsigned long 
 23183 ;; Return value:  Size  Location     Type
 23184 ;;                  4   11[BANK0 ] unsigned long 
 23185 ;; Registers used:
 23186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23187 ;; Tracked objects:
 23188 ;;		On entry : 0/0
 23189 ;;		On exit  : 0/0
 23190 ;;		Unchanged: 0/0
 23191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23192 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23194 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23195 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23196 ;;Total ram usage:       12 bytes
 23197 ;; Hardware stack levels used:    1
 23198 ;; Hardware stack levels required when called:    8
 23199 ;; This function calls:
 23200 ;;		_memcpy
 23201 ;; This function is called by:
 23202 ;;		_LORAWAN_RxDone
 23203 ;; This function uses a non-reentrant model
 23204 ;;
 23205                           
 23206                           	psect	text112
 23207  0000'                    __ptext112:
 23208                           	opt stack 0
 23209  0000'                    _ExtractMic:
 23210                           	opt stack 18
 23211                           
 23212                           ;lorawan.c: 2189: uint32_t mic = 0;
 23213                           
 23214                           ; BSR set to: 0
 23215                           ;incstack = 0
 23216  0000' 0E00               	movlw	0
 23217  0002' 0100               	movlb	0	; () banked
 23218  0004' 6F00'              	movwf	ExtractMic@mic& (0+255),b
 23219  0006' 0E00               	movlw	0
 23220  0008' 6F00'              	movwf	(ExtractMic@mic+1)& (0+255),b
 23221  000A' 0E00               	movlw	0
 23222  000C' 6F00'              	movwf	(ExtractMic@mic+2)& (0+255),b
 23223  000E' 0E00               	movlw	0
 23224  0010' 6F00'              	movwf	(ExtractMic@mic+3)& (0+255),b
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 23228  0012' 0E00'              	movlw	low ExtractMic@mic
 23229  0014' 6F00'              	movwf	memcpy@d1& (0+255),b
 23230  0016' 0E00'              	movlw	high ExtractMic@mic
 23231  0018' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 23232  001A' 0EFC               	movlw	252
 23233  001C' 6F00'              	movwf	??_ExtractMic& (0+255),b
 23234  001E' 0EFF               	movlw	255
 23235  0020' 6F00'              	movwf	(??_ExtractMic+1)& (0+255),b
 23236  0022' 5100'              	movf	ExtractMic@bufferLength& (0+255),w,b
 23237  0024' 6F00'              	movwf	(??_ExtractMic+2)& (0+255),b
 23238  0026' 6B00'              	clrf	(??_ExtractMic+3)& (0+255),b
 23239  0028' 5100'              	movf	??_ExtractMic& (0+255),w,b
 23240  002A' 2700'              	addwf	(??_ExtractMic+2)& (0+255),f,b
 23241  002C' 5100'              	movf	(??_ExtractMic+1)& (0+255),w,b
 23242  002E' 2300'              	addwfc	(??_ExtractMic+3)& (0+255),f,b
 23243  0030' 5100'              	movf	(??_ExtractMic+2)& (0+255),w,b
 23244  0032' 2500'              	addwf	ExtractMic@buffer& (0+255),w,b
 23245  0034' 6F00'              	movwf	memcpy@s1& (0+255),b
 23246  0036' 5100'              	movf	(??_ExtractMic+3)& (0+255),w,b
 23247  0038' 2100'              	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 23248  003A' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 23249  003C' 0E00               	movlw	0
 23250  003E' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 23251  0040' 0E04               	movlw	4
 23252  0042' 6F00'              	movwf	memcpy@n& (0+255),b
 23253  0044' EC00' F000'        	call	_memcpy	;wreg free
 23254                           
 23255                           ;lorawan.c: 2191: return mic;
 23256  0048' C013' F00B'        	movff	ExtractMic@mic,?_ExtractMic
 23257  004C' C014' F00C'        	movff	ExtractMic@mic+1,?_ExtractMic+1
 23258  0050' C015' F00D'        	movff	ExtractMic@mic+2,?_ExtractMic+2
 23259  0054' C016' F00E'        	movff	ExtractMic@mic+3,?_ExtractMic+3
 23260  0058' 0012               	return	
 23261  005A'                    __end_of_ExtractMic:
 23262                           	opt stack 0
 23263                           tosu	equ	0xFFF
 23264                           tosh	equ	0xFFE
 23265                           tosl	equ	0xFFD
 23266                           pclath	equ	0xFFA
 23267                           tblptru	equ	0xFF8
 23268                           tblptrh	equ	0xFF7
 23269                           tblptrl	equ	0xFF6
 23270                           tablat	equ	0xFF5
 23271                           prodh	equ	0xFF4
 23272                           prodl	equ	0xFF3
 23273                           intcon	equ	0xFF2
 23274                           intcon2	equ	0xFF1
 23275                           intcon3	equ	0xFF0
 23276                           indf0	equ	0xFEF
 23277                           postinc0	equ	0xFEE
 23278                           fsr0h	equ	0xFEA
 23279                           fsr0l	equ	0xFE9
 23280                           wreg	equ	0xFE8
 23281                           postinc1	equ	0xFE6
 23282                           postdec1	equ	0xFE5
 23283                           plusw1	equ	0xFE3
 23284                           fsr1h	equ	0xFE2
 23285                           fsr1l	equ	0xFE1
 23286                           indf2	equ	0xFDF
 23287                           postinc2	equ	0xFDE
 23288                           postdec2	equ	0xFDD
 23289                           plusw2	equ	0xFDB
 23290                           fsr2h	equ	0xFDA
 23291                           fsr2l	equ	0xFD9
 23292                           status	equ	0xFD8
 23293                           
 23294 ;; *************** function _ComputeSessionKeys *****************
 23295 ;; Defined at:
 23296 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23297 ;; Parameters:    Size  Location     Type
 23298 ;;  joinAcceptBu    2   49[BANK0 ] PTR struct .
 23299 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23300 ;; Auto vars:     Size  Location     Type
 23301 ;;		None
 23302 ;; Return value:  Size  Location     Type
 23303 ;;                  1    wreg      void 
 23304 ;; Registers used:
 23305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23306 ;; Tracked objects:
 23307 ;;		On entry : 0/0
 23308 ;;		On exit  : 0/0
 23309 ;;		Unchanged: 0/0
 23310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23311 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23315 ;;Total ram usage:        2 bytes
 23316 ;; Hardware stack levels used:    1
 23317 ;; Hardware stack levels required when called:   10
 23318 ;; This function calls:
 23319 ;;		_AESEncodeLoRa
 23320 ;;		_PrepareSessionKeys
 23321 ;; This function is called by:
 23322 ;;		_LORAWAN_RxDone
 23323 ;; This function uses a non-reentrant model
 23324 ;;
 23325                           
 23326                           	psect	text113
 23327  0000'                    __ptext113:
 23328                           	opt stack 0
 23329  0000'                    _ComputeSessionKeys:
 23330                           	opt stack 16
 23331                           
 23332                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23333                           
 23334                           ;incstack = 0
 23335  0000' 0E00'              	movlw	low (_loRa+50)
 23336  0002' 0100               	movlb	0	; () banked
 23337  0004' 6F00'              	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23338  0006' 0E00'              	movlw	high (_loRa+50)
 23339  0008' 6F00'              	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23340  000A' 0E01               	movlw	1
 23341  000C' 2500'              	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23342  000E' 6F00'              	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23343  0010' 0E00               	movlw	0
 23344  0012' 2100'              	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23345  0014' 6F00'              	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23346  0016' 0E04               	movlw	4
 23347  0018' 2500'              	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23348  001A' 6F00'              	movwf	PrepareSessionKeys@networkId& (0+255),b
 23349  001C' 0E00               	movlw	0
 23350  001E' 2100'              	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23351  0020' 6F00'              	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23352  0022' EC00' F000'        	call	_PrepareSessionKeys	;wreg free
 23353                           
 23354                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 23355  0026' 0E02               	movlw	2
 23356  0028' 0102               	movlb	2	; () banked
 23357  002A' 6F00'              	movwf	(_loRa+50)& (0+255),b
 23358                           
 23359                           ; BSR set to: 2
 23360                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 23361  002C' 0E00'              	movlw	low (_loRa+50)
 23362  002E' 0100               	movlb	0	; () banked
 23363  0030' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 23364  0032' 0E00'              	movlw	high (_loRa+50)
 23365  0034' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23366  0036' 0E00'              	movlw	low (_loRa+66)
 23367  0038' 6F00'              	movwf	AESEncodeLoRa@key& (0+255),b
 23368  003A' 0E00'              	movlw	high (_loRa+66)
 23369  003C' 6F00'              	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23370  003E' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 23371                           
 23372                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23373  0042' 0E00'              	movlw	low (_loRa+34)
 23374  0044' 0100               	movlb	0	; () banked
 23375  0046' 6F00'              	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23376  0048' 0E00'              	movlw	high (_loRa+34)
 23377  004A' 6F00'              	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23378  004C' 0E01               	movlw	1
 23379  004E' 2500'              	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23380  0050' 6F00'              	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23381  0052' 0E00               	movlw	0
 23382  0054' 2100'              	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23383  0056' 6F00'              	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23384  0058' 0E04               	movlw	4
 23385  005A' 2500'              	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23386  005C' 6F00'              	movwf	PrepareSessionKeys@networkId& (0+255),b
 23387  005E' 0E00               	movlw	0
 23388  0060' 2100'              	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23389  0062' 6F00'              	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23390  0064' EC00' F000'        	call	_PrepareSessionKeys	;wreg free
 23391                           
 23392                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 23393  0068' 0E01               	movlw	1
 23394  006A' 0102               	movlb	2	; () banked
 23395  006C' 6F00'              	movwf	(_loRa+34)& (0+255),b
 23396                           
 23397                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 23398  006E' 0E00'              	movlw	low (_loRa+34)
 23399  0070' 0100               	movlb	0	; () banked
 23400  0072' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 23401  0074' 0E00'              	movlw	high (_loRa+34)
 23402  0076' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23403  0078' 0E00'              	movlw	low (_loRa+66)
 23404  007A' 6F00'              	movwf	AESEncodeLoRa@key& (0+255),b
 23405  007C' 0E00'              	movlw	high (_loRa+66)
 23406  007E' 6F00'              	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23407  0080' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 23408  0084' 0012               	return		;funcret
 23409  0086'                    __end_of_ComputeSessionKeys:
 23410                           	opt stack 0
 23411                           tosu	equ	0xFFF
 23412                           tosh	equ	0xFFE
 23413                           tosl	equ	0xFFD
 23414                           pclath	equ	0xFFA
 23415                           tblptru	equ	0xFF8
 23416                           tblptrh	equ	0xFF7
 23417                           tblptrl	equ	0xFF6
 23418                           tablat	equ	0xFF5
 23419                           prodh	equ	0xFF4
 23420                           prodl	equ	0xFF3
 23421                           intcon	equ	0xFF2
 23422                           intcon2	equ	0xFF1
 23423                           intcon3	equ	0xFF0
 23424                           indf0	equ	0xFEF
 23425                           postinc0	equ	0xFEE
 23426                           fsr0h	equ	0xFEA
 23427                           fsr0l	equ	0xFE9
 23428                           wreg	equ	0xFE8
 23429                           postinc1	equ	0xFE6
 23430                           postdec1	equ	0xFE5
 23431                           plusw1	equ	0xFE3
 23432                           fsr1h	equ	0xFE2
 23433                           fsr1l	equ	0xFE1
 23434                           indf2	equ	0xFDF
 23435                           postinc2	equ	0xFDE
 23436                           postdec2	equ	0xFDD
 23437                           plusw2	equ	0xFDB
 23438                           fsr2h	equ	0xFDA
 23439                           fsr2l	equ	0xFD9
 23440                           status	equ	0xFD8
 23441                           
 23442 ;; *************** function _PrepareSessionKeys *****************
 23443 ;; Defined at:
 23444 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23445 ;; Parameters:    Size  Location     Type
 23446 ;;  sessionKey      2   11[BANK0 ] PTR unsigned char 
 23447 ;;		 -> loRa.activationParameters(105), loRa(231), 
 23448 ;;  appNonce        2   13[BANK0 ] PTR unsigned char 
 23449 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23450 ;;  networkId       2   15[BANK0 ] PTR unsigned char 
 23451 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23452 ;; Auto vars:     Size  Location     Type
 23453 ;;  index           1   17[BANK0 ] unsigned char 
 23454 ;; Return value:  Size  Location     Type
 23455 ;;                  1    wreg      void 
 23456 ;; Registers used:
 23457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23458 ;; Tracked objects:
 23459 ;;		On entry : 0/0
 23460 ;;		On exit  : 0/0
 23461 ;;		Unchanged: 0/0
 23462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23463 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23466 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23467 ;;Total ram usage:        7 bytes
 23468 ;; Hardware stack levels used:    1
 23469 ;; Hardware stack levels required when called:    8
 23470 ;; This function calls:
 23471 ;;		_memcpy
 23472 ;;		_memset
 23473 ;; This function is called by:
 23474 ;;		_ComputeSessionKeys
 23475 ;; This function uses a non-reentrant model
 23476 ;;
 23477                           
 23478                           	psect	text114
 23479  0000'                    __ptext114:
 23480                           	opt stack 0
 23481  0000'                    _PrepareSessionKeys:
 23482                           	opt stack 17
 23483                           
 23484                           ;lorawan.c: 2047: uint8_t index = 0;
 23485                           
 23486                           ;incstack = 0
 23487  0000' 0E00               	movlw	0
 23488  0002' 0100               	movlb	0	; () banked
 23489  0004' 6F00'              	movwf	PrepareSessionKeys@index& (0+255),b
 23490                           
 23491                           ; BSR set to: 0
 23492                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 23493  0006' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23494  0008' 0D01               	mullw	1
 23495  000A' 50F3               	movf	prodl,w,c
 23496  000C' 2500'              	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23497  000E' 6F00'              	movwf	memset@p1& (0+255),b
 23498  0010' 50F4               	movf	prodh,w,c
 23499  0012' 2100'              	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23500  0014' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 23501  0016' 0E00               	movlw	0
 23502  0018' 6F00'              	movwf	(memset@c+1)& (0+255),b
 23503  001A' 0E00               	movlw	0
 23504  001C' 6F00'              	movwf	memset@c& (0+255),b
 23505  001E' 0E00               	movlw	0
 23506  0020' 6F00'              	movwf	(memset@n+1)& (0+255),b
 23507  0022' 0E10               	movlw	16
 23508  0024' 6F00'              	movwf	memset@n& (0+255),b
 23509  0026' EC00' F000'        	call	_memset	;wreg free
 23510                           
 23511                           ;lorawan.c: 2050: index ++;
 23512  002A' 0100               	movlb	0	; () banked
 23513  002C' 2B00'              	incf	PrepareSessionKeys@index& (0+255),f,b
 23514                           
 23515                           ; BSR set to: 0
 23516                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 23517  002E' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23518  0030' 0D01               	mullw	1
 23519  0032' 50F3               	movf	prodl,w,c
 23520  0034' 2500'              	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23521  0036' 6F00'              	movwf	memcpy@d1& (0+255),b
 23522  0038' 50F4               	movf	prodh,w,c
 23523  003A' 2100'              	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23524  003C' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 23525  003E' C00D' F002'        	movff	PrepareSessionKeys@appNonce,memcpy@s1
 23526  0042' C00E' F003'        	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 23527  0046' 0E00               	movlw	0
 23528  0048' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 23529  004A' 0E03               	movlw	3
 23530  004C' 6F00'              	movwf	memcpy@n& (0+255),b
 23531  004E' EC00' F000'        	call	_memcpy	;wreg free
 23532                           
 23533                           ;lorawan.c: 2053: index = index + 3;
 23534  0052' 0100               	movlb	0	; () banked
 23535  0054' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23536  0056' 0F03               	addlw	3
 23537  0058' 6F00'              	movwf	PrepareSessionKeys@index& (0+255),b
 23538                           
 23539                           ; BSR set to: 0
 23540                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 23541  005A' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23542  005C' 0D01               	mullw	1
 23543  005E' 50F3               	movf	prodl,w,c
 23544  0060' 2500'              	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23545  0062' 6F00'              	movwf	memcpy@d1& (0+255),b
 23546  0064' 50F4               	movf	prodh,w,c
 23547  0066' 2100'              	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23548  0068' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 23549  006A' C00F' F002'        	movff	PrepareSessionKeys@networkId,memcpy@s1
 23550  006E' C010' F003'        	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 23551  0072' 0E00               	movlw	0
 23552  0074' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 23553  0076' 0E03               	movlw	3
 23554  0078' 6F00'              	movwf	memcpy@n& (0+255),b
 23555  007A' EC00' F000'        	call	_memcpy	;wreg free
 23556                           
 23557                           ;lorawan.c: 2056: index = index + 3;
 23558  007E' 0100               	movlb	0	; () banked
 23559  0080' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23560  0082' 0F03               	addlw	3
 23561  0084' 6F00'              	movwf	PrepareSessionKeys@index& (0+255),b
 23562                           
 23563                           ; BSR set to: 0
 23564                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 23565  0086' 5100'              	movf	PrepareSessionKeys@index& (0+255),w,b
 23566  0088' 0D01               	mullw	1
 23567  008A' 50F3               	movf	prodl,w,c
 23568  008C' 2500'              	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23569  008E' 6F00'              	movwf	memcpy@d1& (0+255),b
 23570  0090' 50F4               	movf	prodh,w,c
 23571  0092' 2100'              	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23572  0094' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 23573  0096' 0E00'              	movlw	low (_loRa+195)
 23574  0098' 6F00'              	movwf	memcpy@s1& (0+255),b
 23575  009A' 0E00'              	movlw	high (_loRa+195)
 23576  009C' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 23577  009E' 0E00               	movlw	0
 23578  00A0' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 23579  00A2' 0E02               	movlw	2
 23580  00A4' 6F00'              	movwf	memcpy@n& (0+255),b
 23581  00A6' EC00' F000'        	call	_memcpy	;wreg free
 23582  00AA' 0012               	return		;funcret
 23583  00AC'                    __end_of_PrepareSessionKeys:
 23584                           	opt stack 0
 23585                           tosu	equ	0xFFF
 23586                           tosh	equ	0xFFE
 23587                           tosl	equ	0xFFD
 23588                           pclath	equ	0xFFA
 23589                           tblptru	equ	0xFF8
 23590                           tblptrh	equ	0xFF7
 23591                           tblptrl	equ	0xFF6
 23592                           tablat	equ	0xFF5
 23593                           prodh	equ	0xFF4
 23594                           prodl	equ	0xFF3
 23595                           intcon	equ	0xFF2
 23596                           intcon2	equ	0xFF1
 23597                           intcon3	equ	0xFF0
 23598                           indf0	equ	0xFEF
 23599                           postinc0	equ	0xFEE
 23600                           fsr0h	equ	0xFEA
 23601                           fsr0l	equ	0xFE9
 23602                           wreg	equ	0xFE8
 23603                           postinc1	equ	0xFE6
 23604                           postdec1	equ	0xFE5
 23605                           plusw1	equ	0xFE3
 23606                           fsr1h	equ	0xFE2
 23607                           fsr1l	equ	0xFE1
 23608                           indf2	equ	0xFDF
 23609                           postinc2	equ	0xFDE
 23610                           postdec2	equ	0xFDD
 23611                           plusw2	equ	0xFDB
 23612                           fsr2h	equ	0xFDA
 23613                           fsr2l	equ	0xFD9
 23614                           status	equ	0xFD8
 23615                           
 23616 ;; *************** function _CheckMcastFlags *****************
 23617 ;; Defined at:
 23618 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23619 ;; Parameters:    Size  Location     Type
 23620 ;;  hdr             2    0[BANK0 ] PTR struct .
 23621 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23622 ;; Auto vars:     Size  Location     Type
 23623 ;;		None
 23624 ;; Return value:  Size  Location     Type
 23625 ;;                  1    wreg      unsigned char 
 23626 ;; Registers used:
 23627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23628 ;; Tracked objects:
 23629 ;;		On entry : 0/0
 23630 ;;		On exit  : 0/0
 23631 ;;		Unchanged: 0/0
 23632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23633 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23637 ;;Total ram usage:        2 bytes
 23638 ;; Hardware stack levels used:    1
 23639 ;; Hardware stack levels required when called:    7
 23640 ;; This function calls:
 23641 ;;		Nothing
 23642 ;; This function is called by:
 23643 ;;		_LORAWAN_RxDone
 23644 ;; This function uses a non-reentrant model
 23645 ;;
 23646                           
 23647                           	psect	text115
 23648  0000'                    __ptext115:
 23649                           	opt stack 0
 23650  0000'                    _CheckMcastFlags:
 23651                           	opt stack 19
 23652                           
 23653                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 23654                           
 23655                           ;incstack = 0
 23656  0000' 0100               	movlb	0	; () banked
 23657  0002' EE20 F005          	lfsr	2,5
 23658  0006' 5100'              	movf	CheckMcastFlags@hdr& (0+255),w,b
 23659  0008' 26D9               	addwf	fsr2l,f,c
 23660  000A' 5100'              	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23661  000C' 22DA               	addwfc	fsr2h,f,c
 23662  000E' BADF               	btfsc	indf2,5,c
 23663  0010' D012               	goto	u10140
 23664                           
 23665                           ; BSR set to: 0
 23666  0012' EE20 F005          	lfsr	2,5
 23667  0016' 5100'              	movf	CheckMcastFlags@hdr& (0+255),w,b
 23668  0018' 26D9               	addwf	fsr2l,f,c
 23669  001A' 5100'              	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23670  001C' 22DA               	addwfc	fsr2h,f,c
 23671  001E' BCDF               	btfsc	indf2,6,c
 23672  0020' D00A               	goto	u10140
 23673                           
 23674                           ; BSR set to: 0
 23675  0022' C000' FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 23676  0026' C001' FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 23677  002A' 38DF               	swapf	223,w,c
 23678  002C' 32E8               	rrcf	wreg,f,c
 23679  002E' 0B07               	andlw	7
 23680  0030' 0A03               	xorlw	3
 23681  0032' B4D8               	btfsc	status,2,c
 23682  0034' D002               	goto	l883
 23683  0036'                    u10140:
 23684                           
 23685                           ; BSR set to: 0
 23686                           ;lorawan.c: 2110: {
 23687                           ;lorawan.c: 2111: return 0;
 23688                           
 23689                           ; BSR set to: 0
 23690  0036' 0E00               	movlw	0
 23691                           
 23692                           ; BSR set to: 0
 23693  0038' 0012               	return	
 23694  003A'                    l883:
 23695                           
 23696                           ; BSR set to: 0
 23697                           ;lorawan.c: 2112: }
 23698                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 23699                           
 23700                           ; BSR set to: 0
 23701  003A' EE20 F005          	lfsr	2,5
 23702  003E' 5100'              	movf	CheckMcastFlags@hdr& (0+255),w,b
 23703  0040' 26D9               	addwf	fsr2l,f,c
 23704  0042' 5100'              	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23705  0044' 22DA               	addwfc	fsr2h,f,c
 23706  0046' 50DF               	movf	223,w,c
 23707  0048' 0B0F               	andlw	15
 23708  004A' 0900               	iorlw	0
 23709  004C' B4D8               	btfsc	status,2,c
 23710  004E' D002               	goto	l887
 23711                           
 23712                           ; BSR set to: 0
 23713                           ;lorawan.c: 2115: {
 23714                           ;lorawan.c: 2116: return 0;
 23715  0050' 0E00               	movlw	0
 23716                           
 23717                           ; BSR set to: 0
 23718  0052' 0012               	return	
 23719  0054'                    l887:
 23720                           
 23721                           ; BSR set to: 0
 23722                           ;lorawan.c: 2118: else
 23723                           ;lorawan.c: 2119: {
 23724                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 23725                           
 23726                           ; BSR set to: 0
 23727  0054' EE20 F008          	lfsr	2,8
 23728  0058' 5100'              	movf	CheckMcastFlags@hdr& (0+255),w,b
 23729  005A' 26D9               	addwf	fsr2l,f,c
 23730  005C' 5100'              	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23731  005E' 22DA               	addwfc	fsr2h,f,c
 23732  0060' 50DF               	movf	indf2,w,c
 23733  0062' A4D8               	btfss	status,2,c
 23734  0064' D002               	goto	l889
 23735                           
 23736                           ; BSR set to: 0
 23737                           ;lorawan.c: 2121: {
 23738                           ;lorawan.c: 2122: return 0;
 23739  0066' 0E00               	movlw	0
 23740                           
 23741                           ; BSR set to: 0
 23742  0068' 0012               	return	
 23743  006A'                    l889:
 23744                           
 23745                           ; BSR set to: 0
 23746                           ;lorawan.c: 2123: }
 23747                           ;lorawan.c: 2124: }
 23748                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 23749                           
 23750                           ; BSR set to: 0
 23751                           
 23752                           ; BSR set to: 0
 23753  006A' EE20 F005          	lfsr	2,5
 23754  006E' 5100'              	movf	CheckMcastFlags@hdr& (0+255),w,b
 23755  0070' 26D9               	addwf	fsr2l,f,c
 23756  0072' 5100'              	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23757  0074' 22DA               	addwfc	fsr2h,f,c
 23758  0076' A8DF               	btfss	indf2,4,c
 23759  0078' D002               	goto	l890
 23760                           
 23761                           ; BSR set to: 0
 23762                           ;lorawan.c: 2127: {
 23763                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 23764  007A' 0102               	movlb	2	; () banked
 23765  007C' 8700'              	bsf	_loRa& (0+255),3,b
 23766  007E'                    l890:
 23767                           
 23768                           ;lorawan.c: 2129: }
 23769                           ;lorawan.c: 2131: return 1;
 23770                           
 23771                           ; BSR set to: 2
 23772  007E' 0E01               	movlw	1
 23773  0080' 0012               	return	
 23774  0082'                    __end_of_CheckMcastFlags:
 23775                           	opt stack 0
 23776                           tosu	equ	0xFFF
 23777                           tosh	equ	0xFFE
 23778                           tosl	equ	0xFFD
 23779                           pclath	equ	0xFFA
 23780                           tblptru	equ	0xFF8
 23781                           tblptrh	equ	0xFF7
 23782                           tblptrl	equ	0xFF6
 23783                           tablat	equ	0xFF5
 23784                           prodh	equ	0xFF4
 23785                           prodl	equ	0xFF3
 23786                           intcon	equ	0xFF2
 23787                           intcon2	equ	0xFF1
 23788                           intcon3	equ	0xFF0
 23789                           indf0	equ	0xFEF
 23790                           postinc0	equ	0xFEE
 23791                           fsr0h	equ	0xFEA
 23792                           fsr0l	equ	0xFE9
 23793                           wreg	equ	0xFE8
 23794                           postinc1	equ	0xFE6
 23795                           postdec1	equ	0xFE5
 23796                           plusw1	equ	0xFE3
 23797                           fsr1h	equ	0xFE2
 23798                           fsr1l	equ	0xFE1
 23799                           indf2	equ	0xFDF
 23800                           postinc2	equ	0xFDE
 23801                           postdec2	equ	0xFDD
 23802                           plusw2	equ	0xFDB
 23803                           fsr2h	equ	0xFDA
 23804                           fsr2l	equ	0xFD9
 23805                           status	equ	0xFD8
 23806                           
 23807 ;; *************** function _CheckFlags *****************
 23808 ;; Defined at:
 23809 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23810 ;; Parameters:    Size  Location     Type
 23811 ;;  hdr             2    0[BANK0 ] PTR struct .
 23812 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23813 ;; Auto vars:     Size  Location     Type
 23814 ;;		None
 23815 ;; Return value:  Size  Location     Type
 23816 ;;                  1    wreg      void 
 23817 ;; Registers used:
 23818 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23819 ;; Tracked objects:
 23820 ;;		On entry : 0/0
 23821 ;;		On exit  : 0/0
 23822 ;;		Unchanged: 0/0
 23823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23828 ;;Total ram usage:        2 bytes
 23829 ;; Hardware stack levels used:    1
 23830 ;; Hardware stack levels required when called:    7
 23831 ;; This function calls:
 23832 ;;		Nothing
 23833 ;; This function is called by:
 23834 ;;		_LORAWAN_RxDone
 23835 ;; This function uses a non-reentrant model
 23836 ;;
 23837                           
 23838                           	psect	text116
 23839  0000'                    __ptext116:
 23840                           	opt stack 0
 23841  0000'                    _CheckFlags:
 23842                           	opt stack 19
 23843                           
 23844                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 23845                           
 23846                           ;incstack = 0
 23847  0000' 0100               	movlb	0	; () banked
 23848  0002' EE20 F005          	lfsr	2,5
 23849  0006' 5100'              	movf	CheckFlags@hdr& (0+255),w,b
 23850  0008' 26D9               	addwf	fsr2l,f,c
 23851  000A' 5100'              	movf	(CheckFlags@hdr+1)& (0+255),w,b
 23852  000C' 22DA               	addwfc	fsr2h,f,c
 23853  000E' AEDF               	btfss	indf2,7,c
 23854  0010' D002               	goto	l876
 23855                           
 23856                           ; BSR set to: 0
 23857                           ;lorawan.c: 2077: {
 23858                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 23859  0012' 0102               	movlb	2	; () banked
 23860  0014' 8D00'              	bsf	(_loRa+2)& (0+255),6,b
 23861  0016'                    l876:
 23862                           
 23863                           ;lorawan.c: 2079: }
 23864                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 23865                           
 23866                           ; BSR set to: 2
 23867  0016' 0100               	movlb	0	; () banked
 23868  0018' EE20 F005          	lfsr	2,5
 23869  001C' 5100'              	movf	CheckFlags@hdr& (0+255),w,b
 23870  001E' 26D9               	addwf	fsr2l,f,c
 23871  0020' 5100'              	movf	(CheckFlags@hdr+1)& (0+255),w,b
 23872  0022' 22DA               	addwfc	fsr2h,f,c
 23873  0024' A8DF               	btfss	indf2,4,c
 23874  0026' D002               	goto	l877
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;lorawan.c: 2082: {
 23878                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 23879  0028' 0102               	movlb	2	; () banked
 23880  002A' 8700'              	bsf	_loRa& (0+255),3,b
 23881  002C'                    l877:
 23882                           
 23883                           ;lorawan.c: 2084: }
 23884                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 23885                           
 23886                           ; BSR set to: 2
 23887  002C' 0100               	movlb	0	; () banked
 23888  002E' EE20 F005          	lfsr	2,5
 23889  0032' 5100'              	movf	CheckFlags@hdr& (0+255),w,b
 23890  0034' 26D9               	addwf	fsr2l,f,c
 23891  0036' 5100'              	movf	(CheckFlags@hdr+1)& (0+255),w,b
 23892  0038' 22DA               	addwfc	fsr2h,f,c
 23893  003A' ACDF               	btfss	indf2,6,c
 23894  003C' D002               	goto	l878
 23895                           
 23896                           ; BSR set to: 0
 23897                           ;lorawan.c: 2087: {
 23898                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 23899  003E' 0102               	movlb	2	; () banked
 23900  0040' 8900'              	bsf	_loRa& (0+255),4,b
 23901  0042'                    l878:
 23902                           
 23903                           ;lorawan.c: 2089: }
 23904                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 23905                           
 23906                           ; BSR set to: 2
 23907  0042' C000' FFD9         	movff	CheckFlags@hdr,fsr2l
 23908  0046' C001' FFDA         	movff	CheckFlags@hdr+1,fsr2h
 23909  004A' 0100               	movlb	0	; () banked
 23910  004C' 38DF               	swapf	223,w,c
 23911  004E' 32E8               	rrcf	wreg,f,c
 23912  0050' 0B07               	andlw	7
 23913  0052' 0A05               	xorlw	5
 23914  0054' A4D8               	btfss	status,2,c
 23915  0056' 0012               	return	
 23916                           
 23917                           ; BSR set to: 0
 23918                           ;lorawan.c: 2092: {
 23919                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 23920  0058' 0102               	movlb	2	; () banked
 23921  005A' 8300'              	bsf	_loRa& (0+255),1,b
 23922  005C' 0012               	return	
 23923  005E'                    __end_of_CheckFlags:
 23924                           	opt stack 0
 23925                           tosu	equ	0xFFF
 23926                           tosh	equ	0xFFE
 23927                           tosl	equ	0xFFD
 23928                           pclath	equ	0xFFA
 23929                           tblptru	equ	0xFF8
 23930                           tblptrh	equ	0xFF7
 23931                           tblptrl	equ	0xFF6
 23932                           tablat	equ	0xFF5
 23933                           prodh	equ	0xFF4
 23934                           prodl	equ	0xFF3
 23935                           intcon	equ	0xFF2
 23936                           intcon2	equ	0xFF1
 23937                           intcon3	equ	0xFF0
 23938                           indf0	equ	0xFEF
 23939                           postinc0	equ	0xFEE
 23940                           fsr0h	equ	0xFEA
 23941                           fsr0l	equ	0xFE9
 23942                           wreg	equ	0xFE8
 23943                           postinc1	equ	0xFE6
 23944                           postdec1	equ	0xFE5
 23945                           plusw1	equ	0xFE3
 23946                           fsr1h	equ	0xFE2
 23947                           fsr1l	equ	0xFE1
 23948                           indf2	equ	0xFDF
 23949                           postinc2	equ	0xFDE
 23950                           postdec2	equ	0xFDD
 23951                           plusw2	equ	0xFDB
 23952                           fsr2h	equ	0xFDA
 23953                           fsr2l	equ	0xFD9
 23954                           status	equ	0xFD8
 23955                           
 23956 ;; *************** function _RADIO_FSKPacketSent *****************
 23957 ;; Defined at:
 23958 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 23959 ;; Parameters:    Size  Location     Type
 23960 ;;		None
 23961 ;; Auto vars:     Size  Location     Type
 23962 ;;  timeOnAir       4   74[BANK0 ] unsigned long 
 23963 ;;  irqFlags        1   82[BANK0 ] unsigned char 
 23964 ;; Return value:  Size  Location     Type
 23965 ;;                  1    wreg      void 
 23966 ;; Registers used:
 23967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23968 ;; Tracked objects:
 23969 ;;		On entry : 0/0
 23970 ;;		On exit  : 0/0
 23971 ;;		Unchanged: 0/0
 23972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23974 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23975 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23976 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23977 ;;Total ram usage:       13 bytes
 23978 ;; Hardware stack levels used:    1
 23979 ;; Hardware stack levels required when called:   12
 23980 ;; This function calls:
 23981 ;;		_LORAWAN_TxDone
 23982 ;;		_RADIO_RegisterRead
 23983 ;;		_RADIO_WriteMode
 23984 ;;		_SwTimerReadValue
 23985 ;;		_SwTimerStop
 23986 ;;		___lmul
 23987 ;; This function is called by:
 23988 ;;		_RADIO_DIO0
 23989 ;; This function uses a non-reentrant model
 23990 ;;
 23991                           
 23992                           	psect	text117
 23993  0000'                    __ptext117:
 23994                           	opt stack 0
 23995  0000'                    _RADIO_FSKPacketSent:
 23996                           	opt stack 16
 23997                           
 23998                           ;radio_driver_SX1276.c: 1168: uint8_t irqFlags;
 23999                           ;radio_driver_SX1276.c: 1169: uint32_t timeOnAir;
 24000                           ;radio_driver_SX1276.c: 1171: irqFlags = RADIO_RegisterRead(0x3F);
 24001                           
 24002                           ;incstack = 0
 24003  0000' 0E3F               	movlw	63
 24004  0002' EC00' F000'        	call	_RADIO_RegisterRead
 24005  0006' 0100               	movlb	0	; () banked
 24006  0008' 6F00'              	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 24007                           
 24008                           ; BSR set to: 0
 24009                           ;radio_driver_SX1276.c: 1172: if ((1<<(3)) == (irqFlags & (1<<(3))))
 24010  000A' A700'              	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 24011  000C' 0012               	return	
 24012                           
 24013                           ; BSR set to: 0
 24014                           ;radio_driver_SX1276.c: 1173: {
 24015                           ;radio_driver_SX1276.c: 1174: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 24016  000E' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 24017  0012' 0E00               	movlw	0
 24018  0014' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 24019  0016' 0E00               	movlw	0
 24020  0018' EC00' F000'        	call	_RADIO_WriteMode
 24021                           
 24022                           ;radio_driver_SX1276.c: 1175: RadioConfiguration.flags &= ~(1 << (0));
 24023  001C' 0101               	movlb	1	; () banked
 24024  001E' 9100'              	bcf	(_RadioConfiguration+35)& (0+255),0,b
 24025                           
 24026                           ; BSR set to: 1
 24027                           ;radio_driver_SX1276.c: 1177: SwTimerStop(RadioConfiguration.watchdogTimerId);
 24028  0020' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 24029  0022' EC00' F000'        	call	_SwTimerStop
 24030                           
 24031                           ;radio_driver_SX1276.c: 1180: do { LATB3 = 0; } while(0);
 24032  0026' 968A               	bcf	3978,3,c	;volatile
 24033                           
 24034                           ;radio_driver_SX1276.c: 1183: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 24035  0028' 0101               	movlb	1	; () banked
 24036  002A' B900'              	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 24037  002C' 0012               	return	
 24038                           
 24039                           ; BSR set to: 1
 24040                           ;radio_driver_SX1276.c: 1184: {
 24041                           ;radio_driver_SX1276.c: 1185: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 24042  002E' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 24043  0030' EC00' F000'        	call	_SwTimerReadValue
 24044  0034' 0100               	movlb	0	; () banked
 24045  0036' 5100'              	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 24046  0038' E108               	bnz	u12190
 24047  003A' 0E1F               	movlw	31
 24048  003C' 5D00'              	subwf	?_SwTimerReadValue& (0+255),w,b
 24049  003E' 0EAC               	movlw	172
 24050  0040' 5900'              	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 24051  0042' 0EDF               	movlw	223
 24052  0044' 5900'              	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 24053  0046' A0D8               	btfss	status,0,c
 24054  0048' D021               	goto	l1972
 24055  004A'                    u12190:
 24056                           
 24057                           ; BSR set to: 0
 24058  004A' 0101               	movlb	1	; () banked
 24059  004C' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 24060  004E' EC00' F000'        	call	_SwTimerReadValue
 24061  0052' 0E0D               	movlw	13
 24062  0054' D006               	goto	u12200
 24063  0056'                    u12205:
 24064  0056' 0100               	movlb	0	; () banked
 24065  0058' 90D8               	bcf	status,0,c
 24066  005A' 3300'              	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 24067  005C' 3300'              	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 24068  005E' 3300'              	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 24069  0060' 3300'              	rrcf	?_SwTimerReadValue& (0+255),f,b
 24070  0062'                    u12200:
 24071  0062' 2EE8               	decfsz	wreg,f,c
 24072  0064' D7F8               	goto	u12205
 24073  0066' C031' F03A'        	movff	?_SwTimerReadValue,___lmul@multiplier
 24074  006A' C032' F03B'        	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24075  006E' C033' F03C'        	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24076  0072' C034' F03D'        	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24077  0076' 0E7D               	movlw	125
 24078  0078' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 24079  007A' 0E00               	movlw	0
 24080  007C' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 24081  007E' 0E00               	movlw	0
 24082  0080' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 24083  0082' 0E00               	movlw	0
 24084  0084' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 24085  0086' EC00' F000'        	call	___lmul	;wreg free
 24086  008A' D021               	goto	L15
 24087  008C'                    l1972:
 24088  008C' 0101               	movlb	1	; () banked
 24089  008E' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 24090  0090' EC00' F000'        	call	_SwTimerReadValue
 24091  0094' C031' F03A'        	movff	?_SwTimerReadValue,___lmul@multiplier
 24092  0098' C032' F03B'        	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24093  009C' C033' F03C'        	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24094  00A0' C034' F03D'        	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24095  00A4' 0E7D               	movlw	125
 24096  00A6' 0100               	movlb	0	; () banked
 24097  00A8' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 24098  00AA' 0E00               	movlw	0
 24099  00AC' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 24100  00AE' 0E00               	movlw	0
 24101  00B0' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 24102  00B2' 0E00               	movlw	0
 24103  00B4' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 24104  00B6' EC00' F000'        	call	___lmul	;wreg free
 24105  00BA' 0E0D               	movlw	13
 24106  00BC' D006               	goto	u12210
 24107  00BE'                    u12215:
 24108  00BE' 0100               	movlb	0	; () banked
 24109  00C0' 90D8               	bcf	status,0,c
 24110  00C2' 3300'              	rrcf	(?___lmul+3)& (0+255),f,b
 24111  00C4' 3300'              	rrcf	(?___lmul+2)& (0+255),f,b
 24112  00C6' 3300'              	rrcf	(?___lmul+1)& (0+255),f,b
 24113  00C8' 3300'              	rrcf	?___lmul& (0+255),f,b
 24114  00CA'                    u12210:
 24115  00CA' 2EE8               	decfsz	wreg,f,c
 24116  00CC' D7F8               	goto	u12215
 24117  00CE'                    L15:
 24118  00CE' C03A' F04E'        	movff	?___lmul,_RADIO_FSKPacketSent$2851
 24119  00D2' C03B' F04F'        	movff	?___lmul+1,_RADIO_FSKPacketSent$2851+1
 24120  00D6' C03C' F050'        	movff	?___lmul+2,_RADIO_FSKPacketSent$2851+2
 24121  00DA' C03D' F051'        	movff	?___lmul+3,_RADIO_FSKPacketSent$2851+3
 24122                           
 24123                           ; BSR set to: 0
 24124  00DE' C04E' F046'        	movff	_RADIO_FSKPacketSent$2851,??_RADIO_FSKPacketSent
 24125  00E2' C04F' F047'        	movff	_RADIO_FSKPacketSent$2851+1,??_RADIO_FSKPacketSent+1
 24126  00E6' C050' F048'        	movff	_RADIO_FSKPacketSent$2851+2,??_RADIO_FSKPacketSent+2
 24127  00EA' C051' F049'        	movff	_RADIO_FSKPacketSent$2851+3,??_RADIO_FSKPacketSent+3
 24128  00EE' 0100               	movlb	0	; () banked
 24129  00F0' 1F00'              	comf	??_RADIO_FSKPacketSent& (0+255),f,b
 24130  00F2' 1F00'              	comf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24131  00F4' 1F00'              	comf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24132  00F6' 1F00'              	comf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24133  00F8' 2B00'              	incf	??_RADIO_FSKPacketSent& (0+255),f,b
 24134  00FA' 0E00               	movlw	0
 24135  00FC' 2300'              	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24136  00FE' 2300'              	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24137  0100' 2300'              	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24138  0102' 0E20               	movlw	32
 24139  0104' 2500'              	addwf	??_RADIO_FSKPacketSent& (0+255),w,b
 24140  0106' 6F00'              	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 24141  0108' 0E4E               	movlw	78
 24142  010A' 2100'              	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),w,b
 24143  010C' 6F00'              	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 24144  010E' 0E00               	movlw	0
 24145  0110' 2100'              	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),w,b
 24146  0112' 6F00'              	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 24147  0114' 0E00               	movlw	0
 24148  0116' 2100'              	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),w,b
 24149  0118' 6F00'              	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 24150                           
 24151                           ; BSR set to: 0
 24152                           ;radio_driver_SX1276.c: 1186: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 24153  011A' 0101               	movlb	1	; () banked
 24154  011C' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 24155  011E' EC00' F000'        	call	_SwTimerStop
 24156                           
 24157                           ;radio_driver_SX1276.c: 1187: LORAWAN_TxDone((uint16_t)timeOnAir);
 24158  0122' C04A' F03A'        	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 24159  0126' C04B' F03B'        	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 24160  012A' EC00' F000'        	call	_LORAWAN_TxDone	;wreg free
 24161  012E' 0012               	return	
 24162  0130'                    __end_of_RADIO_FSKPacketSent:
 24163                           	opt stack 0
 24164                           tosu	equ	0xFFF
 24165                           tosh	equ	0xFFE
 24166                           tosl	equ	0xFFD
 24167                           pclath	equ	0xFFA
 24168                           tblptru	equ	0xFF8
 24169                           tblptrh	equ	0xFF7
 24170                           tblptrl	equ	0xFF6
 24171                           tablat	equ	0xFF5
 24172                           prodh	equ	0xFF4
 24173                           prodl	equ	0xFF3
 24174                           intcon	equ	0xFF2
 24175                           intcon2	equ	0xFF1
 24176                           intcon3	equ	0xFF0
 24177                           indf0	equ	0xFEF
 24178                           postinc0	equ	0xFEE
 24179                           fsr0h	equ	0xFEA
 24180                           fsr0l	equ	0xFE9
 24181                           wreg	equ	0xFE8
 24182                           postinc1	equ	0xFE6
 24183                           postdec1	equ	0xFE5
 24184                           plusw1	equ	0xFE3
 24185                           fsr1h	equ	0xFE2
 24186                           fsr1l	equ	0xFE1
 24187                           indf2	equ	0xFDF
 24188                           postinc2	equ	0xFDE
 24189                           postdec2	equ	0xFDD
 24190                           plusw2	equ	0xFDB
 24191                           fsr2h	equ	0xFDA
 24192                           fsr2l	equ	0xFD9
 24193                           status	equ	0xFD8
 24194                           
 24195 ;; *************** function _SwTimerReadValue *****************
 24196 ;; Defined at:
 24197 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 24198 ;; Parameters:    Size  Location     Type
 24199 ;;  timerId         1    wreg     unsigned char 
 24200 ;; Auto vars:     Size  Location     Type
 24201 ;;  timerId         1   57[BANK0 ] unsigned char 
 24202 ;;  ticksCount      4   53[BANK0 ] unsigned long 
 24203 ;; Return value:  Size  Location     Type
 24204 ;;                  4   49[BANK0 ] unsigned long 
 24205 ;; Registers used:
 24206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24207 ;; Tracked objects:
 24208 ;;		On entry : 0/0
 24209 ;;		On exit  : 0/0
 24210 ;;		Unchanged: 0/0
 24211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24212 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24213 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24215 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24216 ;;Total ram usage:        9 bytes
 24217 ;; Hardware stack levels used:    1
 24218 ;; Hardware stack levels required when called:   10
 24219 ;; This function calls:
 24220 ;;		_SwTimersInterrupt
 24221 ;; This function is called by:
 24222 ;;		_RADIO_TxDone
 24223 ;;		_RADIO_FSKPacketSent
 24224 ;;		_LORAWAN_Pause
 24225 ;; This function uses a non-reentrant model
 24226 ;;
 24227                           
 24228                           	psect	text118
 24229  0000'                    __ptext118:
 24230                           	opt stack 0
 24231  0000'                    _SwTimerReadValue:
 24232                           	opt stack 17
 24233                           
 24234                           ;incstack = 0
 24235                           ;SwTimerReadValue@timerId stored from wreg
 24236  0000' 0100               	movlb	0	; () banked
 24237  0002' 6F00'              	movwf	SwTimerReadValue@timerId& (0+255),b
 24238                           
 24239                           ;sw_timer.c: 195: uint32_t ticksCount;
 24240                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 24241  0004' 9EF2               	bcf	intcon,7,c	;volatile
 24242                           
 24243                           ;sw_timer.c: 200: SwTimersInterrupt();
 24244  0006' EC00' F000'        	call	_SwTimersInterrupt	;wreg free
 24245                           
 24246                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 24247  000A' 0100               	movlb	0	; () banked
 24248  000C' 5100'              	movf	SwTimerReadValue@timerId& (0+255),w,b
 24249  000E' 0D08               	mullw	8
 24250  0010' 0E00'              	movlw	low _swTimers
 24251  0012' 24F3               	addwf	prodl,w,c
 24252  0014' 6ED9               	movwf	fsr2l,c
 24253  0016' 0E00'              	movlw	high _swTimers
 24254  0018' 20F4               	addwfc	prodh,w,c
 24255  001A' 6EDA               	movwf	fsr2h,c
 24256  001C' CFDE F035'         	movff	postinc2,SwTimerReadValue@ticksCount
 24257  0020' CFDE F036'         	movff	postinc2,SwTimerReadValue@ticksCount+1
 24258  0024' CFDE F037'         	movff	postinc2,SwTimerReadValue@ticksCount+2
 24259  0028' CFDE F038'         	movff	postinc2,SwTimerReadValue@ticksCount+3
 24260                           
 24261                           ; BSR set to: 0
 24262                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 24263  002C' 8EF2               	bsf	intcon,7,c	;volatile
 24264                           
 24265                           ; BSR set to: 0
 24266                           ;sw_timer.c: 204: return ticksCount;
 24267  002E' C035' F031'        	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 24268  0032' C036' F032'        	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 24269  0036' C037' F033'        	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 24270  003A' C038' F034'        	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 24271  003E' 0012               	return	
 24272  0040'                    __end_of_SwTimerReadValue:
 24273                           	opt stack 0
 24274                           tosu	equ	0xFFF
 24275                           tosh	equ	0xFFE
 24276                           tosl	equ	0xFFD
 24277                           pclath	equ	0xFFA
 24278                           tblptru	equ	0xFF8
 24279                           tblptrh	equ	0xFF7
 24280                           tblptrl	equ	0xFF6
 24281                           tablat	equ	0xFF5
 24282                           prodh	equ	0xFF4
 24283                           prodl	equ	0xFF3
 24284                           intcon	equ	0xFF2
 24285                           intcon2	equ	0xFF1
 24286                           intcon3	equ	0xFF0
 24287                           indf0	equ	0xFEF
 24288                           postinc0	equ	0xFEE
 24289                           fsr0h	equ	0xFEA
 24290                           fsr0l	equ	0xFE9
 24291                           wreg	equ	0xFE8
 24292                           postinc1	equ	0xFE6
 24293                           postdec1	equ	0xFE5
 24294                           plusw1	equ	0xFE3
 24295                           fsr1h	equ	0xFE2
 24296                           fsr1l	equ	0xFE1
 24297                           indf2	equ	0xFDF
 24298                           postinc2	equ	0xFDE
 24299                           postdec2	equ	0xFDD
 24300                           plusw2	equ	0xFDB
 24301                           fsr2h	equ	0xFDA
 24302                           fsr2l	equ	0xFD9
 24303                           status	equ	0xFD8
 24304                           
 24305 ;; *************** function _LORAWAN_TxDone *****************
 24306 ;; Defined at:
 24307 ;;		line 297 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 24308 ;; Parameters:    Size  Location     Type
 24309 ;;  timeOnAir       2   58[BANK0 ] unsigned int 
 24310 ;; Auto vars:     Size  Location     Type
 24311 ;;  delta           4   65[BANK0 ] unsigned long 
 24312 ;;  ticks           4    0        unsigned long 
 24313 ;;  i               1   69[BANK0 ] unsigned char 
 24314 ;; Return value:  Size  Location     Type
 24315 ;;                  1    wreg      void 
 24316 ;; Registers used:
 24317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24318 ;; Tracked objects:
 24319 ;;		On entry : 0/0
 24320 ;;		On exit  : 0/0
 24321 ;;		Unchanged: 0/0
 24322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24323 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24324 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24325 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24326 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24327 ;;Total ram usage:       12 bytes
 24328 ;; Hardware stack levels used:    1
 24329 ;; Hardware stack levels required when called:   11
 24330 ;; This function calls:
 24331 ;;		_RADIO_GetStatus
 24332 ;;		_RxData
 24333 ;;		_SwTimerSetTimeout
 24334 ;;		_SwTimerStart
 24335 ;;		___lldiv
 24336 ;; This function is called by:
 24337 ;;		_RADIO_TxDone
 24338 ;;		_RADIO_FSKPacketSent
 24339 ;;		_RADIO_WatchdogTimeout
 24340 ;; This function uses a non-reentrant model
 24341 ;;
 24342                           
 24343                           	psect	text119
 24344  0000'                    __ptext119:
 24345                           	opt stack 0
 24346  0000'                    _LORAWAN_TxDone:
 24347                           	opt stack 16
 24348                           
 24349                           ;lorawan_na.c: 299: if (loRa.macStatus.macPause == 0)
 24350                           
 24351                           ; BSR set to: 0
 24352                           ;incstack = 0
 24353  0000' 0102               	movlb	2	; () banked
 24354  0002' B100'              	btfsc	(_loRa+3)& (0+255),0,b
 24355  0004' D12D               	goto	l1425
 24356                           
 24357                           ; BSR set to: 2
 24358                           ;lorawan_na.c: 300: {
 24359                           ;lorawan_na.c: 301: uint8_t i;
 24360                           ;lorawan_na.c: 302: uint32_t delta = 0, ticks;
 24361  0006' 0E00               	movlw	0
 24362  0008' 0100               	movlb	0	; () banked
 24363  000A' 6F00'              	movwf	LORAWAN_TxDone@delta& (0+255),b
 24364  000C' 0E00               	movlw	0
 24365  000E' 6F00'              	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 24366  0010' 0E00               	movlw	0
 24367  0012' 6F00'              	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 24368  0014' 0E00               	movlw	0
 24369  0016' 6F00'              	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 24370                           
 24371                           ;lorawan_na.c: 305: loRa.rx2DelayExpired = 0;
 24372  0018' 0E00               	movlw	0
 24373  001A' 0102               	movlb	2	; () banked
 24374  001C' 6F00'              	movwf	(_loRa+226)& (0+255),b
 24375                           
 24376                           ;lorawan_na.c: 307: loRa.macStatus.macState = BEFORE_RX1;
 24377  001E' 5100'              	movf	(_loRa+2)& (0+255),w,b
 24378  0020' 0BF0               	andlw	-16
 24379  0022' 0902               	iorlw	2
 24380  0024' 6F00'              	movwf	(_loRa+2)& (0+255),b
 24381                           
 24382                           ; BSR set to: 2
 24383                           ;lorawan_na.c: 309: i = loRa.lastUsedChannelIndex;
 24384  0026' C0CB' F045'        	movff	_loRa+203,LORAWAN_TxDone@i
 24385                           
 24386                           ; BSR set to: 2
 24387                           ;lorawan_na.c: 311: if (loRa.lorawanMacStatus.joining == 1)
 24388  002A' A500'              	btfss	_loRa& (0+255),2,b
 24389  002C' D08C               	goto	l1426
 24390                           
 24391                           ; BSR set to: 2
 24392                           ;lorawan_na.c: 312: {
 24393                           ;lorawan_na.c: 313: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24394  002E' 5100'              	movf	(_loRa+23)& (0+255),w,b
 24395  0030' 0D01               	mullw	1
 24396  0032' 0E00'              	movlw	low _rxWindowOffset
 24397  0034' 24F3               	addwf	prodl,w,c
 24398  0036' 6EF6               	movwf	tblptrl,c
 24399  0038' 0E00'              	movlw	high _rxWindowOffset
 24400  003A' 20F4               	addwfc	prodh,w,c
 24401  003C' 6EF7               	movwf	tblptrh,c
 24402  003E'                    	if	1	;There are 3 active tblptr bytes
 24403  003E' 6AF8               	clrf	tblptru,c
 24404  0040' 0E00'              	movlw	low (__mediumconst shr (0+16))
 24405  0042' 22F8               	addwfc	tblptru,f,c
 24406  0044'                    	endif
 24407  0044' 0008               	tblrd		*
 24408  0046' CFF5 F03C'         	movff	tablat,??_LORAWAN_TxDone
 24409  004A' 5100'              	movf	(_loRa+138)& (0+255),w,b
 24410  004C' 0100               	movlb	0	; () banked
 24411  004E' 2500'              	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24412  0050' 6F00'              	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24413  0052' 0E00               	movlw	0
 24414  0054' BF00'              	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24415  0056' 0EFF               	movlw	255
 24416  0058' 0102               	movlb	2	; () banked
 24417  005A' 2100'              	addwfc	(_loRa+139)& (0+255),w,b
 24418  005C' 0100               	movlb	0	; () banked
 24419  005E' 6F00'              	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24420  0060' 6B00'              	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24421  0062' 6B00'              	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24422  0064' 0E0C               	movlw	12
 24423  0066'                    u11245:
 24424  0066' 90D8               	bcf	status,0,c
 24425  0068' 3700'              	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24426  006A' 3700'              	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24427  006C' 3700'              	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24428  006E' 3700'              	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24429  0070' 2EE8               	decfsz	wreg,f,c
 24430  0072' D7F9               	goto	u11245
 24431  0074' C03D' F000'        	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24432  0078' C03E' F001'        	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24433  007C' C03F' F002'        	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24434  0080' C040' F003'        	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24435  0084' 0E7D               	movlw	125
 24436  0086' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 24437  0088' 0E00               	movlw	0
 24438  008A' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 24439  008C' 0E00               	movlw	0
 24440  008E' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 24441  0090' 0E00               	movlw	0
 24442  0092' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 24443  0094' EC00' F000'        	call	___lldiv	;wreg free
 24444  0098' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 24445  009C' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24446  00A0' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24447  00A4' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24448  00A8' 0102               	movlb	2	; () banked
 24449  00AA' 5100'              	movf	(_loRa+211)& (0+255),w,b
 24450  00AC' EC00' F000'        	call	_SwTimerSetTimeout
 24451                           
 24452                           ;lorawan_na.c: 314: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24453  00B0' 0102               	movlb	2	; () banked
 24454  00B2' 5100'              	movf	(_loRa+28)& (0+255),w,b
 24455  00B4' 0D01               	mullw	1
 24456  00B6' 0E00'              	movlw	low _rxWindowOffset
 24457  00B8' 24F3               	addwf	prodl,w,c
 24458  00BA' 6EF6               	movwf	tblptrl,c
 24459  00BC' 0E00'              	movlw	high _rxWindowOffset
 24460  00BE' 20F4               	addwfc	prodh,w,c
 24461  00C0' 6EF7               	movwf	tblptrh,c
 24462  00C2'                    	if	1	;There are 3 active tblptr bytes
 24463  00C2' 6AF8               	clrf	tblptru,c
 24464  00C4' 0E00'              	movlw	low (__mediumconst shr (0+16))
 24465  00C6' 22F8               	addwfc	tblptru,f,c
 24466  00C8'                    	endif
 24467  00C8' 0008               	tblrd		*
 24468  00CA' CFF5 F03C'         	movff	tablat,??_LORAWAN_TxDone
 24469  00CE' 5100'              	movf	(_loRa+140)& (0+255),w,b
 24470  00D0' 0100               	movlb	0	; () banked
 24471  00D2' 2500'              	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24472  00D4' 6F00'              	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24473  00D6' 0E00               	movlw	0
 24474  00D8' BF00'              	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24475  00DA' 0EFF               	movlw	255
 24476  00DC' 0102               	movlb	2	; () banked
 24477  00DE' 2100'              	addwfc	(_loRa+141)& (0+255),w,b
 24478  00E0' 0100               	movlb	0	; () banked
 24479  00E2' 6F00'              	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24480  00E4' 6B00'              	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24481  00E6' 6B00'              	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24482  00E8' 0E0C               	movlw	12
 24483  00EA'                    u11255:
 24484  00EA' 90D8               	bcf	status,0,c
 24485  00EC' 3700'              	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24486  00EE' 3700'              	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24487  00F0' 3700'              	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24488  00F2' 3700'              	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24489  00F4' 2EE8               	decfsz	wreg,f,c
 24490  00F6' D7F9               	goto	u11255
 24491  00F8' C03D' F000'        	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24492  00FC' C03E' F001'        	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24493  0100' C03F' F002'        	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24494  0104' C040' F003'        	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24495  0108' 0E7D               	movlw	125
 24496  010A' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 24497  010C' 0E00               	movlw	0
 24498  010E' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 24499  0110' 0E00               	movlw	0
 24500  0112' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 24501  0114' 0E00               	movlw	0
 24502  0116' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 24503  0118' EC00' F000'        	call	___lldiv	;wreg free
 24504  011C' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 24505  0120' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24506  0124' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24507  0128' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24508  012C' 0102               	movlb	2	; () banked
 24509  012E' 5100'              	movf	(_loRa+212)& (0+255),w,b
 24510  0130' EC00' F000'        	call	_SwTimerSetTimeout
 24511                           
 24512                           ;lorawan_na.c: 316: SwTimerStart(loRa.joinAccept1TimerId);
 24513  0134' 0102               	movlb	2	; () banked
 24514  0136' 5100'              	movf	(_loRa+211)& (0+255),w,b
 24515  0138' EC00' F000'        	call	_SwTimerStart
 24516                           
 24517                           ;lorawan_na.c: 317: SwTimerStart(loRa.joinAccept2TimerId);
 24518  013C' 0102               	movlb	2	; () banked
 24519  013E' 5100'              	movf	(_loRa+212)& (0+255),w,b
 24520  0140' EC00' F000'        	call	_SwTimerStart
 24521                           
 24522                           ;lorawan_na.c: 318: }
 24523  0144' 0012               	return	
 24524  0146'                    l1426:
 24525                           
 24526                           ;lorawan_na.c: 319: else
 24527                           ;lorawan_na.c: 320: {
 24528                           ;lorawan_na.c: 321: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24529  0146' 0102               	movlb	2	; () banked
 24530  0148' 5100'              	movf	(_loRa+23)& (0+255),w,b
 24531  014A' 0D01               	mullw	1
 24532  014C' 0E00'              	movlw	low _rxWindowOffset
 24533  014E' 24F3               	addwf	prodl,w,c
 24534  0150' 6EF6               	movwf	tblptrl,c
 24535  0152' 0E00'              	movlw	high _rxWindowOffset
 24536  0154' 20F4               	addwfc	prodh,w,c
 24537  0156' 6EF7               	movwf	tblptrh,c
 24538  0158'                    	if	1	;There are 3 active tblptr bytes
 24539  0158' 6AF8               	clrf	tblptru,c
 24540  015A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 24541  015C' 22F8               	addwfc	tblptru,f,c
 24542  015E'                    	endif
 24543  015E' 0008               	tblrd		*
 24544  0160' CFF5 F03C'         	movff	tablat,??_LORAWAN_TxDone
 24545  0164' 5100'              	movf	(_loRa+134)& (0+255),w,b
 24546  0166' 0100               	movlb	0	; () banked
 24547  0168' 2500'              	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24548  016A' 6F00'              	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24549  016C' 0E00               	movlw	0
 24550  016E' BF00'              	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24551  0170' 0EFF               	movlw	255
 24552  0172' 0102               	movlb	2	; () banked
 24553  0174' 2100'              	addwfc	(_loRa+135)& (0+255),w,b
 24554  0176' 0100               	movlb	0	; () banked
 24555  0178' 6F00'              	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24556  017A' 6B00'              	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24557  017C' 6B00'              	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24558  017E' 0E0C               	movlw	12
 24559  0180'                    u11265:
 24560  0180' 90D8               	bcf	status,0,c
 24561  0182' 3700'              	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24562  0184' 3700'              	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24563  0186' 3700'              	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24564  0188' 3700'              	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24565  018A' 2EE8               	decfsz	wreg,f,c
 24566  018C' D7F9               	goto	u11265
 24567  018E' C03D' F000'        	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24568  0192' C03E' F001'        	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24569  0196' C03F' F002'        	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24570  019A' C040' F003'        	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24571  019E' 0E7D               	movlw	125
 24572  01A0' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 24573  01A2' 0E00               	movlw	0
 24574  01A4' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 24575  01A6' 0E00               	movlw	0
 24576  01A8' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 24577  01AA' 0E00               	movlw	0
 24578  01AC' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 24579  01AE' EC00' F000'        	call	___lldiv	;wreg free
 24580  01B2' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 24581  01B6' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24582  01BA' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24583  01BE' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24584  01C2' 0102               	movlb	2	; () banked
 24585  01C4' 5100'              	movf	(_loRa+213)& (0+255),w,b
 24586  01C6' EC00' F000'        	call	_SwTimerSetTimeout
 24587                           
 24588                           ;lorawan_na.c: 322: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24589  01CA' 0102               	movlb	2	; () banked
 24590  01CC' 5100'              	movf	(_loRa+28)& (0+255),w,b
 24591  01CE' 0D01               	mullw	1
 24592  01D0' 0E00'              	movlw	low _rxWindowOffset
 24593  01D2' 24F3               	addwf	prodl,w,c
 24594  01D4' 6EF6               	movwf	tblptrl,c
 24595  01D6' 0E00'              	movlw	high _rxWindowOffset
 24596  01D8' 20F4               	addwfc	prodh,w,c
 24597  01DA' 6EF7               	movwf	tblptrh,c
 24598  01DC'                    	if	1	;There are 3 active tblptr bytes
 24599  01DC' 6AF8               	clrf	tblptru,c
 24600  01DE' 0E00'              	movlw	low (__mediumconst shr (0+16))
 24601  01E0' 22F8               	addwfc	tblptru,f,c
 24602  01E2'                    	endif
 24603  01E2' 0008               	tblrd		*
 24604  01E4' CFF5 F03C'         	movff	tablat,??_LORAWAN_TxDone
 24605  01E8' 5100'              	movf	(_loRa+136)& (0+255),w,b
 24606  01EA' 0100               	movlb	0	; () banked
 24607  01EC' 2500'              	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24608  01EE' 6F00'              	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24609  01F0' 0E00               	movlw	0
 24610  01F2' BF00'              	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24611  01F4' 0EFF               	movlw	255
 24612  01F6' 0102               	movlb	2	; () banked
 24613  01F8' 2100'              	addwfc	(_loRa+137)& (0+255),w,b
 24614  01FA' 0100               	movlb	0	; () banked
 24615  01FC' 6F00'              	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24616  01FE' 6B00'              	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24617  0200' 6B00'              	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24618  0202' 0E0C               	movlw	12
 24619  0204'                    u11275:
 24620  0204' 90D8               	bcf	status,0,c
 24621  0206' 3700'              	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24622  0208' 3700'              	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24623  020A' 3700'              	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24624  020C' 3700'              	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24625  020E' 2EE8               	decfsz	wreg,f,c
 24626  0210' D7F9               	goto	u11275
 24627  0212' C03D' F000'        	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24628  0216' C03E' F001'        	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24629  021A' C03F' F002'        	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24630  021E' C040' F003'        	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24631  0222' 0E7D               	movlw	125
 24632  0224' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 24633  0226' 0E00               	movlw	0
 24634  0228' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 24635  022A' 0E00               	movlw	0
 24636  022C' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 24637  022E' 0E00               	movlw	0
 24638  0230' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 24639  0232' EC00' F000'        	call	___lldiv	;wreg free
 24640  0236' C000' F00D'        	movff	?___lldiv,SwTimerSetTimeout@timeout
 24641  023A' C001' F00E'        	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24642  023E' C002' F00F'        	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24643  0242' C003' F010'        	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24644  0246' 0102               	movlb	2	; () banked
 24645  0248' 5100'              	movf	(_loRa+214)& (0+255),w,b
 24646  024A' EC00' F000'        	call	_SwTimerSetTimeout
 24647                           
 24648                           ;lorawan_na.c: 324: SwTimerStart(loRa.receiveWindow1TimerId);
 24649  024E' 0102               	movlb	2	; () banked
 24650  0250' 5100'              	movf	(_loRa+213)& (0+255),w,b
 24651  0252' EC00' F000'        	call	_SwTimerStart
 24652                           
 24653                           ;lorawan_na.c: 325: SwTimerStart(loRa.receiveWindow2TimerId);
 24654  0256' 0102               	movlb	2	; () banked
 24655  0258' 5100'              	movf	(_loRa+214)& (0+255),w,b
 24656  025A' EC00' F000'        	call	_SwTimerStart
 24657                           
 24658                           ;lorawan_na.c: 326: }
 24659                           ;lorawan_na.c: 327: }
 24660  025E' 0012               	return	
 24661  0260'                    l1425:
 24662                           
 24663                           ;lorawan_na.c: 328: else
 24664                           ;lorawan_na.c: 329: {
 24665                           ;lorawan_na.c: 330: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 24666  0260' EC00' F000'        	call	_RADIO_GetStatus	;wreg free
 24667  0264' 0100               	movlb	0	; () banked
 24668  0266' 6F00'              	movwf	??_LORAWAN_TxDone& (0+255),b
 24669  0268' A900'              	btfss	??_LORAWAN_TxDone& (0+255),4,b
 24670  026A' D013               	goto	l1429
 24671                           
 24672                           ; BSR set to: 0
 24673                           ;lorawan_na.c: 331: {
 24674                           ;lorawan_na.c: 333: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 24675  026C' 0E00               	movlw	0
 24676  026E' 6F00'              	movwf	RxData@pData& (0+255),b
 24677  0270' 0E00               	movlw	0
 24678  0272' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 24679  0274' 0E00               	movlw	0
 24680  0276' 6F00'              	movwf	RxData@dataLength& (0+255),b
 24681  0278' 0E02               	movlw	2
 24682  027A' 6F00'              	movwf	RxData@status& (0+255),b
 24683  027C' D801               	call	u11298
 24684  027E' 0012               	return	
 24685  0280'                    u11298:
 24686  0280' 0005               	push	
 24687  0282' 6EFA               	movwf	pclath,c
 24688  0284' 5100'              	movf	_rxPayload& (0+255),w,b
 24689  0286' 6EFD               	movwf	tosl,c
 24690  0288' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 24691  028A' 6EFE               	movwf	tosh,c
 24692  028C' 6AFF               	clrf	tosu,c
 24693  028E' 50FA               	movf	pclath,w,c
 24694  0290' 0012               	return		;indir
 24695  0292'                    l1429:
 24696                           
 24697                           ;lorawan_na.c: 335: else
 24698                           ;lorawan_na.c: 336: {
 24699                           ;lorawan_na.c: 338: if ( rxPayload.RxAppData != (0) )
 24700  0292' 0100               	movlb	0	; () banked
 24701  0294' 5100'              	movf	_rxPayload& (0+255),w,b
 24702  0296' 1100'              	iorwf	(_rxPayload+1)& (0+255),w,b
 24703  0298' B4D8               	btfsc	status,2,c
 24704  029A' 0012               	return	
 24705                           
 24706                           ; BSR set to: 0
 24707                           ;lorawan_na.c: 339: {
 24708                           ;lorawan_na.c: 340: rxPayload.RxAppData( (0), 0, RADIO_OK );
 24709  029C' 0E00               	movlw	0
 24710  029E' 6F00'              	movwf	RxData@pData& (0+255),b
 24711  02A0' 0E00               	movlw	0
 24712  02A2' 6F00'              	movwf	(RxData@pData+1)& (0+255),b
 24713  02A4' 0E00               	movlw	0
 24714  02A6' 6F00'              	movwf	RxData@dataLength& (0+255),b
 24715  02A8' 0E03               	movlw	3
 24716  02AA' 6F00'              	movwf	RxData@status& (0+255),b
 24717  02AC' D801               	call	u11318
 24718  02AE' 0012               	return	
 24719  02B0'                    u11318:
 24720  02B0' 0005               	push	
 24721  02B2' 6EFA               	movwf	pclath,c
 24722  02B4' 5100'              	movf	_rxPayload& (0+255),w,b
 24723  02B6' 6EFD               	movwf	tosl,c
 24724  02B8' 5100'              	movf	(_rxPayload+1)& (0+255),w,b
 24725  02BA' 6EFE               	movwf	tosh,c
 24726  02BC' 6AFF               	clrf	tosu,c
 24727  02BE' 50FA               	movf	pclath,w,c
 24728  02C0' 0012               	return		;indir
 24729  02C2'                    __end_of_LORAWAN_TxDone:
 24730                           	opt stack 0
 24731                           tosu	equ	0xFFF
 24732                           tosh	equ	0xFFE
 24733                           tosl	equ	0xFFD
 24734                           pclath	equ	0xFFA
 24735                           tblptru	equ	0xFF8
 24736                           tblptrh	equ	0xFF7
 24737                           tblptrl	equ	0xFF6
 24738                           tablat	equ	0xFF5
 24739                           prodh	equ	0xFF4
 24740                           prodl	equ	0xFF3
 24741                           intcon	equ	0xFF2
 24742                           intcon2	equ	0xFF1
 24743                           intcon3	equ	0xFF0
 24744                           indf0	equ	0xFEF
 24745                           postinc0	equ	0xFEE
 24746                           fsr0h	equ	0xFEA
 24747                           fsr0l	equ	0xFE9
 24748                           wreg	equ	0xFE8
 24749                           postinc1	equ	0xFE6
 24750                           postdec1	equ	0xFE5
 24751                           plusw1	equ	0xFE3
 24752                           fsr1h	equ	0xFE2
 24753                           fsr1l	equ	0xFE1
 24754                           indf2	equ	0xFDF
 24755                           postinc2	equ	0xFDE
 24756                           postdec2	equ	0xFDD
 24757                           plusw2	equ	0xFDB
 24758                           fsr2h	equ	0xFDA
 24759                           fsr2l	equ	0xFD9
 24760                           status	equ	0xFD8
 24761                           
 24762 ;; *************** function _RxData *****************
 24763 ;; Defined at:
 24764 ;;		line 46 in file "main.c"
 24765 ;; Parameters:    Size  Location     Type
 24766 ;;  pData           2    0[BANK0 ] PTR unsigned char 
 24767 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 24768 ;;  dataLength      1    2[BANK0 ] unsigned char 
 24769 ;;  status          1    3[BANK0 ] enum E7376
 24770 ;; Auto vars:     Size  Location     Type
 24771 ;;		None
 24772 ;; Return value:  Size  Location     Type
 24773 ;;                  1    wreg      void 
 24774 ;; Registers used:
 24775 ;;		None
 24776 ;; Tracked objects:
 24777 ;;		On entry : 0/0
 24778 ;;		On exit  : 0/0
 24779 ;;		Unchanged: 0/0
 24780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24784 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24785 ;;Total ram usage:        4 bytes
 24786 ;; Hardware stack levels used:    1
 24787 ;; Hardware stack levels required when called:    7
 24788 ;; This function calls:
 24789 ;;		Nothing
 24790 ;; This function is called by:
 24791 ;;		_main
 24792 ;;		_LORAWAN_EnterContinuousReceive
 24793 ;;		_SetReceptionNotOkState
 24794 ;;		_Retransmissions
 24795 ;;		_LORAWAN_RxDone
 24796 ;;		_LORAWAN_TxDone
 24797 ;;		_LORAWAN_RxTimeout
 24798 ;;		_LORAWAN_ReceiveWindow2Callback
 24799 ;;		_AckRetransmissionCallback
 24800 ;;		_UnconfirmedTransmissionCallback
 24801 ;;		_TransmissionErrorCallback
 24802 ;; This function uses a non-reentrant model
 24803 ;;
 24804                           
 24805                           	psect	text120
 24806  0000'                    __ptext120:
 24807                           	opt stack 0
 24808  0000'                    _RxData:
 24809                           	opt stack 20
 24810                           
 24811                           ;incstack = 0
 24812  0000' 0012               	return		;funcret
 24813  0002'                    __end_of_RxData:
 24814                           	opt stack 0
 24815                           tosu	equ	0xFFF
 24816                           tosh	equ	0xFFE
 24817                           tosl	equ	0xFFD
 24818                           pclath	equ	0xFFA
 24819                           tblptru	equ	0xFF8
 24820                           tblptrh	equ	0xFF7
 24821                           tblptrl	equ	0xFF6
 24822                           tablat	equ	0xFF5
 24823                           prodh	equ	0xFF4
 24824                           prodl	equ	0xFF3
 24825                           intcon	equ	0xFF2
 24826                           intcon2	equ	0xFF1
 24827                           intcon3	equ	0xFF0
 24828                           indf0	equ	0xFEF
 24829                           postinc0	equ	0xFEE
 24830                           fsr0h	equ	0xFEA
 24831                           fsr0l	equ	0xFE9
 24832                           wreg	equ	0xFE8
 24833                           postinc1	equ	0xFE6
 24834                           postdec1	equ	0xFE5
 24835                           plusw1	equ	0xFE3
 24836                           fsr1h	equ	0xFE2
 24837                           fsr1l	equ	0xFE1
 24838                           indf2	equ	0xFDF
 24839                           postinc2	equ	0xFDE
 24840                           postdec2	equ	0xFDD
 24841                           plusw2	equ	0xFDB
 24842                           fsr2h	equ	0xFDA
 24843                           fsr2l	equ	0xFD9
 24844                           status	equ	0xFD8
 24845                           
 24846 ;; *************** function _RADIO_GetStatus *****************
 24847 ;; Defined at:
 24848 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24849 ;; Parameters:    Size  Location     Type
 24850 ;;		None
 24851 ;; Auto vars:     Size  Location     Type
 24852 ;;		None
 24853 ;; Return value:  Size  Location     Type
 24854 ;;                  1    wreg      unsigned char 
 24855 ;; Registers used:
 24856 ;;		wreg, status,2
 24857 ;; Tracked objects:
 24858 ;;		On entry : 0/0
 24859 ;;		On exit  : 0/0
 24860 ;;		Unchanged: 0/0
 24861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24866 ;;Total ram usage:        0 bytes
 24867 ;; Hardware stack levels used:    1
 24868 ;; Hardware stack levels required when called:    7
 24869 ;; This function calls:
 24870 ;;		Nothing
 24871 ;; This function is called by:
 24872 ;;		_LORAWAN_ReceiveWindow2Callback
 24873 ;;		_LORAWAN_RxDone
 24874 ;;		_LORAWAN_TxDone
 24875 ;; This function uses a non-reentrant model
 24876 ;;
 24877                           
 24878                           	psect	text121
 24879  0000'                    __ptext121:
 24880                           	opt stack 0
 24881  0000'                    _RADIO_GetStatus:
 24882                           	opt stack 19
 24883                           
 24884                           ;radio_driver_SX1276.c: 1195: return RadioConfiguration.flags;
 24885                           
 24886                           ;incstack = 0
 24887  0000' 0101               	movlb	1	; () banked
 24888  0002' 5100'              	movf	(_RadioConfiguration+35)& (0+255),w,b
 24889  0004' 0012               	return	
 24890  0006'                    __end_of_RADIO_GetStatus:
 24891                           	opt stack 0
 24892                           tosu	equ	0xFFF
 24893                           tosh	equ	0xFFE
 24894                           tosl	equ	0xFFD
 24895                           pclath	equ	0xFFA
 24896                           tblptru	equ	0xFF8
 24897                           tblptrh	equ	0xFF7
 24898                           tblptrl	equ	0xFF6
 24899                           tablat	equ	0xFF5
 24900                           prodh	equ	0xFF4
 24901                           prodl	equ	0xFF3
 24902                           intcon	equ	0xFF2
 24903                           intcon2	equ	0xFF1
 24904                           intcon3	equ	0xFF0
 24905                           indf0	equ	0xFEF
 24906                           postinc0	equ	0xFEE
 24907                           fsr0h	equ	0xFEA
 24908                           fsr0l	equ	0xFE9
 24909                           wreg	equ	0xFE8
 24910                           postinc1	equ	0xFE6
 24911                           postdec1	equ	0xFE5
 24912                           plusw1	equ	0xFE3
 24913                           fsr1h	equ	0xFE2
 24914                           fsr1l	equ	0xFE1
 24915                           indf2	equ	0xFDF
 24916                           postinc2	equ	0xFDE
 24917                           postdec2	equ	0xFDD
 24918                           plusw2	equ	0xFDB
 24919                           fsr2h	equ	0xFDA
 24920                           fsr2l	equ	0xFD9
 24921                           status	equ	0xFD8
 24922                           
 24923 ;; *************** function _INTERRUPT_GetDioStatus *****************
 24924 ;; Defined at:
 24925 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 24926 ;; Parameters:    Size  Location     Type
 24927 ;;		None
 24928 ;; Auto vars:     Size  Location     Type
 24929 ;;  a               1    0[BANK0 ] unsigned char 
 24930 ;; Return value:  Size  Location     Type
 24931 ;;                  1    wreg      unsigned char 
 24932 ;; Registers used:
 24933 ;;		wreg, status,2
 24934 ;; Tracked objects:
 24935 ;;		On entry : 0/0
 24936 ;;		On exit  : 0/0
 24937 ;;		Unchanged: 0/0
 24938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24943 ;;Total ram usage:        1 bytes
 24944 ;; Hardware stack levels used:    1
 24945 ;; Hardware stack levels required when called:    7
 24946 ;; This function calls:
 24947 ;;		Nothing
 24948 ;; This function is called by:
 24949 ;;		_LORAWAN_Mainloop
 24950 ;; This function uses a non-reentrant model
 24951 ;;
 24952                           
 24953                           	psect	text122
 24954  0000'                    __ptext122:
 24955                           	opt stack 0
 24956  0000'                    _INTERRUPT_GetDioStatus:
 24957                           	opt stack 22
 24958                           
 24959                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 24960                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 24961                           
 24962                           ; BSR set to: 1
 24963                           ;incstack = 0
 24964  0000' 9EF2               	bcf	intcon,7,c	;volatile
 24965                           
 24966                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 24967  0002' C016' F000'        	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 24968                           
 24969                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 24970  0006' 0E00               	movlw	0
 24971  0008' 0101               	movlb	1	; () banked
 24972  000A' 6F00'              	movwf	_dioStatus& (0+255),b	;volatile
 24973                           
 24974                           ; BSR set to: 1
 24975                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 24976  000C' 8EF2               	bsf	intcon,7,c	;volatile
 24977                           
 24978                           ;interrupt_manager_lora_addons.c: 55: return a;
 24979  000E' 0100               	movlb	0	; () banked
 24980  0010' 5100'              	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 24981  0012' 0012               	return	
 24982  0014'                    __end_of_INTERRUPT_GetDioStatus:
 24983                           	opt stack 0
 24984                           tosu	equ	0xFFF
 24985                           tosh	equ	0xFFE
 24986                           tosl	equ	0xFFD
 24987                           pclath	equ	0xFFA
 24988                           tblptru	equ	0xFF8
 24989                           tblptrh	equ	0xFF7
 24990                           tblptrl	equ	0xFF6
 24991                           tablat	equ	0xFF5
 24992                           prodh	equ	0xFF4
 24993                           prodl	equ	0xFF3
 24994                           intcon	equ	0xFF2
 24995                           intcon2	equ	0xFF1
 24996                           intcon3	equ	0xFF0
 24997                           indf0	equ	0xFEF
 24998                           postinc0	equ	0xFEE
 24999                           fsr0h	equ	0xFEA
 25000                           fsr0l	equ	0xFE9
 25001                           wreg	equ	0xFE8
 25002                           postinc1	equ	0xFE6
 25003                           postdec1	equ	0xFE5
 25004                           plusw1	equ	0xFE3
 25005                           fsr1h	equ	0xFE2
 25006                           fsr1l	equ	0xFE1
 25007                           indf2	equ	0xFDF
 25008                           postinc2	equ	0xFDE
 25009                           postdec2	equ	0xFDD
 25010                           plusw2	equ	0xFDB
 25011                           fsr2h	equ	0xFDA
 25012                           fsr2l	equ	0xFD9
 25013                           status	equ	0xFD8
 25014                           
 25015 ;; *************** function _LORAWAN_Join *****************
 25016 ;; Defined at:
 25017 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 25018 ;; Parameters:    Size  Location     Type
 25019 ;;  activationTy    1    wreg     enum E7213
 25020 ;; Auto vars:     Size  Location     Type
 25021 ;;  activationTy    1  125[BANK0 ] enum E7213
 25022 ;;  result          1  124[BANK0 ] enum E7190
 25023 ;;  bufferIndex     1  123[BANK0 ] unsigned char 
 25024 ;; Return value:  Size  Location     Type
 25025 ;;                  1    wreg      enum E7190
 25026 ;; Registers used:
 25027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25028 ;; Tracked objects:
 25029 ;;		On entry : 0/0
 25030 ;;		On exit  : 0/0
 25031 ;;		Unchanged: 0/0
 25032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25037 ;;Total ram usage:        3 bytes
 25038 ;; Hardware stack levels used:    1
 25039 ;; Hardware stack levels required when called:   14
 25040 ;; This function calls:
 25041 ;;		_PrepareJoinRequestFrame
 25042 ;;		_RADIO_Transmit
 25043 ;;		_SelectChannelForTransmission
 25044 ;;		_SwTimerSetTimeout
 25045 ;;		_SwTimerStart
 25046 ;;		_UpdateJoinInProgress
 25047 ;; This function is called by:
 25048 ;;		_main
 25049 ;; This function uses a non-reentrant model
 25050 ;;
 25051                           
 25052                           	psect	text123
 25053  0000'                    __ptext123:
 25054                           	opt stack 0
 25055  0000'                    _LORAWAN_Join:
 25056                           	opt stack 16
 25057                           
 25058                           ; BSR set to: 0
 25059                           ;incstack = 0
 25060                           ;LORAWAN_Join@activationTypeNew stored from wreg
 25061  0000' 0100               	movlb	0	; () banked
 25062  0002' 6F00'              	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 25063                           
 25064                           ;lorawan.c: 117: uint8_t bufferIndex;
 25065                           ;lorawan.c: 118: LorawanError_t result;
 25066                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 25067  0004' 0102               	movlb	2	; () banked
 25068  0006' B100'              	btfsc	(_loRa+3)& (0+255),0,b
 25069  0008' 0012               	return	
 25070                           
 25071                           ; BSR set to: 2
 25072                           ;lorawan.c: 123: }
 25073                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 25074                           
 25075                           ; BSR set to: 2
 25076                           ;lorawan.c: 121: {
 25077                           ;lorawan.c: 122: return MAC_PAUSED;
 25078                           ;	Return value of _LORAWAN_Join is never used
 25079  000A' BF00'              	btfsc	(_loRa+2)& (0+255),7,b
 25080  000C' 0012               	return	
 25081                           
 25082                           ; BSR set to: 2
 25083                           ;lorawan.c: 128: }
 25084                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 25085                           
 25086                           ; BSR set to: 2
 25087                           
 25088                           ; BSR set to: 2
 25089                           ;lorawan.c: 126: {
 25090                           ;lorawan.c: 127: return SILENT_IMMEDIATELY_ACTIVE;
 25091                           ;	Return value of _LORAWAN_Join is never used
 25092  000E' 5100'              	movf	(_loRa+2)& (0+255),w,b
 25093  0010' 0B0F               	andlw	15
 25094  0012' 0900               	iorlw	0
 25095  0014' A4D8               	btfss	status,2,c
 25096  0016' 0012               	return	
 25097                           
 25098                           ; BSR set to: 2
 25099                           ;lorawan.c: 133: }
 25100                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 25101                           
 25102                           ; BSR set to: 2
 25103                           ;lorawan.c: 131: {
 25104                           ;lorawan.c: 132: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 25105                           ;	Return value of _LORAWAN_Join is never used
 25106  0018' C07D' F01D'        	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 25107                           
 25108                           ; BSR set to: 2
 25109                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 25110  001C' 0100               	movlb	0	; () banked
 25111  001E' 5100'              	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 25112  0020' A4D8               	btfss	status,2,c
 25113  0022' D024               	goto	l265
 25114                           
 25115                           ; BSR set to: 0
 25116                           ;lorawan.c: 138: {
 25117                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 25118  0024' 0102               	movlb	2	; () banked
 25119  0026' A100'              	btfss	(_loRa+150)& (0+255),0,b
 25120  0028' 0012               	return	
 25121                           
 25122                           ; BSR set to: 2
 25123  002A' A300'              	btfss	(_loRa+150)& (0+255),1,b
 25124  002C' 0012               	return	
 25125                           
 25126                           ; BSR set to: 2
 25127  002E' A700'              	btfss	(_loRa+150)& (0+255),3,b
 25128  0030' 0012               	return	
 25129                           
 25130                           ; BSR set to: 2
 25131                           ;lorawan.c: 144: else
 25132                           ;lorawan.c: 145: {
 25133                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 25134                           
 25135                           ; BSR set to: 2
 25136                           
 25137                           ; BSR set to: 2
 25138                           ;lorawan.c: 143: }
 25139                           
 25140                           ; BSR set to: 2
 25141                           ;lorawan.c: 141: {
 25142                           ;lorawan.c: 142: return KEYS_NOT_INITIALIZED;
 25143                           ;	Return value of _LORAWAN_Join is never used
 25144  0032' EC00' F000'        	call	_PrepareJoinRequestFrame	;wreg free
 25145  0036' 0100               	movlb	0	; () banked
 25146  0038' 6F00'              	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 25147                           
 25148                           ; BSR set to: 0
 25149                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 25150  003A' 0E00               	movlw	0
 25151  003C' EC00' F000'        	call	_SelectChannelForTransmission
 25152  0040' 0100               	movlb	0	; () banked
 25153  0042' 6F00'              	movwf	LORAWAN_Join@result& (0+255),b
 25154                           
 25155                           ; BSR set to: 0
 25156                           ;lorawan.c: 149: if (result == OK)
 25157  0044' 5100'              	movf	LORAWAN_Join@result& (0+255),w,b
 25158  0046' A4D8               	btfss	status,2,c
 25159  0048' 0012               	return	
 25160                           
 25161                           ; BSR set to: 0
 25162                           ;lorawan.c: 150: {
 25163                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 25164  004A' 0E00'              	movlw	low _macBuffer
 25165  004C' 6F00'              	movwf	RADIO_Transmit@buffer& (0+255),b
 25166  004E' 0E00'              	movlw	high _macBuffer
 25167  0050' 6F00'              	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 25168  0052' C07B' F053'        	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 25169  0056' EC00' F000'        	call	_RADIO_Transmit	;wreg free
 25170  005A' 0100               	movlb	0	; () banked
 25171  005C' 5100'              	movf	?_RADIO_Transmit& (0+255),w,b
 25172  005E' 1100'              	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 25173  0060' A4D8               	btfss	status,2,c
 25174  0062' 0012               	return	
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;lorawan.c: 152: {
 25178                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 25179  0064' 0E01               	movlw	1
 25180  0066' EC00' F000'        	call	_UpdateJoinInProgress
 25181                           
 25182                           ;lorawan.c: 164: }
 25183                           ;lorawan.c: 165: }
 25184                           ;lorawan.c: 166: }
 25185                           
 25186                           ;lorawan.c: 161: else
 25187                           ;lorawan.c: 162: {
 25188                           ;lorawan.c: 163: return result;
 25189                           ;	Return value of _LORAWAN_Join is never used
 25190                           
 25191                           ;lorawan.c: 159: }
 25192                           ;lorawan.c: 160: }
 25193                           
 25194                           ;lorawan.c: 156: else
 25195                           ;lorawan.c: 157: {
 25196                           ;lorawan.c: 158: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 25197                           ;	Return value of _LORAWAN_Join is never used
 25198                           
 25199                           ;lorawan.c: 155: }
 25200                           
 25201                           ;lorawan.c: 154: return OK;
 25202                           ;	Return value of _LORAWAN_Join is never used
 25203  006A' 0012               	return	
 25204  006C'                    l265:
 25205                           
 25206                           ; BSR set to: 0
 25207                           ;lorawan.c: 167: else
 25208                           ;lorawan.c: 168: {
 25209                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 25210  006C' 0102               	movlb	2	; () banked
 25211  006E' AB00'              	btfss	(_loRa+150)& (0+255),5,b
 25212  0070' 0012               	return	
 25213                           
 25214                           ; BSR set to: 2
 25215  0072' A900'              	btfss	(_loRa+150)& (0+255),4,b
 25216  0074' 0012               	return	
 25217                           
 25218                           ; BSR set to: 2
 25219  0076' A500'              	btfss	(_loRa+150)& (0+255),2,b
 25220  0078' 0012               	return	
 25221                           
 25222                           ; BSR set to: 2
 25223                           ;lorawan.c: 174: else
 25224                           ;lorawan.c: 175: {
 25225                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 25226                           
 25227                           ; BSR set to: 2
 25228                           
 25229                           ; BSR set to: 2
 25230                           ;lorawan.c: 173: }
 25231                           
 25232                           ; BSR set to: 2
 25233                           ;lorawan.c: 171: {
 25234                           ;lorawan.c: 172: return KEYS_NOT_INITIALIZED;
 25235                           ;	Return value of _LORAWAN_Join is never used
 25236  007A' 0E07               	movlw	7
 25237  007C' EC00' F000'        	call	_UpdateJoinInProgress
 25238                           
 25239                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 25240  0080' 0E8F               	movlw	143
 25241  0082' 0100               	movlb	0	; () banked
 25242  0084' 6F00'              	movwf	SwTimerSetTimeout@timeout& (0+255),b
 25243  0086' 0E02               	movlw	2
 25244  0088' 6F00'              	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25245  008A' 0E00               	movlw	0
 25246  008C' 6F00'              	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25247  008E' 0E00               	movlw	0
 25248  0090' 6F00'              	movwf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25249  0092' 0102               	movlb	2	; () banked
 25250  0094' 5100'              	movf	(_loRa+228)& (0+255),w,b
 25251  0096' EC00' F000'        	call	_SwTimerSetTimeout
 25252                           
 25253                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 25254  009A' 0102               	movlb	2	; () banked
 25255  009C' 5100'              	movf	(_loRa+228)& (0+255),w,b
 25256  009E' EC00' F000'        	call	_SwTimerStart
 25257                           
 25258                           ;lorawan.c: 180: return OK;
 25259                           ;	Return value of _LORAWAN_Join is never used
 25260  00A2' 0012               	return	
 25261  00A4'                    __end_of_LORAWAN_Join:
 25262                           	opt stack 0
 25263                           tosu	equ	0xFFF
 25264                           tosh	equ	0xFFE
 25265                           tosl	equ	0xFFD
 25266                           pclath	equ	0xFFA
 25267                           tblptru	equ	0xFF8
 25268                           tblptrh	equ	0xFF7
 25269                           tblptrl	equ	0xFF6
 25270                           tablat	equ	0xFF5
 25271                           prodh	equ	0xFF4
 25272                           prodl	equ	0xFF3
 25273                           intcon	equ	0xFF2
 25274                           intcon2	equ	0xFF1
 25275                           intcon3	equ	0xFF0
 25276                           indf0	equ	0xFEF
 25277                           postinc0	equ	0xFEE
 25278                           fsr0h	equ	0xFEA
 25279                           fsr0l	equ	0xFE9
 25280                           wreg	equ	0xFE8
 25281                           postinc1	equ	0xFE6
 25282                           postdec1	equ	0xFE5
 25283                           plusw1	equ	0xFE3
 25284                           fsr1h	equ	0xFE2
 25285                           fsr1l	equ	0xFE1
 25286                           indf2	equ	0xFDF
 25287                           postinc2	equ	0xFDE
 25288                           postdec2	equ	0xFDD
 25289                           plusw2	equ	0xFDB
 25290                           fsr2h	equ	0xFDA
 25291                           fsr2l	equ	0xFD9
 25292                           status	equ	0xFD8
 25293                           
 25294 ;; *************** function _UpdateJoinInProgress *****************
 25295 ;; Defined at:
 25296 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 25297 ;; Parameters:    Size  Location     Type
 25298 ;;  state           1    wreg     unsigned char 
 25299 ;; Auto vars:     Size  Location     Type
 25300 ;;  state           1    0[BANK0 ] unsigned char 
 25301 ;; Return value:  Size  Location     Type
 25302 ;;                  1    wreg      void 
 25303 ;; Registers used:
 25304 ;;		wreg, status,2, status,0
 25305 ;; Tracked objects:
 25306 ;;		On entry : 0/0
 25307 ;;		On exit  : 0/0
 25308 ;;		Unchanged: 0/0
 25309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25314 ;;Total ram usage:        1 bytes
 25315 ;; Hardware stack levels used:    1
 25316 ;; Hardware stack levels required when called:    7
 25317 ;; This function calls:
 25318 ;;		Nothing
 25319 ;; This function is called by:
 25320 ;;		_LORAWAN_Join
 25321 ;; This function uses a non-reentrant model
 25322 ;;
 25323                           
 25324                           	psect	text124
 25325  0000'                    __ptext124:
 25326                           	opt stack 0
 25327  0000'                    _UpdateJoinInProgress:
 25328                           	opt stack 22
 25329                           
 25330                           ;incstack = 0
 25331                           ;UpdateJoinInProgress@state stored from wreg
 25332  0000' 0100               	movlb	0	; () banked
 25333  0002' 6F00'              	movwf	UpdateJoinInProgress@state& (0+255),b
 25334                           
 25335                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 25336  0004' 0102               	movlb	2	; () banked
 25337  0006' 9900'              	bcf	(_loRa+2)& (0+255),4,b
 25338                           
 25339                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 25340  0008' 8500'              	bsf	_loRa& (0+255),2,b
 25341                           
 25342                           ; BSR set to: 2
 25343                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 25344  000A' 5100'              	movf	(_loRa+2)& (0+255),w,b
 25345  000C' 0100               	movlb	0	; () banked
 25346  000E' 1900'              	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 25347  0010' 0BF0               	andlw	-16
 25348  0012' 1900'              	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 25349  0014' 0102               	movlb	2	; () banked
 25350  0016' 6F00'              	movwf	(_loRa+2)& (0+255),b
 25351                           
 25352                           ; BSR set to: 2
 25353  0018' 0012               	return		;funcret
 25354  001A'                    __end_of_UpdateJoinInProgress:
 25355                           	opt stack 0
 25356                           tosu	equ	0xFFF
 25357                           tosh	equ	0xFFE
 25358                           tosl	equ	0xFFD
 25359                           pclath	equ	0xFFA
 25360                           tblptru	equ	0xFF8
 25361                           tblptrh	equ	0xFF7
 25362                           tblptrl	equ	0xFF6
 25363                           tablat	equ	0xFF5
 25364                           prodh	equ	0xFF4
 25365                           prodl	equ	0xFF3
 25366                           intcon	equ	0xFF2
 25367                           intcon2	equ	0xFF1
 25368                           intcon3	equ	0xFF0
 25369                           indf0	equ	0xFEF
 25370                           postinc0	equ	0xFEE
 25371                           fsr0h	equ	0xFEA
 25372                           fsr0l	equ	0xFE9
 25373                           wreg	equ	0xFE8
 25374                           postinc1	equ	0xFE6
 25375                           postdec1	equ	0xFE5
 25376                           plusw1	equ	0xFE3
 25377                           fsr1h	equ	0xFE2
 25378                           fsr1l	equ	0xFE1
 25379                           indf2	equ	0xFDF
 25380                           postinc2	equ	0xFDE
 25381                           postdec2	equ	0xFDD
 25382                           plusw2	equ	0xFDB
 25383                           fsr2h	equ	0xFDA
 25384                           fsr2l	equ	0xFD9
 25385                           status	equ	0xFD8
 25386                           
 25387 ;; *************** function _SelectChannelForTransmission *****************
 25388 ;; Defined at:
 25389 ;;		line 711 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 25390 ;; Parameters:    Size  Location     Type
 25391 ;;  transmission    1    wreg     unsigned char 
 25392 ;; Auto vars:     Size  Location     Type
 25393 ;;  transmission    1  100[BANK0 ] unsigned char 
 25394 ;;  frequency       4   94[BANK0 ] unsigned long 
 25395 ;;  channelIndex    1  101[BANK0 ] unsigned char 
 25396 ;;  result          1   99[BANK0 ] enum E7249
 25397 ;;  lastDataRate    1   98[BANK0 ] unsigned char 
 25398 ;; Return value:  Size  Location     Type
 25399 ;;                  1    wreg      enum E7190
 25400 ;; Registers used:
 25401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25402 ;; Tracked objects:
 25403 ;;		On entry : 0/0
 25404 ;;		On exit  : 0/0
 25405 ;;		Unchanged: 0/0
 25406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25408 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25410 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25411 ;;Total ram usage:        9 bytes
 25412 ;; Hardware stack levels used:    1
 25413 ;; Hardware stack levels required when called:   11
 25414 ;; This function calls:
 25415 ;;		_GenerateUSFrequency1
 25416 ;;		_GenerateUSFrequency2
 25417 ;;		_RADIO_SetBandwidth
 25418 ;;		_RADIO_SetCRC
 25419 ;;		_RADIO_SetChannelFrequency
 25420 ;;		_RADIO_SetIQInverted
 25421 ;;		_RADIO_SetLoRaSyncWord
 25422 ;;		_RADIO_SetOutputPower
 25423 ;;		_RADIO_SetSpreadingFactor
 25424 ;;		_SearchAvailableChannel
 25425 ;; This function is called by:
 25426 ;;		_LORAWAN_Join
 25427 ;;		_LORAWAN_Send
 25428 ;;		_AckRetransmissionCallback
 25429 ;;		_UnconfirmedTransmissionCallback
 25430 ;;		_Retransmissions
 25431 ;;		_TransmissionErrorCallback
 25432 ;; This function uses a non-reentrant model
 25433 ;;
 25434                           
 25435                           	psect	text125
 25436  0000'                    __ptext125:
 25437                           	opt stack 0
 25438  0000'                    _SelectChannelForTransmission:
 25439                           	opt stack 18
 25440                           
 25441                           ; BSR set to: 2
 25442                           ;incstack = 0
 25443                           ;SelectChannelForTransmission@transmissionType stored from wreg
 25444  0000' 0100               	movlb	0	; () banked
 25445  0002' 6F00'              	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 25446                           
 25447                           ;lorawan_na.c: 713: LorawanError_t result = OK;
 25448  0004' 0E00               	movlw	0
 25449  0006' 0100               	movlb	0	; () banked
 25450  0008' 6F00'              	movwf	SelectChannelForTransmission@result& (0+255),b
 25451                           
 25452                           ; BSR set to: 0
 25453                           ;lorawan_na.c: 714: uint8_t channelIndex;
 25454                           ;lorawan_na.c: 715: uint32_t frequency;
 25455                           ;lorawan_na.c: 716: uint8_t lastDataRate;
 25456                           ;lorawan_na.c: 718: RADIO_SetLoRaSyncWord(loRa.syncWord);
 25457  000A' 0102               	movlb	2	; () banked
 25458  000C' 5100'              	movf	(_loRa+230)& (0+255),w,b
 25459  000E' EC00' F000'        	call	_RADIO_SetLoRaSyncWord
 25460                           
 25461                           ;lorawan_na.c: 719: lastDataRate = loRa.currentDataRate;
 25462  0012' C0D0' F062'        	movff	_loRa+208,SelectChannelForTransmission@lastDataRate
 25463                           
 25464                           ;lorawan_na.c: 720: if (transmissionType == 1)
 25465  0016' 0100               	movlb	0	; () banked
 25466  0018' 0500'              	decf	SelectChannelForTransmission@transmissionType& (0+255),w,b
 25467  001A' A4D8               	btfss	status,2,c
 25468  001C' D028               	goto	l1550
 25469                           
 25470                           ; BSR set to: 0
 25471                           ;lorawan_na.c: 721: {
 25472                           ;lorawan_na.c: 722: result = SearchAvailableChannel (loRa.maxChannels, transmissionType,
      +                           &channelIndex);
 25473  001E' C064' F04F'        	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 25474  0022' 0E00'              	movlw	low SelectChannelForTransmission@channelIndex
 25475  0024' 6F00'              	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 25476  0026' 0E00'              	movlw	high SelectChannelForTransmission@channelIndex
 25477  0028' 6F00'              	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 25478  002A' 0102               	movlb	2	; () banked
 25479  002C' 5100'              	movf	(_loRa+222)& (0+255),w,b
 25480  002E' EC00' F000'        	call	_SearchAvailableChannel
 25481  0032' 0100               	movlb	0	; () banked
 25482  0034' 6F00'              	movwf	SelectChannelForTransmission@result& (0+255),b
 25483                           
 25484                           ; BSR set to: 0
 25485                           ;lorawan_na.c: 723: RADIO_SetSpreadingFactor (spreadingFactor[loRa.currentDataRate]);
 25486  0036' 0102               	movlb	2	; () banked
 25487  0038' 5100'              	movf	(_loRa+208)& (0+255),w,b
 25488  003A' 0D01               	mullw	1
 25489  003C' 0E00'              	movlw	low _spreadingFactor
 25490  003E' 24F3               	addwf	prodl,w,c
 25491  0040' 6EF6               	movwf	tblptrl,c
 25492  0042' 0E00'              	movlw	high _spreadingFactor
 25493  0044' 20F4               	addwfc	prodh,w,c
 25494  0046' 6EF7               	movwf	tblptrh,c
 25495  0048'                    	if	1	;There are 3 active tblptr bytes
 25496  0048' 6AF8               	clrf	tblptru,c
 25497  004A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 25498  004C' 22F8               	addwfc	tblptru,f,c
 25499  004E'                    	endif
 25500  004E' 0008               	tblrd		*
 25501  0050' 50F5               	movf	tablat,w,c
 25502  0052' EC00' F000'        	call	_RADIO_SetSpreadingFactor
 25503                           
 25504                           ;lorawan_na.c: 724: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate + 10 -
      +                           loRa.offset;
 25505  0056' 0102               	movlb	2	; () banked
 25506  0058' 5100'              	movf	(_loRa+224)& (0+255),w,b
 25507  005A' 0800               	sublw	0
 25508  005C' 2500'              	addwf	(_loRa+208)& (0+255),w,b
 25509  005E' 0F0A               	addlw	10
 25510  0060' 6F00'              	movwf	(_loRa+23)& (0+255),b
 25511                           
 25512                           ; BSR set to: 2
 25513                           ;lorawan_na.c: 725: if (loRa.receiveWindow1Parameters.dataRate >= 14)
 25514  0062' 0E0D               	movlw	13
 25515  0064' 6500'              	cpfsgt	(_loRa+23)& (0+255),b
 25516  0066' D053               	goto	l1552
 25517                           
 25518                           ; BSR set to: 2
 25519                           ;lorawan_na.c: 726: {
 25520                           ;lorawan_na.c: 727: loRa.receiveWindow1Parameters.dataRate = 13;
 25521  0068' 0E0D               	movlw	13
 25522  006A' 6F00'              	movwf	(_loRa+23)& (0+255),b
 25523                           
 25524                           ; BSR set to: 2
 25525                           ;lorawan_na.c: 728: }
 25526                           ;lorawan_na.c: 729: }
 25527  006C' D050               	goto	l1552
 25528  006E'                    l1550:
 25529                           
 25530                           ; BSR set to: 0
 25531                           ;lorawan_na.c: 730: else
 25532                           ;lorawan_na.c: 731: {
 25533                           ;lorawan_na.c: 732: if (loRa.lorawanMacStatus.alternativeChannelUs == 0)
 25534  006E' 0102               	movlb	2	; () banked
 25535  0070' BD00'              	btfsc	_loRa& (0+255),6,b
 25536  0072' D01A               	goto	l1553
 25537                           
 25538                           ; BSR set to: 2
 25539                           ;lorawan_na.c: 733: {
 25540                           ;lorawan_na.c: 734: loRa.currentDataRate = 0;
 25541  0074' 0E00               	movlw	0
 25542  0076' 6F00'              	movwf	(_loRa+208)& (0+255),b
 25543                           
 25544                           ; BSR set to: 2
 25545                           ;lorawan_na.c: 735: result = SearchAvailableChannel (64, transmissionType, &channelIndex
      +                          );
 25546  0078' C064' F04F'        	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 25547  007C' 0E00'              	movlw	low SelectChannelForTransmission@channelIndex
 25548  007E' 0100               	movlb	0	; () banked
 25549  0080' 6F00'              	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 25550  0082' 0E00'              	movlw	high SelectChannelForTransmission@channelIndex
 25551  0084' 6F00'              	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 25552  0086' 0E40               	movlw	64
 25553  0088' EC00' F000'        	call	_SearchAvailableChannel
 25554  008C' 0100               	movlb	0	; () banked
 25555  008E' 6F00'              	movwf	SelectChannelForTransmission@result& (0+255),b
 25556                           
 25557                           ; BSR set to: 0
 25558                           ;lorawan_na.c: 736: RADIO_SetSpreadingFactor (SF_10);
 25559  0090' 0E0A               	movlw	10
 25560  0092' EC00' F000'        	call	_RADIO_SetSpreadingFactor
 25561                           
 25562                           ;lorawan_na.c: 737: loRa.receiveWindow1Parameters.dataRate = 0 + 10 - loRa.offset;
 25563  0096' 0102               	movlb	2	; () banked
 25564  0098' 5100'              	movf	(_loRa+224)& (0+255),w,b
 25565  009A' 0800               	sublw	0
 25566  009C' 0F0A               	addlw	10
 25567  009E' 6F00'              	movwf	(_loRa+23)& (0+255),b
 25568                           
 25569                           ; BSR set to: 2
 25570                           ;lorawan_na.c: 738: RADIO_SetBandwidth (BW_125KHZ);
 25571  00A0' 0E07               	movlw	7
 25572  00A2' EC00' F000'        	call	_RADIO_SetBandwidth
 25573                           
 25574                           ;lorawan_na.c: 739: }
 25575  00A6' D01F               	goto	l1554
 25576  00A8'                    l1553:
 25577                           
 25578                           ;lorawan_na.c: 740: else
 25579                           ;lorawan_na.c: 741: {
 25580                           ;lorawan_na.c: 742: loRa.currentDataRate = 4;
 25581  00A8' 0E04               	movlw	4
 25582  00AA' 0102               	movlb	2	; () banked
 25583  00AC' 6F00'              	movwf	(_loRa+208)& (0+255),b
 25584                           
 25585                           ; BSR set to: 2
 25586                           ;lorawan_na.c: 743: result = SearchAvailableChannel (8, transmissionType, &channelIndex)
      +                          ;
 25587  00AE' C064' F04F'        	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 25588  00B2' 0E00'              	movlw	low SelectChannelForTransmission@channelIndex
 25589  00B4' 0100               	movlb	0	; () banked
 25590  00B6' 6F00'              	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 25591  00B8' 0E00'              	movlw	high SelectChannelForTransmission@channelIndex
 25592  00BA' 6F00'              	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 25593  00BC' 0E08               	movlw	8
 25594  00BE' EC00' F000'        	call	_SearchAvailableChannel
 25595  00C2' 0100               	movlb	0	; () banked
 25596  00C4' 6F00'              	movwf	SelectChannelForTransmission@result& (0+255),b
 25597                           
 25598                           ; BSR set to: 0
 25599                           ;lorawan_na.c: 744: RADIO_SetSpreadingFactor (SF_8);
 25600  00C6' 0E08               	movlw	8
 25601  00C8' EC00' F000'        	call	_RADIO_SetSpreadingFactor
 25602                           
 25603                           ;lorawan_na.c: 745: loRa.receiveWindow1Parameters.dataRate = 4 + 10 - loRa.offset;
 25604  00CC' 0102               	movlb	2	; () banked
 25605  00CE' 5100'              	movf	(_loRa+224)& (0+255),w,b
 25606  00D0' 0800               	sublw	0
 25607  00D2' 0F0E               	addlw	14
 25608  00D4' 6F00'              	movwf	(_loRa+23)& (0+255),b
 25609                           
 25610                           ; BSR set to: 2
 25611                           ;lorawan_na.c: 746: if (loRa.receiveWindow1Parameters.dataRate >= 14)
 25612  00D6' 0E0D               	movlw	13
 25613  00D8' 6500'              	cpfsgt	(_loRa+23)& (0+255),b
 25614  00DA' D002               	goto	l1555
 25615                           
 25616                           ; BSR set to: 2
 25617                           ;lorawan_na.c: 747: {
 25618                           ;lorawan_na.c: 748: loRa.receiveWindow1Parameters.dataRate = 13;
 25619  00DC' 0E0D               	movlw	13
 25620  00DE' 6F00'              	movwf	(_loRa+23)& (0+255),b
 25621  00E0'                    l1555:
 25622                           
 25623                           ; BSR set to: 2
 25624                           ;lorawan_na.c: 749: }
 25625                           ;lorawan_na.c: 750: RADIO_SetBandwidth (BW_500KHZ);
 25626                           
 25627                           ; BSR set to: 2
 25628  00E0' 0E09               	movlw	9
 25629  00E2' EC00' F000'        	call	_RADIO_SetBandwidth
 25630  00E6'                    l1554:
 25631                           
 25632                           ;lorawan_na.c: 751: }
 25633                           ;lorawan_na.c: 752: loRa.lorawanMacStatus.alternativeChannelUs = !loRa.lorawanMacStatus.
      +                          alternativeChannelUs;
 25634  00E6' 0102               	movlb	2	; () banked
 25635  00E8' BD00'              	btfsc	_loRa& (0+255),6,b
 25636  00EA' D004               	goto	u9140
 25637  00EC' 0100               	movlb	0	; () banked
 25638  00EE' 6B00'              	clrf	??_SelectChannelForTransmission& (0+255),b
 25639  00F0' 2B00'              	incf	??_SelectChannelForTransmission& (0+255),f,b
 25640  00F2' D002               	goto	u9158
 25641  00F4'                    u9140:
 25642  00F4' 0100               	movlb	0	; () banked
 25643  00F6' 6B00'              	clrf	??_SelectChannelForTransmission& (0+255),b
 25644  00F8'                    u9158:
 25645  00F8' 3B00'              	swapf	??_SelectChannelForTransmission& (0+255),f,b
 25646  00FA' 4700'              	rlncf	??_SelectChannelForTransmission& (0+255),f,b
 25647  00FC' 4700'              	rlncf	??_SelectChannelForTransmission& (0+255),f,b
 25648  00FE' 0102               	movlb	2	; () banked
 25649  0100' 5100'              	movf	_loRa& (0+255),w,b
 25650  0102' 0100               	movlb	0	; () banked
 25651  0104' 1900'              	xorwf	??_SelectChannelForTransmission& (0+255),w,b
 25652  0106' 0BBF               	andlw	-65
 25653  0108' 1900'              	xorwf	??_SelectChannelForTransmission& (0+255),w,b
 25654  010A' 0102               	movlb	2	; () banked
 25655  010C' 6F00'              	movwf	_loRa& (0+255),b
 25656  010E'                    l1552:
 25657                           
 25658                           ; BSR set to: 2
 25659                           ;lorawan_na.c: 753: }
 25660                           ;lorawan_na.c: 755: loRa.currentDataRate = lastDataRate;
 25661                           
 25662                           ; BSR set to: 2
 25663  010E' C062' F0D0'        	movff	SelectChannelForTransmission@lastDataRate,_loRa+208
 25664                           
 25665                           ; BSR set to: 2
 25666                           ;lorawan_na.c: 757: if (result == OK)
 25667  0112' 0100               	movlb	0	; () banked
 25668  0114' 5100'              	movf	SelectChannelForTransmission@result& (0+255),w,b
 25669  0116' A4D8               	btfss	status,2,c
 25670  0118' D068               	goto	l1556
 25671                           
 25672                           ; BSR set to: 0
 25673                           ;lorawan_na.c: 758: {
 25674                           ;lorawan_na.c: 759: if (channelIndex < 64)
 25675  011A' 0E40               	movlw	64
 25676  011C' 6100'              	cpfslt	SelectChannelForTransmission@channelIndex& (0+255),b
 25677  011E' D01F               	goto	l1557
 25678                           
 25679                           ; BSR set to: 0
 25680                           ;lorawan_na.c: 760: {
 25681                           ;lorawan_na.c: 761: frequency = GenerateUSFrequency1 (channelIndex);
 25682  0120' 5100'              	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 25683  0122' EC00' F000'        	call	_GenerateUSFrequency1
 25684  0126' C046' F05E'        	movff	?_GenerateUSFrequency1,SelectChannelForTransmission@frequency
 25685  012A' C047' F05F'        	movff	?_GenerateUSFrequency1+1,SelectChannelForTransmission@frequency+1
 25686  012E' C048' F060'        	movff	?_GenerateUSFrequency1+2,SelectChannelForTransmission@frequency+2
 25687  0132' C049' F061'        	movff	?_GenerateUSFrequency1+3,SelectChannelForTransmission@frequency+3
 25688                           
 25689                           ;lorawan_na.c: 762: RADIO_SetBandwidth (BW_125KHZ);
 25690  0136' 0E07               	movlw	7
 25691  0138' EC00' F000'        	call	_RADIO_SetBandwidth
 25692                           
 25693                           ;lorawan_na.c: 763: RADIO_SetOutputPower (txPower915[loRa.txPower]);
 25694  013C' 0102               	movlb	2	; () banked
 25695  013E' 5100'              	movf	(_loRa+210)& (0+255),w,b
 25696  0140' 0D01               	mullw	1
 25697  0142' 0E00'              	movlw	low _txPower915
 25698  0144' 24F3               	addwf	prodl,w,c
 25699  0146' 6EF6               	movwf	tblptrl,c
 25700  0148' 0E00'              	movlw	high _txPower915
 25701  014A' 20F4               	addwfc	prodh,w,c
 25702  014C' 6EF7               	movwf	tblptrh,c
 25703  014E'                    	if	1	;There are 3 active tblptr bytes
 25704  014E' 6AF8               	clrf	tblptru,c
 25705  0150' 0E00'              	movlw	low (__mediumconst shr (0+16))
 25706  0152' 22F8               	addwfc	tblptru,f,c
 25707  0154'                    	endif
 25708  0154' 0008               	tblrd		*
 25709  0156' 50F5               	movf	tablat,w,c
 25710  0158' EC00' F000'        	call	_RADIO_SetOutputPower
 25711                           
 25712                           ;lorawan_na.c: 764: }
 25713  015C' D034               	goto	l1560
 25714  015E'                    l1557:
 25715                           
 25716                           ;lorawan_na.c: 765: else
 25717                           ;lorawan_na.c: 766: {
 25718                           ;lorawan_na.c: 767: frequency = GenerateUSFrequency2 (channelIndex);
 25719  015E' 0100               	movlb	0	; () banked
 25720  0160' 5100'              	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 25721  0162' EC00' F000'        	call	_GenerateUSFrequency2
 25722  0166' C046' F05E'        	movff	?_GenerateUSFrequency2,SelectChannelForTransmission@frequency
 25723  016A' C047' F05F'        	movff	?_GenerateUSFrequency2+1,SelectChannelForTransmission@frequency+1
 25724  016E' C048' F060'        	movff	?_GenerateUSFrequency2+2,SelectChannelForTransmission@frequency+2
 25725  0172' C049' F061'        	movff	?_GenerateUSFrequency2+3,SelectChannelForTransmission@frequency+3
 25726                           
 25727                           ;lorawan_na.c: 768: RADIO_SetBandwidth (BW_500KHZ);
 25728  0176' 0E09               	movlw	9
 25729  0178' EC00' F000'        	call	_RADIO_SetBandwidth
 25730                           
 25731                           ;lorawan_na.c: 771: if (txPower915[loRa.txPower] <= 26)
 25732  017C' 0102               	movlb	2	; () banked
 25733  017E' 5100'              	movf	(_loRa+210)& (0+255),w,b
 25734  0180' 0D01               	mullw	1
 25735  0182' 0E00'              	movlw	low _txPower915
 25736  0184' 24F3               	addwf	prodl,w,c
 25737  0186' 6EF6               	movwf	tblptrl,c
 25738  0188' 0E00'              	movlw	high _txPower915
 25739  018A' 20F4               	addwfc	prodh,w,c
 25740  018C' 6EF7               	movwf	tblptrh,c
 25741  018E'                    	if	1	;There are 3 active tblptr bytes
 25742  018E' 6AF8               	clrf	tblptru,c
 25743  0190' 0E00'              	movlw	low (__mediumconst shr (0+16))
 25744  0192' 22F8               	addwfc	tblptru,f,c
 25745  0194'                    	endif
 25746  0194' 0008               	tblrd		*
 25747  0196' 50F5               	movf	tablat,w,c
 25748  0198' 0A80               	xorlw	128
 25749  019A' 0F65               	addlw	-155
 25750  019C' B0D8               	btfsc	status,0,c
 25751  019E' D010               	goto	l1559
 25752                           
 25753                           ; BSR set to: 2
 25754                           ;lorawan_na.c: 772: {
 25755                           ;lorawan_na.c: 773: RADIO_SetOutputPower (txPower915[loRa.txPower]);
 25756  01A0' 5100'              	movf	(_loRa+210)& (0+255),w,b
 25757  01A2' 0D01               	mullw	1
 25758  01A4' 0E00'              	movlw	low _txPower915
 25759  01A6' 24F3               	addwf	prodl,w,c
 25760  01A8' 6EF6               	movwf	tblptrl,c
 25761  01AA' 0E00'              	movlw	high _txPower915
 25762  01AC' 20F4               	addwfc	prodh,w,c
 25763  01AE' 6EF7               	movwf	tblptrh,c
 25764  01B0'                    	if	1	;There are 3 active tblptr bytes
 25765  01B0' 6AF8               	clrf	tblptru,c
 25766  01B2' 0E00'              	movlw	low (__mediumconst shr (0+16))
 25767  01B4' 22F8               	addwfc	tblptru,f,c
 25768  01B6'                    	endif
 25769  01B6' 0008               	tblrd		*
 25770  01B8' 50F5               	movf	tablat,w,c
 25771  01BA' EC00' F000'        	call	_RADIO_SetOutputPower
 25772                           
 25773                           ;lorawan_na.c: 774: }
 25774  01BE' D003               	goto	l1560
 25775  01C0'                    l1559:
 25776                           
 25777                           ;lorawan_na.c: 775: else
 25778                           ;lorawan_na.c: 776: {
 25779                           ;lorawan_na.c: 777: RADIO_SetOutputPower (26);
 25780  01C0' 0E1A               	movlw	26
 25781  01C2' EC00' F000'        	call	_RADIO_SetOutputPower
 25782  01C6'                    l1560:
 25783                           
 25784                           ;lorawan_na.c: 778: }
 25785                           ;lorawan_na.c: 779: }
 25786                           ;lorawan_na.c: 780: RADIO_SetChannelFrequency (frequency);
 25787  01C6' C05E' F000'        	movff	SelectChannelForTransmission@frequency,RADIO_SetChannelFrequency@frequency
 25788  01CA' C05F' F001'        	movff	SelectChannelForTransmission@frequency+1,RADIO_SetChannelFrequency@frequency+1
 25789  01CE' C060' F002'        	movff	SelectChannelForTransmission@frequency+2,RADIO_SetChannelFrequency@frequency+2
 25790  01D2' C061' F003'        	movff	SelectChannelForTransmission@frequency+3,RADIO_SetChannelFrequency@frequency+3
 25791  01D6' EC00' F000'        	call	_RADIO_SetChannelFrequency	;wreg free
 25792                           
 25793                           ;lorawan_na.c: 781: RADIO_SetCRC(1);
 25794  01DA' 0E01               	movlw	1
 25795  01DC' EC00' F000'        	call	_RADIO_SetCRC
 25796                           
 25797                           ;lorawan_na.c: 782: RADIO_SetIQInverted(0);
 25798  01E0' 0E00               	movlw	0
 25799  01E2' EC00' F000'        	call	_RADIO_SetIQInverted
 25800                           
 25801                           ;lorawan_na.c: 783: loRa.lastUsedChannelIndex = channelIndex;
 25802  01E6' C065' F0CB'        	movff	SelectChannelForTransmission@channelIndex,_loRa+203
 25803  01EA'                    l1556:
 25804                           
 25805                           ;lorawan_na.c: 784: }
 25806                           ;lorawan_na.c: 786: return result;
 25807  01EA' 0100               	movlb	0	; () banked
 25808  01EC' 5100'              	movf	SelectChannelForTransmission@result& (0+255),w,b
 25809  01EE' 0012               	return	
 25810  01F0'                    __end_of_SelectChannelForTransmission:
 25811                           	opt stack 0
 25812                           tosu	equ	0xFFF
 25813                           tosh	equ	0xFFE
 25814                           tosl	equ	0xFFD
 25815                           pclath	equ	0xFFA
 25816                           tblptru	equ	0xFF8
 25817                           tblptrh	equ	0xFF7
 25818                           tblptrl	equ	0xFF6
 25819                           tablat	equ	0xFF5
 25820                           prodh	equ	0xFF4
 25821                           prodl	equ	0xFF3
 25822                           intcon	equ	0xFF2
 25823                           intcon2	equ	0xFF1
 25824                           intcon3	equ	0xFF0
 25825                           indf0	equ	0xFEF
 25826                           postinc0	equ	0xFEE
 25827                           fsr0h	equ	0xFEA
 25828                           fsr0l	equ	0xFE9
 25829                           wreg	equ	0xFE8
 25830                           postinc1	equ	0xFE6
 25831                           postdec1	equ	0xFE5
 25832                           plusw1	equ	0xFE3
 25833                           fsr1h	equ	0xFE2
 25834                           fsr1l	equ	0xFE1
 25835                           indf2	equ	0xFDF
 25836                           postinc2	equ	0xFDE
 25837                           postdec2	equ	0xFDD
 25838                           plusw2	equ	0xFDB
 25839                           fsr2h	equ	0xFDA
 25840                           fsr2l	equ	0xFD9
 25841                           status	equ	0xFD8
 25842                           
 25843 ;; *************** function _SearchAvailableChannel *****************
 25844 ;; Defined at:
 25845 ;;		line 625 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 25846 ;; Parameters:    Size  Location     Type
 25847 ;;  maxChannels     1    wreg     unsigned char 
 25848 ;;  transmission    1   79[BANK0 ] unsigned char 
 25849 ;;  channelIndex    2   80[BANK0 ] PTR unsigned char 
 25850 ;;		 -> SelectChannelForTransmission@channelIndex(1), LORAWAN_RxDone@channelIndex(1), 
 25851 ;; Auto vars:     Size  Location     Type
 25852 ;;  maxChannels     1   90[BANK0 ] unsigned char 
 25853 ;;  i               1   92[BANK0 ] unsigned char 
 25854 ;;  randomNumber    1   91[BANK0 ] unsigned char 
 25855 ;;  startingInde    1   89[BANK0 ] unsigned char 
 25856 ;;  result          1   88[BANK0 ] enum E7249
 25857 ;;  randomNumber    1   87[BANK0 ] unsigned char 
 25858 ;; Return value:  Size  Location     Type
 25859 ;;                  1    wreg      enum E7190
 25860 ;; Registers used:
 25861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25862 ;; Tracked objects:
 25863 ;;		On entry : 0/0
 25864 ;;		On exit  : 0/0
 25865 ;;		Unchanged: 0/0
 25866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25867 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25868 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25869 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25870 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25871 ;;Total ram usage:       14 bytes
 25872 ;; Hardware stack levels used:    1
 25873 ;; Hardware stack levels required when called:   10
 25874 ;; This function calls:
 25875 ;;		_Random
 25876 ;; This function is called by:
 25877 ;;		_LORAWAN_RxDone
 25878 ;;		_SelectChannelForTransmission
 25879 ;; This function uses a non-reentrant model
 25880 ;;
 25881                           
 25882                           	psect	text126
 25883  0000'                    __ptext126:
 25884                           	opt stack 0
 25885  0000'                    _SearchAvailableChannel:
 25886                           	opt stack 18
 25887                           
 25888                           ; BSR set to: 0
 25889                           ;incstack = 0
 25890                           ;SearchAvailableChannel@maxChannels stored from wreg
 25891  0000' 0100               	movlb	0	; () banked
 25892  0002' 6F00'              	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 25893                           
 25894                           ;lorawan_na.c: 627: uint8_t randomNumberCopy, randomNumber, i;
 25895                           ;lorawan_na.c: 628: LorawanError_t result = OK;
 25896  0004' 0E00               	movlw	0
 25897  0006' 0100               	movlb	0	; () banked
 25898  0008' 6F00'              	movwf	SearchAvailableChannel@result& (0+255),b
 25899                           
 25900                           ;lorawan_na.c: 629: uint8_t startingIndex = 0;
 25901  000A' 0E00               	movlw	0
 25902  000C' 6F00'              	movwf	SearchAvailableChannel@startingIndex& (0+255),b
 25903                           
 25904                           ; BSR set to: 0
 25905                           ;lorawan_na.c: 631: if (maxChannels == 8)
 25906  000E' 0E08               	movlw	8
 25907  0010' 1900'              	xorwf	SearchAvailableChannel@maxChannels& (0+255),w,b
 25908  0012' A4D8               	btfss	status,2,c
 25909  0014' D002               	goto	l1517
 25910                           
 25911                           ; BSR set to: 0
 25912                           ;lorawan_na.c: 632: {
 25913                           ;lorawan_na.c: 633: startingIndex = 64;
 25914  0016' 0E40               	movlw	64
 25915  0018' 6F00'              	movwf	SearchAvailableChannel@startingIndex& (0+255),b
 25916  001A'                    l1517:
 25917                           
 25918                           ; BSR set to: 0
 25919                           ;lorawan_na.c: 634: }
 25920                           ;lorawan_na.c: 635: randomNumber = Random (maxChannels) + 1;
 25921                           
 25922                           ; BSR set to: 0
 25923  001A' C05A' F04D'        	movff	SearchAvailableChannel@maxChannels,Random@max
 25924  001E' 6B00'              	clrf	(Random@max+1)& (0+255),b
 25925  0020' EC00' F000'        	call	_Random	;wreg free
 25926  0024' 0100               	movlb	0	; () banked
 25927  0026' 2900'              	incf	?_Random& (0+255),w,b
 25928  0028' 6F00'              	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 25929                           
 25930                           ; BSR set to: 0
 25931                           ;lorawan_na.c: 636: randomNumberCopy = randomNumber;
 25932  002A' C05B' F057'        	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 25933                           
 25934                           ;lorawan_na.c: 638: while (randomNumber)
 25935  002E' D05C               	goto	l1526
 25936  0030'                    l1519:
 25937                           
 25938                           ; BSR set to: 0
 25939                           ;lorawan_na.c: 639: {
 25940                           ;lorawan_na.c: 640: for (i = startingIndex; (i < (startingIndex + maxChannels)) && (rand
      +                          omNumber != 0) ; i++)
 25941  0030' C059' F05C'        	movff	SearchAvailableChannel@startingIndex,SearchAvailableChannel@i
 25942  0034' D03B               	goto	l1520
 25943  0036'                    
 25944                           ; BSR set to: 0
 25945                           ;lorawan_na.c: 641: {
 25946                           ;lorawan_na.c: 642: if ( (loRa.currentDataRate >= Channels[i].dataRange.min) && (loRa.cu
      +                          rrentDataRate <= Channels[i].dataRange.max) && (Channels[i].status == 1) )
 25947                           
 25948                           ; BSR set to: 0
 25949  0036' 5100'              	movf	SearchAvailableChannel@i& (0+255),w,b
 25950  0038' 0D02               	mullw	2
 25951  003A' 0E01               	movlw	1
 25952  003C' 26F3               	addwf	prodl,f,c
 25953  003E' 0E00               	movlw	0
 25954  0040' 22F4               	addwfc	prodh,f,c
 25955  0042' 0E00'              	movlw	low _Channels
 25956  0044' 24F3               	addwf	prodl,w,c
 25957  0046' 6ED9               	movwf	fsr2l,c
 25958  0048' 0E00'              	movlw	high _Channels
 25959  004A' 20F4               	addwfc	prodh,w,c
 25960  004C' 6EDA               	movwf	fsr2h,c
 25961  004E' 0104               	movlb	4	; () banked
 25962  0050' 50DF               	movf	223,w,c
 25963  0052' 0B0F               	andlw	15
 25964  0054' 0100               	movlb	0	; () banked
 25965  0056' 6F00'              	movwf	??_SearchAvailableChannel& (0+255),b
 25966  0058' 5100'              	movf	??_SearchAvailableChannel& (0+255),w,b
 25967  005A' 0102               	movlb	2	; () banked
 25968  005C' 5D00'              	subwf	(_loRa+208)& (0+255),w,b
 25969  005E' A0D8               	btfss	status,0,c
 25970  0060' D023               	goto	l1522
 25971                           
 25972                           ; BSR set to: 2
 25973  0062' 0100               	movlb	0	; () banked
 25974  0064' 5100'              	movf	SearchAvailableChannel@i& (0+255),w,b
 25975  0066' 0D02               	mullw	2
 25976  0068' 0E01               	movlw	1
 25977  006A' 26F3               	addwf	prodl,f,c
 25978  006C' 0E00               	movlw	0
 25979  006E' 22F4               	addwfc	prodh,f,c
 25980  0070' 0E00'              	movlw	low _Channels
 25981  0072' 24F3               	addwf	prodl,w,c
 25982  0074' 6ED9               	movwf	fsr2l,c
 25983  0076' 0E00'              	movlw	high _Channels
 25984  0078' 20F4               	addwfc	prodh,w,c
 25985  007A' 6EDA               	movwf	fsr2h,c
 25986  007C' 0104               	movlb	4	; () banked
 25987  007E' 38DF               	swapf	223,w,c
 25988  0080' 0B0F               	andlw	15
 25989  0082' 0100               	movlb	0	; () banked
 25990  0084' 6F00'              	movwf	??_SearchAvailableChannel& (0+255),b
 25991  0086' 0102               	movlb	2	; () banked
 25992  0088' 5100'              	movf	(_loRa+208)& (0+255),w,b
 25993  008A' 0100               	movlb	0	; () banked
 25994  008C' 5D00'              	subwf	??_SearchAvailableChannel& (0+255),w,b
 25995  008E' A0D8               	btfss	status,0,c
 25996  0090' D00B               	goto	l1522
 25997                           
 25998                           ; BSR set to: 0
 25999  0092' 5100'              	movf	SearchAvailableChannel@i& (0+255),w,b
 26000  0094' 0D02               	mullw	2
 26001  0096' 0E00'              	movlw	low _Channels
 26002  0098' 24F3               	addwf	prodl,w,c
 26003  009A' 6ED9               	movwf	fsr2l,c
 26004  009C' 0E00'              	movlw	high _Channels
 26005  009E' 20F4               	addwfc	prodh,w,c
 26006  00A0' 6EDA               	movwf	fsr2h,c
 26007  00A2' 04DE               	decf	postinc2,w,c
 26008  00A4' B4D8               	btfsc	status,2,c
 26009                           
 26010                           ; BSR set to: 0
 26011                           ;lorawan_na.c: 643: {
 26012                           ;lorawan_na.c: 644: randomNumber --;
 26013  00A6' 0700'              	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 26014  00A8'                    l1522:
 26015  00A8' 0100               	movlb	0	; () banked
 26016  00AA' 2B00'              	incf	SearchAvailableChannel@i& (0+255),f,b
 26017  00AC'                    l1520:
 26018                           
 26019                           ; BSR set to: 0
 26020                           
 26021                           ; BSR set to: 0
 26022  00AC' 5100'              	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 26023  00AE' C059' F052'        	movff	SearchAvailableChannel@startingIndex,??_SearchAvailableChannel
 26024  00B2' 6B00'              	clrf	(??_SearchAvailableChannel+1)& (0+255),b
 26025  00B4' 2700'              	addwf	??_SearchAvailableChannel& (0+255),f,b
 26026  00B6' 0E00               	movlw	0
 26027  00B8' 2300'              	addwfc	(??_SearchAvailableChannel+1)& (0+255),f,b
 26028  00BA' 5100'              	movf	SearchAvailableChannel@i& (0+255),w,b
 26029  00BC' 6F00'              	movwf	(??_SearchAvailableChannel+2)& (0+255),b
 26030  00BE' 6B00'              	clrf	(??_SearchAvailableChannel+3)& (0+255),b
 26031  00C0' 5100'              	movf	??_SearchAvailableChannel& (0+255),w,b
 26032  00C2' 5D00'              	subwf	(??_SearchAvailableChannel+2)& (0+255),w,b
 26033  00C4' 5100'              	movf	(??_SearchAvailableChannel+3)& (0+255),w,b
 26034  00C6' 0A80               	xorlw	128
 26035  00C8' 6F00'              	movwf	(??_SearchAvailableChannel+4)& (0+255),b
 26036  00CA' 5100'              	movf	(??_SearchAvailableChannel+1)& (0+255),w,b
 26037  00CC' 0A80               	xorlw	128
 26038  00CE' 5900'              	subwfb	(??_SearchAvailableChannel+4)& (0+255),w,b
 26039  00D0' B0D8               	btfsc	status,0,c
 26040  00D2' D003               	goto	u8750
 26041                           
 26042                           ; BSR set to: 0
 26043  00D4' 5100'              	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 26044  00D6' A4D8               	btfss	status,2,c
 26045  00D8' D7AE               	goto	l1521
 26046  00DA'                    u8750:
 26047                           
 26048                           ; BSR set to: 0
 26049                           ;lorawan_na.c: 645: }
 26050                           ;lorawan_na.c: 646: }
 26051                           ;lorawan_na.c: 649: if ( randomNumber == randomNumberCopy )
 26052                           
 26053                           ; BSR set to: 0
 26054                           
 26055                           ; BSR set to: 0
 26056  00DA' 5100'              	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 26057  00DC' 1900'              	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 26058  00DE' A4D8               	btfss	status,2,c
 26059  00E0' D003               	goto	l1526
 26060                           
 26061                           ; BSR set to: 0
 26062                           ;lorawan_na.c: 650: {
 26063                           ;lorawan_na.c: 651: result = NO_CHANNELS_FOUND;
 26064  00E2' 0E09               	movlw	9
 26065  00E4' 6F00'              	movwf	SearchAvailableChannel@result& (0+255),b
 26066                           
 26067                           ;lorawan_na.c: 652: break;
 26068  00E6' D003               	goto	u8770
 26069  00E8'                    l1526:
 26070                           
 26071                           ; BSR set to: 0
 26072                           
 26073                           ; BSR set to: 0
 26074                           
 26075                           ; BSR set to: 0
 26076  00E8' 5100'              	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 26077  00EA' A4D8               	btfss	status,2,c
 26078  00EC' D7A1               	goto	l1519
 26079  00EE'                    u8770:
 26080                           
 26081                           ; BSR set to: 0
 26082                           ;lorawan_na.c: 653: }
 26083                           ;lorawan_na.c: 654: }
 26084                           ;lorawan_na.c: 656: if (i != 0)
 26085                           
 26086                           ; BSR set to: 0
 26087  00EE' 5100'              	movf	SearchAvailableChannel@i& (0+255),w,b
 26088  00F0' B4D8               	btfsc	status,2,c
 26089  00F2' D002               	goto	l1528
 26090                           
 26091                           ; BSR set to: 0
 26092                           ;lorawan_na.c: 657: {
 26093                           ;lorawan_na.c: 658: *channelIndex = i - 1;
 26094  00F4' 0500'              	decf	SearchAvailableChannel@i& (0+255),w,b
 26095  00F6' D001               	goto	L16
 26096  00F8'                    l1528:
 26097                           
 26098                           ; BSR set to: 0
 26099                           ;lorawan_na.c: 660: else
 26100                           ;lorawan_na.c: 661: {
 26101                           ;lorawan_na.c: 662: *channelIndex = maxChannels - 1;
 26102                           
 26103                           ; BSR set to: 0
 26104  00F8' 0500'              	decf	SearchAvailableChannel@maxChannels& (0+255),w,b
 26105  00FA'                    L16:
 26106  00FA' C050' FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 26107  00FE' C051' FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 26108  0102' 6EDF               	movwf	indf2,c
 26109                           
 26110                           ; BSR set to: 0
 26111                           ;lorawan_na.c: 663: }
 26112                           ;lorawan_na.c: 664: return result;
 26113                           
 26114                           ; BSR set to: 0
 26115  0104' 5100'              	movf	SearchAvailableChannel@result& (0+255),w,b
 26116  0106' 0012               	return	
 26117  0108'                    __end_of_SearchAvailableChannel:
 26118                           	opt stack 0
 26119                           tosu	equ	0xFFF
 26120                           tosh	equ	0xFFE
 26121                           tosl	equ	0xFFD
 26122                           pclath	equ	0xFFA
 26123                           tblptru	equ	0xFF8
 26124                           tblptrh	equ	0xFF7
 26125                           tblptrl	equ	0xFF6
 26126                           tablat	equ	0xFF5
 26127                           prodh	equ	0xFF4
 26128                           prodl	equ	0xFF3
 26129                           intcon	equ	0xFF2
 26130                           intcon2	equ	0xFF1
 26131                           intcon3	equ	0xFF0
 26132                           indf0	equ	0xFEF
 26133                           postinc0	equ	0xFEE
 26134                           fsr0h	equ	0xFEA
 26135                           fsr0l	equ	0xFE9
 26136                           wreg	equ	0xFE8
 26137                           postinc1	equ	0xFE6
 26138                           postdec1	equ	0xFE5
 26139                           plusw1	equ	0xFE3
 26140                           fsr1h	equ	0xFE2
 26141                           fsr1l	equ	0xFE1
 26142                           indf2	equ	0xFDF
 26143                           postinc2	equ	0xFDE
 26144                           postdec2	equ	0xFDD
 26145                           plusw2	equ	0xFDB
 26146                           fsr2h	equ	0xFDA
 26147                           fsr2l	equ	0xFD9
 26148                           status	equ	0xFD8
 26149                           
 26150 ;; *************** function _RADIO_SetSpreadingFactor *****************
 26151 ;; Defined at:
 26152 ;;		line 1527 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26153 ;; Parameters:    Size  Location     Type
 26154 ;;  spreadingFac    1    wreg     enum E6994
 26155 ;; Auto vars:     Size  Location     Type
 26156 ;;  spreadingFac    1    0[BANK0 ] enum E6994
 26157 ;; Return value:  Size  Location     Type
 26158 ;;                  1    wreg      void 
 26159 ;; Registers used:
 26160 ;;		wreg
 26161 ;; Tracked objects:
 26162 ;;		On entry : 0/0
 26163 ;;		On exit  : 0/0
 26164 ;;		Unchanged: 0/0
 26165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26170 ;;Total ram usage:        1 bytes
 26171 ;; Hardware stack levels used:    1
 26172 ;; Hardware stack levels required when called:    7
 26173 ;; This function calls:
 26174 ;;		Nothing
 26175 ;; This function is called by:
 26176 ;;		_ConfigureRadio
 26177 ;;		_SelectChannelForTransmission
 26178 ;; This function uses a non-reentrant model
 26179 ;;
 26180                           
 26181                           	psect	text127
 26182  0000'                    __ptext127:
 26183                           	opt stack 0
 26184  0000'                    _RADIO_SetSpreadingFactor:
 26185                           	opt stack 21
 26186                           
 26187                           ; BSR set to: 0
 26188                           ;incstack = 0
 26189                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 26190  0000' 0100               	movlb	0	; () banked
 26191  0002' 6F00'              	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 26192                           
 26193                           ;radio_driver_SX1276.c: 1529: RadioConfiguration.dataRate = spreadingFactor;
 26194  0004' C000' F030'        	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 26195  0008' 0012               	return		;funcret
 26196  000A'                    __end_of_RADIO_SetSpreadingFactor:
 26197                           	opt stack 0
 26198                           tosu	equ	0xFFF
 26199                           tosh	equ	0xFFE
 26200                           tosl	equ	0xFFD
 26201                           pclath	equ	0xFFA
 26202                           tblptru	equ	0xFF8
 26203                           tblptrh	equ	0xFF7
 26204                           tblptrl	equ	0xFF6
 26205                           tablat	equ	0xFF5
 26206                           prodh	equ	0xFF4
 26207                           prodl	equ	0xFF3
 26208                           intcon	equ	0xFF2
 26209                           intcon2	equ	0xFF1
 26210                           intcon3	equ	0xFF0
 26211                           indf0	equ	0xFEF
 26212                           postinc0	equ	0xFEE
 26213                           fsr0h	equ	0xFEA
 26214                           fsr0l	equ	0xFE9
 26215                           wreg	equ	0xFE8
 26216                           postinc1	equ	0xFE6
 26217                           postdec1	equ	0xFE5
 26218                           plusw1	equ	0xFE3
 26219                           fsr1h	equ	0xFE2
 26220                           fsr1l	equ	0xFE1
 26221                           indf2	equ	0xFDF
 26222                           postinc2	equ	0xFDE
 26223                           postdec2	equ	0xFDD
 26224                           plusw2	equ	0xFDB
 26225                           fsr2h	equ	0xFDA
 26226                           fsr2l	equ	0xFD9
 26227                           status	equ	0xFD8
 26228                           
 26229 ;; *************** function _RADIO_SetOutputPower *****************
 26230 ;; Defined at:
 26231 ;;		line 1557 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26232 ;; Parameters:    Size  Location     Type
 26233 ;;  power           1    wreg     char 
 26234 ;; Auto vars:     Size  Location     Type
 26235 ;;  power           1    0[BANK0 ] char 
 26236 ;; Return value:  Size  Location     Type
 26237 ;;                  1    wreg      void 
 26238 ;; Registers used:
 26239 ;;		wreg
 26240 ;; Tracked objects:
 26241 ;;		On entry : 0/0
 26242 ;;		On exit  : 0/0
 26243 ;;		Unchanged: 0/0
 26244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26249 ;;Total ram usage:        1 bytes
 26250 ;; Hardware stack levels used:    1
 26251 ;; Hardware stack levels required when called:    7
 26252 ;; This function calls:
 26253 ;;		Nothing
 26254 ;; This function is called by:
 26255 ;;		_SelectChannelForTransmission
 26256 ;; This function uses a non-reentrant model
 26257 ;;
 26258                           
 26259                           	psect	text128
 26260  0000'                    __ptext128:
 26261                           	opt stack 0
 26262  0000'                    _RADIO_SetOutputPower:
 26263                           	opt stack 21
 26264                           
 26265                           ;incstack = 0
 26266                           ;RADIO_SetOutputPower@power stored from wreg
 26267  0000' 0100               	movlb	0	; () banked
 26268  0002' 6F00'              	movwf	RADIO_SetOutputPower@power& (0+255),b
 26269                           
 26270                           ;radio_driver_SX1276.c: 1559: RadioConfiguration.outputPower = power;
 26271  0004' C000' F032'        	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 26272  0008' 0012               	return		;funcret
 26273  000A'                    __end_of_RADIO_SetOutputPower:
 26274                           	opt stack 0
 26275                           tosu	equ	0xFFF
 26276                           tosh	equ	0xFFE
 26277                           tosl	equ	0xFFD
 26278                           pclath	equ	0xFFA
 26279                           tblptru	equ	0xFF8
 26280                           tblptrh	equ	0xFF7
 26281                           tblptrl	equ	0xFF6
 26282                           tablat	equ	0xFF5
 26283                           prodh	equ	0xFF4
 26284                           prodl	equ	0xFF3
 26285                           intcon	equ	0xFF2
 26286                           intcon2	equ	0xFF1
 26287                           intcon3	equ	0xFF0
 26288                           indf0	equ	0xFEF
 26289                           postinc0	equ	0xFEE
 26290                           fsr0h	equ	0xFEA
 26291                           fsr0l	equ	0xFE9
 26292                           wreg	equ	0xFE8
 26293                           postinc1	equ	0xFE6
 26294                           postdec1	equ	0xFE5
 26295                           plusw1	equ	0xFE3
 26296                           fsr1h	equ	0xFE2
 26297                           fsr1l	equ	0xFE1
 26298                           indf2	equ	0xFDF
 26299                           postinc2	equ	0xFDE
 26300                           postdec2	equ	0xFDD
 26301                           plusw2	equ	0xFDB
 26302                           fsr2h	equ	0xFDA
 26303                           fsr2l	equ	0xFD9
 26304                           status	equ	0xFD8
 26305                           
 26306 ;; *************** function _RADIO_SetIQInverted *****************
 26307 ;; Defined at:
 26308 ;;		line 1577 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26309 ;; Parameters:    Size  Location     Type
 26310 ;;  iqInverted      1    wreg     unsigned char 
 26311 ;; Auto vars:     Size  Location     Type
 26312 ;;  iqInverted      1    0[BANK0 ] unsigned char 
 26313 ;; Return value:  Size  Location     Type
 26314 ;;                  1    wreg      void 
 26315 ;; Registers used:
 26316 ;;		wreg
 26317 ;; Tracked objects:
 26318 ;;		On entry : 0/0
 26319 ;;		On exit  : 0/0
 26320 ;;		Unchanged: 0/0
 26321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26326 ;;Total ram usage:        1 bytes
 26327 ;; Hardware stack levels used:    1
 26328 ;; Hardware stack levels required when called:    7
 26329 ;; This function calls:
 26330 ;;		Nothing
 26331 ;; This function is called by:
 26332 ;;		_ConfigureRadioRx
 26333 ;;		_SelectChannelForTransmission
 26334 ;; This function uses a non-reentrant model
 26335 ;;
 26336                           
 26337                           	psect	text129
 26338  0000'                    __ptext129:
 26339                           	opt stack 0
 26340  0000'                    _RADIO_SetIQInverted:
 26341                           	opt stack 21
 26342                           
 26343                           ;incstack = 0
 26344                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 26345  0000' 0100               	movlb	0	; () banked
 26346  0002' 6F00'              	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 26347                           
 26348                           ;radio_driver_SX1276.c: 1579: RadioConfiguration.iqInverted = iqInverted;
 26349  0004' C000' F037'        	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 26350  0008' 0012               	return		;funcret
 26351  000A'                    __end_of_RADIO_SetIQInverted:
 26352                           	opt stack 0
 26353                           tosu	equ	0xFFF
 26354                           tosh	equ	0xFFE
 26355                           tosl	equ	0xFFD
 26356                           pclath	equ	0xFFA
 26357                           tblptru	equ	0xFF8
 26358                           tblptrh	equ	0xFF7
 26359                           tblptrl	equ	0xFF6
 26360                           tablat	equ	0xFF5
 26361                           prodh	equ	0xFF4
 26362                           prodl	equ	0xFF3
 26363                           intcon	equ	0xFF2
 26364                           intcon2	equ	0xFF1
 26365                           intcon3	equ	0xFF0
 26366                           indf0	equ	0xFEF
 26367                           postinc0	equ	0xFEE
 26368                           fsr0h	equ	0xFEA
 26369                           fsr0l	equ	0xFE9
 26370                           wreg	equ	0xFE8
 26371                           postinc1	equ	0xFE6
 26372                           postdec1	equ	0xFE5
 26373                           plusw1	equ	0xFE3
 26374                           fsr1h	equ	0xFE2
 26375                           fsr1l	equ	0xFE1
 26376                           indf2	equ	0xFDF
 26377                           postinc2	equ	0xFDE
 26378                           postdec2	equ	0xFDD
 26379                           plusw2	equ	0xFDB
 26380                           fsr2h	equ	0xFDA
 26381                           fsr2l	equ	0xFD9
 26382                           status	equ	0xFD8
 26383                           
 26384 ;; *************** function _RADIO_SetChannelFrequency *****************
 26385 ;; Defined at:
 26386 ;;		line 1537 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26387 ;; Parameters:    Size  Location     Type
 26388 ;;  frequency       4    0[BANK0 ] unsigned long 
 26389 ;; Auto vars:     Size  Location     Type
 26390 ;;		None
 26391 ;; Return value:  Size  Location     Type
 26392 ;;                  2    0[BANK0 ] enum E7780
 26393 ;; Registers used:
 26394 ;;		wreg, status,2, status,0
 26395 ;; Tracked objects:
 26396 ;;		On entry : 0/0
 26397 ;;		On exit  : 0/0
 26398 ;;		Unchanged: 0/0
 26399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26403 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26404 ;;Total ram usage:        4 bytes
 26405 ;; Hardware stack levels used:    1
 26406 ;; Hardware stack levels required when called:    7
 26407 ;; This function calls:
 26408 ;;		Nothing
 26409 ;; This function is called by:
 26410 ;;		_ConfigureRadio
 26411 ;;		_SelectChannelForTransmission
 26412 ;; This function uses a non-reentrant model
 26413 ;;
 26414                           
 26415                           	psect	text130
 26416  0000'                    __ptext130:
 26417                           	opt stack 0
 26418  0000'                    _RADIO_SetChannelFrequency:
 26419                           	opt stack 21
 26420                           
 26421                           ;radio_driver_SX1276.c: 1539: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 26422                           ;radio_driver_SX1276.c: 1540: (frequency >= 410000000) && (frequency <= 525000000) ||
 26423                           ;radio_driver_SX1276.c: 1541: (frequency >= 862000000) && (frequency <= 1020000000) )
 26424                           
 26425                           ;incstack = 0
 26426  0000' 0E40               	movlw	64
 26427  0002' 0100               	movlb	0	; () banked
 26428  0004' 5D00'              	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26429  0006' 0E74               	movlw	116
 26430  0008' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26431  000A' 0E2A               	movlw	42
 26432  000C' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26433  000E' 0E08               	movlw	8
 26434  0010' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26435  0012' A0D8               	btfss	status,0,c
 26436  0014' D00A               	goto	u7380
 26437                           
 26438                           ; BSR set to: 0
 26439  0016' 0EC1               	movlw	193
 26440  0018' 5D00'              	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26441  001A' 0E49               	movlw	73
 26442  001C' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26443  001E' 0E6E               	movlw	110
 26444  0020' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26445  0022' 0E0A               	movlw	10
 26446  0024' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26447  0026' A0D8               	btfss	status,0,c
 26448  0028' D027               	goto	u7420
 26449  002A'                    u7380:
 26450                           
 26451                           ; BSR set to: 0
 26452                           
 26453                           ; BSR set to: 0
 26454  002A' 0E80               	movlw	128
 26455  002C' 5D00'              	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26456  002E' 0E1A               	movlw	26
 26457  0030' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26458  0032' 0E70               	movlw	112
 26459  0034' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26460  0036' 0E18               	movlw	24
 26461  0038' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26462  003A' A0D8               	btfss	status,0,c
 26463  003C' D00A               	goto	u7400
 26464                           
 26465                           ; BSR set to: 0
 26466  003E' 0E41               	movlw	65
 26467  0040' 5D00'              	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26468  0042' 0EDD               	movlw	221
 26469  0044' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26470  0046' 0E4A               	movlw	74
 26471  0048' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26472  004A' 0E1F               	movlw	31
 26473  004C' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26474  004E' A0D8               	btfss	status,0,c
 26475  0050' D013               	goto	u7420
 26476  0052'                    u7400:
 26477                           
 26478                           ; BSR set to: 0
 26479                           
 26480                           ; BSR set to: 0
 26481  0052' 0E80               	movlw	128
 26482  0054' 5D00'              	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26483  0056' 0E13               	movlw	19
 26484  0058' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26485  005A' 0E61               	movlw	97
 26486  005C' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26487  005E' 0E33               	movlw	51
 26488  0060' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26489  0062' A0D8               	btfss	status,0,c
 26490  0064' 0012               	return	
 26491                           
 26492                           ; BSR set to: 0
 26493  0066' 0500'              	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 26494  0068' 0EF7               	movlw	247
 26495  006A' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 26496  006C' 0ECB               	movlw	203
 26497  006E' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 26498  0070' 0E3C               	movlw	60
 26499  0072' 5900'              	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 26500  0074' B0D8               	btfsc	status,0,c
 26501  0076' 0012               	return	
 26502  0078'                    u7420:
 26503                           
 26504                           ; BSR set to: 0
 26505                           ;radio_driver_SX1276.c: 1542: {
 26506                           ;radio_driver_SX1276.c: 1543: RadioConfiguration.frequency = frequency;
 26507  0078' C000' F017'        	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 26508  007C' C001' F018'        	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 26509  0080' C002' F019'        	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 26510  0084' C003' F01A'        	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 26511                           
 26512                           ; BSR set to: 0
 26513                           ;radio_driver_SX1276.c: 1546: else
 26514                           ;radio_driver_SX1276.c: 1547: {
 26515                           ;radio_driver_SX1276.c: 1548: return ERR_OUT_OF_RANGE;
 26516                           ;	Return value of _RADIO_SetChannelFrequency is never used
 26517                           
 26518                           ; BSR set to: 0
 26519                           ;radio_driver_SX1276.c: 1545: }
 26520                           
 26521                           ;radio_driver_SX1276.c: 1544: return ERR_NONE;
 26522                           ;	Return value of _RADIO_SetChannelFrequency is never used
 26523  0088' 0012               	return	
 26524  008A'                    __end_of_RADIO_SetChannelFrequency:
 26525                           	opt stack 0
 26526                           tosu	equ	0xFFF
 26527                           tosh	equ	0xFFE
 26528                           tosl	equ	0xFFD
 26529                           pclath	equ	0xFFA
 26530                           tblptru	equ	0xFF8
 26531                           tblptrh	equ	0xFF7
 26532                           tblptrl	equ	0xFF6
 26533                           tablat	equ	0xFF5
 26534                           prodh	equ	0xFF4
 26535                           prodl	equ	0xFF3
 26536                           intcon	equ	0xFF2
 26537                           intcon2	equ	0xFF1
 26538                           intcon3	equ	0xFF0
 26539                           indf0	equ	0xFEF
 26540                           postinc0	equ	0xFEE
 26541                           fsr0h	equ	0xFEA
 26542                           fsr0l	equ	0xFE9
 26543                           wreg	equ	0xFE8
 26544                           postinc1	equ	0xFE6
 26545                           postdec1	equ	0xFE5
 26546                           plusw1	equ	0xFE3
 26547                           fsr1h	equ	0xFE2
 26548                           fsr1l	equ	0xFE1
 26549                           indf2	equ	0xFDF
 26550                           postinc2	equ	0xFDE
 26551                           postdec2	equ	0xFDD
 26552                           plusw2	equ	0xFDB
 26553                           fsr2h	equ	0xFDA
 26554                           fsr2l	equ	0xFD9
 26555                           status	equ	0xFD8
 26556                           
 26557 ;; *************** function _RADIO_SetCRC *****************
 26558 ;; Defined at:
 26559 ;;		line 1567 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26560 ;; Parameters:    Size  Location     Type
 26561 ;;  crc             1    wreg     unsigned char 
 26562 ;; Auto vars:     Size  Location     Type
 26563 ;;  crc             1    0[BANK0 ] unsigned char 
 26564 ;; Return value:  Size  Location     Type
 26565 ;;                  1    wreg      void 
 26566 ;; Registers used:
 26567 ;;		wreg
 26568 ;; Tracked objects:
 26569 ;;		On entry : 0/0
 26570 ;;		On exit  : 0/0
 26571 ;;		Unchanged: 0/0
 26572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26577 ;;Total ram usage:        1 bytes
 26578 ;; Hardware stack levels used:    1
 26579 ;; Hardware stack levels required when called:    7
 26580 ;; This function calls:
 26581 ;;		Nothing
 26582 ;; This function is called by:
 26583 ;;		_ConfigureRadioRx
 26584 ;;		_SelectChannelForTransmission
 26585 ;; This function uses a non-reentrant model
 26586 ;;
 26587                           
 26588                           	psect	text131
 26589  0000'                    __ptext131:
 26590                           	opt stack 0
 26591  0000'                    _RADIO_SetCRC:
 26592                           	opt stack 21
 26593                           
 26594                           ; BSR set to: 0
 26595                           ;incstack = 0
 26596                           ;RADIO_SetCRC@crc stored from wreg
 26597  0000' 0100               	movlb	0	; () banked
 26598  0002' 6F00'              	movwf	RADIO_SetCRC@crc& (0+255),b
 26599                           
 26600                           ;radio_driver_SX1276.c: 1569: RadioConfiguration.crcOn = crc;
 26601  0004' C000' F033'        	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 26602  0008' 0012               	return		;funcret
 26603  000A'                    __end_of_RADIO_SetCRC:
 26604                           	opt stack 0
 26605                           tosu	equ	0xFFF
 26606                           tosh	equ	0xFFE
 26607                           tosl	equ	0xFFD
 26608                           pclath	equ	0xFFA
 26609                           tblptru	equ	0xFF8
 26610                           tblptrh	equ	0xFF7
 26611                           tblptrl	equ	0xFF6
 26612                           tablat	equ	0xFF5
 26613                           prodh	equ	0xFF4
 26614                           prodl	equ	0xFF3
 26615                           intcon	equ	0xFF2
 26616                           intcon2	equ	0xFF1
 26617                           intcon3	equ	0xFF0
 26618                           indf0	equ	0xFEF
 26619                           postinc0	equ	0xFEE
 26620                           fsr0h	equ	0xFEA
 26621                           fsr0l	equ	0xFE9
 26622                           wreg	equ	0xFE8
 26623                           postinc1	equ	0xFE6
 26624                           postdec1	equ	0xFE5
 26625                           plusw1	equ	0xFE3
 26626                           fsr1h	equ	0xFE2
 26627                           fsr1l	equ	0xFE1
 26628                           indf2	equ	0xFDF
 26629                           postinc2	equ	0xFDE
 26630                           postdec2	equ	0xFDD
 26631                           plusw2	equ	0xFDB
 26632                           fsr2h	equ	0xFDA
 26633                           fsr2l	equ	0xFD9
 26634                           status	equ	0xFD8
 26635                           
 26636 ;; *************** function _RADIO_SetBandwidth *****************
 26637 ;; Defined at:
 26638 ;;		line 1588 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26639 ;; Parameters:    Size  Location     Type
 26640 ;;  bandwidth       1    wreg     enum E7002
 26641 ;; Auto vars:     Size  Location     Type
 26642 ;;  bandwidth       1    0[BANK0 ] enum E7002
 26643 ;; Return value:  Size  Location     Type
 26644 ;;                  1    wreg      void 
 26645 ;; Registers used:
 26646 ;;		wreg
 26647 ;; Tracked objects:
 26648 ;;		On entry : 0/0
 26649 ;;		On exit  : 0/0
 26650 ;;		Unchanged: 0/0
 26651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26656 ;;Total ram usage:        1 bytes
 26657 ;; Hardware stack levels used:    1
 26658 ;; Hardware stack levels required when called:    7
 26659 ;; This function calls:
 26660 ;;		Nothing
 26661 ;; This function is called by:
 26662 ;;		_ConfigureRadio
 26663 ;;		_SelectChannelForTransmission
 26664 ;; This function uses a non-reentrant model
 26665 ;;
 26666                           
 26667                           	psect	text132
 26668  0000'                    __ptext132:
 26669                           	opt stack 0
 26670  0000'                    _RADIO_SetBandwidth:
 26671                           	opt stack 21
 26672                           
 26673                           ;incstack = 0
 26674                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 26675  0000' 0100               	movlb	0	; () banked
 26676  0002' 6F00'              	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 26677                           
 26678                           ;radio_driver_SX1276.c: 1590: RadioConfiguration.bandWidth = bandwidth;
 26679  0004' C000' F031'        	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 26680  0008' 0012               	return		;funcret
 26681  000A'                    __end_of_RADIO_SetBandwidth:
 26682                           	opt stack 0
 26683                           tosu	equ	0xFFF
 26684                           tosh	equ	0xFFE
 26685                           tosl	equ	0xFFD
 26686                           pclath	equ	0xFFA
 26687                           tblptru	equ	0xFF8
 26688                           tblptrh	equ	0xFF7
 26689                           tblptrl	equ	0xFF6
 26690                           tablat	equ	0xFF5
 26691                           prodh	equ	0xFF4
 26692                           prodl	equ	0xFF3
 26693                           intcon	equ	0xFF2
 26694                           intcon2	equ	0xFF1
 26695                           intcon3	equ	0xFF0
 26696                           indf0	equ	0xFEF
 26697                           postinc0	equ	0xFEE
 26698                           fsr0h	equ	0xFEA
 26699                           fsr0l	equ	0xFE9
 26700                           wreg	equ	0xFE8
 26701                           postinc1	equ	0xFE6
 26702                           postdec1	equ	0xFE5
 26703                           plusw1	equ	0xFE3
 26704                           fsr1h	equ	0xFE2
 26705                           fsr1l	equ	0xFE1
 26706                           indf2	equ	0xFDF
 26707                           postinc2	equ	0xFDE
 26708                           postdec2	equ	0xFDD
 26709                           plusw2	equ	0xFDB
 26710                           fsr2h	equ	0xFDA
 26711                           fsr2l	equ	0xFD9
 26712                           status	equ	0xFD8
 26713                           
 26714 ;; *************** function _RADIO_Transmit *****************
 26715 ;; Defined at:
 26716 ;;		line 826 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26717 ;; Parameters:    Size  Location     Type
 26718 ;;  buffer          2   81[BANK0 ] PTR unsigned char 
 26719 ;;		 -> macBuffer(271), 
 26720 ;;  bufferLen       1   83[BANK0 ] unsigned char 
 26721 ;; Auto vars:     Size  Location     Type
 26722 ;;  i               1   97[BANK0 ] unsigned char 
 26723 ;;  regValue        1   96[BANK0 ] unsigned char 
 26724 ;; Return value:  Size  Location     Type
 26725 ;;                  2   81[BANK0 ] enum E7721
 26726 ;; Registers used:
 26727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26728 ;; Tracked objects:
 26729 ;;		On entry : 0/0
 26730 ;;		On exit  : 0/0
 26731 ;;		Unchanged: 0/0
 26732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26734 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26735 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26736 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26737 ;;Total ram usage:       17 bytes
 26738 ;; Hardware stack levels used:    1
 26739 ;; Hardware stack levels required when called:   12
 26740 ;; This function calls:
 26741 ;;		_HALSPICSAssert
 26742 ;;		_HALSPICSDeassert
 26743 ;;		_HALSPISend
 26744 ;;		_RADIO_RegisterRead
 26745 ;;		_RADIO_RegisterWrite
 26746 ;;		_RADIO_WriteConfiguration
 26747 ;;		_RADIO_WriteMode
 26748 ;;		_SwTimerSetTimeout
 26749 ;;		_SwTimerStart
 26750 ;;		_SwTimerStop
 26751 ;;		___lldiv
 26752 ;; This function is called by:
 26753 ;;		_LORAWAN_Join
 26754 ;;		_LORAWAN_Send
 26755 ;;		_AckRetransmissionCallback
 26756 ;;		_UnconfirmedTransmissionCallback
 26757 ;;		_Retransmissions
 26758 ;;		_TransmissionErrorCallback
 26759 ;; This function uses a non-reentrant model
 26760 ;;
 26761                           
 26762                           	psect	text133
 26763  0000'                    __ptext133:
 26764                           	opt stack 0
 26765  0000'                    _RADIO_Transmit:
 26766                           	opt stack 17
 26767                           
 26768                           ;radio_driver_SX1276.c: 828: uint8_t regValue;
 26769                           ;radio_driver_SX1276.c: 829: uint8_t i;
 26770                           ;radio_driver_SX1276.c: 831: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 26771                           
 26772                           ;incstack = 0
 26773  0000' 0101               	movlb	1	; () banked
 26774  0002' A500'              	btfss	(_RadioConfiguration+35)& (0+255),2,b
 26775  0004' D006               	goto	l1875
 26776                           
 26777                           ; BSR set to: 1
 26778                           ;radio_driver_SX1276.c: 832: {
 26779                           ;radio_driver_SX1276.c: 833: return ERR_BUFFER_LOCKED;
 26780  0006' 0E80               	movlw	128
 26781  0008' 0100               	movlb	0	; () banked
 26782  000A' 6F00'              	movwf	(?_RADIO_Transmit+1)& (0+255),b
 26783  000C' 0E03               	movlw	3
 26784  000E' 6F00'              	movwf	?_RADIO_Transmit& (0+255),b
 26785                           
 26786                           ; BSR set to: 0
 26787  0010' 0012               	return	
 26788  0012'                    l1875:
 26789                           
 26790                           ;radio_driver_SX1276.c: 834: }
 26791                           ;radio_driver_SX1276.c: 836: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 26792                           
 26793                           ; BSR set to: 0
 26794  0012' C03A' F054'        	movff	_RadioConfiguration+35,??_RADIO_Transmit
 26795  0016' 0E03               	movlw	3
 26796  0018' 0100               	movlb	0	; () banked
 26797  001A' 1700'              	andwf	??_RADIO_Transmit& (0+255),f,b
 26798  001C' B4D8               	btfsc	status,2,c
 26799  001E' D005               	goto	l1877
 26800                           
 26801                           ; BSR set to: 0
 26802                           ;radio_driver_SX1276.c: 837: {
 26803                           ;radio_driver_SX1276.c: 838: return ERR_RADIO_BUSY;
 26804  0020' 0E80               	movlw	128
 26805  0022' 6F00'              	movwf	(?_RADIO_Transmit+1)& (0+255),b
 26806  0024' 0E04               	movlw	4
 26807  0026' 6F00'              	movwf	?_RADIO_Transmit& (0+255),b
 26808                           
 26809                           ; BSR set to: 0
 26810  0028' 0012               	return	
 26811  002A'                    l1877:
 26812                           
 26813                           ; BSR set to: 0
 26814                           ;radio_driver_SX1276.c: 839: }
 26815                           ;radio_driver_SX1276.c: 841: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 26816                           
 26817                           ; BSR set to: 0
 26818  002A' 0101               	movlb	1	; () banked
 26819  002C' 5100'              	movf	(_RadioConfiguration+24)& (0+255),w,b
 26820  002E' A4D8               	btfss	status,2,c
 26821  0030' D009               	goto	l1878
 26822                           
 26823                           ; BSR set to: 1
 26824  0032' 0E40               	movlw	64
 26825  0034' 0100               	movlb	0	; () banked
 26826  0036' 6500'              	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 26827  0038' D005               	goto	l1878
 26828                           
 26829                           ; BSR set to: 0
 26830                           ;radio_driver_SX1276.c: 842: {
 26831                           ;radio_driver_SX1276.c: 843: return ERR_DATA_SIZE;
 26832  003A' 0E80               	movlw	128
 26833  003C' 6F00'              	movwf	(?_RADIO_Transmit+1)& (0+255),b
 26834  003E' 0E02               	movlw	2
 26835  0040' 6F00'              	movwf	?_RADIO_Transmit& (0+255),b
 26836                           
 26837                           ; BSR set to: 0
 26838  0042' 0012               	return	
 26839  0044'                    l1878:
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;radio_driver_SX1276.c: 844: }
 26843                           ;radio_driver_SX1276.c: 852: do { LATB3 = 1; } while(0);
 26844  0044' 868A               	bsf	3978,3,c	;volatile
 26845                           
 26846                           ;radio_driver_SX1276.c: 854: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 26847  0046' 0101               	movlb	1	; () banked
 26848  0048' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 26849  004A' EC00' F000'        	call	_SwTimerStop
 26850                           
 26851                           ;radio_driver_SX1276.c: 858: RADIO_WriteConfiguration(4);
 26852  004E' 0E00               	movlw	0
 26853  0050' 0100               	movlb	0	; () banked
 26854  0052' 6F00'              	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 26855  0054' 0E04               	movlw	4
 26856  0056' 6F00'              	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 26857  0058' EC00' F000'        	call	_RADIO_WriteConfiguration	;wreg free
 26858                           
 26859                           ;radio_driver_SX1276.c: 860: if (MODULATION_LORA == RadioConfiguration.modulation)
 26860  005C' 0101               	movlb	1	; () banked
 26861  005E' 0500'              	decf	(_RadioConfiguration+24)& (0+255),w,b
 26862  0060' A4D8               	btfss	status,2,c
 26863  0062' D027               	goto	l1881
 26864                           
 26865                           ; BSR set to: 1
 26866                           ;radio_driver_SX1276.c: 861: {
 26867                           ;radio_driver_SX1276.c: 862: RADIO_RegisterWrite(0x22, bufferLen);
 26868  0064' C053' F002'        	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 26869  0068' 0E22               	movlw	34
 26870  006A' EC00' F000'        	call	_RADIO_RegisterWrite
 26871                           
 26872                           ;radio_driver_SX1276.c: 865: regValue = RADIO_RegisterRead(0x0A);
 26873  006E' 0E0A               	movlw	10
 26874  0070' EC00' F000'        	call	_RADIO_RegisterRead
 26875  0074' 0100               	movlb	0	; () banked
 26876  0076' 6F00'              	movwf	RADIO_Transmit@regValue& (0+255),b
 26877                           
 26878                           ; BSR set to: 0
 26879                           ;radio_driver_SX1276.c: 866: regValue &= ~0x0F;
 26880  0078' 0EF0               	movlw	240
 26881  007A' 1700'              	andwf	RADIO_Transmit@regValue& (0+255),f,b
 26882                           
 26883                           ; BSR set to: 0
 26884                           ;radio_driver_SX1276.c: 867: regValue |= 0x08;
 26885  007C' 8700'              	bsf	RADIO_Transmit@regValue& (0+255),3,b
 26886                           
 26887                           ; BSR set to: 0
 26888                           ;radio_driver_SX1276.c: 868: RADIO_RegisterWrite(0x0A, regValue);
 26889  007E' C060' F002'        	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 26890  0082' 0E0A               	movlw	10
 26891  0084' EC00' F000'        	call	_RADIO_RegisterWrite
 26892                           
 26893                           ;radio_driver_SX1276.c: 872: RADIO_RegisterWrite(0x40, 0x40);
 26894  0088' 0E40               	movlw	64
 26895  008A' 0100               	movlb	0	; () banked
 26896  008C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 26897  008E' 0E40               	movlw	64
 26898  0090' EC00' F000'        	call	_RADIO_RegisterWrite
 26899                           
 26900                           ;radio_driver_SX1276.c: 873: RADIO_RegisterWrite(0x41, 0x00);
 26901  0094' 0E00               	movlw	0
 26902  0096' 0100               	movlb	0	; () banked
 26903  0098' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 26904  009A' 0E41               	movlw	65
 26905  009C' EC00' F000'        	call	_RADIO_RegisterWrite
 26906                           
 26907                           ;radio_driver_SX1276.c: 875: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 26908  00A0' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 26909  00A4' 0E01               	movlw	1
 26910  00A6' 0100               	movlb	0	; () banked
 26911  00A8' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 26912  00AA' 0E01               	movlw	1
 26913  00AC' EC00' F000'        	call	_RADIO_WriteMode
 26914                           
 26915                           ;radio_driver_SX1276.c: 876: }
 26916  00B0' D00C               	goto	l1882
 26917  00B2'                    l1881:
 26918                           
 26919                           ;radio_driver_SX1276.c: 877: else
 26920                           ;radio_driver_SX1276.c: 878: {
 26921                           ;radio_driver_SX1276.c: 880: RADIO_RegisterWrite(0x40, 0x00);
 26922  00B2' 0E00               	movlw	0
 26923  00B4' 0100               	movlb	0	; () banked
 26924  00B6' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 26925  00B8' 0E40               	movlw	64
 26926  00BA' EC00' F000'        	call	_RADIO_RegisterWrite
 26927                           
 26928                           ;radio_driver_SX1276.c: 881: RADIO_RegisterWrite(0x41, 0x00);
 26929  00BE' 0E00               	movlw	0
 26930  00C0' 0100               	movlb	0	; () banked
 26931  00C2' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 26932  00C4' 0E41               	movlw	65
 26933  00C6' EC00' F000'        	call	_RADIO_RegisterWrite
 26934  00CA'                    l1882:
 26935                           
 26936                           ;radio_driver_SX1276.c: 882: }
 26937                           ;radio_driver_SX1276.c: 884: if (MODULATION_FSK == RadioConfiguration.modulation)
 26938  00CA' 0101               	movlb	1	; () banked
 26939  00CC' 5100'              	movf	(_RadioConfiguration+24)& (0+255),w,b
 26940  00CE' A4D8               	btfss	status,2,c
 26941  00D0' D005               	goto	l1883
 26942                           
 26943                           ; BSR set to: 1
 26944                           ;radio_driver_SX1276.c: 885: {
 26945                           ;radio_driver_SX1276.c: 887: RADIO_RegisterWrite(0x00, bufferLen);
 26946  00D2' C053' F002'        	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 26947  00D6' 0E00               	movlw	0
 26948  00D8' EC00' F000'        	call	_RADIO_RegisterWrite
 26949  00DC'                    l1883:
 26950                           
 26951                           ;radio_driver_SX1276.c: 888: }
 26952                           ;radio_driver_SX1276.c: 890: HALSPICSAssert();
 26953  00DC' EC00' F000'        	call	_HALSPICSAssert	;wreg free
 26954                           
 26955                           ;radio_driver_SX1276.c: 891: HALSPISend(0x80 | 0x00);
 26956  00E0' 0E80               	movlw	128
 26957  00E2' EC00' F000'        	call	_HALSPISend
 26958                           
 26959                           ;radio_driver_SX1276.c: 893: for (i = 0; i < bufferLen; i++)
 26960  00E6' 0E00               	movlw	0
 26961  00E8' 0100               	movlb	0	; () banked
 26962  00EA' 6F00'              	movwf	RADIO_Transmit@i& (0+255),b
 26963  00EC' D00D               	goto	l1884
 26964  00EE'                    
 26965                           ; BSR set to: 0
 26966                           ;radio_driver_SX1276.c: 894: {
 26967                           ;radio_driver_SX1276.c: 895: HALSPISend(buffer[i]);
 26968                           
 26969                           ; BSR set to: 0
 26970  00EE' 5100'              	movf	RADIO_Transmit@i& (0+255),w,b
 26971  00F0' 0D01               	mullw	1
 26972  00F2' 50F3               	movf	prodl,w,c
 26973  00F4' 2500'              	addwf	RADIO_Transmit@buffer& (0+255),w,b
 26974  00F6' 6ED9               	movwf	fsr2l,c
 26975  00F8' 50F4               	movf	prodh,w,c
 26976  00FA' 2100'              	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 26977  00FC' 6EDA               	movwf	fsr2h,c
 26978  00FE' 50DF               	movf	indf2,w,c
 26979  0100' EC00' F000'        	call	_HALSPISend
 26980  0104' 0100               	movlb	0	; () banked
 26981  0106' 2B00'              	incf	RADIO_Transmit@i& (0+255),f,b
 26982  0108'                    l1884:
 26983                           
 26984                           ; BSR set to: 0
 26985                           
 26986                           ; BSR set to: 0
 26987  0108' 5100'              	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 26988  010A' 5D00'              	subwf	RADIO_Transmit@i& (0+255),w,b
 26989  010C' A0D8               	btfss	status,0,c
 26990  010E' D7EF               	goto	l1885
 26991                           
 26992                           ; BSR set to: 0
 26993                           ;radio_driver_SX1276.c: 896: }
 26994                           ;radio_driver_SX1276.c: 897: HALSPICSDeassert();
 26995                           
 26996                           ; BSR set to: 0
 26997  0110' EC00' F000'        	call	_HALSPICSDeassert	;wreg free
 26998                           
 26999                           ;radio_driver_SX1276.c: 899: RadioConfiguration.flags |= (1 << (0));
 27000  0114' 0101               	movlb	1	; () banked
 27001  0116' 8100'              	bsf	(_RadioConfiguration+35)& (0+255),0,b
 27002                           
 27003                           ; BSR set to: 1
 27004                           ;radio_driver_SX1276.c: 900: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 27005  0118' 0EE7               	movlw	231
 27006  011A' 1700'              	andwf	(_RadioConfiguration+35)& (0+255),f,b
 27007                           
 27008                           ; BSR set to: 1
 27009                           ;radio_driver_SX1276.c: 905: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 27010  011C' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 27011  0120' 0E00               	movlw	0
 27012  0122' 0100               	movlb	0	; () banked
 27013  0124' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 27014  0126' 0E03               	movlw	3
 27015  0128' EC00' F000'        	call	_RADIO_WriteMode
 27016                           
 27017                           ; BSR set to: 0
 27018                           
 27019                           ;radio_driver_SX1276.c: 910: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 27020  012C' 0E00               	movlw	0
 27021  012E' 0100               	movlb	0	; () banked
 27022  0130' 6F00'              	movwf	_RADIO_Transmit$2829& (0+255),b
 27023  0132' 0E00               	movlw	0
 27024  0134' 6F00'              	movwf	(_RADIO_Transmit$2829+1)& (0+255),b
 27025  0136' 0E0A               	movlw	10
 27026  0138' 6F00'              	movwf	(_RADIO_Transmit$2829+2)& (0+255),b
 27027  013A' 0E00               	movlw	0
 27028  013C' 6F00'              	movwf	(_RADIO_Transmit$2829+3)& (0+255),b
 27029                           
 27030                           ; BSR set to: 0
 27031                           
 27032                           ; BSR set to: 0
 27033  013E' C058' F00D'        	movff	_RADIO_Transmit$2829,SwTimerSetTimeout@timeout
 27034  0142' C059' F00E'        	movff	_RADIO_Transmit$2829+1,SwTimerSetTimeout@timeout+1
 27035  0146' C05A' F00F'        	movff	_RADIO_Transmit$2829+2,SwTimerSetTimeout@timeout+2
 27036  014A' C05B' F010'        	movff	_RADIO_Transmit$2829+3,SwTimerSetTimeout@timeout+3
 27037  014E' 0101               	movlb	1	; () banked
 27038  0150' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 27039  0152' EC00' F000'        	call	_SwTimerSetTimeout
 27040                           
 27041                           ;radio_driver_SX1276.c: 911: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 27042  0156' 0101               	movlb	1	; () banked
 27043  0158' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 27044  015A' EC00' F000'        	call	_SwTimerStart
 27045                           
 27046                           ;radio_driver_SX1276.c: 913: if (0 != RadioConfiguration.watchdogTimerTimeout)
 27047  015E' 0101               	movlb	1	; () banked
 27048  0160' 5100'              	movf	(_RadioConfiguration+42)& (0+255),w,b
 27049  0162' 1100'              	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 27050  0164' 1100'              	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 27051  0166' 1100'              	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 27052  0168' B4D8               	btfsc	status,2,c
 27053  016A' D061               	goto	l1891
 27054                           
 27055                           ; BSR set to: 1
 27056                           ;radio_driver_SX1276.c: 914: {
 27057                           ;radio_driver_SX1276.c: 915: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 27058  016C' 5100'              	movf	(_RadioConfiguration+45)& (0+255),w,b
 27059  016E' E107               	bnz	u9270
 27060  0170' 2900'              	incf	(_RadioConfiguration+42)& (0+255),w,b
 27061  0172' 0EFF               	movlw	255
 27062  0174' 5900'              	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 27063  0176' 0E0F               	movlw	15
 27064  0178' 5900'              	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 27065  017A' A0D8               	btfss	status,0,c
 27066  017C' D01D               	goto	l1893
 27067  017E'                    u9270:
 27068                           
 27069                           ; BSR set to: 1
 27070  017E' C041' F000'        	movff	_RadioConfiguration+42,___lldiv@dividend
 27071  0182' C042' F001'        	movff	_RadioConfiguration+43,___lldiv@dividend+1
 27072  0186' C043' F002'        	movff	_RadioConfiguration+44,___lldiv@dividend+2
 27073  018A' C044' F003'        	movff	_RadioConfiguration+45,___lldiv@dividend+3
 27074  018E' 0E7D               	movlw	125
 27075  0190' 0100               	movlb	0	; () banked
 27076  0192' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 27077  0194' 0E00               	movlw	0
 27078  0196' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 27079  0198' 0E00               	movlw	0
 27080  019A' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 27081  019C' 0E00               	movlw	0
 27082  019E' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 27083  01A0' EC00' F000'        	call	___lldiv	;wreg free
 27084  01A4' 0E0C               	movlw	12
 27085  01A6'                    u9285:
 27086  01A6' 90D8               	bcf	status,0,c
 27087  01A8' 0100               	movlb	0	; () banked
 27088  01AA' 3700'              	rlcf	?___lldiv& (0+255),f,b
 27089  01AC' 3700'              	rlcf	(?___lldiv+1)& (0+255),f,b
 27090  01AE' 3700'              	rlcf	(?___lldiv+2)& (0+255),f,b
 27091  01B0' 3700'              	rlcf	(?___lldiv+3)& (0+255),f,b
 27092  01B2' 2EE8               	decfsz	wreg,f,c
 27093  01B4' D7F8               	goto	u9285
 27094  01B6' D023               	goto	L17
 27095  01B8'                    l1893:
 27096                           
 27097                           ; BSR set to: 0
 27098  01B8' C041' F054'        	movff	_RadioConfiguration+42,??_RADIO_Transmit
 27099  01BC' C042' F055'        	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 27100  01C0' C043' F056'        	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 27101  01C4' C044' F057'        	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 27102  01C8' 0E0C               	movlw	12
 27103  01CA'                    u9295:
 27104  01CA' 90D8               	bcf	status,0,c
 27105  01CC' 0100               	movlb	0	; () banked
 27106  01CE' 3700'              	rlcf	??_RADIO_Transmit& (0+255),f,b
 27107  01D0' 3700'              	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 27108  01D2' 3700'              	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 27109  01D4' 3700'              	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 27110  01D6' 2EE8               	decfsz	wreg,f,c
 27111  01D8' D7F8               	goto	u9295
 27112  01DA' C054' F000'        	movff	??_RADIO_Transmit,___lldiv@dividend
 27113  01DE' C055' F001'        	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 27114  01E2' C056' F002'        	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 27115  01E6' C057' F003'        	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 27116  01EA' 0E7D               	movlw	125
 27117  01EC' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 27118  01EE' 0E00               	movlw	0
 27119  01F0' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 27120  01F2' 0E00               	movlw	0
 27121  01F4' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 27122  01F6' 0E00               	movlw	0
 27123  01F8' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 27124  01FA' EC00' F000'        	call	___lldiv	;wreg free
 27125  01FE'                    L17:
 27126  01FE' C000' F05C'        	movff	?___lldiv,_RADIO_Transmit$2830
 27127  0202' C001' F05D'        	movff	?___lldiv+1,_RADIO_Transmit$2830+1
 27128  0206' C002' F05E'        	movff	?___lldiv+2,_RADIO_Transmit$2830+2
 27129  020A' C003' F05F'        	movff	?___lldiv+3,_RADIO_Transmit$2830+3
 27130  020E' C05C' F00D'        	movff	_RADIO_Transmit$2830,SwTimerSetTimeout@timeout
 27131  0212' C05D' F00E'        	movff	_RADIO_Transmit$2830+1,SwTimerSetTimeout@timeout+1
 27132  0216' C05E' F00F'        	movff	_RADIO_Transmit$2830+2,SwTimerSetTimeout@timeout+2
 27133  021A' C05F' F010'        	movff	_RADIO_Transmit$2830+3,SwTimerSetTimeout@timeout+3
 27134  021E' 0101               	movlb	1	; () banked
 27135  0220' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 27136  0222' EC00' F000'        	call	_SwTimerSetTimeout
 27137                           
 27138                           ;radio_driver_SX1276.c: 916: SwTimerStart(RadioConfiguration.watchdogTimerId);
 27139  0226' 0101               	movlb	1	; () banked
 27140  0228' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 27141  022A' EC00' F000'        	call	_SwTimerStart
 27142  022E'                    l1891:
 27143                           
 27144                           ;radio_driver_SX1276.c: 917: }
 27145                           ;radio_driver_SX1276.c: 919: return ERR_NONE;
 27146  022E' 0E00               	movlw	0
 27147  0230' 0100               	movlb	0	; () banked
 27148  0232' 6F00'              	movwf	(?_RADIO_Transmit+1)& (0+255),b
 27149  0234' 0E00               	movlw	0
 27150  0236' 6F00'              	movwf	?_RADIO_Transmit& (0+255),b
 27151  0238' 0012               	return	
 27152  023A'                    __end_of_RADIO_Transmit:
 27153                           	opt stack 0
 27154                           tosu	equ	0xFFF
 27155                           tosh	equ	0xFFE
 27156                           tosl	equ	0xFFD
 27157                           pclath	equ	0xFFA
 27158                           tblptru	equ	0xFF8
 27159                           tblptrh	equ	0xFF7
 27160                           tblptrl	equ	0xFF6
 27161                           tablat	equ	0xFF5
 27162                           prodh	equ	0xFF4
 27163                           prodl	equ	0xFF3
 27164                           intcon	equ	0xFF2
 27165                           intcon2	equ	0xFF1
 27166                           intcon3	equ	0xFF0
 27167                           indf0	equ	0xFEF
 27168                           postinc0	equ	0xFEE
 27169                           fsr0h	equ	0xFEA
 27170                           fsr0l	equ	0xFE9
 27171                           wreg	equ	0xFE8
 27172                           postinc1	equ	0xFE6
 27173                           postdec1	equ	0xFE5
 27174                           plusw1	equ	0xFE3
 27175                           fsr1h	equ	0xFE2
 27176                           fsr1l	equ	0xFE1
 27177                           indf2	equ	0xFDF
 27178                           postinc2	equ	0xFDE
 27179                           postdec2	equ	0xFDD
 27180                           plusw2	equ	0xFDB
 27181                           fsr2h	equ	0xFDA
 27182                           fsr2l	equ	0xFD9
 27183                           status	equ	0xFD8
 27184                           
 27185 ;; *************** function _RADIO_WriteConfiguration *****************
 27186 ;; Defined at:
 27187 ;;		line 561 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 27188 ;; Parameters:    Size  Location     Type
 27189 ;;  symbolTimeou    2   70[BANK0 ] unsigned int 
 27190 ;; Auto vars:     Size  Location     Type
 27191 ;;  tempValue       4   76[BANK0 ] unsigned long 
 27192 ;;  regValue        1   80[BANK0 ] unsigned char 
 27193 ;;  i               1   75[BANK0 ] unsigned char 
 27194 ;; Return value:  Size  Location     Type
 27195 ;;                  1    wreg      void 
 27196 ;; Registers used:
 27197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27198 ;; Tracked objects:
 27199 ;;		On entry : 0/0
 27200 ;;		On exit  : 0/0
 27201 ;;		Unchanged: 0/0
 27202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27204 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27205 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27206 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27207 ;;Total ram usage:       11 bytes
 27208 ;; Hardware stack levels used:    1
 27209 ;; Hardware stack levels required when called:   11
 27210 ;; This function calls:
 27211 ;;		_RADIO_RegisterRead
 27212 ;;		_RADIO_RegisterWrite
 27213 ;;		_RADIO_WriteFSKBitRate
 27214 ;;		_RADIO_WriteFSKFrequencyDeviation
 27215 ;;		_RADIO_WriteFrequency
 27216 ;;		_RADIO_WriteMode
 27217 ;;		_RADIO_WritePower
 27218 ;;		___lmul
 27219 ;; This function is called by:
 27220 ;;		_RADIO_Transmit
 27221 ;;		_RADIO_ReceiveStart
 27222 ;;		_RADIO_TransmitCW
 27223 ;; This function uses a non-reentrant model
 27224 ;;
 27225                           
 27226                           	psect	text134
 27227  0000'                    __ptext134:
 27228                           	opt stack 0
 27229  0000'                    _RADIO_WriteConfiguration:
 27230                           	opt stack 17
 27231                           
 27232                           ;radio_driver_SX1276.c: 563: uint32_t tempValue;
 27233                           ;radio_driver_SX1276.c: 564: uint8_t regValue;
 27234                           ;radio_driver_SX1276.c: 565: uint8_t i;
 27235                           ;radio_driver_SX1276.c: 568: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 27236                           
 27237                           ; BSR set to: 0
 27238                           ;incstack = 0
 27239  0000' C02F' F005'        	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 27240  0004' 0E00               	movlw	0
 27241  0006' 0100               	movlb	0	; () banked
 27242  0008' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 27243  000A' 0E00               	movlw	0
 27244  000C' EC00' F000'        	call	_RADIO_WriteMode
 27245                           
 27246                           ;radio_driver_SX1276.c: 569: RADIO_WriteFrequency(RadioConfiguration.frequency);
 27247  0010' C017' F016'        	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 27248  0014' C018' F017'        	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 27249  0018' C019' F018'        	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 27250  001C' C01A' F019'        	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 27251  0020' EC00' F000'        	call	_RADIO_WriteFrequency	;wreg free
 27252                           
 27253                           ;radio_driver_SX1276.c: 570: RADIO_WritePower(RadioConfiguration.outputPower);
 27254  0024' 0101               	movlb	1	; () banked
 27255  0026' 5100'              	movf	(_RadioConfiguration+27)& (0+255),w,b
 27256  0028' EC00' F000'        	call	_RADIO_WritePower
 27257                           
 27258                           ;radio_driver_SX1276.c: 572: if (MODULATION_LORA == RadioConfiguration.modulation)
 27259  002C' 0101               	movlb	1	; () banked
 27260  002E' 0500'              	decf	(_RadioConfiguration+24)& (0+255),w,b
 27261  0030' A4D8               	btfss	status,2,c
 27262  0032' D1ED               	goto	l1827
 27263                           
 27264                           ; BSR set to: 1
 27265                           ;radio_driver_SX1276.c: 573: {
 27266                           ;radio_driver_SX1276.c: 574: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 27267  0034' C025' F002'        	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 27268  0038' 0E39               	movlw	57
 27269  003A' EC00' F000'        	call	_RADIO_RegisterWrite
 27270                           
 27271                           ;radio_driver_SX1276.c: 576: RADIO_RegisterWrite(0x1D,
 27272                           ;radio_driver_SX1276.c: 577: (RadioConfiguration.bandWidth << (4)) |
 27273                           ;radio_driver_SX1276.c: 578: (RadioConfiguration.errorCodingRate << (1)) |
 27274                           ;radio_driver_SX1276.c: 579: (RadioConfiguration.implicitHeaderMode & 0x01));
 27275  003E' C039' F048'        	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 27276  0042' 0E01               	movlw	1
 27277  0044' 0100               	movlb	0	; () banked
 27278  0046' 1700'              	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 27279  0048' 0101               	movlb	1	; () banked
 27280  004A' 90D8               	bcf	status,0,c
 27281  004C' 3500'              	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 27282  004E' 0100               	movlb	0	; () banked
 27283  0050' 6F00'              	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 27284  0052' 0101               	movlb	1	; () banked
 27285  0054' 3900'              	swapf	(_RadioConfiguration+26)& (0+255),w,b
 27286  0056' 0BF0               	andlw	240
 27287  0058' 0100               	movlb	0	; () banked
 27288  005A' 1100'              	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 27289  005C' 1100'              	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 27290  005E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27291  0060' 0E1D               	movlw	29
 27292  0062' EC00' F000'        	call	_RADIO_RegisterWrite
 27293                           
 27294                           ;radio_driver_SX1276.c: 581: RADIO_RegisterWrite(0x1E,
 27295                           ;radio_driver_SX1276.c: 582: (RadioConfiguration.dataRate << (4)) |
 27296                           ;radio_driver_SX1276.c: 583: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 27297                           ;radio_driver_SX1276.c: 584: ((symbolTimeout & 0x0300) >> (8)));
 27298  0066' C046' F048'        	movff	RADIO_WriteConfiguration@symbolTimeout,??_RADIO_WriteConfiguration
 27299  006A' C047' F049'        	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration+1
 27300  006E' C049' F048'        	movff	??_RADIO_WriteConfiguration+1,??_RADIO_WriteConfiguration
 27301  0072' 0100               	movlb	0	; () banked
 27302  0074' 6B00'              	clrf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 27303  0076' 0E03               	movlw	3
 27304  0078' 1700'              	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 27305  007A' C033' F04A'        	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+2
 27306  007E' 0E01               	movlw	1
 27307  0080' 1700'              	andwf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 27308  0082' 90D8               	bcf	status,0,c
 27309  0084' 3700'              	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 27310  0086' 90D8               	bcf	status,0,c
 27311  0088' 3700'              	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 27312  008A' 0101               	movlb	1	; () banked
 27313  008C' 3900'              	swapf	(_RadioConfiguration+25)& (0+255),w,b
 27314  008E' 0BF0               	andlw	240
 27315  0090' 0100               	movlb	0	; () banked
 27316  0092' 1100'              	iorwf	(??_RADIO_WriteConfiguration+2)& (0+255),w,b
 27317  0094' 1100'              	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 27318  0096' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27319  0098' 0E1E               	movlw	30
 27320  009A' EC00' F000'        	call	_RADIO_RegisterWrite
 27321                           
 27322                           ;radio_driver_SX1276.c: 588: if (0 != RadioConfiguration.frequencyHopPeriod)
 27323  009E' 0101               	movlb	1	; () banked
 27324  00A0' 5100'              	movf	(_RadioConfiguration+30)& (0+255),w,b
 27325  00A2' 1100'              	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 27326  00A4' B4D8               	btfsc	status,2,c
 27327  00A6' D06F               	goto	l1828
 27328                           
 27329                           ; BSR set to: 1
 27330                           ;radio_driver_SX1276.c: 589: {
 27331                           ;radio_driver_SX1276.c: 590: tempValue = RadioConfiguration.frequencyHopPeriod;
 27332  00A8' C035' F04C'        	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 27333  00AC' C036' F04D'        	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 27334  00B0' 0100               	movlb	0	; () banked
 27335  00B2' 6B00'              	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 27336  00B4' 6B00'              	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 27337                           
 27338                           ;radio_driver_SX1276.c: 592: switch (RadioConfiguration.bandWidth)
 27339  00B6' D04E               	goto	l1829
 27340  00B8'                    
 27341                           ;radio_driver_SX1276.c: 595: tempValue *= 125;
 27342                           
 27343                           ; BSR set to: 0
 27344  00B8' C04C' F03A'        	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 27345  00BC' C04D' F03B'        	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 27346  00C0' C04E' F03C'        	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 27347  00C4' C04F' F03D'        	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 27348  00C8' 0E7D               	movlw	125
 27349  00CA' 0100               	movlb	0	; () banked
 27350  00CC' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 27351  00CE' 0E00               	movlw	0
 27352  00D0' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 27353  00D2' 0E00               	movlw	0
 27354  00D4' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 27355  00D6' 0E00               	movlw	0
 27356  00D8' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 27357  00DA' EC00' F000'        	call	___lmul	;wreg free
 27358  00DE' D027               	goto	L19
 27359  00E0'                    
 27360                           ;radio_driver_SX1276.c: 598: tempValue *= 250;
 27361  00E0' C04C' F03A'        	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 27362  00E4' C04D' F03B'        	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 27363  00E8' C04E' F03C'        	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 27364  00EC' C04F' F03D'        	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 27365  00F0' 0EFA               	movlw	250
 27366  00F2' 0100               	movlb	0	; () banked
 27367  00F4' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 27368  00F6' 0E00               	movlw	0
 27369  00F8' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 27370  00FA' 0E00               	movlw	0
 27371  00FC' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 27372  00FE' 0E00               	movlw	0
 27373  0100' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 27374  0102' EC00' F000'        	call	___lmul	;wreg free
 27375  0106' D013               	goto	L19
 27376  0108'                    
 27377                           ;radio_driver_SX1276.c: 601: tempValue *= 500;
 27378  0108' C04C' F03A'        	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 27379  010C' C04D' F03B'        	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 27380  0110' C04E' F03C'        	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 27381  0114' C04F' F03D'        	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 27382  0118' 0EF4               	movlw	244
 27383  011A' 0100               	movlb	0	; () banked
 27384  011C' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 27385  011E' 0E01               	movlw	1
 27386  0120' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 27387  0122' 0E00               	movlw	0
 27388  0124' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 27389  0126' 0E00               	movlw	0
 27390  0128' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 27391  012A' EC00' F000'        	call	___lmul	;wreg free
 27392  012E'                    L19:
 27393  012E' C03A' F04C'        	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 27394  0132' C03B' F04D'        	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 27395  0136' C03C' F04E'        	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 27396  013A' C03D' F04F'        	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 27397                           
 27398                           ;radio_driver_SX1276.c: 602: break;
 27399  013E' D016               	goto	l1831
 27400  0140'                    
 27401                           ;radio_driver_SX1276.c: 605: tempValue = 0;
 27402  0140' 0E00               	movlw	0
 27403  0142' 0100               	movlb	0	; () banked
 27404  0144' 6F00'              	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 27405  0146' 0E00               	movlw	0
 27406  0148' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 27407  014A' 0E00               	movlw	0
 27408  014C' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 27409  014E' 0E00               	movlw	0
 27410  0150' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 27411                           
 27412                           ; BSR set to: 0
 27413                           ;radio_driver_SX1276.c: 607: }
 27414                           
 27415                           ;radio_driver_SX1276.c: 606: break;
 27416  0152' D00C               	goto	l1831
 27417  0154'                    l1829:
 27418                           
 27419                           ; BSR set to: 0
 27420                           
 27421                           ; BSR set to: 0
 27422  0154' 0101               	movlb	1	; () banked
 27423  0156' 5100'              	movf	(_RadioConfiguration+26)& (0+255),w,b
 27424                           
 27425                           ; Switch size 1, requested type "space"
 27426                           ; Number of cases is 3, Range of values is 7 to 9
 27427                           ; switch strategies available:
 27428                           ; Name         Instructions Cycles
 27429                           ; simple_byte           10     6 (average)
 27430                           ;	Chosen strategy is simple_byte
 27431  0158' 0A07               	xorlw	7	; case 7
 27432  015A' B4D8               	btfsc	status,2,c
 27433  015C' D7AD               	goto	l1830
 27434  015E' 0A0F               	xorlw	15	; case 8
 27435  0160' B4D8               	btfsc	status,2,c
 27436  0162' D7BE               	goto	l1832
 27437  0164' 0A01               	xorlw	1	; case 9
 27438  0166' B4D8               	btfsc	status,2,c
 27439  0168' D7CF               	goto	l1833
 27440  016A' D7EA               	goto	l1834
 27441  016C'                    l1831:
 27442                           
 27443                           ;radio_driver_SX1276.c: 609: tempValue >>= RadioConfiguration.dataRate;
 27444                           
 27445                           ; BSR set to: 1
 27446  016C' 0101               	movlb	1	; () banked
 27447  016E' 2900'              	incf	(_RadioConfiguration+25)& (0+255),w,b
 27448  0170' 0100               	movlb	0	; () banked
 27449  0172' 6F00'              	movwf	??_RADIO_WriteConfiguration& (0+255),b
 27450  0174' D005               	goto	u7940
 27451  0176'                    u7945:
 27452  0176' 90D8               	bcf	status,0,c
 27453  0178' 3300'              	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 27454  017A' 3300'              	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 27455  017C' 3300'              	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 27456  017E' 3300'              	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 27457  0180'                    u7940:
 27458  0180' 2F00'              	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 27459  0182' D7F9               	goto	u7945
 27460                           
 27461                           ;radio_driver_SX1276.c: 610: }
 27462  0184' D009               	goto	l1835
 27463  0186'                    l1828:
 27464                           
 27465                           ;radio_driver_SX1276.c: 611: else
 27466                           ;radio_driver_SX1276.c: 612: {
 27467                           ;radio_driver_SX1276.c: 613: tempValue = 0;
 27468  0186' 0E00               	movlw	0
 27469  0188' 0100               	movlb	0	; () banked
 27470  018A' 6F00'              	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 27471  018C' 0E00               	movlw	0
 27472  018E' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 27473  0190' 0E00               	movlw	0
 27474  0192' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 27475  0194' 0E00               	movlw	0
 27476  0196' 6F00'              	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 27477  0198'                    l1835:
 27478                           
 27479                           ;radio_driver_SX1276.c: 614: }
 27480                           ;radio_driver_SX1276.c: 615: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 27481                           
 27482                           ; BSR set to: 0
 27483  0198' C04C' F002'        	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 27484  019C' 0E24               	movlw	36
 27485  019E' EC00' F000'        	call	_RADIO_RegisterWrite
 27486                           
 27487                           ;radio_driver_SX1276.c: 617: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 27488  01A2' C046' F002'        	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 27489  01A6' 0E1F               	movlw	31
 27490  01A8' EC00' F000'        	call	_RADIO_RegisterWrite
 27491                           
 27492                           ;radio_driver_SX1276.c: 623: regValue = RADIO_RegisterRead(0x26);
 27493  01AC' 0E26               	movlw	38
 27494  01AE' EC00' F000'        	call	_RADIO_RegisterRead
 27495  01B2' 0100               	movlb	0	; () banked
 27496  01B4' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27497                           
 27498                           ; BSR set to: 0
 27499                           ;radio_driver_SX1276.c: 624: if (
 27500                           ;radio_driver_SX1276.c: 625: (
 27501                           ;radio_driver_SX1276.c: 626: (SF_12 == RadioConfiguration.dataRate) &&
 27502                           ;radio_driver_SX1276.c: 627: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 27503                           ;radio_driver_SX1276.c: 628: ) ||
 27504                           ;radio_driver_SX1276.c: 629: (
 27505                           ;radio_driver_SX1276.c: 630: (SF_11 == RadioConfiguration.dataRate) &&
 27506                           ;radio_driver_SX1276.c: 631: (BW_125KHZ == RadioConfiguration.bandWidth)
 27507                           ;radio_driver_SX1276.c: 632: )
 27508                           ;radio_driver_SX1276.c: 633: )
 27509  01B6' 0E0C               	movlw	12
 27510  01B8' 0101               	movlb	1	; () banked
 27511  01BA' 1900'              	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 27512  01BC' A4D8               	btfss	status,2,c
 27513  01BE' D008               	goto	u7970
 27514                           
 27515                           ; BSR set to: 1
 27516  01C0' 0E07               	movlw	7
 27517  01C2' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27518  01C4' B4D8               	btfsc	status,2,c
 27519  01C6' D00C               	goto	u7990
 27520                           
 27521                           ; BSR set to: 1
 27522  01C8' 0E08               	movlw	8
 27523  01CA' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27524  01CC' B4D8               	btfsc	status,2,c
 27525  01CE' D008               	goto	u7990
 27526  01D0'                    u7970:
 27527                           
 27528                           ; BSR set to: 1
 27529                           
 27530                           ; BSR set to: 1
 27531  01D0' 0E0B               	movlw	11
 27532  01D2' 1900'              	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 27533  01D4' A4D8               	btfss	status,2,c
 27534  01D6' D007               	goto	l1836
 27535                           
 27536                           ; BSR set to: 1
 27537  01D8' 0E07               	movlw	7
 27538  01DA' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27539  01DC' A4D8               	btfss	status,2,c
 27540  01DE' D003               	goto	l1836
 27541  01E0'                    u7990:
 27542                           
 27543                           ; BSR set to: 1
 27544                           ;radio_driver_SX1276.c: 634: {
 27545                           ;radio_driver_SX1276.c: 635: regValue |= 1 << (3);
 27546                           
 27547                           ; BSR set to: 1
 27548  01E0' 0100               	movlb	0	; () banked
 27549  01E2' 8700'              	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 27550                           
 27551                           ;radio_driver_SX1276.c: 636: }
 27552  01E4' D002               	goto	l1841
 27553  01E6'                    l1836:
 27554                           
 27555                           ;radio_driver_SX1276.c: 637: else
 27556                           ;radio_driver_SX1276.c: 638: {
 27557                           ;radio_driver_SX1276.c: 639: regValue &= ~(1 << (3));
 27558                           
 27559                           ; BSR set to: 0
 27560  01E6' 0100               	movlb	0	; () banked
 27561  01E8' 9700'              	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 27562  01EA'                    l1841:
 27563                           
 27564                           ; BSR set to: 0
 27565                           ;radio_driver_SX1276.c: 640: }
 27566                           ;radio_driver_SX1276.c: 641: regValue |= 1 << (2);
 27567  01EA' 8500'              	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 27568                           
 27569                           ; BSR set to: 0
 27570                           ;radio_driver_SX1276.c: 642: RADIO_RegisterWrite(0x26, regValue);
 27571  01EC' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27572  01F0' 0E26               	movlw	38
 27573  01F2' EC00' F000'        	call	_RADIO_RegisterWrite
 27574                           
 27575                           ;radio_driver_SX1276.c: 644: regValue = RADIO_RegisterRead(0x31);
 27576  01F6' 0E31               	movlw	49
 27577  01F8' EC00' F000'        	call	_RADIO_RegisterRead
 27578  01FC' 0100               	movlb	0	; () banked
 27579  01FE' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27580                           
 27581                           ; BSR set to: 0
 27582                           ;radio_driver_SX1276.c: 645: regValue &= ~(0x07);
 27583  0200' 0EF8               	movlw	248
 27584  0202' 1700'              	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 27585                           
 27586                           ; BSR set to: 0
 27587                           ;radio_driver_SX1276.c: 646: regValue |= 0x03;
 27588  0204' 0E03               	movlw	3
 27589  0206' 1300'              	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 27590                           
 27591                           ; BSR set to: 0
 27592                           ;radio_driver_SX1276.c: 647: RADIO_RegisterWrite(0x31, regValue);
 27593  0208' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27594  020C' 0E31               	movlw	49
 27595  020E' EC00' F000'        	call	_RADIO_RegisterWrite
 27596                           
 27597                           ;radio_driver_SX1276.c: 650: RADIO_RegisterWrite(0x37, 0x0A);
 27598  0212' 0E0A               	movlw	10
 27599  0214' 0100               	movlb	0	; () banked
 27600  0216' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27601  0218' 0E37               	movlw	55
 27602  021A' EC00' F000'        	call	_RADIO_RegisterWrite
 27603                           
 27604                           ;radio_driver_SX1276.c: 653: if (0x12 == RadioConfiguration.regVersion)
 27605  021E' 0E12               	movlw	18
 27606  0220' 0101               	movlb	1	; () banked
 27607  0222' 1900'              	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 27608  0224' A4D8               	btfss	status,2,c
 27609  0226' D02F               	goto	l1846
 27610                           
 27611                           ; BSR set to: 1
 27612                           ;radio_driver_SX1276.c: 654: {
 27613                           ;radio_driver_SX1276.c: 657: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 27614                           ;radio_driver_SX1276.c: 658: (BW_250KHZ == RadioConfiguration.bandWidth) )
 27615  0228' 0E07               	movlw	7
 27616  022A' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27617  022C' B4D8               	btfsc	status,2,c
 27618  022E' D004               	goto	u8020
 27619                           
 27620                           ; BSR set to: 1
 27621  0230' 0E08               	movlw	8
 27622  0232' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27623  0234' A4D8               	btfss	status,2,c
 27624  0236' D017               	goto	l1843
 27625  0238'                    u8020:
 27626                           
 27627                           ; BSR set to: 1
 27628                           ;radio_driver_SX1276.c: 659: {
 27629                           ;radio_driver_SX1276.c: 660: regValue = RADIO_RegisterRead(0x31);
 27630                           
 27631                           ; BSR set to: 1
 27632  0238' 0E31               	movlw	49
 27633  023A' EC00' F000'        	call	_RADIO_RegisterRead
 27634  023E' 0100               	movlb	0	; () banked
 27635  0240' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27636                           
 27637                           ; BSR set to: 0
 27638                           ;radio_driver_SX1276.c: 661: regValue &= ~0x80;
 27639  0242' 9F00'              	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 27640                           
 27641                           ; BSR set to: 0
 27642                           ;radio_driver_SX1276.c: 662: RADIO_RegisterWrite(0x31, regValue);
 27643  0244' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27644  0248' 0E31               	movlw	49
 27645  024A' EC00' F000'        	call	_RADIO_RegisterWrite
 27646                           
 27647                           ;radio_driver_SX1276.c: 663: RADIO_RegisterWrite(0x2F, 0x40);
 27648  024E' 0E40               	movlw	64
 27649  0250' 0100               	movlb	0	; () banked
 27650  0252' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27651  0254' 0E2F               	movlw	47
 27652  0256' EC00' F000'        	call	_RADIO_RegisterWrite
 27653                           
 27654                           ;radio_driver_SX1276.c: 664: RADIO_RegisterWrite(0x30, 0x00);
 27655  025A' 0E00               	movlw	0
 27656  025C' 0100               	movlb	0	; () banked
 27657  025E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27658  0260' 0E30               	movlw	48
 27659  0262' EC00' F000'        	call	_RADIO_RegisterWrite
 27660  0266'                    l1843:
 27661                           
 27662                           ;radio_driver_SX1276.c: 665: }
 27663                           ;radio_driver_SX1276.c: 667: if (BW_500KHZ == RadioConfiguration.bandWidth)
 27664  0266' 0E09               	movlw	9
 27665  0268' 0101               	movlb	1	; () banked
 27666  026A' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27667  026C' A4D8               	btfss	status,2,c
 27668  026E' D00B               	goto	l1846
 27669                           
 27670                           ; BSR set to: 1
 27671                           ;radio_driver_SX1276.c: 668: {
 27672                           ;radio_driver_SX1276.c: 669: regValue = RADIO_RegisterRead(0x31);
 27673  0270' 0E31               	movlw	49
 27674  0272' EC00' F000'        	call	_RADIO_RegisterRead
 27675  0276' 0100               	movlb	0	; () banked
 27676  0278' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27677                           
 27678                           ; BSR set to: 0
 27679                           ;radio_driver_SX1276.c: 670: regValue |= 0x80;
 27680  027A' 8F00'              	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 27681                           
 27682                           ; BSR set to: 0
 27683                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x31, regValue);
 27684  027C' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27685  0280' 0E31               	movlw	49
 27686  0282' EC00' F000'        	call	_RADIO_RegisterWrite
 27687  0286'                    l1846:
 27688                           
 27689                           ;radio_driver_SX1276.c: 672: }
 27690                           ;radio_driver_SX1276.c: 673: }
 27691                           ;radio_driver_SX1276.c: 675: regValue = RADIO_RegisterRead(0x33);
 27692  0286' 0E33               	movlw	51
 27693  0288' EC00' F000'        	call	_RADIO_RegisterRead
 27694  028C' 0100               	movlb	0	; () banked
 27695  028E' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27696                           
 27697                           ; BSR set to: 0
 27698                           ;radio_driver_SX1276.c: 676: regValue &= ~(1 << (6));
 27699  0290' 9D00'              	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 27700                           
 27701                           ; BSR set to: 0
 27702                           ;radio_driver_SX1276.c: 677: regValue |= (1 << (0));
 27703  0292' 8100'              	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 27704                           
 27705                           ; BSR set to: 0
 27706                           ;radio_driver_SX1276.c: 678: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 27707  0294' C037' F048'        	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 27708  0298' 0E01               	movlw	1
 27709  029A' 1700'              	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 27710  029C' 0E06               	movlw	6
 27711  029E' 6F00'              	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 27712  02A0'                    u8045:
 27713  02A0' 90D8               	bcf	status,0,c
 27714  02A2' 3700'              	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 27715  02A4' 2F00'              	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 27716  02A6' D7FC               	goto	u8045
 27717  02A8' 5100'              	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 27718  02AA' 1300'              	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 27719                           
 27720                           ; BSR set to: 0
 27721                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x33, regValue);
 27722  02AC' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27723  02B0' 0E33               	movlw	51
 27724  02B2' EC00' F000'        	call	_RADIO_RegisterWrite
 27725                           
 27726                           ;radio_driver_SX1276.c: 681: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 27727  02B6' C037' F048'        	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 27728  02BA' 0E01               	movlw	1
 27729  02BC' 0100               	movlb	0	; () banked
 27730  02BE' 1700'              	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 27731  02C0' 90D8               	bcf	status,0,c
 27732  02C2' 3700'              	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 27733  02C4' 90D8               	bcf	status,0,c
 27734  02C6' 3500'              	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 27735  02C8' 0AFF               	xorlw	255
 27736  02CA' 0B1D               	andlw	29
 27737  02CC' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 27738                           
 27739                           ; BSR set to: 0
 27740                           ;radio_driver_SX1276.c: 682: RADIO_RegisterWrite(0x3B, regValue);
 27741  02CE' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 27742  02D2' 0E3B               	movlw	59
 27743  02D4' EC00' F000'        	call	_RADIO_RegisterWrite
 27744                           
 27745                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 27746  02D8' 0101               	movlb	1	; () banked
 27747  02DA' 5100'              	movf	(_RadioConfiguration+13)& (0+255),w,b
 27748  02DC' 0100               	movlb	0	; () banked
 27749  02DE' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27750  02E0' 0E20               	movlw	32
 27751  02E2' EC00' F000'        	call	_RADIO_RegisterWrite
 27752                           
 27753                           ;radio_driver_SX1276.c: 685: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 27754  02E6' C023' F002'        	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 27755  02EA' 0E21               	movlw	33
 27756  02EC' EC00' F000'        	call	_RADIO_RegisterWrite
 27757                           
 27758                           ;radio_driver_SX1276.c: 687: RADIO_RegisterWrite(0x0D, 0x00);
 27759  02F0' 0E00               	movlw	0
 27760  02F2' 0100               	movlb	0	; () banked
 27761  02F4' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27762  02F6' 0E0D               	movlw	13
 27763  02F8' EC00' F000'        	call	_RADIO_RegisterWrite
 27764                           
 27765                           ;radio_driver_SX1276.c: 688: RADIO_RegisterWrite(0x0E, 0x00);
 27766  02FC' 0E00               	movlw	0
 27767  02FE' 0100               	movlb	0	; () banked
 27768  0300' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27769  0302' 0E0E               	movlw	14
 27770  0304' EC00' F000'        	call	_RADIO_RegisterWrite
 27771                           
 27772                           ;radio_driver_SX1276.c: 689: RADIO_RegisterWrite(0x0F, 0x00);
 27773  0308' 0E00               	movlw	0
 27774  030A' 0100               	movlb	0	; () banked
 27775  030C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27776  030E' 0E0F               	movlw	15
 27777  0310' EC00' F000'        	call	_RADIO_RegisterWrite
 27778                           
 27779                           ;radio_driver_SX1276.c: 692: if (0x12 == RadioConfiguration.regVersion)
 27780  0314' 0E12               	movlw	18
 27781  0316' 0101               	movlb	1	; () banked
 27782  0318' 1900'              	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 27783  031A' A4D8               	btfss	status,2,c
 27784  031C' D071               	goto	l1853
 27785                           
 27786                           ; BSR set to: 1
 27787                           ;radio_driver_SX1276.c: 693: {
 27788                           ;radio_driver_SX1276.c: 694: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 27789                           ;radio_driver_SX1276.c: 695: (RadioConfiguration.frequency >= 862000000) &&
 27790                           ;radio_driver_SX1276.c: 696: (RadioConfiguration.frequency <= 1020000000)
 27791                           ;radio_driver_SX1276.c: 697: )
 27792  031E' 0E09               	movlw	9
 27793  0320' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27794  0322' A4D8               	btfss	status,2,c
 27795  0324' D020               	goto	l1848
 27796                           
 27797                           ; BSR set to: 1
 27798  0326' 0E80               	movlw	128
 27799  0328' 5D00'              	subwf	_RadioConfiguration& (0+255),w,b
 27800  032A' 0E13               	movlw	19
 27801  032C' 5900'              	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 27802  032E' 0E61               	movlw	97
 27803  0330' 5900'              	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 27804  0332' 0E33               	movlw	51
 27805  0334' 5900'              	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 27806  0336' A0D8               	btfss	status,0,c
 27807  0338' D016               	goto	l1848
 27808                           
 27809                           ; BSR set to: 1
 27810  033A' 0500'              	decf	_RadioConfiguration& (0+255),w,b
 27811  033C' 0EF7               	movlw	247
 27812  033E' 5900'              	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 27813  0340' 0ECB               	movlw	203
 27814  0342' 5900'              	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 27815  0344' 0E3C               	movlw	60
 27816  0346' 5900'              	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 27817  0348' B0D8               	btfsc	status,0,c
 27818  034A' D00D               	goto	l1848
 27819                           
 27820                           ; BSR set to: 1
 27821                           ;radio_driver_SX1276.c: 698: {
 27822                           ;radio_driver_SX1276.c: 699: RADIO_RegisterWrite(0x36, 0x02);
 27823  034C' 0E02               	movlw	2
 27824  034E' 0100               	movlb	0	; () banked
 27825  0350' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27826  0352' 0E36               	movlw	54
 27827  0354' EC00' F000'        	call	_RADIO_RegisterWrite
 27828                           
 27829                           ;radio_driver_SX1276.c: 700: RADIO_RegisterWrite(0x3a, 0x64);
 27830  0358' 0E64               	movlw	100
 27831  035A' 0100               	movlb	0	; () banked
 27832  035C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27833  035E' 0E3A               	movlw	58
 27834  0360' EC00' F000'        	call	_RADIO_RegisterWrite
 27835                           
 27836                           ;radio_driver_SX1276.c: 701: }
 27837  0364' D02C               	goto	l1851
 27838  0366'                    l1848:
 27839                           
 27840                           ;radio_driver_SX1276.c: 702: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 27841                           ;radio_driver_SX1276.c: 703: (RadioConfiguration.frequency >= 410000000) &&
 27842                           ;radio_driver_SX1276.c: 704: (RadioConfiguration.frequency <= 525000000)
 27843                           ;radio_driver_SX1276.c: 705: )
 27844  0366' 0E09               	movlw	9
 27845  0368' 0101               	movlb	1	; () banked
 27846  036A' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27847  036C' A4D8               	btfss	status,2,c
 27848  036E' D021               	goto	l1850
 27849                           
 27850                           ; BSR set to: 1
 27851  0370' 0E80               	movlw	128
 27852  0372' 5D00'              	subwf	_RadioConfiguration& (0+255),w,b
 27853  0374' 0E1A               	movlw	26
 27854  0376' 5900'              	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 27855  0378' 0E70               	movlw	112
 27856  037A' 5900'              	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 27857  037C' 0E18               	movlw	24
 27858  037E' 5900'              	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 27859  0380' A0D8               	btfss	status,0,c
 27860  0382' D017               	goto	l1850
 27861                           
 27862                           ; BSR set to: 1
 27863  0384' 0E41               	movlw	65
 27864  0386' 5D00'              	subwf	_RadioConfiguration& (0+255),w,b
 27865  0388' 0EDD               	movlw	221
 27866  038A' 5900'              	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 27867  038C' 0E4A               	movlw	74
 27868  038E' 5900'              	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 27869  0390' 0E1F               	movlw	31
 27870  0392' 5900'              	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 27871  0394' B0D8               	btfsc	status,0,c
 27872  0396' D00D               	goto	l1850
 27873                           
 27874                           ; BSR set to: 1
 27875                           ;radio_driver_SX1276.c: 706: {
 27876                           ;radio_driver_SX1276.c: 707: RADIO_RegisterWrite(0x36, 0x02);
 27877  0398' 0E02               	movlw	2
 27878  039A' 0100               	movlb	0	; () banked
 27879  039C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27880  039E' 0E36               	movlw	54
 27881  03A0' EC00' F000'        	call	_RADIO_RegisterWrite
 27882                           
 27883                           ;radio_driver_SX1276.c: 708: RADIO_RegisterWrite(0x3a, 0x7F);
 27884  03A4' 0E7F               	movlw	127
 27885  03A6' 0100               	movlb	0	; () banked
 27886  03A8' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27887  03AA' 0E3A               	movlw	58
 27888  03AC' EC00' F000'        	call	_RADIO_RegisterWrite
 27889                           
 27890                           ;radio_driver_SX1276.c: 709: }
 27891  03B0' D006               	goto	l1851
 27892  03B2'                    l1850:
 27893                           
 27894                           ;radio_driver_SX1276.c: 710: else
 27895                           ;radio_driver_SX1276.c: 711: {
 27896                           ;radio_driver_SX1276.c: 712: RADIO_RegisterWrite(0x36, 0x03);
 27897  03B2' 0E03               	movlw	3
 27898  03B4' 0100               	movlb	0	; () banked
 27899  03B6' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27900  03B8' 0E36               	movlw	54
 27901  03BA' EC00' F000'        	call	_RADIO_RegisterWrite
 27902  03BE'                    l1851:
 27903                           
 27904                           ;radio_driver_SX1276.c: 713: }
 27905                           ;radio_driver_SX1276.c: 716: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 27906  03BE' 0E09               	movlw	9
 27907  03C0' 0101               	movlb	1	; () banked
 27908  03C2' 1900'              	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 27909  03C4' A4D8               	btfss	status,2,c
 27910  03C6' D010               	goto	l1852
 27911                           
 27912                           ; BSR set to: 1
 27913  03C8' 0500'              	decf	(_RadioConfiguration+32)& (0+255),w,b
 27914  03CA' A4D8               	btfss	status,2,c
 27915  03CC' D00D               	goto	l1852
 27916                           
 27917                           ; BSR set to: 1
 27918                           ;radio_driver_SX1276.c: 717: {
 27919                           ;radio_driver_SX1276.c: 718: RADIO_RegisterWrite(0x3A, 0x65);
 27920  03CE' 0E65               	movlw	101
 27921  03D0' 0100               	movlb	0	; () banked
 27922  03D2' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27923  03D4' 0E3A               	movlw	58
 27924  03D6' EC00' F000'        	call	_RADIO_RegisterWrite
 27925                           
 27926                           ;radio_driver_SX1276.c: 719: RADIO_RegisterWrite(0x3B, 25);
 27927  03DA' 0E19               	movlw	25
 27928  03DC' 0100               	movlb	0	; () banked
 27929  03DE' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27930  03E0' 0E3B               	movlw	59
 27931  03E2' EC00' F000'        	call	_RADIO_RegisterWrite
 27932                           
 27933                           ;radio_driver_SX1276.c: 720: }
 27934  03E6' D00C               	goto	l1853
 27935  03E8'                    l1852:
 27936                           
 27937                           ;radio_driver_SX1276.c: 721: else
 27938                           ;radio_driver_SX1276.c: 722: {
 27939                           ;radio_driver_SX1276.c: 723: RADIO_RegisterWrite(0x3A, 0x65);
 27940  03E8' 0E65               	movlw	101
 27941  03EA' 0100               	movlb	0	; () banked
 27942  03EC' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27943  03EE' 0E3A               	movlw	58
 27944  03F0' EC00' F000'        	call	_RADIO_RegisterWrite
 27945                           
 27946                           ;radio_driver_SX1276.c: 724: RADIO_RegisterWrite(0x3B, 29);
 27947  03F4' 0E1D               	movlw	29
 27948  03F6' 0100               	movlb	0	; () banked
 27949  03F8' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27950  03FA' 0E3B               	movlw	59
 27951  03FC' EC00' F000'        	call	_RADIO_RegisterWrite
 27952  0400'                    l1853:
 27953                           
 27954                           ;radio_driver_SX1276.c: 725: }
 27955                           ;radio_driver_SX1276.c: 726: }
 27956                           ;radio_driver_SX1276.c: 729: RADIO_RegisterWrite(0x12, 0xFF);
 27957  0400' 0EFF               	movlw	255
 27958  0402' 0100               	movlb	0	; () banked
 27959  0404' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27960  0406' 0E12               	movlw	18
 27961  0408' EC00' F000'        	call	_RADIO_RegisterWrite
 27962                           
 27963                           ;radio_driver_SX1276.c: 730: }
 27964  040C' 0012               	return	
 27965  040E'                    l1827:
 27966                           
 27967                           ;radio_driver_SX1276.c: 731: else
 27968                           ;radio_driver_SX1276.c: 732: {
 27969                           ;radio_driver_SX1276.c: 734: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 27970  040E' C01B' F00D'        	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 27971  0412' C01C' F00E'        	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 27972  0416' C01D' F00F'        	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 27973  041A' C01E' F010'        	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 27974  041E' EC00' F000'        	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 27975                           
 27976                           ;radio_driver_SX1276.c: 735: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 27977  0422' C01F' F00D'        	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 27978  0426' C020' F00E'        	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 27979  042A' C021' F00F'        	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 27980  042E' C022' F010'        	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 27981  0432' EC00' F000'        	call	_RADIO_WriteFSKBitRate	;wreg free
 27982                           
 27983                           ;radio_driver_SX1276.c: 737: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 27984  0436' 0101               	movlb	1	; () banked
 27985  0438' 5100'              	movf	(_RadioConfiguration+13)& (0+255),w,b
 27986  043A' 0100               	movlb	0	; () banked
 27987  043C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 27988  043E' 0E25               	movlw	37
 27989  0440' EC00' F000'        	call	_RADIO_RegisterWrite
 27990                           
 27991                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 27992  0444' C023' F002'        	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 27993  0448' 0E26               	movlw	38
 27994  044A' EC00' F000'        	call	_RADIO_RegisterWrite
 27995                           
 27996                           ;radio_driver_SX1276.c: 741: regValue = RADIO_RegisterRead(0x0A);
 27997  044E' 0E0A               	movlw	10
 27998  0450' EC00' F000'        	call	_RADIO_RegisterRead
 27999  0454' 0100               	movlb	0	; () banked
 28000  0456' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 28001                           
 28002                           ; BSR set to: 0
 28003                           ;radio_driver_SX1276.c: 742: regValue &= ~0x60;
 28004  0458' 0E9F               	movlw	159
 28005  045A' 1700'              	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 28006                           
 28007                           ; BSR set to: 0
 28008                           ;radio_driver_SX1276.c: 743: regValue |= RadioConfiguration.fskDataShaping << (5);
 28009  045C' 0101               	movlb	1	; () banked
 28010  045E' 3900'              	swapf	(_RadioConfiguration+51)& (0+255),w,b
 28011  0460' 46E8               	rlncf	wreg,f,c
 28012  0462' 0BE0               	andlw	224
 28013  0464' 0100               	movlb	0	; () banked
 28014  0466' 1300'              	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 28015                           
 28016                           ;radio_driver_SX1276.c: 744: RADIO_RegisterWrite(0x0A, regValue);
 28017  0468' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 28018  046C' 0E0A               	movlw	10
 28019  046E' EC00' F000'        	call	_RADIO_RegisterWrite
 28020                           
 28021                           ;radio_driver_SX1276.c: 748: regValue = 0xC8;
 28022  0472' 0EC8               	movlw	200
 28023  0474' 0100               	movlb	0	; () banked
 28024  0476' 6F00'              	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 28025                           
 28026                           ; BSR set to: 0
 28027                           ;radio_driver_SX1276.c: 749: if (RadioConfiguration.crcOn)
 28028  0478' 0101               	movlb	1	; () banked
 28029  047A' 5100'              	movf	(_RadioConfiguration+28)& (0+255),w,b
 28030  047C' B4D8               	btfsc	status,2,c
 28031  047E' D002               	goto	l1855
 28032                           
 28033                           ; BSR set to: 1
 28034                           ;radio_driver_SX1276.c: 750: {
 28035                           ;radio_driver_SX1276.c: 751: regValue |= 0x10;
 28036  0480' 0100               	movlb	0	; () banked
 28037  0482' 8900'              	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 28038  0484'                    l1855:
 28039                           
 28040                           ;radio_driver_SX1276.c: 752: }
 28041                           ;radio_driver_SX1276.c: 753: RADIO_RegisterWrite(0x30, regValue);
 28042                           
 28043                           ; BSR set to: 0
 28044  0484' C050' F002'        	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 28045  0488' 0E30               	movlw	48
 28046  048A' EC00' F000'        	call	_RADIO_RegisterWrite
 28047                           
 28048                           ;radio_driver_SX1276.c: 756: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 28049  048E' 0E00               	movlw	0
 28050  0490' 0100               	movlb	0	; () banked
 28051  0492' 6F00'              	movwf	RADIO_WriteConfiguration@i& (0+255),b
 28052  0494' D010               	goto	l1856
 28053  0496'                    
 28054                           ; BSR set to: 0
 28055                           ;radio_driver_SX1276.c: 757: {
 28056                           ;radio_driver_SX1276.c: 760: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 28057                           
 28058                           ; BSR set to: 0
 28059  0496' 5100'              	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 28060  0498' 0D01               	mullw	1
 28061  049A' 0E00'              	movlw	low (_RadioConfiguration+15)
 28062  049C' 24F3               	addwf	prodl,w,c
 28063  049E' 6ED9               	movwf	fsr2l,c
 28064  04A0' 0E00'              	movlw	high (_RadioConfiguration+15)
 28065  04A2' 20F4               	addwfc	prodh,w,c
 28066  04A4' 6EDA               	movwf	fsr2h,c
 28067  04A6' 50DF               	movf	indf2,w,c
 28068  04A8' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28069  04AA' 5100'              	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 28070  04AC' 0F28               	addlw	40
 28071  04AE' EC00' F000'        	call	_RADIO_RegisterWrite
 28072  04B2' 0100               	movlb	0	; () banked
 28073  04B4' 2B00'              	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 28074  04B6'                    l1856:
 28075                           
 28076                           ; BSR set to: 0
 28077                           
 28078                           ; BSR set to: 0
 28079  04B6' 0101               	movlb	1	; () banked
 28080  04B8' 5100'              	movf	(_RadioConfiguration+23)& (0+255),w,b
 28081  04BA' 0100               	movlb	0	; () banked
 28082  04BC' 5D00'              	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 28083  04BE' A0D8               	btfss	status,0,c
 28084  04C0' D7EA               	goto	l1857
 28085                           
 28086                           ; BSR set to: 0
 28087                           ;radio_driver_SX1276.c: 761: }
 28088                           ;radio_driver_SX1276.c: 764: if (RadioConfiguration.syncWordLen != 0)
 28089                           
 28090                           ; BSR set to: 0
 28091  04C2' 0101               	movlb	1	; () banked
 28092  04C4' 5100'              	movf	(_RadioConfiguration+23)& (0+255),w,b
 28093  04C6' B4D8               	btfsc	status,2,c
 28094  04C8' D008               	goto	l1859
 28095                           
 28096                           ; BSR set to: 1
 28097                           ;radio_driver_SX1276.c: 765: {
 28098                           ;radio_driver_SX1276.c: 766: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 28099  04CA' 0500'              	decf	(_RadioConfiguration+23)& (0+255),w,b
 28100  04CC' 0910               	iorlw	16
 28101  04CE' 0100               	movlb	0	; () banked
 28102  04D0' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28103  04D2' 0E27               	movlw	39
 28104  04D4' EC00' F000'        	call	_RADIO_RegisterWrite
 28105                           
 28106                           ;radio_driver_SX1276.c: 767: }
 28107  04D8' D006               	goto	l1860
 28108  04DA'                    l1859:
 28109                           
 28110                           ;radio_driver_SX1276.c: 768: else
 28111                           ;radio_driver_SX1276.c: 769: {
 28112                           ;radio_driver_SX1276.c: 770: RADIO_RegisterWrite(0x27, 0x00);
 28113  04DA' 0E00               	movlw	0
 28114  04DC' 0100               	movlb	0	; () banked
 28115  04DE' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28116  04E0' 0E27               	movlw	39
 28117  04E2' EC00' F000'        	call	_RADIO_RegisterWrite
 28118  04E6'                    l1860:
 28119                           
 28120                           ;radio_driver_SX1276.c: 771: }
 28121                           ;radio_driver_SX1276.c: 774: RADIO_RegisterWrite(0x3E, 0xFF);
 28122  04E6' 0EFF               	movlw	255
 28123  04E8' 0100               	movlb	0	; () banked
 28124  04EA' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28125  04EC' 0E3E               	movlw	62
 28126  04EE' EC00' F000'        	call	_RADIO_RegisterWrite
 28127                           
 28128                           ;radio_driver_SX1276.c: 775: RADIO_RegisterWrite(0x3F, 0xFF);
 28129  04F2' 0EFF               	movlw	255
 28130  04F4' 0100               	movlb	0	; () banked
 28131  04F6' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28132  04F8' 0E3F               	movlw	63
 28133  04FA' EC00' F000'        	call	_RADIO_RegisterWrite
 28134  04FE' 0012               	return	
 28135  0500'                    __end_of_RADIO_WriteConfiguration:
 28136                           	opt stack 0
 28137                           tosu	equ	0xFFF
 28138                           tosh	equ	0xFFE
 28139                           tosl	equ	0xFFD
 28140                           pclath	equ	0xFFA
 28141                           tblptru	equ	0xFF8
 28142                           tblptrh	equ	0xFF7
 28143                           tblptrl	equ	0xFF6
 28144                           tablat	equ	0xFF5
 28145                           prodh	equ	0xFF4
 28146                           prodl	equ	0xFF3
 28147                           intcon	equ	0xFF2
 28148                           intcon2	equ	0xFF1
 28149                           intcon3	equ	0xFF0
 28150                           indf0	equ	0xFEF
 28151                           postinc0	equ	0xFEE
 28152                           fsr0h	equ	0xFEA
 28153                           fsr0l	equ	0xFE9
 28154                           wreg	equ	0xFE8
 28155                           postinc1	equ	0xFE6
 28156                           postdec1	equ	0xFE5
 28157                           plusw1	equ	0xFE3
 28158                           fsr1h	equ	0xFE2
 28159                           fsr1l	equ	0xFE1
 28160                           indf2	equ	0xFDF
 28161                           postinc2	equ	0xFDE
 28162                           postdec2	equ	0xFDD
 28163                           plusw2	equ	0xFDB
 28164                           fsr2h	equ	0xFDA
 28165                           fsr2l	equ	0xFD9
 28166                           status	equ	0xFD8
 28167                           
 28168 ;; *************** function _RADIO_WritePower *****************
 28169 ;; Defined at:
 28170 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28171 ;; Parameters:    Size  Location     Type
 28172 ;;  power           1    wreg     char 
 28173 ;; Auto vars:     Size  Location     Type
 28174 ;;  power           1    6[BANK0 ] char 
 28175 ;;  paDac           1    5[BANK0 ] unsigned char 
 28176 ;;  ocp             1    4[BANK0 ] unsigned char 
 28177 ;; Return value:  Size  Location     Type
 28178 ;;                  1    wreg      void 
 28179 ;; Registers used:
 28180 ;;		wreg, status,2, status,0, cstack
 28181 ;; Tracked objects:
 28182 ;;		On entry : 0/0
 28183 ;;		On exit  : 0/0
 28184 ;;		Unchanged: 0/0
 28185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28187 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28189 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28190 ;;Total ram usage:        3 bytes
 28191 ;; Hardware stack levels used:    1
 28192 ;; Hardware stack levels required when called:   10
 28193 ;; This function calls:
 28194 ;;		_RADIO_RegisterRead
 28195 ;;		_RADIO_RegisterWrite
 28196 ;; This function is called by:
 28197 ;;		_RADIO_WriteConfiguration
 28198 ;; This function uses a non-reentrant model
 28199 ;;
 28200                           
 28201                           	psect	text135
 28202  0000'                    __ptext135:
 28203                           	opt stack 0
 28204  0000'                    _RADIO_WritePower:
 28205                           	opt stack 17
 28206                           
 28207                           ;incstack = 0
 28208                           ;RADIO_WritePower@power stored from wreg
 28209  0000' 0100               	movlb	0	; () banked
 28210  0002' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28211                           
 28212                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 28213                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 28214                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 28215  0004' 0101               	movlb	1	; () banked
 28216  0006' 5100'              	movf	(_RadioConfiguration+29)& (0+255),w,b
 28217  0008' A4D8               	btfss	status,2,c
 28218  000A' D030               	goto	l1786
 28219                           
 28220                           ; BSR set to: 1
 28221                           ;radio_driver_SX1276.c: 348: {
 28222                           ;radio_driver_SX1276.c: 350: if (power < -3)
 28223  000C' 0100               	movlb	0	; () banked
 28224  000E' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28225  0010' 0A80               	xorlw	128
 28226  0012' 0F83               	addlw	131
 28227  0014' B0D8               	btfsc	status,0,c
 28228  0016' D002               	goto	l1787
 28229                           
 28230                           ; BSR set to: 0
 28231                           ;radio_driver_SX1276.c: 351: {
 28232                           ;radio_driver_SX1276.c: 352: power = -3;
 28233  0018' 0EFD               	movlw	253
 28234  001A' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28235  001C'                    l1787:
 28236                           
 28237                           ; BSR set to: 0
 28238                           ;radio_driver_SX1276.c: 353: }
 28239                           ;radio_driver_SX1276.c: 354: if (power > 15)
 28240                           
 28241                           ; BSR set to: 0
 28242  001C' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28243  001E' 0A80               	xorlw	128
 28244  0020' 0F70               	addlw	-144
 28245  0022' A0D8               	btfss	status,0,c
 28246  0024' D002               	goto	l1788
 28247                           
 28248                           ; BSR set to: 0
 28249                           ;radio_driver_SX1276.c: 355: {
 28250                           ;radio_driver_SX1276.c: 356: power = 15;
 28251  0026' 0E0F               	movlw	15
 28252  0028' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28253  002A'                    l1788:
 28254                           
 28255                           ; BSR set to: 0
 28256                           ;radio_driver_SX1276.c: 357: }
 28257                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 28258                           
 28259                           ; BSR set to: 0
 28260  002A' 0E4D               	movlw	77
 28261  002C' EC00' F000'        	call	_RADIO_RegisterRead
 28262  0030' 0100               	movlb	0	; () banked
 28263  0032' 6F00'              	movwf	RADIO_WritePower@paDac& (0+255),b
 28264                           
 28265                           ; BSR set to: 0
 28266                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 28267  0034' 0EF8               	movlw	248
 28268  0036' 1700'              	andwf	RADIO_WritePower@paDac& (0+255),f,b
 28269                           
 28270                           ; BSR set to: 0
 28271                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 28272  0038' 8500'              	bsf	RADIO_WritePower@paDac& (0+255),2,b
 28273                           
 28274                           ; BSR set to: 0
 28275                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 28276  003A' C005' F002'        	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 28277  003E' 0E4D               	movlw	77
 28278  0040' EC00' F000'        	call	_RADIO_RegisterWrite
 28279                           
 28280                           ;radio_driver_SX1276.c: 364: if (power < 0)
 28281  0044' 0100               	movlb	0	; () banked
 28282  0046' AF00'              	btfss	RADIO_WritePower@power& (0+255),7,b
 28283  0048' D009               	goto	l1789
 28284                           
 28285                           ; BSR set to: 0
 28286                           ;radio_driver_SX1276.c: 365: {
 28287                           ;radio_driver_SX1276.c: 369: power += 3;
 28288  004A' 0E03               	movlw	3
 28289  004C' 2700'              	addwf	RADIO_WritePower@power& (0+255),f,b
 28290                           
 28291                           ; BSR set to: 0
 28292                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 28293  004E' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28294  0050' 0920               	iorlw	32
 28295  0052' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28296  0054' 0E09               	movlw	9
 28297  0056' EC00' F000'        	call	_RADIO_RegisterWrite
 28298                           
 28299                           ;radio_driver_SX1276.c: 371: }
 28300  005A' 0012               	return	
 28301  005C'                    l1789:
 28302                           
 28303                           ;radio_driver_SX1276.c: 372: else
 28304                           ;radio_driver_SX1276.c: 373: {
 28305                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 28306  005C' 0100               	movlb	0	; () banked
 28307  005E' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28308  0060' 0970               	iorlw	112
 28309  0062' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28310  0064' 0E09               	movlw	9
 28311  0066' EC00' F000'        	call	_RADIO_RegisterWrite
 28312                           
 28313                           ;radio_driver_SX1276.c: 378: }
 28314                           ;radio_driver_SX1276.c: 379: }
 28315  006A' 0012               	return	
 28316  006C'                    l1786:
 28317                           
 28318                           ;radio_driver_SX1276.c: 380: else
 28319                           ;radio_driver_SX1276.c: 381: {
 28320                           ;radio_driver_SX1276.c: 385: if (power < 2)
 28321  006C' 0100               	movlb	0	; () banked
 28322  006E' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28323  0070' 0A80               	xorlw	128
 28324  0072' 0F7E               	addlw	-130
 28325  0074' B0D8               	btfsc	status,0,c
 28326  0076' D002               	goto	l1792
 28327                           
 28328                           ; BSR set to: 0
 28329                           ;radio_driver_SX1276.c: 386: {
 28330                           ;radio_driver_SX1276.c: 387: power = 2;
 28331  0078' 0E02               	movlw	2
 28332  007A' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28333  007C'                    l1792:
 28334                           
 28335                           ; BSR set to: 0
 28336                           ;radio_driver_SX1276.c: 388: }
 28337                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 28338                           
 28339                           ; BSR set to: 0
 28340  007C' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28341  007E' 0A80               	xorlw	128
 28342  0080' 0F6C               	addlw	-148
 28343  0082' A0D8               	btfss	status,0,c
 28344  0084' D002               	goto	l1793
 28345                           
 28346                           ; BSR set to: 0
 28347                           ;radio_driver_SX1276.c: 392: {
 28348                           ;radio_driver_SX1276.c: 393: power = 20;
 28349  0086' 0E14               	movlw	20
 28350  0088' D006               	goto	L20
 28351  008A'                    l1793:
 28352                           
 28353                           ; BSR set to: 0
 28354                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 28355                           
 28356                           ; BSR set to: 0
 28357  008A' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28358  008C' 0A80               	xorlw	128
 28359  008E' 0F6E               	addlw	-146
 28360  0090' A0D8               	btfss	status,0,c
 28361  0092' D002               	goto	l1795
 28362                           
 28363                           ; BSR set to: 0
 28364                           ;radio_driver_SX1276.c: 396: {
 28365                           ;radio_driver_SX1276.c: 397: power = 17;
 28366  0094' 0E11               	movlw	17
 28367  0096'                    L20:
 28368  0096' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28369  0098'                    l1795:
 28370                           
 28371                           ; BSR set to: 0
 28372                           ;radio_driver_SX1276.c: 398: }
 28373                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 28374                           
 28375                           ; BSR set to: 0
 28376                           
 28377                           ; BSR set to: 0
 28378  0098' 0E0B               	movlw	11
 28379  009A' EC00' F000'        	call	_RADIO_RegisterRead
 28380  009E' 0100               	movlb	0	; () banked
 28381  00A0' 6F00'              	movwf	RADIO_WritePower@ocp& (0+255),b
 28382                           
 28383                           ; BSR set to: 0
 28384                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 28385  00A2' 0E4D               	movlw	77
 28386  00A4' EC00' F000'        	call	_RADIO_RegisterRead
 28387  00A8' 0100               	movlb	0	; () banked
 28388  00AA' 6F00'              	movwf	RADIO_WritePower@paDac& (0+255),b
 28389                           
 28390                           ; BSR set to: 0
 28391                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 28392  00AC' 0EF8               	movlw	248
 28393  00AE' 1700'              	andwf	RADIO_WritePower@paDac& (0+255),f,b
 28394                           
 28395                           ; BSR set to: 0
 28396                           ;radio_driver_SX1276.c: 403: if (power == 20)
 28397  00B0' 0E14               	movlw	20
 28398  00B2' 1900'              	xorwf	RADIO_WritePower@power& (0+255),w,b
 28399  00B4' A4D8               	btfss	status,2,c
 28400  00B6' D006               	goto	l1796
 28401                           
 28402                           ; BSR set to: 0
 28403                           ;radio_driver_SX1276.c: 404: {
 28404                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 28405  00B8' 0E07               	movlw	7
 28406  00BA' 1300'              	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 28407                           
 28408                           ; BSR set to: 0
 28409                           ;radio_driver_SX1276.c: 406: power = 15;
 28410  00BC' 0E0F               	movlw	15
 28411  00BE' 6F00'              	movwf	RADIO_WritePower@power& (0+255),b
 28412                           
 28413                           ; BSR set to: 0
 28414                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 28415  00C0' 9B00'              	bcf	RADIO_WritePower@ocp& (0+255),5,b
 28416                           
 28417                           ;radio_driver_SX1276.c: 408: }
 28418  00C2' D004               	goto	l1797
 28419  00C4'                    l1796:
 28420                           
 28421                           ; BSR set to: 0
 28422                           ;radio_driver_SX1276.c: 409: else
 28423                           ;radio_driver_SX1276.c: 410: {
 28424                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 28425                           
 28426                           ; BSR set to: 0
 28427  00C4' 8500'              	bsf	RADIO_WritePower@paDac& (0+255),2,b
 28428                           
 28429                           ; BSR set to: 0
 28430                           ;radio_driver_SX1276.c: 412: power -= 2;
 28431  00C6' 0EFE               	movlw	254
 28432  00C8' 2700'              	addwf	RADIO_WritePower@power& (0+255),f,b
 28433                           
 28434                           ; BSR set to: 0
 28435                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 28436  00CA' 8B00'              	bsf	RADIO_WritePower@ocp& (0+255),5,b
 28437  00CC'                    l1797:
 28438                           
 28439                           ; BSR set to: 0
 28440                           ;radio_driver_SX1276.c: 414: }
 28441                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 28442                           
 28443                           ; BSR set to: 0
 28444  00CC' C005' F002'        	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 28445  00D0' 0E4D               	movlw	77
 28446  00D2' EC00' F000'        	call	_RADIO_RegisterWrite
 28447                           
 28448                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 28449  00D6' 0100               	movlb	0	; () banked
 28450  00D8' 5100'              	movf	RADIO_WritePower@power& (0+255),w,b
 28451  00DA' 0980               	iorlw	128
 28452  00DC' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28453  00DE' 0E09               	movlw	9
 28454  00E0' EC00' F000'        	call	_RADIO_RegisterWrite
 28455                           
 28456                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 28457  00E4' C004' F002'        	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 28458  00E8' 0E0B               	movlw	11
 28459  00EA' EC00' F000'        	call	_RADIO_RegisterWrite
 28460  00EE' 0012               	return	
 28461  00F0'                    __end_of_RADIO_WritePower:
 28462                           	opt stack 0
 28463                           tosu	equ	0xFFF
 28464                           tosh	equ	0xFFE
 28465                           tosl	equ	0xFFD
 28466                           pclath	equ	0xFFA
 28467                           tblptru	equ	0xFF8
 28468                           tblptrh	equ	0xFF7
 28469                           tblptrl	equ	0xFF6
 28470                           tablat	equ	0xFF5
 28471                           prodh	equ	0xFF4
 28472                           prodl	equ	0xFF3
 28473                           intcon	equ	0xFF2
 28474                           intcon2	equ	0xFF1
 28475                           intcon3	equ	0xFF0
 28476                           indf0	equ	0xFEF
 28477                           postinc0	equ	0xFEE
 28478                           fsr0h	equ	0xFEA
 28479                           fsr0l	equ	0xFE9
 28480                           wreg	equ	0xFE8
 28481                           postinc1	equ	0xFE6
 28482                           postdec1	equ	0xFE5
 28483                           plusw1	equ	0xFE3
 28484                           fsr1h	equ	0xFE2
 28485                           fsr1l	equ	0xFE1
 28486                           indf2	equ	0xFDF
 28487                           postinc2	equ	0xFDE
 28488                           postdec2	equ	0xFDD
 28489                           plusw2	equ	0xFDB
 28490                           fsr2h	equ	0xFDA
 28491                           fsr2l	equ	0xFD9
 28492                           status	equ	0xFD8
 28493                           
 28494 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 28495 ;; Defined at:
 28496 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28497 ;; Parameters:    Size  Location     Type
 28498 ;;  frequencyDev    4   13[BANK0 ] unsigned long 
 28499 ;; Auto vars:     Size  Location     Type
 28500 ;;  num             4   17[BANK0 ] unsigned long 
 28501 ;; Return value:  Size  Location     Type
 28502 ;;                  1    wreg      void 
 28503 ;; Registers used:
 28504 ;;		wreg, status,2, status,0, cstack
 28505 ;; Tracked objects:
 28506 ;;		On entry : 0/0
 28507 ;;		On exit  : 0/0
 28508 ;;		Unchanged: 0/0
 28509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28511 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28513 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28514 ;;Total ram usage:        8 bytes
 28515 ;; Hardware stack levels used:    1
 28516 ;; Hardware stack levels required when called:   10
 28517 ;; This function calls:
 28518 ;;		_RADIO_RegisterWrite
 28519 ;;		___lldiv
 28520 ;; This function is called by:
 28521 ;;		_RADIO_WriteConfiguration
 28522 ;; This function uses a non-reentrant model
 28523 ;;
 28524                           
 28525                           	psect	text136
 28526  0000'                    __ptext136:
 28527                           	opt stack 0
 28528  0000'                    _RADIO_WriteFSKFrequencyDeviation:
 28529                           	opt stack 17
 28530                           
 28531                           ;radio_driver_SX1276.c: 296: uint32_t num;
 28532                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 28533                           
 28534                           ;incstack = 0
 28535  0000' C00D' F011'        	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 28536  0004' C00E' F012'        	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 28537  0008' C00F' F013'        	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 28538  000C' C010' F014'        	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 28539                           
 28540                           ;radio_driver_SX1276.c: 304: num <<= (8);
 28541  0010' C013' F014'        	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 28542  0014' C012' F013'        	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 28543  0018' C011' F012'        	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 28544  001C' 0100               	movlb	0	; () banked
 28545  001E' 6B00'              	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 28546                           
 28547                           ; BSR set to: 0
 28548                           ;radio_driver_SX1276.c: 305: num /= 15625;
 28549  0020' C011' F000'        	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 28550  0024' C012' F001'        	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 28551  0028' C013' F002'        	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 28552  002C' C014' F003'        	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 28553  0030' 0E09               	movlw	9
 28554  0032' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 28555  0034' 0E3D               	movlw	61
 28556  0036' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 28557  0038' 0E00               	movlw	0
 28558  003A' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 28559  003C' 0E00               	movlw	0
 28560  003E' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 28561  0040' EC00' F000'        	call	___lldiv	;wreg free
 28562  0044' C000' F011'        	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 28563  0048' C001' F012'        	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 28564  004C' C002' F013'        	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 28565  0050' C003' F014'        	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 28566                           
 28567                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 28568  0054' C012' F002'        	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 28569  0058' 0E04               	movlw	4
 28570  005A' EC00' F000'        	call	_RADIO_RegisterWrite
 28571                           
 28572                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 28573  005E' C011' F002'        	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 28574  0062' 0E05               	movlw	5
 28575  0064' EC00' F000'        	call	_RADIO_RegisterWrite
 28576  0068' 0012               	return		;funcret
 28577  006A'                    __end_of_RADIO_WriteFSKFrequencyDeviation:
 28578                           	opt stack 0
 28579                           tosu	equ	0xFFF
 28580                           tosh	equ	0xFFE
 28581                           tosl	equ	0xFFD
 28582                           pclath	equ	0xFFA
 28583                           tblptru	equ	0xFF8
 28584                           tblptrh	equ	0xFF7
 28585                           tblptrl	equ	0xFF6
 28586                           tablat	equ	0xFF5
 28587                           prodh	equ	0xFF4
 28588                           prodl	equ	0xFF3
 28589                           intcon	equ	0xFF2
 28590                           intcon2	equ	0xFF1
 28591                           intcon3	equ	0xFF0
 28592                           indf0	equ	0xFEF
 28593                           postinc0	equ	0xFEE
 28594                           fsr0h	equ	0xFEA
 28595                           fsr0l	equ	0xFE9
 28596                           wreg	equ	0xFE8
 28597                           postinc1	equ	0xFE6
 28598                           postdec1	equ	0xFE5
 28599                           plusw1	equ	0xFE3
 28600                           fsr1h	equ	0xFE2
 28601                           fsr1l	equ	0xFE1
 28602                           indf2	equ	0xFDF
 28603                           postinc2	equ	0xFDE
 28604                           postdec2	equ	0xFDD
 28605                           plusw2	equ	0xFDB
 28606                           fsr2h	equ	0xFDA
 28607                           fsr2l	equ	0xFD9
 28608                           status	equ	0xFD8
 28609                           
 28610 ;; *************** function _RADIO_WriteFSKBitRate *****************
 28611 ;; Defined at:
 28612 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28613 ;; Parameters:    Size  Location     Type
 28614 ;;  bitRate         4   13[BANK0 ] unsigned long 
 28615 ;; Auto vars:     Size  Location     Type
 28616 ;;  num             4   17[BANK0 ] unsigned long 
 28617 ;; Return value:  Size  Location     Type
 28618 ;;                  1    wreg      void 
 28619 ;; Registers used:
 28620 ;;		wreg, status,2, status,0, cstack
 28621 ;; Tracked objects:
 28622 ;;		On entry : 0/0
 28623 ;;		On exit  : 0/0
 28624 ;;		Unchanged: 0/0
 28625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28627 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28629 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28630 ;;Total ram usage:        8 bytes
 28631 ;; Hardware stack levels used:    1
 28632 ;; Hardware stack levels required when called:   10
 28633 ;; This function calls:
 28634 ;;		_RADIO_RegisterWrite
 28635 ;;		___lldiv
 28636 ;; This function is called by:
 28637 ;;		_RADIO_WriteConfiguration
 28638 ;; This function uses a non-reentrant model
 28639 ;;
 28640                           
 28641                           	psect	text137
 28642  0000'                    __ptext137:
 28643                           	opt stack 0
 28644  0000'                    _RADIO_WriteFSKBitRate:
 28645                           	opt stack 17
 28646                           
 28647                           ;radio_driver_SX1276.c: 318: uint32_t num;
 28648                           ;radio_driver_SX1276.c: 320: num = 32000000;
 28649                           
 28650                           ;incstack = 0
 28651  0000' 0E00               	movlw	0
 28652  0002' 0100               	movlb	0	; () banked
 28653  0004' 6F00'              	movwf	RADIO_WriteFSKBitRate@num& (0+255),b
 28654  0006' 0E48               	movlw	72
 28655  0008' 6F00'              	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 28656  000A' 0EE8               	movlw	232
 28657  000C' 6F00'              	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 28658  000E' 0E01               	movlw	1
 28659  0010' 6F00'              	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 28660                           
 28661                           ; BSR set to: 0
 28662                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 28663  0012' C011' F000'        	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 28664  0016' C012' F001'        	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 28665  001A' C013' F002'        	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 28666  001E' C014' F003'        	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 28667  0022' C00D' F004'        	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 28668  0026' C00E' F005'        	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 28669  002A' C00F' F006'        	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 28670  002E' C010' F007'        	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 28671  0032' EC00' F000'        	call	___lldiv	;wreg free
 28672  0036' C000' F011'        	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 28673  003A' C001' F012'        	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 28674  003E' C002' F013'        	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 28675  0042' C003' F014'        	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 28676                           
 28677                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 28678  0046' C012' F002'        	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 28679  004A' 0E02               	movlw	2
 28680  004C' EC00' F000'        	call	_RADIO_RegisterWrite
 28681                           
 28682                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 28683  0050' C011' F002'        	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 28684  0054' 0E03               	movlw	3
 28685  0056' EC00' F000'        	call	_RADIO_RegisterWrite
 28686                           
 28687                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 28688  005A' 0E00               	movlw	0
 28689  005C' 0100               	movlb	0	; () banked
 28690  005E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 28691  0060' 0E5D               	movlw	93
 28692  0062' EC00' F000'        	call	_RADIO_RegisterWrite
 28693  0066' 0012               	return		;funcret
 28694  0068'                    __end_of_RADIO_WriteFSKBitRate:
 28695                           	opt stack 0
 28696                           tosu	equ	0xFFF
 28697                           tosh	equ	0xFFE
 28698                           tosl	equ	0xFFD
 28699                           pclath	equ	0xFFA
 28700                           tblptru	equ	0xFF8
 28701                           tblptrh	equ	0xFF7
 28702                           tblptrl	equ	0xFF6
 28703                           tablat	equ	0xFF5
 28704                           prodh	equ	0xFF4
 28705                           prodl	equ	0xFF3
 28706                           intcon	equ	0xFF2
 28707                           intcon2	equ	0xFF1
 28708                           intcon3	equ	0xFF0
 28709                           indf0	equ	0xFEF
 28710                           postinc0	equ	0xFEE
 28711                           fsr0h	equ	0xFEA
 28712                           fsr0l	equ	0xFE9
 28713                           wreg	equ	0xFE8
 28714                           postinc1	equ	0xFE6
 28715                           postdec1	equ	0xFE5
 28716                           plusw1	equ	0xFE3
 28717                           fsr1h	equ	0xFE2
 28718                           fsr1l	equ	0xFE1
 28719                           indf2	equ	0xFDF
 28720                           postinc2	equ	0xFDE
 28721                           postdec2	equ	0xFDD
 28722                           plusw2	equ	0xFDB
 28723                           fsr2h	equ	0xFDA
 28724                           fsr2l	equ	0xFD9
 28725                           status	equ	0xFD8
 28726                           
 28727 ;; *************** function _PrepareJoinRequestFrame *****************
 28728 ;; Defined at:
 28729 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 28730 ;; Parameters:    Size  Location     Type
 28731 ;;		None
 28732 ;; Auto vars:     Size  Location     Type
 28733 ;;  mic             4  116[BANK0 ] unsigned long 
 28734 ;;  bufferIndex     1  122[BANK0 ] unsigned char 
 28735 ;;  iCtr            1  121[BANK0 ] unsigned char 
 28736 ;;  mhdr            1  120[BANK0 ] struct .
 28737 ;; Return value:  Size  Location     Type
 28738 ;;                  1    wreg      unsigned char 
 28739 ;; Registers used:
 28740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28741 ;; Tracked objects:
 28742 ;;		On entry : 0/0
 28743 ;;		On exit  : 0/0
 28744 ;;		Unchanged: 0/0
 28745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28747 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28748 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28749 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28750 ;;Total ram usage:       11 bytes
 28751 ;; Hardware stack levels used:    1
 28752 ;; Hardware stack levels required when called:   13
 28753 ;; This function calls:
 28754 ;;		_ComputeMic
 28755 ;;		_Random
 28756 ;;		_memcpy
 28757 ;;		_memset
 28758 ;; This function is called by:
 28759 ;;		_LORAWAN_Join
 28760 ;; This function uses a non-reentrant model
 28761 ;;
 28762                           
 28763                           	psect	text138
 28764  0000'                    __ptext138:
 28765                           	opt stack 0
 28766  0000'                    _PrepareJoinRequestFrame:
 28767                           	opt stack 16
 28768                           
 28769                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 28770                           
 28771                           ;incstack = 0
 28772  0000' 0E00               	movlw	0
 28773  0002' 0100               	movlb	0	; () banked
 28774  0004' 6F00'              	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 28775                           
 28776                           ; BSR set to: 0
 28777                           ;lorawan.c: 1809: Mhdr_t mhdr;
 28778                           ;lorawan.c: 1810: uint32_t mic;
 28779                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 28780  0006' 0E00'              	movlw	low _macBuffer
 28781  0008' 6F00'              	movwf	memset@p1& (0+255),b
 28782  000A' 0E00'              	movlw	high _macBuffer
 28783  000C' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 28784  000E' 0E00               	movlw	0
 28785  0010' 6F00'              	movwf	(memset@c+1)& (0+255),b
 28786  0012' 0E00               	movlw	0
 28787  0014' 6F00'              	movwf	memset@c& (0+255),b
 28788  0016' 0E01               	movlw	1
 28789  0018' 6F00'              	movwf	(memset@n+1)& (0+255),b
 28790  001A' 0E0F               	movlw	15
 28791  001C' 6F00'              	movwf	memset@n& (0+255),b
 28792  001E' EC00' F000'        	call	_memset	;wreg free
 28793                           
 28794                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 28795  0022' 0100               	movlb	0	; () banked
 28796  0024' 9B00'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),5,b
 28797  0026' 9D00'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),6,b
 28798  0028' 9F00'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),7,b
 28799                           
 28800                           ; BSR set to: 0
 28801                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 28802  002A' 0EFC               	movlw	-4
 28803  002C' 1700'              	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 28804                           
 28805                           ; BSR set to: 0
 28806                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 28807  002E' 9500'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),2,b
 28808  0030' 9700'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),3,b
 28809  0032' 9900'              	bcf	PrepareJoinRequestFrame@mhdr& (0+255),4,b
 28810                           
 28811                           ; BSR set to: 0
 28812                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 28813  0034' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 28814  0036' 0D01               	mullw	1
 28815  0038' 0E00'              	movlw	low _macBuffer
 28816  003A' 24F3               	addwf	prodl,w,c
 28817  003C' 6ED9               	movwf	fsr2l,c
 28818  003E' 0E00'              	movlw	high _macBuffer
 28819  0040' 20F4               	addwfc	prodh,w,c
 28820  0042' 6EDA               	movwf	fsr2h,c
 28821  0044' C078' FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 28822                           
 28823                           ; BSR set to: 0
 28824  0048' 2B00'              	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 28825                           
 28826                           ; BSR set to: 0
 28827                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 28828  004A' 0E00               	movlw	0
 28829  004C' 6F00'              	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 28830  004E'                    l11614:
 28831                           
 28832                           ; BSR set to: 0
 28833  004E' 0E07               	movlw	7
 28834  0050' 6500'              	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 28835  0052' D001               	goto	l800
 28836  0054' D022               	goto	u12300
 28837  0056'                    l800:
 28838                           
 28839                           ; BSR set to: 0
 28840                           ;lorawan.c: 1821: {
 28841                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 28842                           
 28843                           ; BSR set to: 0
 28844  0056' 5100'              	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 28845  0058' 6F00'              	movwf	??_PrepareJoinRequestFrame& (0+255),b
 28846  005A' 6B00'              	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 28847  005C' 1F00'              	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 28848  005E' 1F00'              	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28849  0060' 4B00'              	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 28850  0062' 2B00'              	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28851  0064' 0E07               	movlw	7
 28852  0066' 2700'              	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 28853  0068' 0E00               	movlw	0
 28854  006A' 2300'              	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28855  006C' 0E00'              	movlw	low (_loRa+82)
 28856  006E' 2500'              	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 28857  0070' 6ED9               	movwf	fsr2l,c
 28858  0072' 0E00'              	movlw	high (_loRa+82)
 28859  0074' 2100'              	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 28860  0076' 6EDA               	movwf	fsr2h,c
 28861  0078' 5100'              	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 28862  007A' C07A' F072'        	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 28863  007E' 6B00'              	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 28864  0080' 2700'              	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 28865  0082' 0E00               	movlw	0
 28866  0084' 2300'              	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 28867  0086' 0E00'              	movlw	low _macBuffer
 28868  0088' 2500'              	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 28869  008A' 6EE9               	movwf	fsr0l,c
 28870  008C' 0E00'              	movlw	high _macBuffer
 28871  008E' 2100'              	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 28872  0090' 6EEA               	movwf	fsr0h,c
 28873  0092' CFDF FFEF          	movff	indf2,indf0
 28874                           
 28875                           ; BSR set to: 0
 28876  0096' 2B00'              	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 28877  0098' D7DA               	goto	l11614
 28878  009A'                    u12300:
 28879                           
 28880                           ; BSR set to: 0
 28881                           ;lorawan.c: 1823: }
 28882                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 28883                           
 28884                           ; BSR set to: 0
 28885  009A' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 28886  009C' 0F08               	addlw	8
 28887  009E' 6F00'              	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 28888                           
 28889                           ; BSR set to: 0
 28890                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 28891  00A0' 0E00               	movlw	0
 28892  00A2' 6F00'              	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 28893  00A4'                    l11628:
 28894                           
 28895                           ; BSR set to: 0
 28896  00A4' 0E07               	movlw	7
 28897  00A6' 6500'              	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 28898  00A8' D001               	goto	l802
 28899  00AA' D022               	goto	u12320
 28900  00AC'                    l802:
 28901                           
 28902                           ; BSR set to: 0
 28903                           ;lorawan.c: 1828: {
 28904                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 28905                           
 28906                           ; BSR set to: 0
 28907  00AC' 5100'              	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 28908  00AE' 6F00'              	movwf	??_PrepareJoinRequestFrame& (0+255),b
 28909  00B0' 6B00'              	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 28910  00B2' 1F00'              	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 28911  00B4' 1F00'              	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28912  00B6' 4B00'              	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 28913  00B8' 2B00'              	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28914  00BA' 0E07               	movlw	7
 28915  00BC' 2700'              	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 28916  00BE' 0E00               	movlw	0
 28917  00C0' 2300'              	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 28918  00C2' 0E00'              	movlw	low (_loRa+90)
 28919  00C4' 2500'              	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 28920  00C6' 6ED9               	movwf	fsr2l,c
 28921  00C8' 0E00'              	movlw	high (_loRa+90)
 28922  00CA' 2100'              	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 28923  00CC' 6EDA               	movwf	fsr2h,c
 28924  00CE' 5100'              	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 28925  00D0' C07A' F072'        	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 28926  00D4' 6B00'              	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 28927  00D6' 2700'              	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 28928  00D8' 0E00               	movlw	0
 28929  00DA' 2300'              	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 28930  00DC' 0E00'              	movlw	low _macBuffer
 28931  00DE' 2500'              	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 28932  00E0' 6EE9               	movwf	fsr0l,c
 28933  00E2' 0E00'              	movlw	high _macBuffer
 28934  00E4' 2100'              	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 28935  00E6' 6EEA               	movwf	fsr0h,c
 28936  00E8' CFDF FFEF          	movff	indf2,indf0
 28937                           
 28938                           ; BSR set to: 0
 28939  00EC' 2B00'              	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 28940  00EE' D7DA               	goto	l11628
 28941  00F0'                    u12320:
 28942                           
 28943                           ; BSR set to: 0
 28944                           ;lorawan.c: 1830: }
 28945                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 28946                           
 28947                           ; BSR set to: 0
 28948  00F0' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 28949  00F2' 0F08               	addlw	8
 28950  00F4' 6F00'              	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 28951                           
 28952                           ; BSR set to: 0
 28953                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 28954  00F6' 0EFF               	movlw	255
 28955  00F8' 6F00'              	movwf	(Random@max+1)& (0+255),b
 28956  00FA' 6900'              	setf	Random@max& (0+255),b
 28957  00FC' EC00' F000'        	call	_Random	;wreg free
 28958  0100' C04D' F0C3'        	movff	?_Random,_loRa+195
 28959  0104' C04E' F0C4'        	movff	?_Random+1,_loRa+196
 28960                           
 28961                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 28962  0108' 0100               	movlb	0	; () banked
 28963  010A' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 28964  010C' 0D01               	mullw	1
 28965  010E' 0E00'              	movlw	low _macBuffer
 28966  0110' 24F3               	addwf	prodl,w,c
 28967  0112' 6F00'              	movwf	memcpy@d1& (0+255),b
 28968  0114' 0E00'              	movlw	high _macBuffer
 28969  0116' 20F4               	addwfc	prodh,w,c
 28970  0118' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 28971  011A' 0E00'              	movlw	low (_loRa+195)
 28972  011C' 6F00'              	movwf	memcpy@s1& (0+255),b
 28973  011E' 0E00'              	movlw	high (_loRa+195)
 28974  0120' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 28975  0122' 0E00               	movlw	0
 28976  0124' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 28977  0126' 0E02               	movlw	2
 28978  0128' 6F00'              	movwf	memcpy@n& (0+255),b
 28979  012A' EC00' F000'        	call	_memcpy	;wreg free
 28980                           
 28981                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 28982  012E' 0100               	movlb	0	; () banked
 28983  0130' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 28984  0132' 0F02               	addlw	2
 28985  0134' 6F00'              	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 28986                           
 28987                           ; BSR set to: 0
 28988                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 28989  0136' 0E00'              	movlw	low (_loRa+66)
 28990  0138' 6F00'              	movwf	ComputeMic@key& (0+255),b
 28991  013A' 0E00'              	movlw	high (_loRa+66)
 28992  013C' 6F00'              	movwf	(ComputeMic@key+1)& (0+255),b
 28993  013E' 0E00'              	movlw	low _macBuffer
 28994  0140' 6F00'              	movwf	ComputeMic@buffer& (0+255),b
 28995  0142' 0E00'              	movlw	high _macBuffer
 28996  0144' 6F00'              	movwf	(ComputeMic@buffer+1)& (0+255),b
 28997  0146' C07A' F06B'        	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 28998  014A' EC00' F000'        	call	_ComputeMic	;wreg free
 28999  014E' C067' F074'        	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 29000  0152' C068' F075'        	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 29001  0156' C069' F076'        	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 29002  015A' C06A' F077'        	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 29003                           
 29004                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 29005  015E' 0100               	movlb	0	; () banked
 29006  0160' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 29007  0162' 0D01               	mullw	1
 29008  0164' 0E00'              	movlw	low _macBuffer
 29009  0166' 24F3               	addwf	prodl,w,c
 29010  0168' 6F00'              	movwf	memcpy@d1& (0+255),b
 29011  016A' 0E00'              	movlw	high _macBuffer
 29012  016C' 20F4               	addwfc	prodh,w,c
 29013  016E' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 29014  0170' 0E00'              	movlw	low PrepareJoinRequestFrame@mic
 29015  0172' 6F00'              	movwf	memcpy@s1& (0+255),b
 29016  0174' 0E00'              	movlw	high PrepareJoinRequestFrame@mic
 29017  0176' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 29018  0178' 0E00               	movlw	0
 29019  017A' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 29020  017C' 0E04               	movlw	4
 29021  017E' 6F00'              	movwf	memcpy@n& (0+255),b
 29022  0180' EC00' F000'        	call	_memcpy	;wreg free
 29023                           
 29024                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 29025  0184' 0100               	movlb	0	; () banked
 29026  0186' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 29027  0188' 0F04               	addlw	4
 29028  018A' 6F00'              	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 29029                           
 29030                           ; BSR set to: 0
 29031                           ;lorawan.c: 1842: return bufferIndex;
 29032  018C' 5100'              	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 29033  018E' 0012               	return	
 29034  0190'                    __end_of_PrepareJoinRequestFrame:
 29035                           	opt stack 0
 29036                           tosu	equ	0xFFF
 29037                           tosh	equ	0xFFE
 29038                           tosl	equ	0xFFD
 29039                           pclath	equ	0xFFA
 29040                           tblptru	equ	0xFF8
 29041                           tblptrh	equ	0xFF7
 29042                           tblptrl	equ	0xFF6
 29043                           tablat	equ	0xFF5
 29044                           prodh	equ	0xFF4
 29045                           prodl	equ	0xFF3
 29046                           intcon	equ	0xFF2
 29047                           intcon2	equ	0xFF1
 29048                           intcon3	equ	0xFF0
 29049                           indf0	equ	0xFEF
 29050                           postinc0	equ	0xFEE
 29051                           fsr0h	equ	0xFEA
 29052                           fsr0l	equ	0xFE9
 29053                           wreg	equ	0xFE8
 29054                           postinc1	equ	0xFE6
 29055                           postdec1	equ	0xFE5
 29056                           plusw1	equ	0xFE3
 29057                           fsr1h	equ	0xFE2
 29058                           fsr1l	equ	0xFE1
 29059                           indf2	equ	0xFDF
 29060                           postinc2	equ	0xFDE
 29061                           postdec2	equ	0xFDD
 29062                           plusw2	equ	0xFDB
 29063                           fsr2h	equ	0xFDA
 29064                           fsr2l	equ	0xFD9
 29065                           status	equ	0xFD8
 29066                           
 29067 ;; *************** function _Random *****************
 29068 ;; Defined at:
 29069 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 29070 ;; Parameters:    Size  Location     Type
 29071 ;;  max             2   77[BANK0 ] unsigned int 
 29072 ;; Auto vars:     Size  Location     Type
 29073 ;;		None
 29074 ;; Return value:  Size  Location     Type
 29075 ;;                  2   77[BANK0 ] unsigned int 
 29076 ;; Registers used:
 29077 ;;		wreg, status,2, status,0, cstack
 29078 ;; Tracked objects:
 29079 ;;		On entry : 0/0
 29080 ;;		On exit  : 0/0
 29081 ;;		Unchanged: 0/0
 29082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29083 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29087 ;;Total ram usage:        2 bytes
 29088 ;; Hardware stack levels used:    1
 29089 ;; Hardware stack levels required when called:    9
 29090 ;; This function calls:
 29091 ;;		___lwmod
 29092 ;;		_rand
 29093 ;; This function is called by:
 29094 ;;		_PrepareJoinRequestFrame
 29095 ;;		_SearchAvailableChannel
 29096 ;; This function uses a non-reentrant model
 29097 ;;
 29098                           
 29099                           	psect	text139
 29100  0000'                    __ptext139:
 29101                           	opt stack 0
 29102  0000'                    _Random:
 29103                           	opt stack 18
 29104                           
 29105                           ;lorawan.c: 1118: return (rand () % max);
 29106                           
 29107                           ; BSR set to: 0
 29108                           ;incstack = 0
 29109  0000' EC00' F000'        	call	_rand	;wreg free
 29110  0004' C046' F048'        	movff	?_rand,___lwmod@dividend
 29111  0008' C047' F049'        	movff	?_rand+1,___lwmod@dividend+1
 29112  000C' C04D' F04A'        	movff	Random@max,___lwmod@divisor
 29113  0010' C04E' F04B'        	movff	Random@max+1,___lwmod@divisor+1
 29114  0014' EC00' F000'        	call	___lwmod	;wreg free
 29115  0018' C048' F04D'        	movff	?___lwmod,?_Random
 29116  001C' C049' F04E'        	movff	?___lwmod+1,?_Random+1
 29117  0020' 0012               	return	
 29118  0022'                    __end_of_Random:
 29119                           	opt stack 0
 29120                           tosu	equ	0xFFF
 29121                           tosh	equ	0xFFE
 29122                           tosl	equ	0xFFD
 29123                           pclath	equ	0xFFA
 29124                           tblptru	equ	0xFF8
 29125                           tblptrh	equ	0xFF7
 29126                           tblptrl	equ	0xFF6
 29127                           tablat	equ	0xFF5
 29128                           prodh	equ	0xFF4
 29129                           prodl	equ	0xFF3
 29130                           intcon	equ	0xFF2
 29131                           intcon2	equ	0xFF1
 29132                           intcon3	equ	0xFF0
 29133                           indf0	equ	0xFEF
 29134                           postinc0	equ	0xFEE
 29135                           fsr0h	equ	0xFEA
 29136                           fsr0l	equ	0xFE9
 29137                           wreg	equ	0xFE8
 29138                           postinc1	equ	0xFE6
 29139                           postdec1	equ	0xFE5
 29140                           plusw1	equ	0xFE3
 29141                           fsr1h	equ	0xFE2
 29142                           fsr1l	equ	0xFE1
 29143                           indf2	equ	0xFDF
 29144                           postinc2	equ	0xFDE
 29145                           postdec2	equ	0xFDD
 29146                           plusw2	equ	0xFDB
 29147                           fsr2h	equ	0xFDA
 29148                           fsr2l	equ	0xFD9
 29149                           status	equ	0xFD8
 29150                           
 29151 ;; *************** function _rand *****************
 29152 ;; Defined at:
 29153 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 29154 ;; Parameters:    Size  Location     Type
 29155 ;;		None
 29156 ;; Auto vars:     Size  Location     Type
 29157 ;;		None
 29158 ;; Return value:  Size  Location     Type
 29159 ;;                  2   70[BANK0 ] int 
 29160 ;; Registers used:
 29161 ;;		wreg, status,2, status,0, cstack
 29162 ;; Tracked objects:
 29163 ;;		On entry : 0/0
 29164 ;;		On exit  : 0/0
 29165 ;;		Unchanged: 0/0
 29166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29171 ;;Total ram usage:        2 bytes
 29172 ;; Hardware stack levels used:    1
 29173 ;; Hardware stack levels required when called:    8
 29174 ;; This function calls:
 29175 ;;		___lmul
 29176 ;; This function is called by:
 29177 ;;		_Random
 29178 ;; This function uses a non-reentrant model
 29179 ;;
 29180                           
 29181                           	psect	text140
 29182  0000'                    __ptext140:
 29183                           	opt stack 0
 29184  0000'                    _rand:
 29185                           	opt stack 18
 29186                           
 29187                           ;incstack = 0
 29188  0000' C010' F03A'        	movff	_randx,___lmul@multiplier
 29189  0004' C011' F03B'        	movff	_randx+1,___lmul@multiplier+1
 29190  0008' C012' F03C'        	movff	_randx+2,___lmul@multiplier+2
 29191  000C' C013' F03D'        	movff	_randx+3,___lmul@multiplier+3
 29192  0010' 0E6D               	movlw	109
 29193  0012' 0100               	movlb	0	; () banked
 29194  0014' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 29195  0016' 0E4E               	movlw	78
 29196  0018' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 29197  001A' 0EC6               	movlw	198
 29198  001C' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 29199  001E' 0E41               	movlw	65
 29200  0020' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 29201  0022' EC00' F000'        	call	___lmul	;wreg free
 29202  0026' C03A' F010'        	movff	?___lmul,_randx
 29203  002A' C03B' F011'        	movff	?___lmul+1,_randx+1
 29204  002E' C03C' F012'        	movff	?___lmul+2,_randx+2
 29205  0032' C03D' F013'        	movff	?___lmul+3,_randx+3
 29206  0036' 0E39               	movlw	57
 29207  0038' 0101               	movlb	1	; () banked
 29208  003A' 2700'              	addwf	_randx& (0+255),f,b
 29209  003C' 0E30               	movlw	48
 29210  003E' 2300'              	addwfc	(_randx+1)& (0+255),f,b
 29211  0040' 0E00               	movlw	0
 29212  0042' 2300'              	addwfc	(_randx+2)& (0+255),f,b
 29213  0044' 0E00               	movlw	0
 29214  0046' 2300'              	addwfc	(_randx+3)& (0+255),f,b
 29215                           
 29216                           ; BSR set to: 1
 29217  0048' 0EFF               	movlw	255
 29218  004A' 1500'              	andwf	(_randx+2)& (0+255),w,b
 29219  004C' 0100               	movlb	0	; () banked
 29220  004E' 6F00'              	movwf	?_rand& (0+255),b
 29221  0050' 0E7F               	movlw	127
 29222  0052' 0101               	movlb	1	; () banked
 29223  0054' 1500'              	andwf	(_randx+3)& (0+255),w,b
 29224  0056' 0100               	movlb	0	; () banked
 29225  0058' 6F00'              	movwf	(?_rand+1)& (0+255),b
 29226  005A' 0012               	return	
 29227  005C'                    __end_of_rand:
 29228                           	opt stack 0
 29229                           tosu	equ	0xFFF
 29230                           tosh	equ	0xFFE
 29231                           tosl	equ	0xFFD
 29232                           pclath	equ	0xFFA
 29233                           tblptru	equ	0xFF8
 29234                           tblptrh	equ	0xFF7
 29235                           tblptrl	equ	0xFF6
 29236                           tablat	equ	0xFF5
 29237                           prodh	equ	0xFF4
 29238                           prodl	equ	0xFF3
 29239                           intcon	equ	0xFF2
 29240                           intcon2	equ	0xFF1
 29241                           intcon3	equ	0xFF0
 29242                           indf0	equ	0xFEF
 29243                           postinc0	equ	0xFEE
 29244                           fsr0h	equ	0xFEA
 29245                           fsr0l	equ	0xFE9
 29246                           wreg	equ	0xFE8
 29247                           postinc1	equ	0xFE6
 29248                           postdec1	equ	0xFE5
 29249                           plusw1	equ	0xFE3
 29250                           fsr1h	equ	0xFE2
 29251                           fsr1l	equ	0xFE1
 29252                           indf2	equ	0xFDF
 29253                           postinc2	equ	0xFDE
 29254                           postdec2	equ	0xFDD
 29255                           plusw2	equ	0xFDB
 29256                           fsr2h	equ	0xFDA
 29257                           fsr2l	equ	0xFD9
 29258                           status	equ	0xFD8
 29259                           
 29260 ;; *************** function ___lwmod *****************
 29261 ;; Defined at:
 29262 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 29263 ;; Parameters:    Size  Location     Type
 29264 ;;  dividend        2   72[BANK0 ] unsigned int 
 29265 ;;  divisor         2   74[BANK0 ] unsigned int 
 29266 ;; Auto vars:     Size  Location     Type
 29267 ;;  counter         1   76[BANK0 ] unsigned char 
 29268 ;; Return value:  Size  Location     Type
 29269 ;;                  2   72[BANK0 ] unsigned int 
 29270 ;; Registers used:
 29271 ;;		wreg, status,2, status,0
 29272 ;; Tracked objects:
 29273 ;;		On entry : 0/0
 29274 ;;		On exit  : 0/0
 29275 ;;		Unchanged: 0/0
 29276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29277 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29280 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29281 ;;Total ram usage:        5 bytes
 29282 ;; Hardware stack levels used:    1
 29283 ;; Hardware stack levels required when called:    7
 29284 ;; This function calls:
 29285 ;;		Nothing
 29286 ;; This function is called by:
 29287 ;;		_Random
 29288 ;; This function uses a non-reentrant model
 29289 ;;
 29290                           
 29291                           	psect	text141
 29292  0000'                    __ptext141:
 29293                           	opt stack 0
 29294  0000'                    ___lwmod:
 29295                           	opt stack 19
 29296                           
 29297                           ; BSR set to: 0
 29298                           ;incstack = 0
 29299  0000' 0100               	movlb	0	; () banked
 29300  0002' 5100'              	movf	___lwmod@divisor& (0+255),w,b
 29301  0004' 1100'              	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 29302  0006' B4D8               	btfsc	status,2,c
 29303  0008' D018               	goto	l3049
 29304                           
 29305                           ; BSR set to: 0
 29306  000A' 0E01               	movlw	1
 29307  000C' 6F00'              	movwf	___lwmod@counter& (0+255),b
 29308  000E' D004               	goto	l3044
 29309  0010'                    
 29310                           ; BSR set to: 0
 29311                           
 29312                           ; BSR set to: 0
 29313  0010' 90D8               	bcf	status,0,c
 29314  0012' 3700'              	rlcf	___lwmod@divisor& (0+255),f,b
 29315  0014' 3700'              	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 29316  0016' 2B00'              	incf	___lwmod@counter& (0+255),f,b
 29317  0018'                    l3044:
 29318                           
 29319                           ; BSR set to: 0
 29320                           
 29321                           ; BSR set to: 0
 29322  0018' AF00'              	btfss	(___lwmod@divisor+1)& (0+255),7,b
 29323  001A' D7FA               	goto	l3045
 29324  001C'                    u7660:
 29325                           
 29326                           ; BSR set to: 0
 29327                           
 29328                           ; BSR set to: 0
 29329                           
 29330                           ; BSR set to: 0
 29331  001C' 5100'              	movf	___lwmod@divisor& (0+255),w,b
 29332  001E' 5D00'              	subwf	___lwmod@dividend& (0+255),w,b
 29333  0020' 5100'              	movf	(___lwmod@divisor+1)& (0+255),w,b
 29334  0022' 5900'              	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 29335  0024' A0D8               	btfss	status,0,c
 29336  0026' D004               	goto	l3048
 29337                           
 29338                           ; BSR set to: 0
 29339  0028' 5100'              	movf	___lwmod@divisor& (0+255),w,b
 29340  002A' 5F00'              	subwf	___lwmod@dividend& (0+255),f,b
 29341  002C' 5100'              	movf	(___lwmod@divisor+1)& (0+255),w,b
 29342  002E' 5B00'              	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 29343  0030'                    l3048:
 29344                           
 29345                           ; BSR set to: 0
 29346                           
 29347                           ; BSR set to: 0
 29348  0030' 90D8               	bcf	status,0,c
 29349  0032' 3300'              	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 29350  0034' 3300'              	rrcf	___lwmod@divisor& (0+255),f,b
 29351                           
 29352                           ; BSR set to: 0
 29353  0036' 2F00'              	decfsz	___lwmod@counter& (0+255),f,b
 29354  0038' D7F1               	goto	u7660
 29355  003A'                    l3049:
 29356                           
 29357                           ; BSR set to: 0
 29358                           
 29359                           ; BSR set to: 0
 29360  003A' C048' F048'        	movff	___lwmod@dividend,?___lwmod
 29361  003E' C049' F049'        	movff	___lwmod@dividend+1,?___lwmod+1
 29362                           
 29363                           ; BSR set to: 0
 29364  0042' 0012               	return		;funcret
 29365  0044'                    __end_of___lwmod:
 29366                           	opt stack 0
 29367                           tosu	equ	0xFFF
 29368                           tosh	equ	0xFFE
 29369                           tosl	equ	0xFFD
 29370                           pclath	equ	0xFFA
 29371                           tblptru	equ	0xFF8
 29372                           tblptrh	equ	0xFF7
 29373                           tblptrl	equ	0xFF6
 29374                           tablat	equ	0xFF5
 29375                           prodh	equ	0xFF4
 29376                           prodl	equ	0xFF3
 29377                           intcon	equ	0xFF2
 29378                           intcon2	equ	0xFF1
 29379                           intcon3	equ	0xFF0
 29380                           indf0	equ	0xFEF
 29381                           postinc0	equ	0xFEE
 29382                           fsr0h	equ	0xFEA
 29383                           fsr0l	equ	0xFE9
 29384                           wreg	equ	0xFE8
 29385                           postinc1	equ	0xFE6
 29386                           postdec1	equ	0xFE5
 29387                           plusw1	equ	0xFE3
 29388                           fsr1h	equ	0xFE2
 29389                           fsr1l	equ	0xFE1
 29390                           indf2	equ	0xFDF
 29391                           postinc2	equ	0xFDE
 29392                           postdec2	equ	0xFDD
 29393                           plusw2	equ	0xFDB
 29394                           fsr2h	equ	0xFDA
 29395                           fsr2l	equ	0xFD9
 29396                           status	equ	0xFD8
 29397                           
 29398 ;; *************** function _ComputeMic *****************
 29399 ;; Defined at:
 29400 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 29401 ;; Parameters:    Size  Location     Type
 29402 ;;  key             2  103[BANK0 ] PTR unsigned char 
 29403 ;;		 -> loRa.activationParameters(105), loRa(231), 
 29404 ;;  buffer          2  105[BANK0 ] PTR unsigned char 
 29405 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 29406 ;;  bufferLength    1  107[BANK0 ] unsigned char 
 29407 ;; Auto vars:     Size  Location     Type
 29408 ;;  mic             4  108[BANK0 ] unsigned long 
 29409 ;; Return value:  Size  Location     Type
 29410 ;;                  4  103[BANK0 ] unsigned long 
 29411 ;; Registers used:
 29412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29413 ;; Tracked objects:
 29414 ;;		On entry : 0/0
 29415 ;;		On exit  : 0/0
 29416 ;;		Unchanged: 0/0
 29417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29418 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29419 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29421 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29422 ;;Total ram usage:        9 bytes
 29423 ;; Hardware stack levels used:    1
 29424 ;; Hardware stack levels required when called:   12
 29425 ;; This function calls:
 29426 ;;		_AESCmac
 29427 ;;		_memcpy
 29428 ;; This function is called by:
 29429 ;;		_LORAWAN_RxDone
 29430 ;;		_PrepareJoinRequestFrame
 29431 ;; This function uses a non-reentrant model
 29432 ;;
 29433                           
 29434                           	psect	text142
 29435  0000'                    __ptext142:
 29436                           	opt stack 0
 29437  0000'                    _ComputeMic:
 29438                           	opt stack 14
 29439                           
 29440                           ;lorawan.c: 2196: uint32_t mic = 0;
 29441                           
 29442                           ; BSR set to: 0
 29443                           ;incstack = 0
 29444  0000' 0E00               	movlw	0
 29445  0002' 0100               	movlb	0	; () banked
 29446  0004' 6F00'              	movwf	ComputeMic@mic& (0+255),b
 29447  0006' 0E00               	movlw	0
 29448  0008' 6F00'              	movwf	(ComputeMic@mic+1)& (0+255),b
 29449  000A' 0E00               	movlw	0
 29450  000C' 6F00'              	movwf	(ComputeMic@mic+2)& (0+255),b
 29451  000E' 0E00               	movlw	0
 29452  0010' 6F00'              	movwf	(ComputeMic@mic+3)& (0+255),b
 29453                           
 29454                           ; BSR set to: 0
 29455                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 29456  0012' C067' F059'        	movff	ComputeMic@key,AESCmac@key
 29457  0016' C068' F05A'        	movff	ComputeMic@key+1,AESCmac@key+1
 29458  001A' 0E00'              	movlw	low _aesBuffer
 29459  001C' 6F00'              	movwf	AESCmac@output& (0+255),b
 29460  001E' 0E00'              	movlw	high _aesBuffer
 29461  0020' 6F00'              	movwf	(AESCmac@output+1)& (0+255),b
 29462  0022' C069' F05D'        	movff	ComputeMic@buffer,AESCmac@input
 29463  0026' C06A' F05E'        	movff	ComputeMic@buffer+1,AESCmac@input+1
 29464  002A' C06B' F05F'        	movff	ComputeMic@bufferLength,AESCmac@size
 29465  002E' EC00' F000'        	call	_AESCmac	;wreg free
 29466                           
 29467                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 29468  0032' 0E00'              	movlw	low ComputeMic@mic
 29469  0034' 0100               	movlb	0	; () banked
 29470  0036' 6F00'              	movwf	memcpy@d1& (0+255),b
 29471  0038' 0E00'              	movlw	high ComputeMic@mic
 29472  003A' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 29473  003C' 0E00'              	movlw	low _aesBuffer
 29474  003E' 6F00'              	movwf	memcpy@s1& (0+255),b
 29475  0040' 0E00'              	movlw	high _aesBuffer
 29476  0042' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 29477  0044' 0E00               	movlw	0
 29478  0046' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 29479  0048' 0E04               	movlw	4
 29480  004A' 6F00'              	movwf	memcpy@n& (0+255),b
 29481  004C' EC00' F000'        	call	_memcpy	;wreg free
 29482                           
 29483                           ;lorawan.c: 2202: return mic;
 29484  0050' C06C' F067'        	movff	ComputeMic@mic,?_ComputeMic
 29485  0054' C06D' F068'        	movff	ComputeMic@mic+1,?_ComputeMic+1
 29486  0058' C06E' F069'        	movff	ComputeMic@mic+2,?_ComputeMic+2
 29487  005C' C06F' F06A'        	movff	ComputeMic@mic+3,?_ComputeMic+3
 29488  0060' 0012               	return	
 29489  0062'                    __end_of_ComputeMic:
 29490                           	opt stack 0
 29491                           tosu	equ	0xFFF
 29492                           tosh	equ	0xFFE
 29493                           tosl	equ	0xFFD
 29494                           pclath	equ	0xFFA
 29495                           tblptru	equ	0xFF8
 29496                           tblptrh	equ	0xFF7
 29497                           tblptrl	equ	0xFF6
 29498                           tablat	equ	0xFF5
 29499                           prodh	equ	0xFF4
 29500                           prodl	equ	0xFF3
 29501                           intcon	equ	0xFF2
 29502                           intcon2	equ	0xFF1
 29503                           intcon3	equ	0xFF0
 29504                           indf0	equ	0xFEF
 29505                           postinc0	equ	0xFEE
 29506                           fsr0h	equ	0xFEA
 29507                           fsr0l	equ	0xFE9
 29508                           wreg	equ	0xFE8
 29509                           postinc1	equ	0xFE6
 29510                           postdec1	equ	0xFE5
 29511                           plusw1	equ	0xFE3
 29512                           fsr1h	equ	0xFE2
 29513                           fsr1l	equ	0xFE1
 29514                           indf2	equ	0xFDF
 29515                           postinc2	equ	0xFDE
 29516                           postdec2	equ	0xFDD
 29517                           plusw2	equ	0xFDB
 29518                           fsr2h	equ	0xFDA
 29519                           fsr2l	equ	0xFD9
 29520                           status	equ	0xFD8
 29521                           
 29522 ;; *************** function _AESCmac *****************
 29523 ;; Defined at:
 29524 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 29525 ;; Parameters:    Size  Location     Type
 29526 ;;  key             2   89[BANK0 ] PTR unsigned char 
 29527 ;;		 -> loRa.activationParameters(105), loRa(231), 
 29528 ;;  output          2   91[BANK0 ] PTR unsigned char 
 29529 ;;		 -> aesBuffer(16), 
 29530 ;;  input           2   93[BANK0 ] PTR unsigned char 
 29531 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 29532 ;;  size            1   95[BANK0 ] unsigned char 
 29533 ;; Auto vars:     Size  Location     Type
 29534 ;;  x              16   80[BANK1 ] unsigned char [16]
 29535 ;;  y              16   64[BANK1 ] unsigned char [16]
 29536 ;;  padded         16   48[BANK1 ] unsigned char [16]
 29537 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 29538 ;;  k1             16   16[BANK1 ] unsigned char [16]
 29539 ;;  k2             16    0[BANK1 ] unsigned char [16]
 29540 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 29541 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), macBuffer(271), 
 29542 ;;  i               1  101[BANK1 ] unsigned char 
 29543 ;;  j               1  100[BANK1 ] unsigned char 
 29544 ;;  n               1   99[BANK1 ] unsigned char 
 29545 ;;  flag            1   98[BANK1 ] unsigned char 
 29546 ;; Return value:  Size  Location     Type
 29547 ;;                  1    wreg      void 
 29548 ;; Registers used:
 29549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29550 ;; Tracked objects:
 29551 ;;		On entry : 0/0
 29552 ;;		On exit  : 0/0
 29553 ;;		Unchanged: 0/0
 29554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29555 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29556 ;;      Locals:         0       0     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29557 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29558 ;;      Totals:         0      14     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29559 ;;Total ram usage:      116 bytes
 29560 ;; Hardware stack levels used:    1
 29561 ;; Hardware stack levels required when called:   11
 29562 ;; This function calls:
 29563 ;;		_AESEncodeLoRa
 29564 ;;		_GenerateSubkey
 29565 ;;		_memcpy
 29566 ;;		_memset
 29567 ;; This function is called by:
 29568 ;;		_LORAWAN_RxDone
 29569 ;;		_AssemblePacket
 29570 ;;		_ComputeMic
 29571 ;; This function uses a non-reentrant model
 29572 ;;
 29573                           
 29574                           	psect	text143
 29575  0000'                    __ptext143:
 29576                           	opt stack 0
 29577  0000'                    _AESCmac:
 29578                           	opt stack 17
 29579                           
 29580                           ;lorawan_aes_cmac.c: 43: uint8_t n = 0, i = 0, j =0;
 29581                           
 29582                           ;incstack = 0
 29583  0000' 0E00               	movlw	0
 29584  0002' 0101               	movlb	1	; () banked
 29585  0004' 6F00'              	movwf	AESCmac@n& (0+255),b
 29586  0006' 0E00               	movlw	0
 29587  0008' 6F00'              	movwf	AESCmac@i& (0+255),b
 29588  000A' 0E00               	movlw	0
 29589  000C' 6F00'              	movwf	AESCmac@j& (0+255),b
 29590                           
 29591                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 29592  000E' 0E00               	movlw	0
 29593  0010' 6F00'              	movwf	AESCmac@flag& (0+255),b
 29594                           
 29595                           ; BSR set to: 1
 29596                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 29597                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 29598                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 29599  0012' 0E00               	movlw	0
 29600  0014' 6F00'              	movwf	AESCmac@ptr& (0+255),b
 29601  0016' 0E00               	movlw	0
 29602  0018' 6F00'              	movwf	(AESCmac@ptr+1)& (0+255),b
 29603                           
 29604                           ; BSR set to: 1
 29605                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 29606  001A' C059' F031'        	movff	AESCmac@key,GenerateSubkey@key
 29607  001E' C05A' F032'        	movff	AESCmac@key+1,GenerateSubkey@key+1
 29608  0022' 0E00'              	movlw	low AESCmac@k1
 29609  0024' 0100               	movlb	0	; () banked
 29610  0026' 6F00'              	movwf	GenerateSubkey@k1& (0+255),b
 29611  0028' 0E00'              	movlw	high AESCmac@k1
 29612  002A' 6F00'              	movwf	(GenerateSubkey@k1+1)& (0+255),b
 29613  002C' 0E00'              	movlw	low AESCmac@k2
 29614  002E' 6F00'              	movwf	GenerateSubkey@k2& (0+255),b
 29615  0030' 0E00'              	movlw	high AESCmac@k2
 29616  0032' 6F00'              	movwf	(GenerateSubkey@k2+1)& (0+255),b
 29617  0034' EC00' F000'        	call	_GenerateSubkey	;wreg free
 29618                           
 29619                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 29620  0038' 0100               	movlb	0	; () banked
 29621  003A' 5100'              	movf	AESCmac@size& (0+255),w,b
 29622  003C' 6F00'              	movwf	??_AESCmac& (0+255),b
 29623  003E' 6B00'              	clrf	(??_AESCmac+1)& (0+255),b
 29624  0040' 0E0F               	movlw	15
 29625  0042' 2700'              	addwf	??_AESCmac& (0+255),f,b
 29626  0044' 0E00               	movlw	0
 29627  0046' 2300'              	addwfc	(??_AESCmac+1)& (0+255),f,b
 29628  0048' 0E04               	movlw	4
 29629  004A' 6F00'              	movwf	(??_AESCmac+2)& (0+255),b
 29630  004C'                    u8465:
 29631  004C' 3500'              	rlcf	(??_AESCmac+1)& (0+255),w,b
 29632  004E' 3300'              	rrcf	(??_AESCmac+1)& (0+255),f,b
 29633  0050' 3300'              	rrcf	??_AESCmac& (0+255),f,b
 29634  0052' 2F00'              	decfsz	(??_AESCmac+2)& (0+255),f,b
 29635  0054' D7FB               	goto	u8465
 29636  0056' 5100'              	movf	??_AESCmac& (0+255),w,b
 29637  0058' 0101               	movlb	1	; () banked
 29638  005A' 6F00'              	movwf	AESCmac@n& (0+255),b
 29639                           
 29640                           ; BSR set to: 1
 29641                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 29642  005C' 5100'              	movf	AESCmac@n& (0+255),w,b
 29643  005E' A4D8               	btfss	status,2,c
 29644  0060' D004               	goto	l954
 29645                           
 29646                           ; BSR set to: 1
 29647                           ;lorawan_aes_cmac.c: 53: {
 29648                           ;lorawan_aes_cmac.c: 54: n = 1;
 29649  0062' 0E01               	movlw	1
 29650  0064' 6F00'              	movwf	AESCmac@n& (0+255),b
 29651                           
 29652                           ;lorawan_aes_cmac.c: 55: flag = 0;
 29653  0066' 0E00               	movlw	0
 29654  0068' D00B               	goto	L21
 29655  006A'                    l954:
 29656                           
 29657                           ; BSR set to: 1
 29658                           ;lorawan_aes_cmac.c: 57: else
 29659                           ;lorawan_aes_cmac.c: 58: {
 29660                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 29661                           
 29662                           ; BSR set to: 1
 29663  006A' C05F' F060'        	movff	AESCmac@size,??_AESCmac
 29664  006E' 0E0F               	movlw	15
 29665  0070' 0100               	movlb	0	; () banked
 29666  0072' 1700'              	andwf	??_AESCmac& (0+255),f,b
 29667  0074' A4D8               	btfss	status,2,c
 29668  0076' D002               	goto	u8480
 29669  0078' 0E01               	movlw	1
 29670  007A' D001               	goto	u8490
 29671  007C'                    u8480:
 29672  007C' 0E00               	movlw	0
 29673  007E'                    u8490:
 29674  007E' 0101               	movlb	1	; () banked
 29675  0080'                    L21:
 29676  0080' 6F00'              	movwf	AESCmac@flag& (0+255),b
 29677                           
 29678                           ; BSR set to: 1
 29679                           ;lorawan_aes_cmac.c: 60: }
 29680                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 29681  0082' 0500'              	decf	AESCmac@flag& (0+255),w,b
 29682  0084' A4D8               	btfss	status,2,c
 29683  0086' D048               	goto	l956
 29684                           
 29685                           ; BSR set to: 1
 29686                           ;lorawan_aes_cmac.c: 63: {
 29687                           ;lorawan_aes_cmac.c: 64: j = 0;
 29688  0088' 0E00               	movlw	0
 29689  008A' 6F00'              	movwf	AESCmac@j& (0+255),b
 29690                           
 29691                           ; BSR set to: 1
 29692                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 29693  008C' 3900'              	swapf	AESCmac@n& (0+255),w,b
 29694  008E' 0BF0               	andlw	240
 29695  0090' 0FF0               	addlw	240
 29696  0092' 6F00'              	movwf	AESCmac@i& (0+255),b
 29697  0094' D024               	goto	l957
 29698  0096'                    
 29699                           ;lorawan_aes_cmac.c: 66: {
 29700                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 29701                           
 29702                           ; BSR set to: 1
 29703  0096' 0101               	movlb	1	; () banked
 29704  0098' 5100'              	movf	AESCmac@j& (0+255),w,b
 29705  009A' 0D01               	mullw	1
 29706  009C' 0E00'              	movlw	low AESCmac@mLast
 29707  009E' 24F3               	addwf	prodl,w,c
 29708  00A0' 6ED9               	movwf	fsr2l,c
 29709  00A2' 0E00'              	movlw	high AESCmac@mLast
 29710  00A4' 20F4               	addwfc	prodh,w,c
 29711  00A6' 6EDA               	movwf	fsr2h,c
 29712  00A8' 5100'              	movf	AESCmac@j& (0+255),w,b
 29713  00AA' 0D01               	mullw	1
 29714  00AC' 0E00'              	movlw	low AESCmac@k1
 29715  00AE' 24F3               	addwf	prodl,w,c
 29716  00B0' 6EE9               	movwf	fsr0l,c
 29717  00B2' 0E00'              	movlw	high AESCmac@k1
 29718  00B4' 20F4               	addwfc	prodh,w,c
 29719  00B6' 6EEA               	movwf	fsr0h,c
 29720  00B8' 50EF               	movf	indf0,w,c
 29721  00BA' 0100               	movlb	0	; () banked
 29722  00BC' 6F00'              	movwf	??_AESCmac& (0+255),b
 29723  00BE' 0101               	movlb	1	; () banked
 29724  00C0' 5100'              	movf	AESCmac@i& (0+255),w,b
 29725  00C2' 0D01               	mullw	1
 29726  00C4' 50F3               	movf	prodl,w,c
 29727  00C6' 0100               	movlb	0	; () banked
 29728  00C8' 2500'              	addwf	AESCmac@input& (0+255),w,b
 29729  00CA' 6EE9               	movwf	fsr0l,c
 29730  00CC' 50F4               	movf	prodh,w,c
 29731  00CE' 2100'              	addwfc	(AESCmac@input+1)& (0+255),w,b
 29732  00D0' 6EEA               	movwf	fsr0h,c
 29733  00D2' 50EF               	movf	indf0,w,c
 29734  00D4' 1900'              	xorwf	??_AESCmac& (0+255),w,b
 29735  00D6' 6EDF               	movwf	indf2,c
 29736                           
 29737                           ; BSR set to: 0
 29738                           ;lorawan_aes_cmac.c: 68: j++;
 29739  00D8' 0101               	movlb	1	; () banked
 29740  00DA' 2B00'              	incf	AESCmac@j& (0+255),f,b
 29741                           
 29742                           ; BSR set to: 1
 29743  00DC' 2B00'              	incf	AESCmac@i& (0+255),f,b
 29744  00DE'                    l957:
 29745                           
 29746                           ; BSR set to: 1
 29747                           
 29748                           ; BSR set to: 1
 29749  00DE' 5100'              	movf	AESCmac@n& (0+255),w,b
 29750  00E0' 0100               	movlb	0	; () banked
 29751  00E2' 6F00'              	movwf	??_AESCmac& (0+255),b
 29752  00E4' 6B00'              	clrf	(??_AESCmac+1)& (0+255),b
 29753  00E6' 3B00'              	swapf	??_AESCmac& (0+255),f,b
 29754  00E8' 3B00'              	swapf	(??_AESCmac+1)& (0+255),f,b
 29755  00EA' 0EF0               	movlw	240
 29756  00EC' 1700'              	andwf	(??_AESCmac+1)& (0+255),f,b
 29757  00EE' 5100'              	movf	??_AESCmac& (0+255),w,b
 29758  00F0' 0B0F               	andlw	15
 29759  00F2' 1300'              	iorwf	(??_AESCmac+1)& (0+255),f,b
 29760  00F4' 0EF0               	movlw	240
 29761  00F6' 1700'              	andwf	??_AESCmac& (0+255),f,b
 29762  00F8' 0101               	movlb	1	; () banked
 29763  00FA' 5100'              	movf	AESCmac@i& (0+255),w,b
 29764  00FC' 0100               	movlb	0	; () banked
 29765  00FE' 6F00'              	movwf	(??_AESCmac+2)& (0+255),b
 29766  0100' 6B00'              	clrf	(??_AESCmac+3)& (0+255),b
 29767  0102' 5100'              	movf	??_AESCmac& (0+255),w,b
 29768  0104' 5D00'              	subwf	(??_AESCmac+2)& (0+255),w,b
 29769  0106' 5100'              	movf	(??_AESCmac+3)& (0+255),w,b
 29770  0108' 0A80               	xorlw	128
 29771  010A' 6F00'              	movwf	(??_AESCmac+4)& (0+255),b
 29772  010C' 5100'              	movf	(??_AESCmac+1)& (0+255),w,b
 29773  010E' 0A80               	xorlw	128
 29774  0110' 5900'              	subwfb	(??_AESCmac+4)& (0+255),w,b
 29775  0112' B0D8               	btfsc	status,0,c
 29776  0114' D07F               	goto	u8570
 29777  0116' D7BF               	goto	l958
 29778  0118'                    l956:
 29779                           
 29780                           ;lorawan_aes_cmac.c: 71: else
 29781                           ;lorawan_aes_cmac.c: 72: {
 29782                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 29783                           
 29784                           ; BSR set to: 0
 29785  0118' 0100               	movlb	0	; () banked
 29786  011A' 5100'              	movf	AESCmac@size& (0+255),w,b
 29787  011C' 0B0F               	andlw	15
 29788  011E' 6F00'              	movwf	??_AESCmac& (0+255),b
 29789  0120' 6B00'              	clrf	(??_AESCmac+1)& (0+255),b
 29790  0122' 1F00'              	comf	??_AESCmac& (0+255),f,b
 29791  0124' 1F00'              	comf	(??_AESCmac+1)& (0+255),f,b
 29792  0126' 4B00'              	infsnz	??_AESCmac& (0+255),f,b
 29793  0128' 2B00'              	incf	(??_AESCmac+1)& (0+255),f,b
 29794  012A' 5100'              	movf	AESCmac@size& (0+255),w,b
 29795  012C' 6F00'              	movwf	(??_AESCmac+2)& (0+255),b
 29796  012E' 6B00'              	clrf	(??_AESCmac+3)& (0+255),b
 29797  0130' 5100'              	movf	??_AESCmac& (0+255),w,b
 29798  0132' 2700'              	addwf	(??_AESCmac+2)& (0+255),f,b
 29799  0134' 5100'              	movf	(??_AESCmac+1)& (0+255),w,b
 29800  0136' 2300'              	addwfc	(??_AESCmac+3)& (0+255),f,b
 29801  0138' 5100'              	movf	(??_AESCmac+2)& (0+255),w,b
 29802  013A' 2500'              	addwf	AESCmac@input& (0+255),w,b
 29803  013C' 0101               	movlb	1	; () banked
 29804  013E' 6F00'              	movwf	AESCmac@ptr& (0+255),b
 29805  0140' 0100               	movlb	0	; () banked
 29806  0142' 5100'              	movf	(??_AESCmac+3)& (0+255),w,b
 29807  0144' 2100'              	addwfc	(AESCmac@input+1)& (0+255),w,b
 29808  0146' 0101               	movlb	1	; () banked
 29809  0148' 6F00'              	movwf	(AESCmac@ptr+1)& (0+255),b
 29810                           
 29811                           ; BSR set to: 1
 29812                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 29813  014A' 0E00               	movlw	0
 29814  014C' 6F00'              	movwf	AESCmac@i& (0+255),b
 29815  014E'                    l9182:
 29816                           
 29817                           ; BSR set to: 1
 29818  014E' 0E0F               	movlw	15
 29819  0150' 6500'              	cpfsgt	AESCmac@i& (0+255),b
 29820  0152' D001               	goto	l961
 29821  0154' D036               	goto	u8550
 29822  0156'                    l961:
 29823                           
 29824                           ; BSR set to: 1
 29825                           ;lorawan_aes_cmac.c: 76: {
 29826                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 29827                           
 29828                           ; BSR set to: 1
 29829  0156' 0100               	movlb	0	; () banked
 29830  0158' 5100'              	movf	AESCmac@size& (0+255),w,b
 29831  015A' 0B0F               	andlw	15
 29832  015C' 0101               	movlb	1	; () banked
 29833  015E' 6100'              	cpfslt	AESCmac@i& (0+255),b
 29834  0160' D013               	goto	l963
 29835                           
 29836                           ; BSR set to: 1
 29837                           ;lorawan_aes_cmac.c: 78: {
 29838                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 29839  0162' 5100'              	movf	AESCmac@i& (0+255),w,b
 29840  0164' 0D01               	mullw	1
 29841  0166' 50F3               	movf	prodl,w,c
 29842  0168' 2500'              	addwf	AESCmac@ptr& (0+255),w,b
 29843  016A' 6ED9               	movwf	fsr2l,c
 29844  016C' 50F4               	movf	prodh,w,c
 29845  016E' 2100'              	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 29846  0170' 6EDA               	movwf	fsr2h,c
 29847  0172' 5100'              	movf	AESCmac@i& (0+255),w,b
 29848  0174' 0D01               	mullw	1
 29849  0176' 0E00'              	movlw	low AESCmac@padded
 29850  0178' 24F3               	addwf	prodl,w,c
 29851  017A' 6EE9               	movwf	fsr0l,c
 29852  017C' 0E00'              	movlw	high AESCmac@padded
 29853  017E' 20F4               	addwfc	prodh,w,c
 29854  0180' 6EEA               	movwf	fsr0h,c
 29855  0182' CFDF FFEF          	movff	indf2,indf0
 29856                           
 29857                           ;lorawan_aes_cmac.c: 80: }
 29858  0186' D01B               	goto	l966
 29859  0188'                    l963:
 29860                           
 29861                           ; BSR set to: 1
 29862                           ;lorawan_aes_cmac.c: 81: else
 29863                           ;lorawan_aes_cmac.c: 82: {
 29864                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 29865                           
 29866                           ; BSR set to: 1
 29867  0188' 0100               	movlb	0	; () banked
 29868  018A' 5100'              	movf	AESCmac@size& (0+255),w,b
 29869  018C' 0B0F               	andlw	15
 29870  018E' 0101               	movlb	1	; () banked
 29871  0190' 1900'              	xorwf	AESCmac@i& (0+255),w,b
 29872  0192' A4D8               	btfss	status,2,c
 29873  0194' D00A               	goto	l965
 29874                           
 29875                           ; BSR set to: 1
 29876                           ;lorawan_aes_cmac.c: 84: {
 29877                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 29878  0196' 5100'              	movf	AESCmac@i& (0+255),w,b
 29879  0198' 0D01               	mullw	1
 29880  019A' 0E00'              	movlw	low AESCmac@padded
 29881  019C' 24F3               	addwf	prodl,w,c
 29882  019E' 6ED9               	movwf	fsr2l,c
 29883  01A0' 0E00'              	movlw	high AESCmac@padded
 29884  01A2' 20F4               	addwfc	prodh,w,c
 29885  01A4' 6EDA               	movwf	fsr2h,c
 29886  01A6' 0E80               	movlw	128
 29887  01A8' D009               	goto	L22
 29888  01AA'                    l965:
 29889                           
 29890                           ; BSR set to: 1
 29891                           ;lorawan_aes_cmac.c: 87: else
 29892                           ;lorawan_aes_cmac.c: 88: {
 29893                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 29894                           
 29895                           ; BSR set to: 1
 29896  01AA' 5100'              	movf	AESCmac@i& (0+255),w,b
 29897  01AC' 0D01               	mullw	1
 29898  01AE' 0E00'              	movlw	low AESCmac@padded
 29899  01B0' 24F3               	addwf	prodl,w,c
 29900  01B2' 6ED9               	movwf	fsr2l,c
 29901  01B4' 0E00'              	movlw	high AESCmac@padded
 29902  01B6' 20F4               	addwfc	prodh,w,c
 29903  01B8' 6EDA               	movwf	fsr2h,c
 29904  01BA' 0E00               	movlw	0
 29905  01BC'                    L22:
 29906  01BC' 6EDF               	movwf	indf2,c
 29907  01BE'                    l966:
 29908                           
 29909                           ; BSR set to: 1
 29910                           
 29911                           ; BSR set to: 1
 29912                           
 29913                           ; BSR set to: 1
 29914  01BE' 2B00'              	incf	AESCmac@i& (0+255),f,b
 29915  01C0' D7C6               	goto	l9182
 29916  01C2'                    u8550:
 29917                           
 29918                           ; BSR set to: 1
 29919                           ;lorawan_aes_cmac.c: 90: }
 29920                           ;lorawan_aes_cmac.c: 91: }
 29921                           ;lorawan_aes_cmac.c: 92: }
 29922                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 29923                           
 29924                           ; BSR set to: 1
 29925  01C2' 0E00               	movlw	0
 29926  01C4' 6F00'              	movwf	AESCmac@i& (0+255),b
 29927  01C6'                    l9202:
 29928                           
 29929                           ; BSR set to: 1
 29930  01C6' 0E0F               	movlw	15
 29931  01C8' 6500'              	cpfsgt	AESCmac@i& (0+255),b
 29932  01CA' D001               	goto	l967
 29933  01CC' D023               	goto	u8570
 29934  01CE'                    l967:
 29935                           
 29936                           ; BSR set to: 1
 29937                           ;lorawan_aes_cmac.c: 96: {
 29938                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 29939                           
 29940                           ; BSR set to: 1
 29941  01CE' 5100'              	movf	AESCmac@i& (0+255),w,b
 29942  01D0' 0D01               	mullw	1
 29943  01D2' 0E00'              	movlw	low AESCmac@mLast
 29944  01D4' 24F3               	addwf	prodl,w,c
 29945  01D6' 6ED9               	movwf	fsr2l,c
 29946  01D8' 0E00'              	movlw	high AESCmac@mLast
 29947  01DA' 20F4               	addwfc	prodh,w,c
 29948  01DC' 6EDA               	movwf	fsr2h,c
 29949  01DE' 5100'              	movf	AESCmac@i& (0+255),w,b
 29950  01E0' 0D01               	mullw	1
 29951  01E2' 0E00'              	movlw	low AESCmac@k2
 29952  01E4' 24F3               	addwf	prodl,w,c
 29953  01E6' 6EE9               	movwf	fsr0l,c
 29954  01E8' 0E00'              	movlw	high AESCmac@k2
 29955  01EA' 20F4               	addwfc	prodh,w,c
 29956  01EC' 6EEA               	movwf	fsr0h,c
 29957  01EE' 50EF               	movf	indf0,w,c
 29958  01F0' 0100               	movlb	0	; () banked
 29959  01F2' 6F00'              	movwf	??_AESCmac& (0+255),b
 29960  01F4' 0101               	movlb	1	; () banked
 29961  01F6' 5100'              	movf	AESCmac@i& (0+255),w,b
 29962  01F8' 0D01               	mullw	1
 29963  01FA' 0E00'              	movlw	low AESCmac@padded
 29964  01FC' 24F3               	addwf	prodl,w,c
 29965  01FE' 6EE9               	movwf	fsr0l,c
 29966  0200' 0E00'              	movlw	high AESCmac@padded
 29967  0202' 20F4               	addwfc	prodh,w,c
 29968  0204' 6EEA               	movwf	fsr0h,c
 29969  0206' 50EF               	movf	indf0,w,c
 29970  0208' 0100               	movlb	0	; () banked
 29971  020A' 1900'              	xorwf	??_AESCmac& (0+255),w,b
 29972  020C' 6EDF               	movwf	indf2,c
 29973                           
 29974                           ; BSR set to: 0
 29975  020E' 0101               	movlb	1	; () banked
 29976  0210' 2B00'              	incf	AESCmac@i& (0+255),f,b
 29977  0212' D7D9               	goto	l9202
 29978  0214'                    u8570:
 29979                           
 29980                           ;lorawan_aes_cmac.c: 98: }
 29981                           ;lorawan_aes_cmac.c: 99: }
 29982                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 29983                           
 29984                           ; BSR set to: 1
 29985                           
 29986                           ; BSR set to: 1
 29987  0214' 0E00'              	movlw	low AESCmac@x
 29988  0216' 0100               	movlb	0	; () banked
 29989  0218' 6F00'              	movwf	memset@p1& (0+255),b
 29990  021A' 0E00'              	movlw	high AESCmac@x
 29991  021C' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 29992  021E' 0E00               	movlw	0
 29993  0220' 6F00'              	movwf	(memset@c+1)& (0+255),b
 29994  0222' 0E00               	movlw	0
 29995  0224' 6F00'              	movwf	memset@c& (0+255),b
 29996  0226' 0E00               	movlw	0
 29997  0228' 6F00'              	movwf	(memset@n+1)& (0+255),b
 29998  022A' 0E10               	movlw	16
 29999  022C' 6F00'              	movwf	memset@n& (0+255),b
 30000  022E' EC00' F000'        	call	_memset	;wreg free
 30001                           
 30002                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 30003  0232' 0E00               	movlw	0
 30004  0234' 0101               	movlb	1	; () banked
 30005  0236' 6F00'              	movwf	AESCmac@i& (0+255),b
 30006  0238' D056               	goto	l969
 30007  023A'                    
 30008                           ;lorawan_aes_cmac.c: 104: {
 30009                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 30010                           
 30011                           ; BSR set to: 1
 30012  023A' 0E00               	movlw	0
 30013  023C' 0101               	movlb	1	; () banked
 30014  023E' 6F00'              	movwf	AESCmac@j& (0+255),b
 30015  0240'                    l9218:
 30016                           
 30017                           ; BSR set to: 1
 30018  0240' 0E0F               	movlw	15
 30019  0242' 6500'              	cpfsgt	AESCmac@j& (0+255),b
 30020  0244' D001               	goto	l971
 30021  0246' D033               	goto	u8590
 30022  0248'                    l971:
 30023                           
 30024                           ; BSR set to: 1
 30025                           ;lorawan_aes_cmac.c: 106: {
 30026                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 30027                           
 30028                           ; BSR set to: 1
 30029  0248' 5100'              	movf	AESCmac@j& (0+255),w,b
 30030  024A' 0D01               	mullw	1
 30031  024C' 0E00'              	movlw	low AESCmac@y
 30032  024E' 24F3               	addwf	prodl,w,c
 30033  0250' 6ED9               	movwf	fsr2l,c
 30034  0252' 0E00'              	movlw	high AESCmac@y
 30035  0254' 20F4               	addwfc	prodh,w,c
 30036  0256' 6EDA               	movwf	fsr2h,c
 30037  0258' 5100'              	movf	AESCmac@i& (0+255),w,b
 30038  025A' 0100               	movlb	0	; () banked
 30039  025C' 6F00'              	movwf	??_AESCmac& (0+255),b
 30040  025E' 6B00'              	clrf	(??_AESCmac+1)& (0+255),b
 30041  0260' 3B00'              	swapf	??_AESCmac& (0+255),f,b
 30042  0262' 3B00'              	swapf	(??_AESCmac+1)& (0+255),f,b
 30043  0264' 0EF0               	movlw	240
 30044  0266' 1700'              	andwf	(??_AESCmac+1)& (0+255),f,b
 30045  0268' 5100'              	movf	??_AESCmac& (0+255),w,b
 30046  026A' 0B0F               	andlw	15
 30047  026C' 1300'              	iorwf	(??_AESCmac+1)& (0+255),f,b
 30048  026E' 0EF0               	movlw	240
 30049  0270' 1700'              	andwf	??_AESCmac& (0+255),f,b
 30050  0272' 0101               	movlb	1	; () banked
 30051  0274' 5100'              	movf	AESCmac@j& (0+255),w,b
 30052  0276' 0100               	movlb	0	; () banked
 30053  0278' 2700'              	addwf	??_AESCmac& (0+255),f,b
 30054  027A' 0E00               	movlw	0
 30055  027C' 2300'              	addwfc	(??_AESCmac+1)& (0+255),f,b
 30056  027E' 5100'              	movf	??_AESCmac& (0+255),w,b
 30057  0280' 2500'              	addwf	AESCmac@input& (0+255),w,b
 30058  0282' 6EE9               	movwf	fsr0l,c
 30059  0284' 5100'              	movf	(??_AESCmac+1)& (0+255),w,b
 30060  0286' 2100'              	addwfc	(AESCmac@input+1)& (0+255),w,b
 30061  0288' 6EEA               	movwf	fsr0h,c
 30062  028A' 50EF               	movf	indf0,w,c
 30063  028C' 6F00'              	movwf	(??_AESCmac+2)& (0+255),b
 30064  028E' 0101               	movlb	1	; () banked
 30065  0290' 5100'              	movf	AESCmac@j& (0+255),w,b
 30066  0292' 0D01               	mullw	1
 30067  0294' 0E00'              	movlw	low AESCmac@x
 30068  0296' 24F3               	addwf	prodl,w,c
 30069  0298' 6EE9               	movwf	fsr0l,c
 30070  029A' 0E00'              	movlw	high AESCmac@x
 30071  029C' 20F4               	addwfc	prodh,w,c
 30072  029E' 6EEA               	movwf	fsr0h,c
 30073  02A0' 50EF               	movf	indf0,w,c
 30074  02A2' 0100               	movlb	0	; () banked
 30075  02A4' 1900'              	xorwf	(??_AESCmac+2)& (0+255),w,b
 30076  02A6' 6EDF               	movwf	indf2,c
 30077                           
 30078                           ; BSR set to: 0
 30079  02A8' 0101               	movlb	1	; () banked
 30080  02AA' 2B00'              	incf	AESCmac@j& (0+255),f,b
 30081  02AC' D7C9               	goto	l9218
 30082  02AE'                    u8590:
 30083                           
 30084                           ; BSR set to: 1
 30085                           ;lorawan_aes_cmac.c: 108: }
 30086                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 30087                           
 30088                           ; BSR set to: 1
 30089  02AE' 0E00'              	movlw	low AESCmac@x
 30090  02B0' 0100               	movlb	0	; () banked
 30091  02B2' 6F00'              	movwf	memcpy@d1& (0+255),b
 30092  02B4' 0E00'              	movlw	high AESCmac@x
 30093  02B6' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 30094  02B8' 0E00'              	movlw	low AESCmac@y
 30095  02BA' 6F00'              	movwf	memcpy@s1& (0+255),b
 30096  02BC' 0E00'              	movlw	high AESCmac@y
 30097  02BE' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 30098  02C0' 0E00               	movlw	0
 30099  02C2' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 30100  02C4' 0E10               	movlw	16
 30101  02C6' 6F00'              	movwf	memcpy@n& (0+255),b
 30102  02C8' EC00' F000'        	call	_memcpy	;wreg free
 30103                           
 30104                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 30105  02CC' 0E00'              	movlw	low AESCmac@x
 30106  02CE' 0100               	movlb	0	; () banked
 30107  02D0' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 30108  02D2' 0E00'              	movlw	high AESCmac@x
 30109  02D4' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 30110  02D6' C059' F01F'        	movff	AESCmac@key,AESEncodeLoRa@key
 30111  02DA' C05A' F020'        	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 30112  02DE' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 30113  02E2' 0101               	movlb	1	; () banked
 30114  02E4' 2B00'              	incf	AESCmac@i& (0+255),f,b
 30115  02E6'                    l969:
 30116                           
 30117                           ; BSR set to: 1
 30118                           
 30119                           ; BSR set to: 1
 30120  02E6' 0EFF               	movlw	255
 30121  02E8' 0100               	movlb	0	; () banked
 30122  02EA' 6F00'              	movwf	??_AESCmac& (0+255),b
 30123  02EC' 0EFF               	movlw	255
 30124  02EE' 6F00'              	movwf	(??_AESCmac+1)& (0+255),b
 30125  02F0' 0101               	movlb	1	; () banked
 30126  02F2' 5100'              	movf	AESCmac@n& (0+255),w,b
 30127  02F4' 0100               	movlb	0	; () banked
 30128  02F6' 6F00'              	movwf	(??_AESCmac+2)& (0+255),b
 30129  02F8' 6B00'              	clrf	(??_AESCmac+3)& (0+255),b
 30130  02FA' 5100'              	movf	??_AESCmac& (0+255),w,b
 30131  02FC' 2700'              	addwf	(??_AESCmac+2)& (0+255),f,b
 30132  02FE' 5100'              	movf	(??_AESCmac+1)& (0+255),w,b
 30133  0300' 2300'              	addwfc	(??_AESCmac+3)& (0+255),f,b
 30134  0302' 0101               	movlb	1	; () banked
 30135  0304' 5100'              	movf	AESCmac@i& (0+255),w,b
 30136  0306' 0100               	movlb	0	; () banked
 30137  0308' 6F00'              	movwf	(??_AESCmac+4)& (0+255),b
 30138  030A' 6B00'              	clrf	(??_AESCmac+5)& (0+255),b
 30139  030C' 5100'              	movf	(??_AESCmac+2)& (0+255),w,b
 30140  030E' 5D00'              	subwf	(??_AESCmac+4)& (0+255),w,b
 30141  0310' 5100'              	movf	(??_AESCmac+5)& (0+255),w,b
 30142  0312' 0A80               	xorlw	128
 30143  0314' 6F00'              	movwf	(??_AESCmac+6)& (0+255),b
 30144  0316' 5100'              	movf	(??_AESCmac+3)& (0+255),w,b
 30145  0318' 0A80               	xorlw	128
 30146  031A' 5900'              	subwfb	(??_AESCmac+6)& (0+255),w,b
 30147  031C' A0D8               	btfss	status,0,c
 30148  031E' D78D               	goto	l970
 30149                           
 30150                           ; BSR set to: 0
 30151                           ;lorawan_aes_cmac.c: 111: }
 30152                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 30153                           
 30154                           ; BSR set to: 0
 30155  0320' 0E00               	movlw	0
 30156  0322' 0101               	movlb	1	; () banked
 30157  0324' 6F00'              	movwf	AESCmac@i& (0+255),b
 30158  0326'                    l9238:
 30159                           
 30160                           ; BSR set to: 1
 30161  0326' 0E0F               	movlw	15
 30162  0328' 6500'              	cpfsgt	AESCmac@i& (0+255),b
 30163  032A' D001               	goto	l974
 30164  032C' D023               	goto	u8620
 30165  032E'                    l974:
 30166                           
 30167                           ; BSR set to: 1
 30168                           ;lorawan_aes_cmac.c: 114: {
 30169                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 30170                           
 30171                           ; BSR set to: 1
 30172  032E' 5100'              	movf	AESCmac@i& (0+255),w,b
 30173  0330' 0D01               	mullw	1
 30174  0332' 0E00'              	movlw	low AESCmac@y
 30175  0334' 24F3               	addwf	prodl,w,c
 30176  0336' 6ED9               	movwf	fsr2l,c
 30177  0338' 0E00'              	movlw	high AESCmac@y
 30178  033A' 20F4               	addwfc	prodh,w,c
 30179  033C' 6EDA               	movwf	fsr2h,c
 30180  033E' 5100'              	movf	AESCmac@i& (0+255),w,b
 30181  0340' 0D01               	mullw	1
 30182  0342' 0E00'              	movlw	low AESCmac@mLast
 30183  0344' 24F3               	addwf	prodl,w,c
 30184  0346' 6EE9               	movwf	fsr0l,c
 30185  0348' 0E00'              	movlw	high AESCmac@mLast
 30186  034A' 20F4               	addwfc	prodh,w,c
 30187  034C' 6EEA               	movwf	fsr0h,c
 30188  034E' 50EF               	movf	indf0,w,c
 30189  0350' 0100               	movlb	0	; () banked
 30190  0352' 6F00'              	movwf	??_AESCmac& (0+255),b
 30191  0354' 0101               	movlb	1	; () banked
 30192  0356' 5100'              	movf	AESCmac@i& (0+255),w,b
 30193  0358' 0D01               	mullw	1
 30194  035A' 0E00'              	movlw	low AESCmac@x
 30195  035C' 24F3               	addwf	prodl,w,c
 30196  035E' 6EE9               	movwf	fsr0l,c
 30197  0360' 0E00'              	movlw	high AESCmac@x
 30198  0362' 20F4               	addwfc	prodh,w,c
 30199  0364' 6EEA               	movwf	fsr0h,c
 30200  0366' 50EF               	movf	indf0,w,c
 30201  0368' 0100               	movlb	0	; () banked
 30202  036A' 1900'              	xorwf	??_AESCmac& (0+255),w,b
 30203  036C' 6EDF               	movwf	indf2,c
 30204                           
 30205                           ; BSR set to: 0
 30206  036E' 0101               	movlb	1	; () banked
 30207  0370' 2B00'              	incf	AESCmac@i& (0+255),f,b
 30208  0372' D7D9               	goto	l9238
 30209  0374'                    u8620:
 30210                           
 30211                           ; BSR set to: 1
 30212                           ;lorawan_aes_cmac.c: 116: }
 30213                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 30214                           
 30215                           ; BSR set to: 1
 30216  0374' 0E00'              	movlw	low AESCmac@y
 30217  0376' 0100               	movlb	0	; () banked
 30218  0378' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 30219  037A' 0E00'              	movlw	high AESCmac@y
 30220  037C' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 30221  037E' C059' F01F'        	movff	AESCmac@key,AESEncodeLoRa@key
 30222  0382' C05A' F020'        	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 30223  0386' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 30224                           
 30225                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 30226  038A' C05B' F000'        	movff	AESCmac@output,memcpy@d1
 30227  038E' C05C' F001'        	movff	AESCmac@output+1,memcpy@d1+1
 30228  0392' 0E00'              	movlw	low AESCmac@y
 30229  0394' 0100               	movlb	0	; () banked
 30230  0396' 6F00'              	movwf	memcpy@s1& (0+255),b
 30231  0398' 0E00'              	movlw	high AESCmac@y
 30232  039A' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 30233  039C' 0E00               	movlw	0
 30234  039E' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 30235  03A0' 0E10               	movlw	16
 30236  03A2' 6F00'              	movwf	memcpy@n& (0+255),b
 30237  03A4' EC00' F000'        	call	_memcpy	;wreg free
 30238  03A8' 0012               	return		;funcret
 30239  03AA'                    __end_of_AESCmac:
 30240                           	opt stack 0
 30241                           tosu	equ	0xFFF
 30242                           tosh	equ	0xFFE
 30243                           tosl	equ	0xFFD
 30244                           pclath	equ	0xFFA
 30245                           tblptru	equ	0xFF8
 30246                           tblptrh	equ	0xFF7
 30247                           tblptrl	equ	0xFF6
 30248                           tablat	equ	0xFF5
 30249                           prodh	equ	0xFF4
 30250                           prodl	equ	0xFF3
 30251                           intcon	equ	0xFF2
 30252                           intcon2	equ	0xFF1
 30253                           intcon3	equ	0xFF0
 30254                           indf0	equ	0xFEF
 30255                           postinc0	equ	0xFEE
 30256                           fsr0h	equ	0xFEA
 30257                           fsr0l	equ	0xFE9
 30258                           wreg	equ	0xFE8
 30259                           postinc1	equ	0xFE6
 30260                           postdec1	equ	0xFE5
 30261                           plusw1	equ	0xFE3
 30262                           fsr1h	equ	0xFE2
 30263                           fsr1l	equ	0xFE1
 30264                           indf2	equ	0xFDF
 30265                           postinc2	equ	0xFDE
 30266                           postdec2	equ	0xFDD
 30267                           plusw2	equ	0xFDB
 30268                           fsr2h	equ	0xFDA
 30269                           fsr2l	equ	0xFD9
 30270                           status	equ	0xFD8
 30271                           
 30272 ;; *************** function _GenerateSubkey *****************
 30273 ;; Defined at:
 30274 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 30275 ;; Parameters:    Size  Location     Type
 30276 ;;  key             2   49[BANK0 ] PTR unsigned char 
 30277 ;;		 -> loRa.activationParameters(105), loRa(231), 
 30278 ;;  k1              2   51[BANK0 ] PTR unsigned char 
 30279 ;;		 -> AESCmac@k1(16), 
 30280 ;;  k2              2   53[BANK0 ] PTR unsigned char 
 30281 ;;		 -> AESCmac@k2(16), 
 30282 ;; Auto vars:     Size  Location     Type
 30283 ;;  l              16   72[BANK0 ] unsigned char [16]
 30284 ;;  const_Rb       16   56[BANK0 ] unsigned char [16]
 30285 ;;  i               1   88[BANK0 ] unsigned char 
 30286 ;; Return value:  Size  Location     Type
 30287 ;;                  1    wreg      void 
 30288 ;; Registers used:
 30289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30290 ;; Tracked objects:
 30291 ;;		On entry : 0/0
 30292 ;;		On exit  : 0/0
 30293 ;;		Unchanged: 0/0
 30294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30295 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30296 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30298 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30299 ;;Total ram usage:       40 bytes
 30300 ;; Hardware stack levels used:    1
 30301 ;; Hardware stack levels required when called:   10
 30302 ;; This function calls:
 30303 ;;		_AESEncodeLoRa
 30304 ;;		_FillSubKey
 30305 ;;		_memset
 30306 ;; This function is called by:
 30307 ;;		_AESCmac
 30308 ;; This function uses a non-reentrant model
 30309 ;;
 30310                           
 30311                           	psect	text144
 30312  0000'                    __ptext144:
 30313                           	opt stack 0
 30314  0000'                    _GenerateSubkey:
 30315                           	opt stack 17
 30316                           
 30317                           ;lorawan_aes_cmac.c: 126: uint8_t i = 0;
 30318                           
 30319                           ;incstack = 0
 30320  0000' 0E00               	movlw	0
 30321  0002' 0100               	movlb	0	; () banked
 30322  0004' 6F00'              	movwf	GenerateSubkey@i& (0+255),b
 30323                           
 30324                           ; BSR set to: 0
 30325                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 30326                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 30327                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 30328  0006' EE20' F000'        	lfsr	2,GenerateSubkey@F7103
 30329  000A' EE00' F000'        	lfsr	0,GenerateSubkey@const_Rb
 30330  000E' 0E0F               	movlw	15
 30331  0010'                    u7701:
 30332  0010' CFDB FFEB          	movff	plusw2,plusw0
 30333  0014' 06E8               	decf	wreg,f,c
 30334  0016' E2FC               	bc	u7701
 30335                           
 30336                           ; BSR set to: 0
 30337                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 30338  0018' 0E00'              	movlw	low GenerateSubkey@l
 30339  001A' 6F00'              	movwf	memset@p1& (0+255),b
 30340  001C' 0E00'              	movlw	high GenerateSubkey@l
 30341  001E' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 30342  0020' 0E00               	movlw	0
 30343  0022' 6F00'              	movwf	(memset@c+1)& (0+255),b
 30344  0024' 0E00               	movlw	0
 30345  0026' 6F00'              	movwf	memset@c& (0+255),b
 30346  0028' 0E00               	movlw	0
 30347  002A' 6F00'              	movwf	(memset@n+1)& (0+255),b
 30348  002C' 0E10               	movlw	16
 30349  002E' 6F00'              	movwf	memset@n& (0+255),b
 30350  0030' EC00' F000'        	call	_memset	;wreg free
 30351                           
 30352                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 30353  0034' 0E00'              	movlw	low GenerateSubkey@l
 30354  0036' 0100               	movlb	0	; () banked
 30355  0038' 6F00'              	movwf	AESEncodeLoRa@block& (0+255),b
 30356  003A' 0E00'              	movlw	high GenerateSubkey@l
 30357  003C' 6F00'              	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 30358  003E' C031' F01F'        	movff	GenerateSubkey@key,AESEncodeLoRa@key
 30359  0042' C032' F020'        	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 30360  0046' EC00' F000'        	call	_AESEncodeLoRa	;wreg free
 30361                           
 30362                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 30363  004A' 0100               	movlb	0	; () banked
 30364  004C' BF00'              	btfsc	GenerateSubkey@l& (0+255),7,b
 30365  004E' D00D               	goto	l981
 30366                           
 30367                           ; BSR set to: 0
 30368                           ;lorawan_aes_cmac.c: 138: {
 30369                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 30370  0050' 0E00'              	movlw	low GenerateSubkey@l
 30371  0052' 6F00'              	movwf	FillSubKey@source& (0+255),b
 30372  0054' 0E00'              	movlw	high GenerateSubkey@l
 30373  0056' 6F00'              	movwf	(FillSubKey@source+1)& (0+255),b
 30374  0058' C033' F002'        	movff	GenerateSubkey@k1,FillSubKey@key
 30375  005C' C034' F003'        	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 30376  0060' 0E10               	movlw	16
 30377  0062' 6F00'              	movwf	FillSubKey@size& (0+255),b
 30378  0064' EC00' F000'        	call	_FillSubKey	;wreg free
 30379                           
 30380                           ;lorawan_aes_cmac.c: 140: }
 30381  0068' D02A               	goto	u7730
 30382  006A'                    l981:
 30383                           
 30384                           ;lorawan_aes_cmac.c: 141: else
 30385                           ;lorawan_aes_cmac.c: 142: {
 30386                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 30387  006A' 0E00'              	movlw	low GenerateSubkey@l
 30388  006C' 0100               	movlb	0	; () banked
 30389  006E' 6F00'              	movwf	FillSubKey@source& (0+255),b
 30390  0070' 0E00'              	movlw	high GenerateSubkey@l
 30391  0072' 6F00'              	movwf	(FillSubKey@source+1)& (0+255),b
 30392  0074' C033' F002'        	movff	GenerateSubkey@k1,FillSubKey@key
 30393  0078' C034' F003'        	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 30394  007C' 0E10               	movlw	16
 30395  007E' 6F00'              	movwf	FillSubKey@size& (0+255),b
 30396  0080' EC00' F000'        	call	_FillSubKey	;wreg free
 30397                           
 30398                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 30399  0084' 0E00               	movlw	0
 30400  0086' 0100               	movlb	0	; () banked
 30401  0088' 6F00'              	movwf	GenerateSubkey@i& (0+255),b
 30402  008A'                    l8714:
 30403                           
 30404                           ; BSR set to: 0
 30405  008A' 0E0F               	movlw	15
 30406  008C' 6500'              	cpfsgt	GenerateSubkey@i& (0+255),b
 30407  008E' D001               	goto	l983
 30408  0090' D016               	goto	u7730
 30409  0092'                    l983:
 30410                           
 30411                           ; BSR set to: 0
 30412                           ;lorawan_aes_cmac.c: 146: {
 30413                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 30414                           
 30415                           ; BSR set to: 0
 30416  0092' 5100'              	movf	GenerateSubkey@i& (0+255),w,b
 30417  0094' 0D01               	mullw	1
 30418  0096' 0E00'              	movlw	low GenerateSubkey@const_Rb
 30419  0098' 24F3               	addwf	prodl,w,c
 30420  009A' 6ED9               	movwf	fsr2l,c
 30421  009C' 0E00'              	movlw	high GenerateSubkey@const_Rb
 30422  009E' 20F4               	addwfc	prodh,w,c
 30423  00A0' 6EDA               	movwf	fsr2h,c
 30424  00A2' 50DF               	movf	indf2,w,c
 30425  00A4' 6F00'              	movwf	??_GenerateSubkey& (0+255),b
 30426  00A6' 5100'              	movf	GenerateSubkey@i& (0+255),w,b
 30427  00A8' 0D01               	mullw	1
 30428  00AA' 50F3               	movf	prodl,w,c
 30429  00AC' 2500'              	addwf	GenerateSubkey@k1& (0+255),w,b
 30430  00AE' 6ED9               	movwf	fsr2l,c
 30431  00B0' 50F4               	movf	prodh,w,c
 30432  00B2' 2100'              	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 30433  00B4' 6EDA               	movwf	fsr2h,c
 30434  00B6' 5100'              	movf	??_GenerateSubkey& (0+255),w,b
 30435  00B8' 1ADF               	xorwf	indf2,f,c
 30436                           
 30437                           ; BSR set to: 0
 30438  00BA' 2B00'              	incf	GenerateSubkey@i& (0+255),f,b
 30439  00BC' D7E6               	goto	l8714
 30440  00BE'                    u7730:
 30441                           
 30442                           ;lorawan_aes_cmac.c: 148: }
 30443                           ;lorawan_aes_cmac.c: 149: }
 30444                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 30445                           
 30446                           ; BSR set to: 0
 30447                           
 30448                           ; BSR set to: 0
 30449  00BE' C033' FFD9         	movff	GenerateSubkey@k1,fsr2l
 30450  00C2' C034' FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 30451  00C6' 0100               	movlb	0	; () banked
 30452  00C8' BEDF               	btfsc	indf2,7,c
 30453  00CA' D00D               	goto	l985
 30454                           
 30455                           ; BSR set to: 0
 30456                           ;lorawan_aes_cmac.c: 153: {
 30457                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 30458  00CC' C033' F000'        	movff	GenerateSubkey@k1,FillSubKey@source
 30459  00D0' C034' F001'        	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 30460  00D4' C035' F002'        	movff	GenerateSubkey@k2,FillSubKey@key
 30461  00D8' C036' F003'        	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 30462  00DC' 0E10               	movlw	16
 30463  00DE' 6F00'              	movwf	FillSubKey@size& (0+255),b
 30464  00E0' EC00' F000'        	call	_FillSubKey	;wreg free
 30465                           
 30466                           ;lorawan_aes_cmac.c: 155: }
 30467  00E4' 0012               	return	
 30468  00E6'                    l985:
 30469                           
 30470                           ;lorawan_aes_cmac.c: 156: else
 30471                           ;lorawan_aes_cmac.c: 157: {
 30472                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 30473  00E6' C033' F000'        	movff	GenerateSubkey@k1,FillSubKey@source
 30474  00EA' C034' F001'        	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 30475  00EE' C035' F002'        	movff	GenerateSubkey@k2,FillSubKey@key
 30476  00F2' C036' F003'        	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 30477  00F6' 0E10               	movlw	16
 30478  00F8' 0100               	movlb	0	; () banked
 30479  00FA' 6F00'              	movwf	FillSubKey@size& (0+255),b
 30480  00FC' EC00' F000'        	call	_FillSubKey	;wreg free
 30481                           
 30482                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 30483  0100' 0E00               	movlw	0
 30484  0102' 0100               	movlb	0	; () banked
 30485  0104' 6F00'              	movwf	GenerateSubkey@i& (0+255),b
 30486  0106'                    l8732:
 30487                           
 30488                           ; BSR set to: 0
 30489  0106' 0E0F               	movlw	15
 30490  0108' 6500'              	cpfsgt	GenerateSubkey@i& (0+255),b
 30491  010A' D001               	goto	l987
 30492  010C' 0012               	return	
 30493  010E'                    l987:
 30494                           
 30495                           ; BSR set to: 0
 30496                           ;lorawan_aes_cmac.c: 161: {
 30497                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 30498                           
 30499                           ; BSR set to: 0
 30500  010E' 5100'              	movf	GenerateSubkey@i& (0+255),w,b
 30501  0110' 0D01               	mullw	1
 30502  0112' 50F3               	movf	prodl,w,c
 30503  0114' 2500'              	addwf	GenerateSubkey@k2& (0+255),w,b
 30504  0116' 6ED9               	movwf	fsr2l,c
 30505  0118' 50F4               	movf	prodh,w,c
 30506  011A' 2100'              	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 30507  011C' 6EDA               	movwf	fsr2h,c
 30508  011E' 5100'              	movf	GenerateSubkey@i& (0+255),w,b
 30509  0120' 0D01               	mullw	1
 30510  0122' 0E00'              	movlw	low GenerateSubkey@const_Rb
 30511  0124' 24F3               	addwf	prodl,w,c
 30512  0126' 6EE9               	movwf	fsr0l,c
 30513  0128' 0E00'              	movlw	high GenerateSubkey@const_Rb
 30514  012A' 20F4               	addwfc	prodh,w,c
 30515  012C' 6EEA               	movwf	fsr0h,c
 30516  012E' 50EF               	movf	indf0,w,c
 30517  0130' 6F00'              	movwf	??_GenerateSubkey& (0+255),b
 30518  0132' 5100'              	movf	GenerateSubkey@i& (0+255),w,b
 30519  0134' 0D01               	mullw	1
 30520  0136' 50F3               	movf	prodl,w,c
 30521  0138' 2500'              	addwf	GenerateSubkey@k2& (0+255),w,b
 30522  013A' 6EE9               	movwf	fsr0l,c
 30523  013C' 50F4               	movf	prodh,w,c
 30524  013E' 2100'              	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 30525  0140' 6EEA               	movwf	fsr0h,c
 30526  0142' 50EF               	movf	indf0,w,c
 30527  0144' 1900'              	xorwf	??_GenerateSubkey& (0+255),w,b
 30528  0146' 6EDF               	movwf	indf2,c
 30529                           
 30530                           ; BSR set to: 0
 30531  0148' 2B00'              	incf	GenerateSubkey@i& (0+255),f,b
 30532  014A' D7DD               	goto	l8732
 30533  014C'                    __end_of_GenerateSubkey:
 30534                           	opt stack 0
 30535                           tosu	equ	0xFFF
 30536                           tosh	equ	0xFFE
 30537                           tosl	equ	0xFFD
 30538                           pclath	equ	0xFFA
 30539                           tblptru	equ	0xFF8
 30540                           tblptrh	equ	0xFF7
 30541                           tblptrl	equ	0xFF6
 30542                           tablat	equ	0xFF5
 30543                           prodh	equ	0xFF4
 30544                           prodl	equ	0xFF3
 30545                           intcon	equ	0xFF2
 30546                           intcon2	equ	0xFF1
 30547                           intcon3	equ	0xFF0
 30548                           indf0	equ	0xFEF
 30549                           postinc0	equ	0xFEE
 30550                           plusw0	equ	0xFEB
 30551                           fsr0h	equ	0xFEA
 30552                           fsr0l	equ	0xFE9
 30553                           wreg	equ	0xFE8
 30554                           postinc1	equ	0xFE6
 30555                           postdec1	equ	0xFE5
 30556                           plusw1	equ	0xFE3
 30557                           fsr1h	equ	0xFE2
 30558                           fsr1l	equ	0xFE1
 30559                           indf2	equ	0xFDF
 30560                           postinc2	equ	0xFDE
 30561                           postdec2	equ	0xFDD
 30562                           plusw2	equ	0xFDB
 30563                           fsr2h	equ	0xFDA
 30564                           fsr2l	equ	0xFD9
 30565                           status	equ	0xFD8
 30566                           
 30567 ;; *************** function _FillSubKey *****************
 30568 ;; Defined at:
 30569 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 30570 ;; Parameters:    Size  Location     Type
 30571 ;;  source          2    0[BANK0 ] PTR unsigned char 
 30572 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 30573 ;;  key             2    2[BANK0 ] PTR unsigned char 
 30574 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 30575 ;;  size            1    4[BANK0 ] unsigned char 
 30576 ;; Auto vars:     Size  Location     Type
 30577 ;;  i               1    7[BANK0 ] unsigned char 
 30578 ;;  carry           1    6[BANK0 ] unsigned char 
 30579 ;; Return value:  Size  Location     Type
 30580 ;;                  1    wreg      void 
 30581 ;; Registers used:
 30582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30583 ;; Tracked objects:
 30584 ;;		On entry : 0/0
 30585 ;;		On exit  : 0/0
 30586 ;;		Unchanged: 0/0
 30587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30588 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30591 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30592 ;;Total ram usage:        8 bytes
 30593 ;; Hardware stack levels used:    1
 30594 ;; Hardware stack levels required when called:    7
 30595 ;; This function calls:
 30596 ;;		Nothing
 30597 ;; This function is called by:
 30598 ;;		_GenerateSubkey
 30599 ;; This function uses a non-reentrant model
 30600 ;;
 30601                           
 30602                           	psect	text145
 30603  0000'                    __ptext145:
 30604                           	opt stack 0
 30605  0000'                    _FillSubKey:
 30606                           	opt stack 19
 30607                           
 30608                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 30609                           
 30610                           ;incstack = 0
 30611  0000' 0E00               	movlw	0
 30612  0002' 0100               	movlb	0	; () banked
 30613  0004' 6F00'              	movwf	FillSubKey@i& (0+255),b
 30614                           
 30615                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 30616  0006' 0E00               	movlw	0
 30617  0008' 6F00'              	movwf	FillSubKey@carry& (0+255),b
 30618                           
 30619                           ; BSR set to: 0
 30620                           ;lorawan_aes_cmac.c: 172: i=size;
 30621  000A' C004' F007'        	movff	FillSubKey@size,FillSubKey@i
 30622                           
 30623                           ;lorawan_aes_cmac.c: 174: while(i--)
 30624  000E' D024               	goto	l992
 30625  0010'                    
 30626                           ; BSR set to: 0
 30627                           ;lorawan_aes_cmac.c: 175: {
 30628                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 30629                           
 30630                           ; BSR set to: 0
 30631  0010' 5100'              	movf	FillSubKey@i& (0+255),w,b
 30632  0012' 0D01               	mullw	1
 30633  0014' 50F3               	movf	prodl,w,c
 30634  0016' 2500'              	addwf	FillSubKey@key& (0+255),w,b
 30635  0018' 6ED9               	movwf	fsr2l,c
 30636  001A' 50F4               	movf	prodh,w,c
 30637  001C' 2100'              	addwfc	(FillSubKey@key+1)& (0+255),w,b
 30638  001E' 6EDA               	movwf	fsr2h,c
 30639  0020' 5100'              	movf	FillSubKey@i& (0+255),w,b
 30640  0022' 0D01               	mullw	1
 30641  0024' 50F3               	movf	prodl,w,c
 30642  0026' 2500'              	addwf	FillSubKey@source& (0+255),w,b
 30643  0028' 6EE9               	movwf	fsr0l,c
 30644  002A' 50F4               	movf	prodh,w,c
 30645  002C' 2100'              	addwfc	(FillSubKey@source+1)& (0+255),w,b
 30646  002E' 6EEA               	movwf	fsr0h,c
 30647  0030' 50EF               	movf	indf0,w,c
 30648  0032' 6F00'              	movwf	??_FillSubKey& (0+255),b
 30649  0034' 90D8               	bcf	status,0,c
 30650  0036' 3500'              	rlcf	??_FillSubKey& (0+255),w,b
 30651  0038' 1100'              	iorwf	FillSubKey@carry& (0+255),w,b
 30652  003A' 6EDF               	movwf	indf2,c
 30653                           
 30654                           ; BSR set to: 0
 30655                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 30656  003C' 5100'              	movf	FillSubKey@i& (0+255),w,b
 30657  003E' 0D01               	mullw	1
 30658  0040' 50F3               	movf	prodl,w,c
 30659  0042' 2500'              	addwf	FillSubKey@source& (0+255),w,b
 30660  0044' 6ED9               	movwf	fsr2l,c
 30661  0046' 50F4               	movf	prodh,w,c
 30662  0048' 2100'              	addwfc	(FillSubKey@source+1)& (0+255),w,b
 30663  004A' 6EDA               	movwf	fsr2h,c
 30664  004C' AEDF               	btfss	indf2,7,c
 30665  004E' D002               	goto	u7280
 30666  0050' 0E01               	movlw	1
 30667  0052' D001               	goto	u7290
 30668  0054'                    u7280:
 30669  0054' 0E00               	movlw	0
 30670  0056'                    u7290:
 30671  0056' 6F00'              	movwf	FillSubKey@carry& (0+255),b
 30672  0058'                    l992:
 30673                           
 30674                           ; BSR set to: 0
 30675                           
 30676                           ; BSR set to: 0
 30677  0058' 0700'              	decf	FillSubKey@i& (0+255),f,b
 30678  005A' 2900'              	incf	FillSubKey@i& (0+255),w,b
 30679  005C' B4D8               	btfsc	status,2,c
 30680  005E' 0012               	return	
 30681  0060' D7D7               	goto	l993
 30682  0062'                    __end_of_FillSubKey:
 30683                           	opt stack 0
 30684                           tosu	equ	0xFFF
 30685                           tosh	equ	0xFFE
 30686                           tosl	equ	0xFFD
 30687                           pclath	equ	0xFFA
 30688                           tblptru	equ	0xFF8
 30689                           tblptrh	equ	0xFF7
 30690                           tblptrl	equ	0xFF6
 30691                           tablat	equ	0xFF5
 30692                           prodh	equ	0xFF4
 30693                           prodl	equ	0xFF3
 30694                           intcon	equ	0xFF2
 30695                           intcon2	equ	0xFF1
 30696                           intcon3	equ	0xFF0
 30697                           indf0	equ	0xFEF
 30698                           postinc0	equ	0xFEE
 30699                           plusw0	equ	0xFEB
 30700                           fsr0h	equ	0xFEA
 30701                           fsr0l	equ	0xFE9
 30702                           wreg	equ	0xFE8
 30703                           postinc1	equ	0xFE6
 30704                           postdec1	equ	0xFE5
 30705                           plusw1	equ	0xFE3
 30706                           fsr1h	equ	0xFE2
 30707                           fsr1l	equ	0xFE1
 30708                           indf2	equ	0xFDF
 30709                           postinc2	equ	0xFDE
 30710                           postdec2	equ	0xFDD
 30711                           plusw2	equ	0xFDB
 30712                           fsr2h	equ	0xFDA
 30713                           fsr2l	equ	0xFD9
 30714                           status	equ	0xFD8
 30715                           
 30716 ;; *************** function _AESEncodeLoRa *****************
 30717 ;; Defined at:
 30718 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 30719 ;; Parameters:    Size  Location     Type
 30720 ;;  block           2   29[BANK0 ] PTR unsigned char 
 30721 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 30722 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(231), 
 30723 ;;  key             2   31[BANK0 ] PTR unsigned char 
 30724 ;;		 -> loRa.activationParameters(105), loRa(231), 
 30725 ;; Auto vars:     Size  Location     Type
 30726 ;;  useKey         16   33[BANK0 ] unsigned char [16]
 30727 ;; Return value:  Size  Location     Type
 30728 ;;                  1    wreg      void 
 30729 ;; Registers used:
 30730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30731 ;; Tracked objects:
 30732 ;;		On entry : 0/0
 30733 ;;		On exit  : 0/0
 30734 ;;		Unchanged: 0/0
 30735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30737 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30739 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30740 ;;Total ram usage:       20 bytes
 30741 ;; Hardware stack levels used:    1
 30742 ;; Hardware stack levels required when called:    9
 30743 ;; This function calls:
 30744 ;;		_AESEncode
 30745 ;;		_memcpy
 30746 ;; This function is called by:
 30747 ;;		_LORAWAN_RxDone
 30748 ;;		_ComputeSessionKeys
 30749 ;;		_EncryptFRMPayload
 30750 ;;		_AESCmac
 30751 ;;		_GenerateSubkey
 30752 ;; This function uses a non-reentrant model
 30753 ;;
 30754                           
 30755                           	psect	text146
 30756  0000'                    __ptext146:
 30757                           	opt stack 0
 30758  0000'                    _AESEncodeLoRa:
 30759                           	opt stack 18
 30760                           
 30761                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 30762                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 30763                           
 30764                           ; BSR set to: 0
 30765                           ;incstack = 0
 30766  0000' 0E00'              	movlw	low AESEncodeLoRa@useKey
 30767  0002' 0100               	movlb	0	; () banked
 30768  0004' 6F00'              	movwf	memcpy@d1& (0+255),b
 30769  0006' 0E00'              	movlw	high AESEncodeLoRa@useKey
 30770  0008' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 30771  000A' C01F' F002'        	movff	AESEncodeLoRa@key,memcpy@s1
 30772  000E' C020' F003'        	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 30773  0012' 0E00               	movlw	0
 30774  0014' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 30775  0016' 0E10               	movlw	16
 30776  0018' 6F00'              	movwf	memcpy@n& (0+255),b
 30777  001A' EC00' F000'        	call	_memcpy	;wreg free
 30778                           
 30779                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 30780  001E' C01D' F006'        	movff	AESEncodeLoRa@block,AESEncode@block
 30781  0022' C01E' F007'        	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 30782  0026' 0E00'              	movlw	low AESEncodeLoRa@useKey
 30783  0028' 0100               	movlb	0	; () banked
 30784  002A' 6F00'              	movwf	AESEncode@key& (0+255),b
 30785  002C' 0E00'              	movlw	high AESEncodeLoRa@useKey
 30786  002E' 6F00'              	movwf	(AESEncode@key+1)& (0+255),b
 30787  0030' EC00' F000'        	call	_AESEncode	;wreg free
 30788  0034' 0012               	return		;funcret
 30789  0036'                    __end_of_AESEncodeLoRa:
 30790                           	opt stack 0
 30791                           tosu	equ	0xFFF
 30792                           tosh	equ	0xFFE
 30793                           tosl	equ	0xFFD
 30794                           pclath	equ	0xFFA
 30795                           tblptru	equ	0xFF8
 30796                           tblptrh	equ	0xFF7
 30797                           tblptrl	equ	0xFF6
 30798                           tablat	equ	0xFF5
 30799                           prodh	equ	0xFF4
 30800                           prodl	equ	0xFF3
 30801                           intcon	equ	0xFF2
 30802                           intcon2	equ	0xFF1
 30803                           intcon3	equ	0xFF0
 30804                           indf0	equ	0xFEF
 30805                           postinc0	equ	0xFEE
 30806                           plusw0	equ	0xFEB
 30807                           fsr0h	equ	0xFEA
 30808                           fsr0l	equ	0xFE9
 30809                           wreg	equ	0xFE8
 30810                           postinc1	equ	0xFE6
 30811                           postdec1	equ	0xFE5
 30812                           plusw1	equ	0xFE3
 30813                           fsr1h	equ	0xFE2
 30814                           fsr1l	equ	0xFE1
 30815                           indf2	equ	0xFDF
 30816                           postinc2	equ	0xFDE
 30817                           postdec2	equ	0xFDD
 30818                           plusw2	equ	0xFDB
 30819                           fsr2h	equ	0xFDA
 30820                           fsr2l	equ	0xFD9
 30821                           status	equ	0xFD8
 30822                           
 30823 ;; *************** function _AESEncode *****************
 30824 ;; Defined at:
 30825 ;;		line 223 in file "mcc_generated_files/LoRaWAN/AES.c"
 30826 ;; Parameters:    Size  Location     Type
 30827 ;;  block           2    6[BANK0 ] PTR unsigned char 
 30828 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 30829 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(231), 
 30830 ;;  key             2    8[BANK0 ] PTR unsigned char 
 30831 ;;		 -> AESEncodeLoRa@useKey(16), 
 30832 ;; Auto vars:     Size  Location     Type
 30833 ;;  aux3            1   27[BANK0 ] unsigned char 
 30834 ;;  aux1            1   26[BANK0 ] unsigned char 
 30835 ;;  aux2            1   25[BANK0 ] unsigned char 
 30836 ;;  aux             1   24[BANK0 ] unsigned char 
 30837 ;;  i               1   28[BANK0 ] unsigned char 
 30838 ;;  temp            1    0        unsigned char 
 30839 ;; Return value:  Size  Location     Type
 30840 ;;                  1    wreg      void 
 30841 ;; Registers used:
 30842 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30843 ;; Tracked objects:
 30844 ;;		On entry : 0/0
 30845 ;;		On exit  : 0/0
 30846 ;;		Unchanged: 0/0
 30847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30848 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30849 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30850 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30851 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30852 ;;Total ram usage:       23 bytes
 30853 ;; Hardware stack levels used:    1
 30854 ;; Hardware stack levels required when called:    8
 30855 ;; This function calls:
 30856 ;;		_EncKeySchedule
 30857 ;;		_EncodeShiftRow
 30858 ;; This function is called by:
 30859 ;;		_AESEncodeLoRa
 30860 ;; This function uses a non-reentrant model
 30861 ;;
 30862                           
 30863                           	psect	text147
 30864  0000'                    __ptext147:
 30865                           	opt stack 0
 30866  0000'                    _AESEncode:
 30867                           	opt stack 18
 30868                           
 30869                           ;AES.c: 225: unsigned char i;
 30870                           ;AES.c: 226: unsigned char temp;
 30871                           ;AES.c: 229: _roundCounter = 10;
 30872                           
 30873                           ;incstack = 0
 30874  0000' 0E0A               	movlw	10
 30875  0002' 0101               	movlb	1	; () banked
 30876  0004' 6F00'              	movwf	__roundCounter& (0+255),b
 30877                           
 30878                           ;AES.c: 231: _rcon = 0x01;
 30879  0006' 0E01               	movlw	1
 30880  0008' 6E0B'              	movwf	__rcon,c
 30881                           
 30882                           ;AES.c: 234: for(i=0;i<16;i++)
 30883  000A' 0E00               	movlw	0
 30884  000C' 0100               	movlb	0	; () banked
 30885  000E' 6F00'              	movwf	AESEncode@i& (0+255),b
 30886  0010'                    l8116:
 30887                           
 30888                           ; BSR set to: 0
 30889  0010' 0E0F               	movlw	15
 30890  0012' 6500'              	cpfsgt	AESEncode@i& (0+255),b
 30891  0014' D001               	goto	l43
 30892  0016' D016               	goto	u6930
 30893  0018'                    l43:
 30894                           
 30895                           ; BSR set to: 0
 30896                           ;AES.c: 235: {
 30897                           ;AES.c: 236: block[i] ^= key[i];
 30898                           
 30899                           ; BSR set to: 0
 30900  0018' 5100'              	movf	AESEncode@i& (0+255),w,b
 30901  001A' 0D01               	mullw	1
 30902  001C' 50F3               	movf	prodl,w,c
 30903  001E' 2500'              	addwf	AESEncode@key& (0+255),w,b
 30904  0020' 6ED9               	movwf	fsr2l,c
 30905  0022' 50F4               	movf	prodh,w,c
 30906  0024' 2100'              	addwfc	(AESEncode@key+1)& (0+255),w,b
 30907  0026' 6EDA               	movwf	fsr2h,c
 30908  0028' 50DF               	movf	indf2,w,c
 30909  002A' 6F00'              	movwf	??_AESEncode& (0+255),b
 30910  002C' 5100'              	movf	AESEncode@i& (0+255),w,b
 30911  002E' 0D01               	mullw	1
 30912  0030' 50F3               	movf	prodl,w,c
 30913  0032' 2500'              	addwf	AESEncode@block& (0+255),w,b
 30914  0034' 6ED9               	movwf	fsr2l,c
 30915  0036' 50F4               	movf	prodh,w,c
 30916  0038' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 30917  003A' 6EDA               	movwf	fsr2h,c
 30918  003C' 5100'              	movf	??_AESEncode& (0+255),w,b
 30919  003E' 1ADF               	xorwf	indf2,f,c
 30920                           
 30921                           ; BSR set to: 0
 30922  0040' 2B00'              	incf	AESEncode@i& (0+255),f,b
 30923  0042' D7E6               	goto	l8116
 30924  0044'                    u6930:
 30925                           
 30926                           ;AES.c: 240: {
 30927                           ;AES.c: 243: for(i=0;i<16;i++)
 30928                           
 30929                           ; BSR set to: 0
 30930                           
 30931                           ;AES.c: 237: }
 30932                           ;AES.c: 239: do
 30933                           
 30934                           ; BSR set to: 0
 30935  0044' 0E00               	movlw	0
 30936  0046' 0100               	movlb	0	; () banked
 30937  0048' 6F00'              	movwf	AESEncode@i& (0+255),b
 30938  004A'                    l8128:
 30939                           
 30940                           ; BSR set to: 0
 30941  004A' 0E0F               	movlw	15
 30942  004C' 6500'              	cpfsgt	AESEncode@i& (0+255),b
 30943  004E' D001               	goto	l46
 30944  0050' D022               	goto	u6950
 30945  0052'                    l46:
 30946                           
 30947                           ; BSR set to: 0
 30948                           ;AES.c: 244: {
 30949                           ;AES.c: 245: block[i]=STable[block[i]];
 30950                           
 30951                           ; BSR set to: 0
 30952  0052' 5100'              	movf	AESEncode@i& (0+255),w,b
 30953  0054' 0D01               	mullw	1
 30954  0056' 50F3               	movf	prodl,w,c
 30955  0058' 2500'              	addwf	AESEncode@block& (0+255),w,b
 30956  005A' 6ED9               	movwf	fsr2l,c
 30957  005C' 50F4               	movf	prodh,w,c
 30958  005E' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 30959  0060' 6EDA               	movwf	fsr2h,c
 30960  0062' 50DF               	movf	indf2,w,c
 30961  0064' 6F00'              	movwf	??_AESEncode& (0+255),b
 30962  0066' 5100'              	movf	??_AESEncode& (0+255),w,b
 30963  0068' 0D01               	mullw	1
 30964  006A' 0E00'              	movlw	low _STable
 30965  006C' 24F3               	addwf	prodl,w,c
 30966  006E' 6EF6               	movwf	tblptrl,c
 30967  0070' 0E00'              	movlw	high _STable
 30968  0072' 20F4               	addwfc	prodh,w,c
 30969  0074' 6EF7               	movwf	tblptrh,c
 30970  0076'                    	if	1	;There are 3 active tblptr bytes
 30971  0076' 6AF8               	clrf	tblptru,c
 30972  0078' 0E00'              	movlw	low (__mediumconst shr (0+16))
 30973  007A' 22F8               	addwfc	tblptru,f,c
 30974  007C'                    	endif
 30975  007C' 5100'              	movf	AESEncode@i& (0+255),w,b
 30976  007E' 0D01               	mullw	1
 30977  0080' 50F3               	movf	prodl,w,c
 30978  0082' 2500'              	addwf	AESEncode@block& (0+255),w,b
 30979  0084' 6ED9               	movwf	fsr2l,c
 30980  0086' 50F4               	movf	prodh,w,c
 30981  0088' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 30982  008A' 6EDA               	movwf	fsr2h,c
 30983  008C' 0008               	tblrd		*
 30984  008E' CFF5 FFDF          	movff	tablat,indf2
 30985                           
 30986                           ; BSR set to: 0
 30987  0092' 2B00'              	incf	AESEncode@i& (0+255),f,b
 30988  0094' D7DA               	goto	l8128
 30989  0096'                    u6950:
 30990                           
 30991                           ; BSR set to: 0
 30992                           ;AES.c: 246: }
 30993                           ;AES.c: 249: EncodeShiftRow(block);
 30994                           
 30995                           ; BSR set to: 0
 30996  0096' C006' F000'        	movff	AESEncode@block,EncodeShiftRow@stateTable
 30997  009A' C007' F001'        	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 30998  009E' EC00' F000'        	call	_EncodeShiftRow	;wreg free
 30999                           
 31000                           ;AES.c: 252: if(_roundCounter != 1)
 31001  00A2' 0101               	movlb	1	; () banked
 31002  00A4' 0500'              	decf	__roundCounter& (0+255),w,b
 31003  00A6' B4D8               	btfsc	status,2,c
 31004  00A8' D127               	goto	u7010
 31005                           
 31006                           ; BSR set to: 1
 31007                           ;AES.c: 253: {
 31008                           ;AES.c: 254: unsigned char aux,aux1,aux2,aux3;
 31009                           ;AES.c: 256: for(i=0;i<16;i+=4)
 31010  00AA' 0E00               	movlw	0
 31011  00AC' 0100               	movlb	0	; () banked
 31012  00AE' 6F00'              	movwf	AESEncode@i& (0+255),b
 31013  00B0'                    l8144:
 31014                           
 31015                           ; BSR set to: 0
 31016  00B0' 0E0F               	movlw	15
 31017  00B2' 6500'              	cpfsgt	AESEncode@i& (0+255),b
 31018  00B4' D001               	goto	l49
 31019  00B6' D120               	goto	u7010
 31020  00B8'                    l49:
 31021                           
 31022                           ; BSR set to: 0
 31023                           ;AES.c: 257: {
 31024                           ;AES.c: 258: aux1= block[i+0] ^ block[i+1];
 31025                           
 31026                           ; BSR set to: 0
 31027  00B8' 5100'              	movf	AESEncode@i& (0+255),w,b
 31028  00BA' 6F00'              	movwf	??_AESEncode& (0+255),b
 31029  00BC' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31030  00BE' 0E01               	movlw	1
 31031  00C0' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31032  00C2' 0E00               	movlw	0
 31033  00C4' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31034  00C6' 5100'              	movf	??_AESEncode& (0+255),w,b
 31035  00C8' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31036  00CA' 6ED9               	movwf	fsr2l,c
 31037  00CC' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31038  00CE' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31039  00D0' 6EDA               	movwf	fsr2h,c
 31040  00D2' 50DF               	movf	indf2,w,c
 31041  00D4' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31042  00D6' 5100'              	movf	AESEncode@i& (0+255),w,b
 31043  00D8' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31044  00DA' 6ED9               	movwf	fsr2l,c
 31045  00DC' 0E00               	movlw	0
 31046  00DE' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31047  00E0' 6EDA               	movwf	fsr2h,c
 31048  00E2' 50DF               	movf	indf2,w,c
 31049  00E4' 1900'              	xorwf	(??_AESEncode+2)& (0+255),w,b
 31050  00E6' 6F00'              	movwf	AESEncode@aux1& (0+255),b
 31051                           
 31052                           ;AES.c: 259: aux3= block[i+2]^block[i+3];
 31053  00E8' 5100'              	movf	AESEncode@i& (0+255),w,b
 31054  00EA' 6F00'              	movwf	??_AESEncode& (0+255),b
 31055  00EC' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31056  00EE' 0E03               	movlw	3
 31057  00F0' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31058  00F2' 0E00               	movlw	0
 31059  00F4' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31060  00F6' 5100'              	movf	??_AESEncode& (0+255),w,b
 31061  00F8' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31062  00FA' 6ED9               	movwf	fsr2l,c
 31063  00FC' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31064  00FE' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31065  0100' 6EDA               	movwf	fsr2h,c
 31066  0102' 50DF               	movf	indf2,w,c
 31067  0104' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31068  0106' 5100'              	movf	AESEncode@i& (0+255),w,b
 31069  0108' 6F00'              	movwf	(??_AESEncode+3)& (0+255),b
 31070  010A' 6B00'              	clrf	(??_AESEncode+4)& (0+255),b
 31071  010C' 0E02               	movlw	2
 31072  010E' 2700'              	addwf	(??_AESEncode+3)& (0+255),f,b
 31073  0110' 0E00               	movlw	0
 31074  0112' 2300'              	addwfc	(??_AESEncode+4)& (0+255),f,b
 31075  0114' 5100'              	movf	(??_AESEncode+3)& (0+255),w,b
 31076  0116' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31077  0118' 6ED9               	movwf	fsr2l,c
 31078  011A' 5100'              	movf	(??_AESEncode+4)& (0+255),w,b
 31079  011C' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31080  011E' 6EDA               	movwf	fsr2h,c
 31081  0120' 50DF               	movf	indf2,w,c
 31082  0122' 1900'              	xorwf	(??_AESEncode+2)& (0+255),w,b
 31083  0124' 6F00'              	movwf	AESEncode@aux3& (0+255),b
 31084                           
 31085                           ; BSR set to: 0
 31086                           ;AES.c: 260: aux = aux1 ^ aux3;
 31087  0126' 5100'              	movf	AESEncode@aux1& (0+255),w,b
 31088  0128' 1900'              	xorwf	AESEncode@aux3& (0+255),w,b
 31089  012A' 6F00'              	movwf	AESEncode@aux& (0+255),b
 31090                           
 31091                           ; BSR set to: 0
 31092                           ;AES.c: 261: aux2= block[i+2]^block[i+1];
 31093  012C' 5100'              	movf	AESEncode@i& (0+255),w,b
 31094  012E' 6F00'              	movwf	??_AESEncode& (0+255),b
 31095  0130' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31096  0132' 0E01               	movlw	1
 31097  0134' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31098  0136' 0E00               	movlw	0
 31099  0138' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31100  013A' 5100'              	movf	??_AESEncode& (0+255),w,b
 31101  013C' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31102  013E' 6ED9               	movwf	fsr2l,c
 31103  0140' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31104  0142' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31105  0144' 6EDA               	movwf	fsr2h,c
 31106  0146' 50DF               	movf	indf2,w,c
 31107  0148' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31108  014A' 5100'              	movf	AESEncode@i& (0+255),w,b
 31109  014C' 6F00'              	movwf	(??_AESEncode+3)& (0+255),b
 31110  014E' 6B00'              	clrf	(??_AESEncode+4)& (0+255),b
 31111  0150' 0E02               	movlw	2
 31112  0152' 2700'              	addwf	(??_AESEncode+3)& (0+255),f,b
 31113  0154' 0E00               	movlw	0
 31114  0156' 2300'              	addwfc	(??_AESEncode+4)& (0+255),f,b
 31115  0158' 5100'              	movf	(??_AESEncode+3)& (0+255),w,b
 31116  015A' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31117  015C' 6ED9               	movwf	fsr2l,c
 31118  015E' 5100'              	movf	(??_AESEncode+4)& (0+255),w,b
 31119  0160' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31120  0162' 6EDA               	movwf	fsr2h,c
 31121  0164' 50DF               	movf	indf2,w,c
 31122  0166' 1900'              	xorwf	(??_AESEncode+2)& (0+255),w,b
 31123  0168' 6F00'              	movwf	AESEncode@aux2& (0+255),b
 31124                           
 31125                           ;AES.c: 263: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 31126  016A' 0E7F               	movlw	127
 31127  016C' 6500'              	cpfsgt	AESEncode@aux1& (0+255),b
 31128  016E' D00C               	goto	l52
 31129                           
 31130                           ; BSR set to: 0
 31131  0170' 0E1B               	movlw	27
 31132  0172' C01A' F00A'        	movff	AESEncode@aux1,??_AESEncode
 31133  0176' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31134  0178' 90D8               	bcf	status,0,c
 31135  017A' 3700'              	rlcf	??_AESEncode& (0+255),f,b
 31136  017C' 3700'              	rlcf	(??_AESEncode+1)& (0+255),f,b
 31137  017E' 1900'              	xorwf	??_AESEncode& (0+255),w,b
 31138  0180' 6F00'              	movwf	_AESEncode$81& (0+255),b
 31139  0182' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31140  0184' 6F00'              	movwf	(_AESEncode$81+1)& (0+255),b
 31141  0186' D005               	goto	l54
 31142  0188'                    l52:
 31143                           
 31144                           ; BSR set to: 0
 31145                           
 31146                           ; BSR set to: 0
 31147  0188' 90D8               	bcf	status,0,c
 31148  018A' 3500'              	rlcf	AESEncode@aux1& (0+255),w,b
 31149  018C' 6F00'              	movwf	_AESEncode$81& (0+255),b
 31150  018E' 6B00'              	clrf	(_AESEncode$81+1)& (0+255),b
 31151  0190' 3700'              	rlcf	(_AESEncode$81+1)& (0+255),f,b
 31152  0192'                    l54:
 31153                           
 31154                           ; BSR set to: 0
 31155                           
 31156                           ; BSR set to: 0
 31157  0192' C012' F01A'        	movff	_AESEncode$81,AESEncode@aux1
 31158                           
 31159                           ;AES.c: 264: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 31160  0196' 0E7F               	movlw	127
 31161  0198' 6500'              	cpfsgt	AESEncode@aux2& (0+255),b
 31162  019A' D00C               	goto	l56
 31163                           
 31164                           ; BSR set to: 0
 31165  019C' 0E1B               	movlw	27
 31166  019E' C019' F00A'        	movff	AESEncode@aux2,??_AESEncode
 31167  01A2' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31168  01A4' 90D8               	bcf	status,0,c
 31169  01A6' 3700'              	rlcf	??_AESEncode& (0+255),f,b
 31170  01A8' 3700'              	rlcf	(??_AESEncode+1)& (0+255),f,b
 31171  01AA' 1900'              	xorwf	??_AESEncode& (0+255),w,b
 31172  01AC' 6F00'              	movwf	_AESEncode$82& (0+255),b
 31173  01AE' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31174  01B0' 6F00'              	movwf	(_AESEncode$82+1)& (0+255),b
 31175  01B2' D005               	goto	l58
 31176  01B4'                    l56:
 31177                           
 31178                           ; BSR set to: 0
 31179                           
 31180                           ; BSR set to: 0
 31181  01B4' 90D8               	bcf	status,0,c
 31182  01B6' 3500'              	rlcf	AESEncode@aux2& (0+255),w,b
 31183  01B8' 6F00'              	movwf	_AESEncode$82& (0+255),b
 31184  01BA' 6B00'              	clrf	(_AESEncode$82+1)& (0+255),b
 31185  01BC' 3700'              	rlcf	(_AESEncode$82+1)& (0+255),f,b
 31186  01BE'                    l58:
 31187                           
 31188                           ; BSR set to: 0
 31189                           
 31190                           ; BSR set to: 0
 31191  01BE' C014' F019'        	movff	_AESEncode$82,AESEncode@aux2
 31192                           
 31193                           ;AES.c: 265: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 31194  01C2' 0E7F               	movlw	127
 31195  01C4' 6500'              	cpfsgt	AESEncode@aux3& (0+255),b
 31196  01C6' D00C               	goto	l60
 31197                           
 31198                           ; BSR set to: 0
 31199  01C8' 0E1B               	movlw	27
 31200  01CA' C01B' F00A'        	movff	AESEncode@aux3,??_AESEncode
 31201  01CE' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31202  01D0' 90D8               	bcf	status,0,c
 31203  01D2' 3700'              	rlcf	??_AESEncode& (0+255),f,b
 31204  01D4' 3700'              	rlcf	(??_AESEncode+1)& (0+255),f,b
 31205  01D6' 1900'              	xorwf	??_AESEncode& (0+255),w,b
 31206  01D8' 6F00'              	movwf	_AESEncode$83& (0+255),b
 31207  01DA' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31208  01DC' 6F00'              	movwf	(_AESEncode$83+1)& (0+255),b
 31209  01DE' D005               	goto	l62
 31210  01E0'                    l60:
 31211                           
 31212                           ; BSR set to: 0
 31213                           
 31214                           ; BSR set to: 0
 31215  01E0' 90D8               	bcf	status,0,c
 31216  01E2' 3500'              	rlcf	AESEncode@aux3& (0+255),w,b
 31217  01E4' 6F00'              	movwf	_AESEncode$83& (0+255),b
 31218  01E6' 6B00'              	clrf	(_AESEncode$83+1)& (0+255),b
 31219  01E8' 3700'              	rlcf	(_AESEncode$83+1)& (0+255),f,b
 31220  01EA'                    l62:
 31221                           
 31222                           ; BSR set to: 0
 31223                           
 31224                           ; BSR set to: 0
 31225  01EA' C016' F01B'        	movff	_AESEncode$83,AESEncode@aux3
 31226                           
 31227                           ; BSR set to: 0
 31228                           ;AES.c: 267: block[i+0]= aux^aux1^block[i+0];
 31229  01EE' 5100'              	movf	AESEncode@i& (0+255),w,b
 31230  01F0' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31231  01F2' 6ED9               	movwf	fsr2l,c
 31232  01F4' 0E00               	movlw	0
 31233  01F6' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31234  01F8' 6EDA               	movwf	fsr2h,c
 31235  01FA' 5100'              	movf	AESEncode@i& (0+255),w,b
 31236  01FC' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31237  01FE' 6EE9               	movwf	fsr0l,c
 31238  0200' 0E00               	movlw	0
 31239  0202' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31240  0204' 6EEA               	movwf	fsr0h,c
 31241  0206' 50EF               	movf	indf0,w,c
 31242  0208' 1900'              	xorwf	AESEncode@aux& (0+255),w,b
 31243  020A' 1900'              	xorwf	AESEncode@aux1& (0+255),w,b
 31244  020C' 6EDF               	movwf	indf2,c
 31245                           
 31246                           ; BSR set to: 0
 31247                           ;AES.c: 268: block[i+1]= aux^aux2^block[i+1];
 31248  020E' 5100'              	movf	AESEncode@i& (0+255),w,b
 31249  0210' 6F00'              	movwf	??_AESEncode& (0+255),b
 31250  0212' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31251  0214' 0E01               	movlw	1
 31252  0216' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31253  0218' 0E00               	movlw	0
 31254  021A' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31255  021C' 5100'              	movf	??_AESEncode& (0+255),w,b
 31256  021E' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31257  0220' 6ED9               	movwf	fsr2l,c
 31258  0222' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31259  0224' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31260  0226' 6EDA               	movwf	fsr2h,c
 31261  0228' 5100'              	movf	AESEncode@i& (0+255),w,b
 31262  022A' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31263  022C' 6B00'              	clrf	(??_AESEncode+3)& (0+255),b
 31264  022E' 0E01               	movlw	1
 31265  0230' 2700'              	addwf	(??_AESEncode+2)& (0+255),f,b
 31266  0232' 0E00               	movlw	0
 31267  0234' 2300'              	addwfc	(??_AESEncode+3)& (0+255),f,b
 31268  0236' 5100'              	movf	(??_AESEncode+2)& (0+255),w,b
 31269  0238' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31270  023A' 6EE9               	movwf	fsr0l,c
 31271  023C' 5100'              	movf	(??_AESEncode+3)& (0+255),w,b
 31272  023E' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31273  0240' 6EEA               	movwf	fsr0h,c
 31274  0242' 50EF               	movf	indf0,w,c
 31275  0244' 1900'              	xorwf	AESEncode@aux& (0+255),w,b
 31276  0246' 1900'              	xorwf	AESEncode@aux2& (0+255),w,b
 31277  0248' 6EDF               	movwf	indf2,c
 31278                           
 31279                           ; BSR set to: 0
 31280                           ;AES.c: 269: block[i+2]= aux^aux3^block[i+2];
 31281  024A' 5100'              	movf	AESEncode@i& (0+255),w,b
 31282  024C' 6F00'              	movwf	??_AESEncode& (0+255),b
 31283  024E' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31284  0250' 0E02               	movlw	2
 31285  0252' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31286  0254' 0E00               	movlw	0
 31287  0256' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31288  0258' 5100'              	movf	??_AESEncode& (0+255),w,b
 31289  025A' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31290  025C' 6ED9               	movwf	fsr2l,c
 31291  025E' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31292  0260' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31293  0262' 6EDA               	movwf	fsr2h,c
 31294  0264' 5100'              	movf	AESEncode@i& (0+255),w,b
 31295  0266' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31296  0268' 6B00'              	clrf	(??_AESEncode+3)& (0+255),b
 31297  026A' 0E02               	movlw	2
 31298  026C' 2700'              	addwf	(??_AESEncode+2)& (0+255),f,b
 31299  026E' 0E00               	movlw	0
 31300  0270' 2300'              	addwfc	(??_AESEncode+3)& (0+255),f,b
 31301  0272' 5100'              	movf	(??_AESEncode+2)& (0+255),w,b
 31302  0274' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31303  0276' 6EE9               	movwf	fsr0l,c
 31304  0278' 5100'              	movf	(??_AESEncode+3)& (0+255),w,b
 31305  027A' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31306  027C' 6EEA               	movwf	fsr0h,c
 31307  027E' 50EF               	movf	indf0,w,c
 31308  0280' 1900'              	xorwf	AESEncode@aux& (0+255),w,b
 31309  0282' 1900'              	xorwf	AESEncode@aux3& (0+255),w,b
 31310  0284' 6EDF               	movwf	indf2,c
 31311                           
 31312                           ; BSR set to: 0
 31313                           ;AES.c: 270: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 31314  0286' 5100'              	movf	AESEncode@i& (0+255),w,b
 31315  0288' 6F00'              	movwf	??_AESEncode& (0+255),b
 31316  028A' 6B00'              	clrf	(??_AESEncode+1)& (0+255),b
 31317  028C' 0E03               	movlw	3
 31318  028E' 2700'              	addwf	??_AESEncode& (0+255),f,b
 31319  0290' 0E00               	movlw	0
 31320  0292' 2300'              	addwfc	(??_AESEncode+1)& (0+255),f,b
 31321  0294' 5100'              	movf	??_AESEncode& (0+255),w,b
 31322  0296' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31323  0298' 6ED9               	movwf	fsr2l,c
 31324  029A' 5100'              	movf	(??_AESEncode+1)& (0+255),w,b
 31325  029C' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31326  029E' 6EDA               	movwf	fsr2h,c
 31327  02A0' 5100'              	movf	AESEncode@i& (0+255),w,b
 31328  02A2' 6F00'              	movwf	(??_AESEncode+2)& (0+255),b
 31329  02A4' 6B00'              	clrf	(??_AESEncode+3)& (0+255),b
 31330  02A6' 0E02               	movlw	2
 31331  02A8' 2700'              	addwf	(??_AESEncode+2)& (0+255),f,b
 31332  02AA' 0E00               	movlw	0
 31333  02AC' 2300'              	addwfc	(??_AESEncode+3)& (0+255),f,b
 31334  02AE' 5100'              	movf	(??_AESEncode+2)& (0+255),w,b
 31335  02B0' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31336  02B2' 6EE9               	movwf	fsr0l,c
 31337  02B4' 5100'              	movf	(??_AESEncode+3)& (0+255),w,b
 31338  02B6' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31339  02B8' 6EEA               	movwf	fsr0h,c
 31340  02BA' 50EF               	movf	indf0,w,c
 31341  02BC' 6F00'              	movwf	(??_AESEncode+4)& (0+255),b
 31342  02BE' 5100'              	movf	AESEncode@i& (0+255),w,b
 31343  02C0' 6F00'              	movwf	(??_AESEncode+5)& (0+255),b
 31344  02C2' 6B00'              	clrf	(??_AESEncode+6)& (0+255),b
 31345  02C4' 0E01               	movlw	1
 31346  02C6' 2700'              	addwf	(??_AESEncode+5)& (0+255),f,b
 31347  02C8' 0E00               	movlw	0
 31348  02CA' 2300'              	addwfc	(??_AESEncode+6)& (0+255),f,b
 31349  02CC' 5100'              	movf	(??_AESEncode+5)& (0+255),w,b
 31350  02CE' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31351  02D0' 6EE9               	movwf	fsr0l,c
 31352  02D2' 5100'              	movf	(??_AESEncode+6)& (0+255),w,b
 31353  02D4' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31354  02D6' 6EEA               	movwf	fsr0h,c
 31355  02D8' 50EF               	movf	indf0,w,c
 31356  02DA' 6F00'              	movwf	(??_AESEncode+7)& (0+255),b
 31357  02DC' 5100'              	movf	AESEncode@i& (0+255),w,b
 31358  02DE' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31359  02E0' 6EE9               	movwf	fsr0l,c
 31360  02E2' 0E00               	movlw	0
 31361  02E4' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31362  02E6' 6EEA               	movwf	fsr0h,c
 31363  02E8' 50EF               	movf	indf0,w,c
 31364  02EA' 1900'              	xorwf	(??_AESEncode+7)& (0+255),w,b
 31365  02EC' 1900'              	xorwf	(??_AESEncode+4)& (0+255),w,b
 31366  02EE' 1900'              	xorwf	AESEncode@aux& (0+255),w,b
 31367  02F0' 6EDF               	movwf	indf2,c
 31368  02F2' 0E04               	movlw	4
 31369  02F4' 2700'              	addwf	AESEncode@i& (0+255),f,b
 31370  02F6' D6DC               	goto	l8144
 31371  02F8'                    u7010:
 31372                           
 31373                           ;AES.c: 271: }
 31374                           ;AES.c: 272: }
 31375                           ;AES.c: 274: EncKeySchedule(key);
 31376                           
 31377                           ; BSR set to: 0
 31378                           
 31379                           ; BSR set to: 0
 31380  02F8' C008' F000'        	movff	AESEncode@key,EncKeySchedule@key
 31381  02FC' C009' F001'        	movff	AESEncode@key+1,EncKeySchedule@key+1
 31382  0300' EC00' F000'        	call	_EncKeySchedule	;wreg free
 31383                           
 31384                           ;AES.c: 277: for(i=0;i<16;i++)
 31385  0304' 0E00               	movlw	0
 31386  0306' 0100               	movlb	0	; () banked
 31387  0308' 6F00'              	movwf	AESEncode@i& (0+255),b
 31388  030A'                    l8184:
 31389                           
 31390                           ; BSR set to: 0
 31391  030A' 0E0F               	movlw	15
 31392  030C' 6500'              	cpfsgt	AESEncode@i& (0+255),b
 31393  030E' D001               	goto	l63
 31394  0310' D016               	goto	u7030
 31395  0312'                    l63:
 31396                           
 31397                           ; BSR set to: 0
 31398                           ;AES.c: 278: {
 31399                           ;AES.c: 279: block[i] ^= key[i];
 31400                           
 31401                           ; BSR set to: 0
 31402  0312' 5100'              	movf	AESEncode@i& (0+255),w,b
 31403  0314' 0D01               	mullw	1
 31404  0316' 50F3               	movf	prodl,w,c
 31405  0318' 2500'              	addwf	AESEncode@key& (0+255),w,b
 31406  031A' 6ED9               	movwf	fsr2l,c
 31407  031C' 50F4               	movf	prodh,w,c
 31408  031E' 2100'              	addwfc	(AESEncode@key+1)& (0+255),w,b
 31409  0320' 6EDA               	movwf	fsr2h,c
 31410  0322' 50DF               	movf	indf2,w,c
 31411  0324' 6F00'              	movwf	??_AESEncode& (0+255),b
 31412  0326' 5100'              	movf	AESEncode@i& (0+255),w,b
 31413  0328' 0D01               	mullw	1
 31414  032A' 50F3               	movf	prodl,w,c
 31415  032C' 2500'              	addwf	AESEncode@block& (0+255),w,b
 31416  032E' 6ED9               	movwf	fsr2l,c
 31417  0330' 50F4               	movf	prodh,w,c
 31418  0332' 2100'              	addwfc	(AESEncode@block+1)& (0+255),w,b
 31419  0334' 6EDA               	movwf	fsr2h,c
 31420  0336' 5100'              	movf	??_AESEncode& (0+255),w,b
 31421  0338' 1ADF               	xorwf	indf2,f,c
 31422                           
 31423                           ; BSR set to: 0
 31424  033A' 2B00'              	incf	AESEncode@i& (0+255),f,b
 31425  033C' D7E6               	goto	l8184
 31426  033E'                    u7030:
 31427                           
 31428                           ; BSR set to: 0
 31429                           ;AES.c: 280: }
 31430                           ;AES.c: 282: _roundCounter--;
 31431                           
 31432                           ; BSR set to: 0
 31433  033E' 0101               	movlb	1	; () banked
 31434  0340' 0700'              	decf	__roundCounter& (0+255),f,b
 31435                           
 31436                           ; BSR set to: 1
 31437                           ;AES.c: 283: }
 31438                           ;AES.c: 284: while(_roundCounter !=0);
 31439  0342' 5100'              	movf	__roundCounter& (0+255),w,b
 31440  0344' B4D8               	btfsc	status,2,c
 31441  0346' 0012               	return	
 31442  0348' D67D               	goto	u6930
 31443  034A'                    __end_of_AESEncode:
 31444                           	opt stack 0
 31445                           tosu	equ	0xFFF
 31446                           tosh	equ	0xFFE
 31447                           tosl	equ	0xFFD
 31448                           pclath	equ	0xFFA
 31449                           tblptru	equ	0xFF8
 31450                           tblptrh	equ	0xFF7
 31451                           tblptrl	equ	0xFF6
 31452                           tablat	equ	0xFF5
 31453                           prodh	equ	0xFF4
 31454                           prodl	equ	0xFF3
 31455                           intcon	equ	0xFF2
 31456                           intcon2	equ	0xFF1
 31457                           intcon3	equ	0xFF0
 31458                           indf0	equ	0xFEF
 31459                           postinc0	equ	0xFEE
 31460                           plusw0	equ	0xFEB
 31461                           fsr0h	equ	0xFEA
 31462                           fsr0l	equ	0xFE9
 31463                           wreg	equ	0xFE8
 31464                           postinc1	equ	0xFE6
 31465                           postdec1	equ	0xFE5
 31466                           plusw1	equ	0xFE3
 31467                           fsr1h	equ	0xFE2
 31468                           fsr1l	equ	0xFE1
 31469                           indf2	equ	0xFDF
 31470                           postinc2	equ	0xFDE
 31471                           postdec2	equ	0xFDD
 31472                           plusw2	equ	0xFDB
 31473                           fsr2h	equ	0xFDA
 31474                           fsr2l	equ	0xFD9
 31475                           status	equ	0xFD8
 31476                           
 31477 ;; *************** function _EncodeShiftRow *****************
 31478 ;; Defined at:
 31479 ;;		line 360 in file "mcc_generated_files/LoRaWAN/AES.c"
 31480 ;; Parameters:    Size  Location     Type
 31481 ;;  stateTable      2    0[BANK0 ] PTR unsigned char 
 31482 ;;		 -> GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), aesBuffer(16), 
 31483 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), loRa(231), 
 31484 ;; Auto vars:     Size  Location     Type
 31485 ;;  temp            1    2[BANK0 ] unsigned char 
 31486 ;; Return value:  Size  Location     Type
 31487 ;;                  1    wreg      void 
 31488 ;; Registers used:
 31489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 31490 ;; Tracked objects:
 31491 ;;		On entry : 0/0
 31492 ;;		On exit  : 0/0
 31493 ;;		Unchanged: 0/0
 31494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31495 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31499 ;;Total ram usage:        3 bytes
 31500 ;; Hardware stack levels used:    1
 31501 ;; Hardware stack levels required when called:    7
 31502 ;; This function calls:
 31503 ;;		Nothing
 31504 ;; This function is called by:
 31505 ;;		_AESEncode
 31506 ;; This function uses a non-reentrant model
 31507 ;;
 31508                           
 31509                           	psect	text148
 31510  0000'                    __ptext148:
 31511                           	opt stack 0
 31512  0000'                    _EncodeShiftRow:
 31513                           	opt stack 18
 31514                           
 31515                           ;AES.c: 362: unsigned char temp;
 31516                           ;AES.c: 367: temp=stateTable[1];
 31517                           
 31518                           ; BSR set to: 1
 31519                           ;incstack = 0
 31520  0000' 0100               	movlb	0	; () banked
 31521  0002' EE20 F001          	lfsr	2,1
 31522  0006' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31523  0008' 26D9               	addwf	fsr2l,f,c
 31524  000A' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31525  000C' 22DA               	addwfc	fsr2h,f,c
 31526  000E' 50DF               	movf	indf2,w,c
 31527  0010' 6F00'              	movwf	EncodeShiftRow@temp& (0+255),b
 31528                           
 31529                           ; BSR set to: 0
 31530                           ;AES.c: 368: stateTable[1]=stateTable[5];
 31531  0012' EE20 F005          	lfsr	2,5
 31532  0016' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31533  0018' 26D9               	addwf	fsr2l,f,c
 31534  001A' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31535  001C' 22DA               	addwfc	fsr2h,f,c
 31536  001E' EE00 F001          	lfsr	0,1
 31537  0022' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31538  0024' 26E9               	addwf	fsr0l,f,c
 31539  0026' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31540  0028' 22EA               	addwfc	fsr0h,f,c
 31541  002A' CFDF FFEF          	movff	indf2,indf0
 31542                           
 31543                           ; BSR set to: 0
 31544                           ;AES.c: 369: stateTable[5]=stateTable[9];
 31545  002E' EE20 F009          	lfsr	2,9
 31546  0032' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31547  0034' 26D9               	addwf	fsr2l,f,c
 31548  0036' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31549  0038' 22DA               	addwfc	fsr2h,f,c
 31550  003A' EE00 F005          	lfsr	0,5
 31551  003E' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31552  0040' 26E9               	addwf	fsr0l,f,c
 31553  0042' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31554  0044' 22EA               	addwfc	fsr0h,f,c
 31555  0046' CFDF FFEF          	movff	indf2,indf0
 31556                           
 31557                           ; BSR set to: 0
 31558                           ;AES.c: 370: stateTable[9]=stateTable[13];
 31559  004A' EE20 F00D          	lfsr	2,13
 31560  004E' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31561  0050' 26D9               	addwf	fsr2l,f,c
 31562  0052' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31563  0054' 22DA               	addwfc	fsr2h,f,c
 31564  0056' EE00 F009          	lfsr	0,9
 31565  005A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31566  005C' 26E9               	addwf	fsr0l,f,c
 31567  005E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31568  0060' 22EA               	addwfc	fsr0h,f,c
 31569  0062' CFDF FFEF          	movff	indf2,indf0
 31570                           
 31571                           ; BSR set to: 0
 31572                           ;AES.c: 371: stateTable[13]=temp;
 31573  0066' EE20 F00D          	lfsr	2,13
 31574  006A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31575  006C' 26D9               	addwf	fsr2l,f,c
 31576  006E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31577  0070' 22DA               	addwfc	fsr2h,f,c
 31578  0072' C002' FFDF         	movff	EncodeShiftRow@temp,indf2
 31579                           
 31580                           ; BSR set to: 0
 31581                           ;AES.c: 374: temp=stateTable[2];
 31582  0076' EE20 F002          	lfsr	2,2
 31583  007A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31584  007C' 26D9               	addwf	fsr2l,f,c
 31585  007E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31586  0080' 22DA               	addwfc	fsr2h,f,c
 31587  0082' 50DF               	movf	indf2,w,c
 31588  0084' 6F00'              	movwf	EncodeShiftRow@temp& (0+255),b
 31589                           
 31590                           ; BSR set to: 0
 31591                           ;AES.c: 375: stateTable[2]=stateTable[10];
 31592  0086' EE20 F00A          	lfsr	2,10
 31593  008A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31594  008C' 26D9               	addwf	fsr2l,f,c
 31595  008E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31596  0090' 22DA               	addwfc	fsr2h,f,c
 31597  0092' EE00 F002          	lfsr	0,2
 31598  0096' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31599  0098' 26E9               	addwf	fsr0l,f,c
 31600  009A' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31601  009C' 22EA               	addwfc	fsr0h,f,c
 31602  009E' CFDF FFEF          	movff	indf2,indf0
 31603                           
 31604                           ;AES.c: 376: stateTable[10]=temp;
 31605  00A2' EE20 F00A          	lfsr	2,10
 31606  00A6' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31607  00A8' 26D9               	addwf	fsr2l,f,c
 31608  00AA' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31609  00AC' 22DA               	addwfc	fsr2h,f,c
 31610  00AE' C002' FFDF         	movff	EncodeShiftRow@temp,indf2
 31611                           
 31612                           ;AES.c: 377: temp=stateTable[14];
 31613  00B2' EE20 F00E          	lfsr	2,14
 31614  00B6' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31615  00B8' 26D9               	addwf	fsr2l,f,c
 31616  00BA' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31617  00BC' 22DA               	addwfc	fsr2h,f,c
 31618  00BE' 50DF               	movf	indf2,w,c
 31619  00C0' 6F00'              	movwf	EncodeShiftRow@temp& (0+255),b
 31620                           
 31621                           ; BSR set to: 0
 31622                           ;AES.c: 378: stateTable[14]=stateTable[6];
 31623  00C2' EE20 F006          	lfsr	2,6
 31624  00C6' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31625  00C8' 26D9               	addwf	fsr2l,f,c
 31626  00CA' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31627  00CC' 22DA               	addwfc	fsr2h,f,c
 31628  00CE' EE00 F00E          	lfsr	0,14
 31629  00D2' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31630  00D4' 26E9               	addwf	fsr0l,f,c
 31631  00D6' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31632  00D8' 22EA               	addwfc	fsr0h,f,c
 31633  00DA' CFDF FFEF          	movff	indf2,indf0
 31634                           
 31635                           ; BSR set to: 0
 31636                           ;AES.c: 379: stateTable[6]=temp;
 31637  00DE' EE20 F006          	lfsr	2,6
 31638  00E2' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31639  00E4' 26D9               	addwf	fsr2l,f,c
 31640  00E6' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31641  00E8' 22DA               	addwfc	fsr2h,f,c
 31642  00EA' C002' FFDF         	movff	EncodeShiftRow@temp,indf2
 31643                           
 31644                           ; BSR set to: 0
 31645                           ;AES.c: 382: temp=stateTable[3];
 31646  00EE' EE20 F003          	lfsr	2,3
 31647  00F2' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31648  00F4' 26D9               	addwf	fsr2l,f,c
 31649  00F6' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31650  00F8' 22DA               	addwfc	fsr2h,f,c
 31651  00FA' 50DF               	movf	indf2,w,c
 31652  00FC' 6F00'              	movwf	EncodeShiftRow@temp& (0+255),b
 31653                           
 31654                           ; BSR set to: 0
 31655                           ;AES.c: 383: stateTable[3]=stateTable[15];
 31656  00FE' EE20 F00F          	lfsr	2,15
 31657  0102' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31658  0104' 26D9               	addwf	fsr2l,f,c
 31659  0106' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31660  0108' 22DA               	addwfc	fsr2h,f,c
 31661  010A' EE00 F003          	lfsr	0,3
 31662  010E' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31663  0110' 26E9               	addwf	fsr0l,f,c
 31664  0112' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31665  0114' 22EA               	addwfc	fsr0h,f,c
 31666  0116' CFDF FFEF          	movff	indf2,indf0
 31667                           
 31668                           ; BSR set to: 0
 31669                           ;AES.c: 384: stateTable[15]=stateTable[11];
 31670  011A' EE20 F00B          	lfsr	2,11
 31671  011E' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31672  0120' 26D9               	addwf	fsr2l,f,c
 31673  0122' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31674  0124' 22DA               	addwfc	fsr2h,f,c
 31675  0126' EE00 F00F          	lfsr	0,15
 31676  012A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31677  012C' 26E9               	addwf	fsr0l,f,c
 31678  012E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31679  0130' 22EA               	addwfc	fsr0h,f,c
 31680  0132' CFDF FFEF          	movff	indf2,indf0
 31681                           
 31682                           ; BSR set to: 0
 31683                           ;AES.c: 385: stateTable[11]=stateTable[7];
 31684  0136' EE20 F007          	lfsr	2,7
 31685  013A' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31686  013C' 26D9               	addwf	fsr2l,f,c
 31687  013E' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31688  0140' 22DA               	addwfc	fsr2h,f,c
 31689  0142' EE00 F00B          	lfsr	0,11
 31690  0146' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31691  0148' 26E9               	addwf	fsr0l,f,c
 31692  014A' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31693  014C' 22EA               	addwfc	fsr0h,f,c
 31694  014E' CFDF FFEF          	movff	indf2,indf0
 31695                           
 31696                           ;AES.c: 386: stateTable[7]=temp;
 31697  0152' EE20 F007          	lfsr	2,7
 31698  0156' 5100'              	movf	EncodeShiftRow@stateTable& (0+255),w,b
 31699  0158' 26D9               	addwf	fsr2l,f,c
 31700  015A' 5100'              	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 31701  015C' 22DA               	addwfc	fsr2h,f,c
 31702  015E' C002' FFDF         	movff	EncodeShiftRow@temp,indf2
 31703                           
 31704                           ; BSR set to: 0
 31705  0162' 0012               	return		;funcret
 31706  0164'                    __end_of_EncodeShiftRow:
 31707                           	opt stack 0
 31708                           tosu	equ	0xFFF
 31709                           tosh	equ	0xFFE
 31710                           tosl	equ	0xFFD
 31711                           pclath	equ	0xFFA
 31712                           tblptru	equ	0xFF8
 31713                           tblptrh	equ	0xFF7
 31714                           tblptrl	equ	0xFF6
 31715                           tablat	equ	0xFF5
 31716                           prodh	equ	0xFF4
 31717                           prodl	equ	0xFF3
 31718                           intcon	equ	0xFF2
 31719                           intcon2	equ	0xFF1
 31720                           intcon3	equ	0xFF0
 31721                           indf0	equ	0xFEF
 31722                           postinc0	equ	0xFEE
 31723                           plusw0	equ	0xFEB
 31724                           fsr0h	equ	0xFEA
 31725                           fsr0l	equ	0xFE9
 31726                           wreg	equ	0xFE8
 31727                           postinc1	equ	0xFE6
 31728                           postdec1	equ	0xFE5
 31729                           plusw1	equ	0xFE3
 31730                           fsr1h	equ	0xFE2
 31731                           fsr1l	equ	0xFE1
 31732                           indf2	equ	0xFDF
 31733                           postinc2	equ	0xFDE
 31734                           postdec2	equ	0xFDD
 31735                           plusw2	equ	0xFDB
 31736                           fsr2h	equ	0xFDA
 31737                           fsr2l	equ	0xFD9
 31738                           status	equ	0xFD8
 31739                           
 31740 ;; *************** function _EncKeySchedule *****************
 31741 ;; Defined at:
 31742 ;;		line 312 in file "mcc_generated_files/LoRaWAN/AES.c"
 31743 ;; Parameters:    Size  Location     Type
 31744 ;;  key             2    0[BANK0 ] PTR unsigned char 
 31745 ;;		 -> AESEncodeLoRa@useKey(16), 
 31746 ;; Auto vars:     Size  Location     Type
 31747 ;;		None
 31748 ;; Return value:  Size  Location     Type
 31749 ;;                  1    wreg      void 
 31750 ;; Registers used:
 31751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31752 ;; Tracked objects:
 31753 ;;		On entry : 0/0
 31754 ;;		On exit  : 0/0
 31755 ;;		Unchanged: 0/0
 31756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31757 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31760 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31761 ;;Total ram usage:        6 bytes
 31762 ;; Hardware stack levels used:    1
 31763 ;; Hardware stack levels required when called:    7
 31764 ;; This function calls:
 31765 ;;		Nothing
 31766 ;; This function is called by:
 31767 ;;		_AESEncode
 31768 ;; This function uses a non-reentrant model
 31769 ;;
 31770                           
 31771                           	psect	text149
 31772  0000'                    __ptext149:
 31773                           	opt stack 0
 31774  0000'                    _EncKeySchedule:
 31775                           	opt stack 18
 31776                           
 31777                           ;AES.c: 315: key[0]^=STable[key[13]];
 31778                           
 31779                           ; BSR set to: 0
 31780                           ;incstack = 0
 31781  0000' 0100               	movlb	0	; () banked
 31782  0002' EE20 F00D          	lfsr	2,13
 31783  0006' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31784  0008' 26D9               	addwf	fsr2l,f,c
 31785  000A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31786  000C' 22DA               	addwfc	fsr2h,f,c
 31787  000E' 50DF               	movf	indf2,w,c
 31788  0010' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31789  0012' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31790  0014' 0D01               	mullw	1
 31791  0016' 0E00'              	movlw	low _STable
 31792  0018' 24F3               	addwf	prodl,w,c
 31793  001A' 6EF6               	movwf	tblptrl,c
 31794  001C' 0E00'              	movlw	high _STable
 31795  001E' 20F4               	addwfc	prodh,w,c
 31796  0020' 6EF7               	movwf	tblptrh,c
 31797  0022'                    	if	1	;There are 3 active tblptr bytes
 31798  0022' 6AF8               	clrf	tblptru,c
 31799  0024' 0E00'              	movlw	low (__mediumconst shr (0+16))
 31800  0026' 22F8               	addwfc	tblptru,f,c
 31801  0028'                    	endif
 31802  0028' 0008               	tblrd		*
 31803  002A' CFF5 F003'         	movff	tablat,??_EncKeySchedule+1
 31804  002E' C000' FFD9         	movff	EncKeySchedule@key,fsr2l
 31805  0032' C001' FFDA         	movff	EncKeySchedule@key+1,fsr2h
 31806  0036' 5100'              	movf	(??_EncKeySchedule+1)& (0+255),w,b
 31807  0038' 1ADF               	xorwf	indf2,f,c
 31808                           
 31809                           ;AES.c: 316: key[1]^=STable[key[14]];
 31810  003A' EE20 F00E          	lfsr	2,14
 31811  003E' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31812  0040' 26D9               	addwf	fsr2l,f,c
 31813  0042' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31814  0044' 22DA               	addwfc	fsr2h,f,c
 31815  0046' 50DF               	movf	indf2,w,c
 31816  0048' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31817  004A' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31818  004C' 0D01               	mullw	1
 31819  004E' 0E00'              	movlw	low _STable
 31820  0050' 24F3               	addwf	prodl,w,c
 31821  0052' 6EF6               	movwf	tblptrl,c
 31822  0054' 0E00'              	movlw	high _STable
 31823  0056' 20F4               	addwfc	prodh,w,c
 31824  0058' 6EF7               	movwf	tblptrh,c
 31825  005A'                    	if	1	;There are 3 active tblptr bytes
 31826  005A' 6AF8               	clrf	tblptru,c
 31827  005C' 0E00'              	movlw	low (__mediumconst shr (0+16))
 31828  005E' 22F8               	addwfc	tblptru,f,c
 31829  0060'                    	endif
 31830  0060' 0008               	tblrd		*
 31831  0062' CFF5 F003'         	movff	tablat,??_EncKeySchedule+1
 31832  0066' EE20 F001          	lfsr	2,1
 31833  006A' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31834  006C' 26D9               	addwf	fsr2l,f,c
 31835  006E' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31836  0070' 22DA               	addwfc	fsr2h,f,c
 31837  0072' 5100'              	movf	(??_EncKeySchedule+1)& (0+255),w,b
 31838  0074' 1ADF               	xorwf	indf2,f,c
 31839                           
 31840                           ;AES.c: 317: key[2]^=STable[key[15]];
 31841  0076' EE20 F00F          	lfsr	2,15
 31842  007A' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31843  007C' 26D9               	addwf	fsr2l,f,c
 31844  007E' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31845  0080' 22DA               	addwfc	fsr2h,f,c
 31846  0082' 50DF               	movf	indf2,w,c
 31847  0084' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31848  0086' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31849  0088' 0D01               	mullw	1
 31850  008A' 0E00'              	movlw	low _STable
 31851  008C' 24F3               	addwf	prodl,w,c
 31852  008E' 6EF6               	movwf	tblptrl,c
 31853  0090' 0E00'              	movlw	high _STable
 31854  0092' 20F4               	addwfc	prodh,w,c
 31855  0094' 6EF7               	movwf	tblptrh,c
 31856  0096'                    	if	1	;There are 3 active tblptr bytes
 31857  0096' 6AF8               	clrf	tblptru,c
 31858  0098' 0E00'              	movlw	low (__mediumconst shr (0+16))
 31859  009A' 22F8               	addwfc	tblptru,f,c
 31860  009C'                    	endif
 31861  009C' 0008               	tblrd		*
 31862  009E' CFF5 F003'         	movff	tablat,??_EncKeySchedule+1
 31863  00A2' EE20 F002          	lfsr	2,2
 31864  00A6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31865  00A8' 26D9               	addwf	fsr2l,f,c
 31866  00AA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31867  00AC' 22DA               	addwfc	fsr2h,f,c
 31868  00AE' 5100'              	movf	(??_EncKeySchedule+1)& (0+255),w,b
 31869  00B0' 1ADF               	xorwf	indf2,f,c
 31870                           
 31871                           ;AES.c: 318: key[3]^=STable[key[12]];
 31872  00B2' EE20 F00C          	lfsr	2,12
 31873  00B6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31874  00B8' 26D9               	addwf	fsr2l,f,c
 31875  00BA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31876  00BC' 22DA               	addwfc	fsr2h,f,c
 31877  00BE' 50DF               	movf	indf2,w,c
 31878  00C0' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31879  00C2' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31880  00C4' 0D01               	mullw	1
 31881  00C6' 0E00'              	movlw	low _STable
 31882  00C8' 24F3               	addwf	prodl,w,c
 31883  00CA' 6EF6               	movwf	tblptrl,c
 31884  00CC' 0E00'              	movlw	high _STable
 31885  00CE' 20F4               	addwfc	prodh,w,c
 31886  00D0' 6EF7               	movwf	tblptrh,c
 31887  00D2'                    	if	1	;There are 3 active tblptr bytes
 31888  00D2' 6AF8               	clrf	tblptru,c
 31889  00D4' 0E00'              	movlw	low (__mediumconst shr (0+16))
 31890  00D6' 22F8               	addwfc	tblptru,f,c
 31891  00D8'                    	endif
 31892  00D8' 0008               	tblrd		*
 31893  00DA' CFF5 F003'         	movff	tablat,??_EncKeySchedule+1
 31894  00DE' EE20 F003          	lfsr	2,3
 31895  00E2' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31896  00E4' 26D9               	addwf	fsr2l,f,c
 31897  00E6' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31898  00E8' 22DA               	addwfc	fsr2h,f,c
 31899  00EA' 5100'              	movf	(??_EncKeySchedule+1)& (0+255),w,b
 31900  00EC' 1ADF               	xorwf	indf2,f,c
 31901                           
 31902                           ; BSR set to: 0
 31903                           ;AES.c: 320: key[0]^=_rcon;
 31904  00EE' C000' FFD9         	movff	EncKeySchedule@key,fsr2l
 31905  00F2' C001' FFDA         	movff	EncKeySchedule@key+1,fsr2h
 31906  00F6' 500B'              	movf	__rcon,w,c
 31907  00F8' 1ADF               	xorwf	indf2,f,c
 31908                           
 31909                           ; BSR set to: 0
 31910                           ;AES.c: 321: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 31911  00FA' 0E7F               	movlw	127
 31912  00FC' 640B'              	cpfsgt	__rcon,c
 31913  00FE' D00C               	goto	l70
 31914                           
 31915                           ; BSR set to: 0
 31916  0100' 0E1B               	movlw	27
 31917  0102' C00B' F002'        	movff	__rcon,??_EncKeySchedule
 31918  0106' 6B00'              	clrf	(??_EncKeySchedule+1)& (0+255),b
 31919  0108' 90D8               	bcf	status,0,c
 31920  010A' 3700'              	rlcf	??_EncKeySchedule& (0+255),f,b
 31921  010C' 3700'              	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 31922  010E' 1900'              	xorwf	??_EncKeySchedule& (0+255),w,b
 31923  0110' 6F00'              	movwf	_EncKeySchedule$86& (0+255),b
 31924  0112' 5100'              	movf	(??_EncKeySchedule+1)& (0+255),w,b
 31925  0114' 6F00'              	movwf	(_EncKeySchedule$86+1)& (0+255),b
 31926  0116' D005               	goto	l72
 31927  0118'                    l70:
 31928                           
 31929                           ; BSR set to: 0
 31930                           
 31931                           ; BSR set to: 0
 31932  0118' 90D8               	bcf	status,0,c
 31933  011A' 340B'              	rlcf	__rcon,w,c
 31934  011C' 6F00'              	movwf	_EncKeySchedule$86& (0+255),b
 31935  011E' 6B00'              	clrf	(_EncKeySchedule$86+1)& (0+255),b
 31936  0120' 3700'              	rlcf	(_EncKeySchedule$86+1)& (0+255),f,b
 31937  0122'                    l72:
 31938                           
 31939                           ; BSR set to: 0
 31940                           
 31941                           ; BSR set to: 0
 31942  0122' C004' F00B'        	movff	_EncKeySchedule$86,__rcon
 31943                           
 31944                           ; BSR set to: 0
 31945                           ;AES.c: 324: key[4]^=key[0];
 31946  0126' C000' FFD9         	movff	EncKeySchedule@key,fsr2l
 31947  012A' C001' FFDA         	movff	EncKeySchedule@key+1,fsr2h
 31948  012E' 50DF               	movf	indf2,w,c
 31949  0130' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31950  0132' EE20 F004          	lfsr	2,4
 31951  0136' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31952  0138' 26D9               	addwf	fsr2l,f,c
 31953  013A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31954  013C' 22DA               	addwfc	fsr2h,f,c
 31955  013E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31956  0140' 1ADF               	xorwf	indf2,f,c
 31957                           
 31958                           ; BSR set to: 0
 31959                           ;AES.c: 325: key[5]^=key[1];
 31960  0142' EE20 F001          	lfsr	2,1
 31961  0146' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31962  0148' 26D9               	addwf	fsr2l,f,c
 31963  014A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31964  014C' 22DA               	addwfc	fsr2h,f,c
 31965  014E' 50DF               	movf	indf2,w,c
 31966  0150' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31967  0152' EE20 F005          	lfsr	2,5
 31968  0156' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31969  0158' 26D9               	addwf	fsr2l,f,c
 31970  015A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31971  015C' 22DA               	addwfc	fsr2h,f,c
 31972  015E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31973  0160' 1ADF               	xorwf	indf2,f,c
 31974                           
 31975                           ; BSR set to: 0
 31976                           ;AES.c: 326: key[6]^=key[2];
 31977  0162' EE20 F002          	lfsr	2,2
 31978  0166' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31979  0168' 26D9               	addwf	fsr2l,f,c
 31980  016A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31981  016C' 22DA               	addwfc	fsr2h,f,c
 31982  016E' 50DF               	movf	indf2,w,c
 31983  0170' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 31984  0172' EE20 F006          	lfsr	2,6
 31985  0176' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31986  0178' 26D9               	addwf	fsr2l,f,c
 31987  017A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31988  017C' 22DA               	addwfc	fsr2h,f,c
 31989  017E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 31990  0180' 1ADF               	xorwf	indf2,f,c
 31991                           
 31992                           ; BSR set to: 0
 31993                           ;AES.c: 327: key[7]^=key[3];
 31994  0182' EE20 F003          	lfsr	2,3
 31995  0186' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 31996  0188' 26D9               	addwf	fsr2l,f,c
 31997  018A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 31998  018C' 22DA               	addwfc	fsr2h,f,c
 31999  018E' 50DF               	movf	indf2,w,c
 32000  0190' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32001  0192' EE20 F007          	lfsr	2,7
 32002  0196' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32003  0198' 26D9               	addwf	fsr2l,f,c
 32004  019A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32005  019C' 22DA               	addwfc	fsr2h,f,c
 32006  019E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32007  01A0' 1ADF               	xorwf	indf2,f,c
 32008                           
 32009                           ; BSR set to: 0
 32010                           ;AES.c: 330: key[8]^=key[4];
 32011  01A2' EE20 F004          	lfsr	2,4
 32012  01A6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32013  01A8' 26D9               	addwf	fsr2l,f,c
 32014  01AA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32015  01AC' 22DA               	addwfc	fsr2h,f,c
 32016  01AE' 50DF               	movf	indf2,w,c
 32017  01B0' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32018  01B2' EE20 F008          	lfsr	2,8
 32019  01B6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32020  01B8' 26D9               	addwf	fsr2l,f,c
 32021  01BA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32022  01BC' 22DA               	addwfc	fsr2h,f,c
 32023  01BE' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32024  01C0' 1ADF               	xorwf	indf2,f,c
 32025                           
 32026                           ; BSR set to: 0
 32027                           ;AES.c: 331: key[9]^=key[5];
 32028  01C2' EE20 F005          	lfsr	2,5
 32029  01C6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32030  01C8' 26D9               	addwf	fsr2l,f,c
 32031  01CA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32032  01CC' 22DA               	addwfc	fsr2h,f,c
 32033  01CE' 50DF               	movf	indf2,w,c
 32034  01D0' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32035  01D2' EE20 F009          	lfsr	2,9
 32036  01D6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32037  01D8' 26D9               	addwf	fsr2l,f,c
 32038  01DA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32039  01DC' 22DA               	addwfc	fsr2h,f,c
 32040  01DE' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32041  01E0' 1ADF               	xorwf	indf2,f,c
 32042                           
 32043                           ; BSR set to: 0
 32044                           ;AES.c: 332: key[10]^=key[6];
 32045  01E2' EE20 F006          	lfsr	2,6
 32046  01E6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32047  01E8' 26D9               	addwf	fsr2l,f,c
 32048  01EA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32049  01EC' 22DA               	addwfc	fsr2h,f,c
 32050  01EE' 50DF               	movf	indf2,w,c
 32051  01F0' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32052  01F2' EE20 F00A          	lfsr	2,10
 32053  01F6' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32054  01F8' 26D9               	addwf	fsr2l,f,c
 32055  01FA' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32056  01FC' 22DA               	addwfc	fsr2h,f,c
 32057  01FE' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32058  0200' 1ADF               	xorwf	indf2,f,c
 32059                           
 32060                           ; BSR set to: 0
 32061                           ;AES.c: 333: key[11]^=key[7];
 32062  0202' EE20 F007          	lfsr	2,7
 32063  0206' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32064  0208' 26D9               	addwf	fsr2l,f,c
 32065  020A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32066  020C' 22DA               	addwfc	fsr2h,f,c
 32067  020E' 50DF               	movf	indf2,w,c
 32068  0210' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32069  0212' EE20 F00B          	lfsr	2,11
 32070  0216' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32071  0218' 26D9               	addwf	fsr2l,f,c
 32072  021A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32073  021C' 22DA               	addwfc	fsr2h,f,c
 32074  021E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32075  0220' 1ADF               	xorwf	indf2,f,c
 32076                           
 32077                           ; BSR set to: 0
 32078                           ;AES.c: 336: key[12]^=key[8];
 32079  0222' EE20 F008          	lfsr	2,8
 32080  0226' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32081  0228' 26D9               	addwf	fsr2l,f,c
 32082  022A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32083  022C' 22DA               	addwfc	fsr2h,f,c
 32084  022E' 50DF               	movf	indf2,w,c
 32085  0230' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32086  0232' EE20 F00C          	lfsr	2,12
 32087  0236' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32088  0238' 26D9               	addwf	fsr2l,f,c
 32089  023A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32090  023C' 22DA               	addwfc	fsr2h,f,c
 32091  023E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32092  0240' 1ADF               	xorwf	indf2,f,c
 32093                           
 32094                           ; BSR set to: 0
 32095                           ;AES.c: 337: key[13]^=key[9];
 32096  0242' EE20 F009          	lfsr	2,9
 32097  0246' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32098  0248' 26D9               	addwf	fsr2l,f,c
 32099  024A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32100  024C' 22DA               	addwfc	fsr2h,f,c
 32101  024E' 50DF               	movf	indf2,w,c
 32102  0250' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32103  0252' EE20 F00D          	lfsr	2,13
 32104  0256' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32105  0258' 26D9               	addwf	fsr2l,f,c
 32106  025A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32107  025C' 22DA               	addwfc	fsr2h,f,c
 32108  025E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32109  0260' 1ADF               	xorwf	indf2,f,c
 32110                           
 32111                           ; BSR set to: 0
 32112                           ;AES.c: 338: key[14]^=key[10];
 32113  0262' EE20 F00A          	lfsr	2,10
 32114  0266' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32115  0268' 26D9               	addwf	fsr2l,f,c
 32116  026A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32117  026C' 22DA               	addwfc	fsr2h,f,c
 32118  026E' 50DF               	movf	indf2,w,c
 32119  0270' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32120  0272' EE20 F00E          	lfsr	2,14
 32121  0276' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32122  0278' 26D9               	addwf	fsr2l,f,c
 32123  027A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32124  027C' 22DA               	addwfc	fsr2h,f,c
 32125  027E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32126  0280' 1ADF               	xorwf	indf2,f,c
 32127                           
 32128                           ; BSR set to: 0
 32129                           ;AES.c: 339: key[15]^=key[11];
 32130  0282' EE20 F00B          	lfsr	2,11
 32131  0286' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32132  0288' 26D9               	addwf	fsr2l,f,c
 32133  028A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32134  028C' 22DA               	addwfc	fsr2h,f,c
 32135  028E' 50DF               	movf	indf2,w,c
 32136  0290' 6F00'              	movwf	??_EncKeySchedule& (0+255),b
 32137  0292' EE20 F00F          	lfsr	2,15
 32138  0296' 5100'              	movf	EncKeySchedule@key& (0+255),w,b
 32139  0298' 26D9               	addwf	fsr2l,f,c
 32140  029A' 5100'              	movf	(EncKeySchedule@key+1)& (0+255),w,b
 32141  029C' 22DA               	addwfc	fsr2h,f,c
 32142  029E' 5100'              	movf	??_EncKeySchedule& (0+255),w,b
 32143  02A0' 1ADF               	xorwf	indf2,f,c
 32144                           
 32145                           ; BSR set to: 0
 32146  02A2' 0012               	return		;funcret
 32147  02A4'                    __end_of_EncKeySchedule:
 32148                           	opt stack 0
 32149                           tosu	equ	0xFFF
 32150                           tosh	equ	0xFFE
 32151                           tosl	equ	0xFFD
 32152                           pclath	equ	0xFFA
 32153                           tblptru	equ	0xFF8
 32154                           tblptrh	equ	0xFF7
 32155                           tblptrl	equ	0xFF6
 32156                           tablat	equ	0xFF5
 32157                           prodh	equ	0xFF4
 32158                           prodl	equ	0xFF3
 32159                           intcon	equ	0xFF2
 32160                           intcon2	equ	0xFF1
 32161                           intcon3	equ	0xFF0
 32162                           indf0	equ	0xFEF
 32163                           postinc0	equ	0xFEE
 32164                           plusw0	equ	0xFEB
 32165                           fsr0h	equ	0xFEA
 32166                           fsr0l	equ	0xFE9
 32167                           wreg	equ	0xFE8
 32168                           postinc1	equ	0xFE6
 32169                           postdec1	equ	0xFE5
 32170                           plusw1	equ	0xFE3
 32171                           fsr1h	equ	0xFE2
 32172                           fsr1l	equ	0xFE1
 32173                           indf2	equ	0xFDF
 32174                           postinc2	equ	0xFDE
 32175                           postdec2	equ	0xFDD
 32176                           plusw2	equ	0xFDB
 32177                           fsr2h	equ	0xFDA
 32178                           fsr2l	equ	0xFD9
 32179                           status	equ	0xFD8
 32180                           
 32181 ;; *************** function _LORAWAN_Init *****************
 32182 ;; Defined at:
 32183 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 32184 ;; Parameters:    Size  Location     Type
 32185 ;;  RxPayload       2   81[BANK0 ] PTR FTN(PTR unsigned cha
 32186 ;;		 -> RxData(1), 
 32187 ;;  RxJoinRespon    2   83[BANK0 ] PTR FTN(unsigned char ,)
 32188 ;;		 -> RxJoinResponse(1), 
 32189 ;; Auto vars:     Size  Location     Type
 32190 ;;		None
 32191 ;; Return value:  Size  Location     Type
 32192 ;;                  1    wreg      void 
 32193 ;; Registers used:
 32194 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32195 ;; Tracked objects:
 32196 ;;		On entry : 0/0
 32197 ;;		On exit  : 0/0
 32198 ;;		Unchanged: 0/0
 32199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32200 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32203 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32204 ;;Total ram usage:        4 bytes
 32205 ;; Hardware stack levels used:    1
 32206 ;; Hardware stack levels required when called:   13
 32207 ;; This function calls:
 32208 ;;		_CreateAllSoftwareTimers
 32209 ;;		_LORAWAN_Reset
 32210 ;;		_RADIO_Init
 32211 ;;		_RADIO_ReadRandom
 32212 ;;		_SetCallbackSoftwareTimers
 32213 ;;		_StopAllSoftwareTimers
 32214 ;;		_srand
 32215 ;; This function is called by:
 32216 ;;		_main
 32217 ;; This function uses a non-reentrant model
 32218 ;;
 32219                           
 32220                           	psect	text150
 32221  0000'                    __ptext150:
 32222                           	opt stack 0
 32223  0000'                    _LORAWAN_Init:
 32224                           	opt stack 17
 32225                           
 32226                           ;lorawan_na.c: 118: if (loRa.macInitialized == 0)
 32227                           
 32228                           ; BSR set to: 0
 32229                           ;incstack = 0
 32230  0000' 0102               	movlb	2	; () banked
 32231  0002' 5100'              	movf	(_loRa+225)& (0+255),w,b
 32232  0004' A4D8               	btfss	status,2,c
 32233  0006' D008               	goto	l1387
 32234                           
 32235                           ; BSR set to: 2
 32236                           ;lorawan_na.c: 119: {
 32237                           ;lorawan_na.c: 120: CreateAllSoftwareTimers ();
 32238  0008' EC00' F000'        	call	_CreateAllSoftwareTimers	;wreg free
 32239                           
 32240                           ;lorawan_na.c: 121: SetCallbackSoftwareTimers ();
 32241  000C' EC00' F000'        	call	_SetCallbackSoftwareTimers	;wreg free
 32242                           
 32243                           ;lorawan_na.c: 122: loRa.macInitialized = 1;
 32244  0010' 0E01               	movlw	1
 32245  0012' 0102               	movlb	2	; () banked
 32246  0014' 6F00'              	movwf	(_loRa+225)& (0+255),b
 32247                           
 32248                           ;lorawan_na.c: 123: }
 32249  0016' D002               	goto	l1388
 32250  0018'                    l1387:
 32251                           
 32252                           ; BSR set to: 2
 32253                           ;lorawan_na.c: 124: else
 32254                           ;lorawan_na.c: 125: {
 32255                           ;lorawan_na.c: 126: StopAllSoftwareTimers ();
 32256                           
 32257                           ; BSR set to: 2
 32258  0018' EC00' F000'        	call	_StopAllSoftwareTimers	;wreg free
 32259  001C'                    l1388:
 32260                           
 32261                           ;lorawan_na.c: 127: }
 32262                           ;lorawan_na.c: 129: rxPayload.RxAppData = RxPayload;
 32263  001C' C051' F000'        	movff	LORAWAN_Init@RxPayload,_rxPayload
 32264  0020' C052' F001'        	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 32265                           
 32266                           ;lorawan_na.c: 130: rxPayload.RxJoinResponse = RxJoinResponse;
 32267  0024' C053' F002'        	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 32268  0028' C054' F003'        	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 32269                           
 32270                           ;lorawan_na.c: 132: RADIO_Init(&radioBuffer[16], (923300000));
 32271  002C' 0E00'              	movlw	low (_radioBuffer+16)
 32272  002E' 0100               	movlb	0	; () banked
 32273  0030' 6F00'              	movwf	RADIO_Init@radioBuffer& (0+255),b
 32274  0032' 0E00'              	movlw	high (_radioBuffer+16)
 32275  0034' 6F00'              	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 32276  0036' 0EA0               	movlw	160
 32277  0038' 6F00'              	movwf	RADIO_Init@frequency& (0+255),b
 32278  003A' 0E70               	movlw	112
 32279  003C' 6F00'              	movwf	(RADIO_Init@frequency+1)& (0+255),b
 32280  003E' 0E08               	movlw	8
 32281  0040' 6F00'              	movwf	(RADIO_Init@frequency+2)& (0+255),b
 32282  0042' 0E37               	movlw	55
 32283  0044' 6F00'              	movwf	(RADIO_Init@frequency+3)& (0+255),b
 32284  0046' EC00' F000'        	call	_RADIO_Init	;wreg free
 32285                           
 32286                           ;lorawan_na.c: 134: srand (RADIO_ReadRandom ());
 32287  004A' EC00' F000'        	call	_RADIO_ReadRandom	;wreg free
 32288  004E' C00C' F012'        	movff	?_RADIO_ReadRandom,srand@x
 32289  0052' C00D' F013'        	movff	?_RADIO_ReadRandom+1,srand@x+1
 32290  0056' EC00' F000'        	call	_srand	;wreg free
 32291                           
 32292                           ;lorawan_na.c: 136: LORAWAN_Reset ();
 32293  005A' EC00' F000'        	call	_LORAWAN_Reset	;wreg free
 32294  005E' 0012               	return		;funcret
 32295  0060'                    __end_of_LORAWAN_Init:
 32296                           	opt stack 0
 32297                           tosu	equ	0xFFF
 32298                           tosh	equ	0xFFE
 32299                           tosl	equ	0xFFD
 32300                           pclath	equ	0xFFA
 32301                           tblptru	equ	0xFF8
 32302                           tblptrh	equ	0xFF7
 32303                           tblptrl	equ	0xFF6
 32304                           tablat	equ	0xFF5
 32305                           prodh	equ	0xFF4
 32306                           prodl	equ	0xFF3
 32307                           intcon	equ	0xFF2
 32308                           intcon2	equ	0xFF1
 32309                           intcon3	equ	0xFF0
 32310                           indf0	equ	0xFEF
 32311                           postinc0	equ	0xFEE
 32312                           plusw0	equ	0xFEB
 32313                           fsr0h	equ	0xFEA
 32314                           fsr0l	equ	0xFE9
 32315                           wreg	equ	0xFE8
 32316                           postinc1	equ	0xFE6
 32317                           postdec1	equ	0xFE5
 32318                           plusw1	equ	0xFE3
 32319                           fsr1h	equ	0xFE2
 32320                           fsr1l	equ	0xFE1
 32321                           indf2	equ	0xFDF
 32322                           postinc2	equ	0xFDE
 32323                           postdec2	equ	0xFDD
 32324                           plusw2	equ	0xFDB
 32325                           fsr2h	equ	0xFDA
 32326                           fsr2l	equ	0xFD9
 32327                           status	equ	0xFD8
 32328                           
 32329 ;; *************** function _srand *****************
 32330 ;; Defined at:
 32331 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 32332 ;; Parameters:    Size  Location     Type
 32333 ;;  x               2   18[BANK0 ] unsigned int 
 32334 ;; Auto vars:     Size  Location     Type
 32335 ;;		None
 32336 ;; Return value:  Size  Location     Type
 32337 ;;                  1    wreg      void 
 32338 ;; Registers used:
 32339 ;;		status,2
 32340 ;; Tracked objects:
 32341 ;;		On entry : 0/0
 32342 ;;		On exit  : 0/0
 32343 ;;		Unchanged: 0/0
 32344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32345 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32349 ;;Total ram usage:        2 bytes
 32350 ;; Hardware stack levels used:    1
 32351 ;; Hardware stack levels required when called:    7
 32352 ;; This function calls:
 32353 ;;		Nothing
 32354 ;; This function is called by:
 32355 ;;		_LORAWAN_Init
 32356 ;; This function uses a non-reentrant model
 32357 ;;
 32358                           
 32359                           	psect	text151
 32360  0000'                    __ptext151:
 32361                           	opt stack 0
 32362  0000'                    _srand:
 32363                           	opt stack 22
 32364                           
 32365                           ;incstack = 0
 32366  0000' C012' F010'        	movff	srand@x,_randx
 32367  0004' C013' F011'        	movff	srand@x+1,_randx+1
 32368  0008' 0101               	movlb	1	; () banked
 32369  000A' 6B00'              	clrf	(_randx+2)& (0+255),b
 32370  000C' 6B00'              	clrf	(_randx+3)& (0+255),b
 32371                           
 32372                           ; BSR set to: 1
 32373  000E' 0012               	return		;funcret
 32374  0010'                    __end_of_srand:
 32375                           	opt stack 0
 32376                           tosu	equ	0xFFF
 32377                           tosh	equ	0xFFE
 32378                           tosl	equ	0xFFD
 32379                           pclath	equ	0xFFA
 32380                           tblptru	equ	0xFF8
 32381                           tblptrh	equ	0xFF7
 32382                           tblptrl	equ	0xFF6
 32383                           tablat	equ	0xFF5
 32384                           prodh	equ	0xFF4
 32385                           prodl	equ	0xFF3
 32386                           intcon	equ	0xFF2
 32387                           intcon2	equ	0xFF1
 32388                           intcon3	equ	0xFF0
 32389                           indf0	equ	0xFEF
 32390                           postinc0	equ	0xFEE
 32391                           plusw0	equ	0xFEB
 32392                           fsr0h	equ	0xFEA
 32393                           fsr0l	equ	0xFE9
 32394                           wreg	equ	0xFE8
 32395                           postinc1	equ	0xFE6
 32396                           postdec1	equ	0xFE5
 32397                           plusw1	equ	0xFE3
 32398                           fsr1h	equ	0xFE2
 32399                           fsr1l	equ	0xFE1
 32400                           indf2	equ	0xFDF
 32401                           postinc2	equ	0xFDE
 32402                           postdec2	equ	0xFDD
 32403                           plusw2	equ	0xFDB
 32404                           fsr2h	equ	0xFDA
 32405                           fsr2l	equ	0xFD9
 32406                           status	equ	0xFD8
 32407                           
 32408 ;; *************** function _SetCallbackSoftwareTimers *****************
 32409 ;; Defined at:
 32410 ;;		line 803 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 32411 ;; Parameters:    Size  Location     Type
 32412 ;;		None
 32413 ;; Auto vars:     Size  Location     Type
 32414 ;;		None
 32415 ;; Return value:  Size  Location     Type
 32416 ;;                  1    wreg      void 
 32417 ;; Registers used:
 32418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 32419 ;; Tracked objects:
 32420 ;;		On entry : 0/0
 32421 ;;		On exit  : 0/0
 32422 ;;		Unchanged: 0/0
 32423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32428 ;;Total ram usage:        0 bytes
 32429 ;; Hardware stack levels used:    1
 32430 ;; Hardware stack levels required when called:    8
 32431 ;; This function calls:
 32432 ;;		_SwTimerSetCallback
 32433 ;; This function is called by:
 32434 ;;		_LORAWAN_Init
 32435 ;; This function uses a non-reentrant model
 32436 ;;
 32437                           
 32438                           	psect	text152
 32439  0000'                    __ptext152:
 32440                           	opt stack 0
 32441  0000'                    _SetCallbackSoftwareTimers:
 32442                           	opt stack 21
 32443                           
 32444                           ;lorawan_na.c: 805: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 32445                           
 32446                           ; BSR set to: 1
 32447                           ;incstack = 0
 32448  0000' 0E00'              	movlw	low _LORAWAN_ReceiveWindow1Callback
 32449  0002' 0100               	movlb	0	; () banked
 32450  0004' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32451  0006' 0E00'              	movlw	high _LORAWAN_ReceiveWindow1Callback
 32452  0008' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32453  000A' 0E00               	movlw	0
 32454  000C' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32455  000E' 0102               	movlb	2	; () banked
 32456  0010' 5100'              	movf	(_loRa+211)& (0+255),w,b
 32457  0012' EC00' F000'        	call	_SwTimerSetCallback
 32458                           
 32459                           ;lorawan_na.c: 806: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 32460  0016' 0E00'              	movlw	low _LORAWAN_ReceiveWindow2Callback
 32461  0018' 0100               	movlb	0	; () banked
 32462  001A' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32463  001C' 0E00'              	movlw	high _LORAWAN_ReceiveWindow2Callback
 32464  001E' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32465  0020' 0E00               	movlw	0
 32466  0022' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32467  0024' 0102               	movlb	2	; () banked
 32468  0026' 5100'              	movf	(_loRa+212)& (0+255),w,b
 32469  0028' EC00' F000'        	call	_SwTimerSetCallback
 32470                           
 32471                           ;lorawan_na.c: 807: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 32472  002C' 0E00'              	movlw	low _LORAWAN_LinkCheckCallback
 32473  002E' 0100               	movlb	0	; () banked
 32474  0030' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32475  0032' 0E00'              	movlw	high _LORAWAN_LinkCheckCallback
 32476  0034' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32477  0036' 0E00               	movlw	0
 32478  0038' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32479  003A' 0102               	movlb	2	; () banked
 32480  003C' 5100'              	movf	(_loRa+216)& (0+255),w,b
 32481  003E' EC00' F000'        	call	_SwTimerSetCallback
 32482                           
 32483                           ;lorawan_na.c: 808: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 32484  0042' 0E00'              	movlw	low _LORAWAN_ReceiveWindow1Callback
 32485  0044' 0100               	movlb	0	; () banked
 32486  0046' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32487  0048' 0E00'              	movlw	high _LORAWAN_ReceiveWindow1Callback
 32488  004A' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32489  004C' 0E00               	movlw	0
 32490  004E' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32491  0050' 0102               	movlb	2	; () banked
 32492  0052' 5100'              	movf	(_loRa+213)& (0+255),w,b
 32493  0054' EC00' F000'        	call	_SwTimerSetCallback
 32494                           
 32495                           ;lorawan_na.c: 809: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 32496  0058' 0E00'              	movlw	low _LORAWAN_ReceiveWindow2Callback
 32497  005A' 0100               	movlb	0	; () banked
 32498  005C' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32499  005E' 0E00'              	movlw	high _LORAWAN_ReceiveWindow2Callback
 32500  0060' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32501  0062' 0E00               	movlw	0
 32502  0064' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32503  0066' 0102               	movlb	2	; () banked
 32504  0068' 5100'              	movf	(_loRa+214)& (0+255),w,b
 32505  006A' EC00' F000'        	call	_SwTimerSetCallback
 32506                           
 32507                           ;lorawan_na.c: 810: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 32508  006E' 0E00'              	movlw	low _AckRetransmissionCallback
 32509  0070' 0100               	movlb	0	; () banked
 32510  0072' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32511  0074' 0E00'              	movlw	high _AckRetransmissionCallback
 32512  0076' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32513  0078' 0E00               	movlw	0
 32514  007A' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32515  007C' 0102               	movlb	2	; () banked
 32516  007E' 5100'              	movf	(_loRa+217)& (0+255),w,b
 32517  0080' EC00' F000'        	call	_SwTimerSetCallback
 32518                           
 32519                           ;lorawan_na.c: 811: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 32520  0084' 0E00'              	movlw	low _AutomaticReplyCallback
 32521  0086' 0100               	movlb	0	; () banked
 32522  0088' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32523  008A' 0E00'              	movlw	high _AutomaticReplyCallback
 32524  008C' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32525  008E' 0E00               	movlw	0
 32526  0090' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32527  0092' 0102               	movlb	2	; () banked
 32528  0094' 5100'              	movf	(_loRa+215)& (0+255),w,b
 32529  0096' EC00' F000'        	call	_SwTimerSetCallback
 32530                           
 32531                           ;lorawan_na.c: 812: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 32532  009A' 0E00'              	movlw	low _UnconfirmedTransmissionCallback
 32533  009C' 0100               	movlb	0	; () banked
 32534  009E' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32535  00A0' 0E00'              	movlw	high _UnconfirmedTransmissionCallback
 32536  00A2' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32537  00A4' 0E00               	movlw	0
 32538  00A6' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32539  00A8' 0102               	movlb	2	; () banked
 32540  00AA' 5100'              	movf	(_loRa+219)& (0+255),w,b
 32541  00AC' EC00' F000'        	call	_SwTimerSetCallback
 32542                           
 32543                           ;lorawan_na.c: 813: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 32544  00B0' 0E00'              	movlw	low _UpdateJoinSuccessState
 32545  00B2' 0100               	movlb	0	; () banked
 32546  00B4' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32547  00B6' 0E00'              	movlw	high _UpdateJoinSuccessState
 32548  00B8' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32549  00BA' 0E00               	movlw	0
 32550  00BC' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32551  00BE' 0102               	movlb	2	; () banked
 32552  00C0' 5100'              	movf	(_loRa+228)& (0+255),w,b
 32553  00C2' EC00' F000'        	call	_SwTimerSetCallback
 32554                           
 32555                           ;lorawan_na.c: 814: SwTimerSetCallback(loRa.transmissionErrorTimerId, TransmissionErrorC
      +                          allback, 0);
 32556  00C6' 0E00'              	movlw	low _TransmissionErrorCallback
 32557  00C8' 0100               	movlb	0	; () banked
 32558  00CA' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 32559  00CC' 0E00'              	movlw	high _TransmissionErrorCallback
 32560  00CE' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 32561  00D0' 0E00               	movlw	0
 32562  00D2' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 32563  00D4' 0102               	movlb	2	; () banked
 32564  00D6' 5100'              	movf	(_loRa+229)& (0+255),w,b
 32565  00D8' EC00' F000'        	call	_SwTimerSetCallback
 32566  00DC' 0012               	return		;funcret
 32567  00DE'                    __end_of_SetCallbackSoftwareTimers:
 32568                           	opt stack 0
 32569                           tosu	equ	0xFFF
 32570                           tosh	equ	0xFFE
 32571                           tosl	equ	0xFFD
 32572                           pclath	equ	0xFFA
 32573                           tblptru	equ	0xFF8
 32574                           tblptrh	equ	0xFF7
 32575                           tblptrl	equ	0xFF6
 32576                           tablat	equ	0xFF5
 32577                           prodh	equ	0xFF4
 32578                           prodl	equ	0xFF3
 32579                           intcon	equ	0xFF2
 32580                           intcon2	equ	0xFF1
 32581                           intcon3	equ	0xFF0
 32582                           indf0	equ	0xFEF
 32583                           postinc0	equ	0xFEE
 32584                           plusw0	equ	0xFEB
 32585                           fsr0h	equ	0xFEA
 32586                           fsr0l	equ	0xFE9
 32587                           wreg	equ	0xFE8
 32588                           postinc1	equ	0xFE6
 32589                           postdec1	equ	0xFE5
 32590                           plusw1	equ	0xFE3
 32591                           fsr1h	equ	0xFE2
 32592                           fsr1l	equ	0xFE1
 32593                           indf2	equ	0xFDF
 32594                           postinc2	equ	0xFDE
 32595                           postdec2	equ	0xFDD
 32596                           plusw2	equ	0xFDB
 32597                           fsr2h	equ	0xFDA
 32598                           fsr2l	equ	0xFD9
 32599                           status	equ	0xFD8
 32600                           
 32601 ;; *************** function _RADIO_ReadRandom *****************
 32602 ;; Defined at:
 32603 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32604 ;; Parameters:    Size  Location     Type
 32605 ;;		None
 32606 ;; Auto vars:     Size  Location     Type
 32607 ;;  retVal          2   15[BANK0 ] unsigned int 
 32608 ;;  i               1   17[BANK0 ] unsigned char 
 32609 ;; Return value:  Size  Location     Type
 32610 ;;                  2   12[BANK0 ] unsigned int 
 32611 ;; Registers used:
 32612 ;;		wreg, status,2, status,0, cstack
 32613 ;; Tracked objects:
 32614 ;;		On entry : 0/0
 32615 ;;		On exit  : 0/0
 32616 ;;		Unchanged: 0/0
 32617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32618 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32621 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32622 ;;Total ram usage:        6 bytes
 32623 ;; Hardware stack levels used:    1
 32624 ;; Hardware stack levels required when called:   11
 32625 ;; This function calls:
 32626 ;;		_RADIO_RegisterRead
 32627 ;;		_RADIO_RegisterWrite
 32628 ;;		_RADIO_WriteMode
 32629 ;;		_SystemBlockingWaitMs
 32630 ;; This function is called by:
 32631 ;;		_LORAWAN_Init
 32632 ;; This function uses a non-reentrant model
 32633 ;;
 32634                           
 32635                           	psect	text153
 32636  0000'                    __ptext153:
 32637                           	opt stack 0
 32638  0000'                    _RADIO_ReadRandom:
 32639                           	opt stack 18
 32640                           
 32641                           ;radio_driver_SX1276.c: 1446: uint8_t i;
 32642                           ;radio_driver_SX1276.c: 1447: uint16_t retVal;
 32643                           ;radio_driver_SX1276.c: 1448: retVal = 0;
 32644                           
 32645                           ;incstack = 0
 32646  0000' 0E00               	movlw	0
 32647  0002' 0100               	movlb	0	; () banked
 32648  0004' 6F00'              	movwf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 32649  0006' 0E00               	movlw	0
 32650  0008' 6F00'              	movwf	RADIO_ReadRandom@retVal& (0+255),b
 32651                           
 32652                           ; BSR set to: 0
 32653                           
 32654                           ; BSR set to: 0
 32655                           
 32656                           ;radio_driver_SX1276.c: 1451: do { LATB3 = 1; } while(0);
 32657  000A' 868A               	bsf	3978,3,c	;volatile
 32658                           
 32659                           ; BSR set to: 0
 32660                           ;radio_driver_SX1276.c: 1454: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 32661                           
 32662                           ; BSR set to: 0
 32663  000C' 0E01               	movlw	1
 32664  000E' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32665  0010' 0E01               	movlw	1
 32666  0012' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 32667  0014' 0E00               	movlw	0
 32668  0016' EC00' F000'        	call	_RADIO_WriteMode
 32669                           
 32670                           ;radio_driver_SX1276.c: 1455: RADIO_RegisterWrite(0x11, 0xFF);
 32671  001A' 0EFF               	movlw	255
 32672  001C' 0100               	movlb	0	; () banked
 32673  001E' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 32674  0020' 0E11               	movlw	17
 32675  0022' EC00' F000'        	call	_RADIO_RegisterWrite
 32676                           
 32677                           ;radio_driver_SX1276.c: 1456: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 32678  0026' 0E01               	movlw	1
 32679  0028' 0100               	movlb	0	; () banked
 32680  002A' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32681  002C' 0E01               	movlw	1
 32682  002E' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 32683  0030' 0E05               	movlw	5
 32684  0032' EC00' F000'        	call	_RADIO_WriteMode
 32685                           
 32686                           ;radio_driver_SX1276.c: 1457: for (i = 0; i < 16; i++)
 32687  0036' 0E00               	movlw	0
 32688  0038' 0100               	movlb	0	; () banked
 32689  003A' 6F00'              	movwf	RADIO_ReadRandom@i& (0+255),b
 32690  003C'                    l11782:
 32691                           
 32692                           ; BSR set to: 0
 32693  003C' 0E0F               	movlw	15
 32694  003E' 6500'              	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 32695  0040' D001               	goto	l2067
 32696  0042' D019               	goto	u12490
 32697  0044'                    l2067:
 32698                           
 32699                           ; BSR set to: 0
 32700                           ;radio_driver_SX1276.c: 1458: {
 32701                           ;radio_driver_SX1276.c: 1459: SystemBlockingWaitMs(1);
 32702                           
 32703                           ; BSR set to: 0
 32704  0044' 0E01               	movlw	1
 32705  0046' 6F00'              	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32706  0048' 0E00               	movlw	0
 32707  004A' 6F00'              	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32708  004C' 0E00               	movlw	0
 32709  004E' 6F00'              	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32710  0050' 0E00               	movlw	0
 32711  0052' 6F00'              	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32712  0054' EC00' F000'        	call	_SystemBlockingWaitMs	;wreg free
 32713                           
 32714                           ;radio_driver_SX1276.c: 1460: retVal <<= (1);
 32715  0058' 0100               	movlb	0	; () banked
 32716  005A' 90D8               	bcf	status,0,c
 32717  005C' 3700'              	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 32718  005E' 3700'              	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 32719                           
 32720                           ; BSR set to: 0
 32721                           ;radio_driver_SX1276.c: 1461: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 32722  0060' 0E2C               	movlw	44
 32723  0062' EC00' F000'        	call	_RADIO_RegisterRead
 32724  0066' 0100               	movlb	0	; () banked
 32725  0068' 6F00'              	movwf	??_RADIO_ReadRandom& (0+255),b
 32726  006A' 0E01               	movlw	1
 32727  006C' 1700'              	andwf	??_RADIO_ReadRandom& (0+255),f,b
 32728  006E' 5100'              	movf	??_RADIO_ReadRandom& (0+255),w,b
 32729  0070' 1300'              	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 32730  0072' 2B00'              	incf	RADIO_ReadRandom@i& (0+255),f,b
 32731  0074' D7E3               	goto	l11782
 32732  0076'                    u12490:
 32733                           
 32734                           ; BSR set to: 0
 32735                           
 32736                           ; BSR set to: 0
 32737                           ;radio_driver_SX1276.c: 1462: }
 32738                           ;radio_driver_SX1276.c: 1465: do { LATB3 = 0; } while(0);
 32739  0076' 968A               	bcf	3978,3,c	;volatile
 32740                           
 32741                           ; BSR set to: 0
 32742                           ;radio_driver_SX1276.c: 1469: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 32743                           
 32744                           ; BSR set to: 0
 32745  0078' 0E01               	movlw	1
 32746  007A' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32747  007C' 0E01               	movlw	1
 32748  007E' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 32749  0080' 0E00               	movlw	0
 32750  0082' EC00' F000'        	call	_RADIO_WriteMode
 32751                           
 32752                           ;radio_driver_SX1276.c: 1471: RADIO_RegisterWrite(0x12, 0xFF);
 32753  0086' 0EFF               	movlw	255
 32754  0088' 0100               	movlb	0	; () banked
 32755  008A' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 32756  008C' 0E12               	movlw	18
 32757  008E' EC00' F000'        	call	_RADIO_RegisterWrite
 32758                           
 32759                           ;radio_driver_SX1276.c: 1473: RADIO_RegisterWrite(0x11, 0x00);
 32760  0092' 0E00               	movlw	0
 32761  0094' 0100               	movlb	0	; () banked
 32762  0096' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 32763  0098' 0E11               	movlw	17
 32764  009A' EC00' F000'        	call	_RADIO_RegisterWrite
 32765                           
 32766                           ;radio_driver_SX1276.c: 1474: return retVal;
 32767  009E' C00F' F00C'        	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 32768  00A2' C010' F00D'        	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 32769  00A6' 0012               	return	
 32770  00A8'                    __end_of_RADIO_ReadRandom:
 32771                           	opt stack 0
 32772                           tosu	equ	0xFFF
 32773                           tosh	equ	0xFFE
 32774                           tosl	equ	0xFFD
 32775                           pclath	equ	0xFFA
 32776                           tblptru	equ	0xFF8
 32777                           tblptrh	equ	0xFF7
 32778                           tblptrl	equ	0xFF6
 32779                           tablat	equ	0xFF5
 32780                           prodh	equ	0xFF4
 32781                           prodl	equ	0xFF3
 32782                           intcon	equ	0xFF2
 32783                           intcon2	equ	0xFF1
 32784                           intcon3	equ	0xFF0
 32785                           indf0	equ	0xFEF
 32786                           postinc0	equ	0xFEE
 32787                           plusw0	equ	0xFEB
 32788                           fsr0h	equ	0xFEA
 32789                           fsr0l	equ	0xFE9
 32790                           wreg	equ	0xFE8
 32791                           postinc1	equ	0xFE6
 32792                           postdec1	equ	0xFE5
 32793                           plusw1	equ	0xFE3
 32794                           fsr1h	equ	0xFE2
 32795                           fsr1l	equ	0xFE1
 32796                           indf2	equ	0xFDF
 32797                           postinc2	equ	0xFDE
 32798                           postdec2	equ	0xFDD
 32799                           plusw2	equ	0xFDB
 32800                           fsr2h	equ	0xFDA
 32801                           fsr2l	equ	0xFD9
 32802                           status	equ	0xFD8
 32803                           
 32804 ;; *************** function _LORAWAN_Reset *****************
 32805 ;; Defined at:
 32806 ;;		line 140 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 32807 ;; Parameters:    Size  Location     Type
 32808 ;;		None
 32809 ;; Auto vars:     Size  Location     Type
 32810 ;;		None
 32811 ;; Return value:  Size  Location     Type
 32812 ;;                  1    wreg      void 
 32813 ;; Registers used:
 32814 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32815 ;; Tracked objects:
 32816 ;;		On entry : 0/0
 32817 ;;		On exit  : 0/0
 32818 ;;		Unchanged: 0/0
 32819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32824 ;;Total ram usage:        0 bytes
 32825 ;; Hardware stack levels used:    1
 32826 ;; Hardware stack levels required when called:   12
 32827 ;; This function calls:
 32828 ;;		_InitDefault915Channels
 32829 ;;		_LORAWAN_LinkCheckConfigure
 32830 ;;		_RADIO_Init
 32831 ;;		_RADIO_SetLoRaSyncWord
 32832 ;;		_RADIO_SetPABoost
 32833 ;;		_StopAllSoftwareTimers
 32834 ;;		_UpdateMinMaxChDataRate
 32835 ;;		_memset
 32836 ;; This function is called by:
 32837 ;;		_LORAWAN_Init
 32838 ;;		_main
 32839 ;; This function uses a non-reentrant model
 32840 ;;
 32841                           
 32842                           	psect	text154
 32843  0000'                    __ptext154:
 32844                           	opt stack 0
 32845  0000'                    _LORAWAN_Reset:
 32846                           	opt stack 18
 32847                           
 32848                           ;lorawan_na.c: 142: if (loRa.macInitialized == 1)
 32849                           
 32850                           ;incstack = 0
 32851  0000' 0102               	movlb	2	; () banked
 32852  0002' 0500'              	decf	(_loRa+225)& (0+255),w,b
 32853  0004' B4D8               	btfsc	status,2,c
 32854                           
 32855                           ; BSR set to: 2
 32856                           ;lorawan_na.c: 143: {
 32857                           ;lorawan_na.c: 144: StopAllSoftwareTimers ();
 32858  0006' EC00' F000'        	call	_StopAllSoftwareTimers	;wreg free
 32859                           
 32860                           ;lorawan_na.c: 145: }
 32861                           ;lorawan_na.c: 147: loRa.syncWord = 0x34;
 32862  000A' 0E34               	movlw	52
 32863  000C' 0102               	movlb	2	; () banked
 32864  000E' 6F00'              	movwf	(_loRa+230)& (0+255),b
 32865                           
 32866                           ; BSR set to: 2
 32867                           ;lorawan_na.c: 148: RADIO_SetLoRaSyncWord(loRa.syncWord);
 32868  0010' 5100'              	movf	(_loRa+230)& (0+255),w,b
 32869  0012' EC00' F000'        	call	_RADIO_SetLoRaSyncWord
 32870                           
 32871                           ;lorawan_na.c: 150: loRa.macStatus.value = 0;
 32872  0016' 0E00               	movlw	0
 32873  0018' 0102               	movlb	2	; () banked
 32874  001A' 6F00'              	movwf	(_loRa+2)& (0+255),b
 32875  001C' 0E00               	movlw	0
 32876  001E' 6F00'              	movwf	(_loRa+3)& (0+255),b
 32877  0020' 0E00               	movlw	0
 32878  0022' 6F00'              	movwf	(_loRa+4)& (0+255),b
 32879  0024' 0E00               	movlw	0
 32880  0026' 6F00'              	movwf	(_loRa+5)& (0+255),b
 32881                           
 32882                           ; BSR set to: 2
 32883                           ;lorawan_na.c: 151: loRa.linkCheckMargin = 255;
 32884  0028' 6900'              	setf	(_loRa+206)& (0+255),b
 32885                           
 32886                           ; BSR set to: 2
 32887                           ;lorawan_na.c: 152: loRa.linkCheckGwCnt = 0;
 32888  002A' 0E00               	movlw	0
 32889  002C' 6F00'              	movwf	(_loRa+207)& (0+255),b
 32890                           
 32891                           ; BSR set to: 2
 32892                           ;lorawan_na.c: 153: loRa.lastTimerValue = 0;
 32893  002E' 0E00               	movlw	0
 32894  0030' 6F00'              	movwf	(_loRa+185)& (0+255),b
 32895  0032' 0E00               	movlw	0
 32896  0034' 6F00'              	movwf	(_loRa+186)& (0+255),b
 32897  0036' 0E00               	movlw	0
 32898  0038' 6F00'              	movwf	(_loRa+187)& (0+255),b
 32899  003A' 0E00               	movlw	0
 32900  003C' 6F00'              	movwf	(_loRa+188)& (0+255),b
 32901                           
 32902                           ; BSR set to: 2
 32903                           ;lorawan_na.c: 154: loRa.lastPacketLength = 0;
 32904  003E' 0E00               	movlw	0
 32905  0040' 6F00'              	movwf	(_loRa+198)& (0+255),b
 32906  0042' 0E00               	movlw	0
 32907  0044' 6F00'              	movwf	(_loRa+197)& (0+255),b
 32908                           
 32909                           ; BSR set to: 2
 32910                           ;lorawan_na.c: 155: loRa.fCntDown.value = 0;
 32911  0046' 0E00               	movlw	0
 32912  0048' 6F00'              	movwf	(_loRa+10)& (0+255),b
 32913  004A' 0E00               	movlw	0
 32914  004C' 6F00'              	movwf	(_loRa+11)& (0+255),b
 32915  004E' 0E00               	movlw	0
 32916  0050' 6F00'              	movwf	(_loRa+12)& (0+255),b
 32917  0052' 0E00               	movlw	0
 32918  0054' 6F00'              	movwf	(_loRa+13)& (0+255),b
 32919                           
 32920                           ; BSR set to: 2
 32921                           ;lorawan_na.c: 156: loRa.fCntUp.value = 0;
 32922  0056' 0E00               	movlw	0
 32923  0058' 6F00'              	movwf	(_loRa+6)& (0+255),b
 32924  005A' 0E00               	movlw	0
 32925  005C' 6F00'              	movwf	(_loRa+7)& (0+255),b
 32926  005E' 0E00               	movlw	0
 32927  0060' 6F00'              	movwf	(_loRa+8)& (0+255),b
 32928  0062' 0E00               	movlw	0
 32929  0064' 6F00'              	movwf	(_loRa+9)& (0+255),b
 32930                           
 32931                           ; BSR set to: 2
 32932                           ;lorawan_na.c: 157: loRa.devNonce = 0;
 32933  0066' 0E00               	movlw	0
 32934  0068' 6F00'              	movwf	(_loRa+196)& (0+255),b
 32935  006A' 0E00               	movlw	0
 32936  006C' 6F00'              	movwf	(_loRa+195)& (0+255),b
 32937                           
 32938                           ; BSR set to: 2
 32939                           ;lorawan_na.c: 158: loRa.prescaler = 1;
 32940  006E' 0E00               	movlw	0
 32941  0070' 6F00'              	movwf	(_loRa+205)& (0+255),b
 32942  0072' 0E01               	movlw	1
 32943  0074' 6F00'              	movwf	(_loRa+204)& (0+255),b
 32944                           
 32945                           ; BSR set to: 2
 32946                           ;lorawan_na.c: 159: loRa.adrAckCnt = 0;
 32947  0076' 0E00               	movlw	0
 32948  0078' 6F00'              	movwf	(_loRa+194)& (0+255),b
 32949  007A' 0E00               	movlw	0
 32950  007C' 6F00'              	movwf	(_loRa+193)& (0+255),b
 32951                           
 32952                           ; BSR set to: 2
 32953                           ;lorawan_na.c: 160: loRa.counterAdrAckDelay = 0;
 32954  007E' 0E00               	movlw	0
 32955  0080' 6F00'              	movwf	(_loRa+223)& (0+255),b
 32956                           
 32957                           ; BSR set to: 2
 32958                           ;lorawan_na.c: 161: loRa.offset = 0;
 32959  0082' 0E00               	movlw	0
 32960  0084' 6F00'              	movwf	(_loRa+224)& (0+255),b
 32961                           
 32962                           ; BSR set to: 2
 32963                           ;lorawan_na.c: 162: loRa.lastTimerValue = 0;
 32964  0086' 0E00               	movlw	0
 32965  0088' 6F00'              	movwf	(_loRa+185)& (0+255),b
 32966  008A' 0E00               	movlw	0
 32967  008C' 6F00'              	movwf	(_loRa+186)& (0+255),b
 32968  008E' 0E00               	movlw	0
 32969  0090' 6F00'              	movwf	(_loRa+187)& (0+255),b
 32970  0092' 0E00               	movlw	0
 32971  0094' 6F00'              	movwf	(_loRa+188)& (0+255),b
 32972                           
 32973                           ; BSR set to: 2
 32974                           ;lorawan_na.c: 165: loRa.macStatus.linkCheck = 0;
 32975  0096' 9500'              	bcf	(_loRa+3)& (0+255),2,b
 32976                           
 32977                           ; BSR set to: 2
 32978                           ;lorawan_na.c: 168: loRa.macStatus.value = 0;
 32979  0098' 0E00               	movlw	0
 32980  009A' 6F00'              	movwf	(_loRa+2)& (0+255),b
 32981  009C' 0E00               	movlw	0
 32982  009E' 6F00'              	movwf	(_loRa+3)& (0+255),b
 32983  00A0' 0E00               	movlw	0
 32984  00A2' 6F00'              	movwf	(_loRa+4)& (0+255),b
 32985  00A4' 0E00               	movlw	0
 32986  00A6' 6F00'              	movwf	(_loRa+5)& (0+255),b
 32987                           
 32988                           ; BSR set to: 2
 32989                           ;lorawan_na.c: 169: loRa.lorawanMacStatus.value = 0;
 32990  00A8' 0E00               	movlw	0
 32991  00AA' 6F00'              	movwf	(_loRa+1)& (0+255),b
 32992  00AC' 0E00               	movlw	0
 32993  00AE' 6F00'              	movwf	_loRa& (0+255),b
 32994                           
 32995                           ; BSR set to: 2
 32996                           ;lorawan_na.c: 171: loRa.maxRepetitionsConfirmedUplink = 7;
 32997  00B0' 0E07               	movlw	7
 32998  00B2' 6F00'              	movwf	(_loRa+200)& (0+255),b
 32999                           
 33000                           ; BSR set to: 2
 33001                           ;lorawan_na.c: 172: loRa.maxRepetitionsUnconfirmedUplink = 0;
 33002  00B4' 0E00               	movlw	0
 33003  00B6' 6F00'              	movwf	(_loRa+199)& (0+255),b
 33004                           
 33005                           ; BSR set to: 2
 33006                           ;lorawan_na.c: 173: loRa.counterRepetitionsConfirmedUplink = 1;
 33007  00B8' 0E01               	movlw	1
 33008  00BA' 6F00'              	movwf	(_loRa+202)& (0+255),b
 33009                           
 33010                           ; BSR set to: 2
 33011                           ;lorawan_na.c: 174: loRa.counterRepetitionsUnconfirmedUplink = 1;
 33012  00BC' 0E01               	movlw	1
 33013  00BE' 6F00'              	movwf	(_loRa+201)& (0+255),b
 33014                           
 33015                           ; BSR set to: 2
 33016                           ;lorawan_na.c: 176: loRa.batteryLevel = (0xFF);
 33017  00C0' 6900'              	setf	(_loRa+209)& (0+255),b
 33018                           
 33019                           ; BSR set to: 2
 33020                           ;lorawan_na.c: 179: RADIO_Init(&radioBuffer[16], (923300000));
 33021  00C2' 0E00'              	movlw	low (_radioBuffer+16)
 33022  00C4' 0100               	movlb	0	; () banked
 33023  00C6' 6F00'              	movwf	RADIO_Init@radioBuffer& (0+255),b
 33024  00C8' 0E00'              	movlw	high (_radioBuffer+16)
 33025  00CA' 6F00'              	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 33026  00CC' 0EA0               	movlw	160
 33027  00CE' 6F00'              	movwf	RADIO_Init@frequency& (0+255),b
 33028  00D0' 0E70               	movlw	112
 33029  00D2' 6F00'              	movwf	(RADIO_Init@frequency+1)& (0+255),b
 33030  00D4' 0E08               	movlw	8
 33031  00D6' 6F00'              	movwf	(RADIO_Init@frequency+2)& (0+255),b
 33032  00D8' 0E37               	movlw	55
 33033  00DA' 6F00'              	movwf	(RADIO_Init@frequency+3)& (0+255),b
 33034  00DC' EC00' F000'        	call	_RADIO_Init	;wreg free
 33035                           
 33036                           ;lorawan_na.c: 181: InitDefault915Channels ();
 33037  00E0' EC00' F000'        	call	_InitDefault915Channels	;wreg free
 33038                           
 33039                           ;lorawan_na.c: 183: loRa.txPower = 6;
 33040  00E4' 0E06               	movlw	6
 33041  00E6' 0102               	movlb	2	; () banked
 33042  00E8' 6F00'              	movwf	(_loRa+210)& (0+255),b
 33043                           
 33044                           ; BSR set to: 2
 33045                           ;lorawan_na.c: 186: loRa.receiveWindow2Parameters.frequency = (923300000);
 33046  00EA' 0EA0               	movlw	160
 33047  00EC' 6F00'              	movwf	(_loRa+24)& (0+255),b
 33048  00EE' 0E70               	movlw	112
 33049  00F0' 6F00'              	movwf	(_loRa+25)& (0+255),b
 33050  00F2' 0E08               	movlw	8
 33051  00F4' 6F00'              	movwf	(_loRa+26)& (0+255),b
 33052  00F6' 0E37               	movlw	55
 33053  00F8' 6F00'              	movwf	(_loRa+27)& (0+255),b
 33054                           
 33055                           ; BSR set to: 2
 33056                           ;lorawan_na.c: 187: loRa.receiveWindow2Parameters.dataRate = (8);
 33057  00FA' 0E08               	movlw	8
 33058  00FC' 6F00'              	movwf	(_loRa+28)& (0+255),b
 33059                           
 33060                           ; BSR set to: 2
 33061                           ;lorawan_na.c: 189: loRa.currentDataRate = 0;
 33062  00FE' 0E00               	movlw	0
 33063  0100' 6F00'              	movwf	(_loRa+208)& (0+255),b
 33064                           
 33065                           ; BSR set to: 2
 33066                           ;lorawan_na.c: 191: UpdateMinMaxChDataRate ();
 33067  0102' EC00' F000'        	call	_UpdateMinMaxChDataRate	;wreg free
 33068                           
 33069                           ;lorawan_na.c: 194: loRa.macKeys.value = 0;
 33070  0106' 0E00               	movlw	0
 33071  0108' 0102               	movlb	2	; () banked
 33072  010A' 6F00'              	movwf	(_loRa+151)& (0+255),b
 33073  010C' 0E00               	movlw	0
 33074  010E' 6F00'              	movwf	(_loRa+150)& (0+255),b
 33075                           
 33076                           ; BSR set to: 2
 33077                           ;lorawan_na.c: 195: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 33078  0110' 0E00'              	movlw	low (_loRa+29)
 33079  0112' 0100               	movlb	0	; () banked
 33080  0114' 6F00'              	movwf	memset@p1& (0+255),b
 33081  0116' 0E00'              	movlw	high (_loRa+29)
 33082  0118' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 33083  011A' 0E00               	movlw	0
 33084  011C' 6F00'              	movwf	(memset@c+1)& (0+255),b
 33085  011E' 0E00               	movlw	0
 33086  0120' 6F00'              	movwf	memset@c& (0+255),b
 33087  0122' 0E00               	movlw	0
 33088  0124' 6F00'              	movwf	(memset@n+1)& (0+255),b
 33089  0126' 0E69               	movlw	105
 33090  0128' 6F00'              	movwf	memset@n& (0+255),b
 33091  012A' EC00' F000'        	call	_memset	;wreg free
 33092                           
 33093                           ;lorawan_na.c: 198: loRa.protocolParameters.receiveDelay1 = 1000UL;
 33094  012E' 0E03               	movlw	3
 33095  0130' 0102               	movlb	2	; () banked
 33096  0132' 6F00'              	movwf	(_loRa+135)& (0+255),b
 33097  0134' 0EE8               	movlw	232
 33098  0136' 6F00'              	movwf	(_loRa+134)& (0+255),b
 33099                           
 33100                           ; BSR set to: 2
 33101                           ;lorawan_na.c: 199: loRa.protocolParameters.receiveDelay2 = 2000UL;
 33102  0138' 0E07               	movlw	7
 33103  013A' 6F00'              	movwf	(_loRa+137)& (0+255),b
 33104  013C' 0ED0               	movlw	208
 33105  013E' 6F00'              	movwf	(_loRa+136)& (0+255),b
 33106                           
 33107                           ; BSR set to: 2
 33108                           ;lorawan_na.c: 200: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 33109  0140' 0E13               	movlw	19
 33110  0142' 6F00'              	movwf	(_loRa+139)& (0+255),b
 33111  0144' 0E88               	movlw	136
 33112  0146' 6F00'              	movwf	(_loRa+138)& (0+255),b
 33113                           
 33114                           ; BSR set to: 2
 33115                           ;lorawan_na.c: 201: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 33116  0148' 0E17               	movlw	23
 33117  014A' 6F00'              	movwf	(_loRa+141)& (0+255),b
 33118  014C' 0E70               	movlw	112
 33119  014E' 6F00'              	movwf	(_loRa+140)& (0+255),b
 33120                           
 33121                           ; BSR set to: 2
 33122                           ;lorawan_na.c: 202: loRa.protocolParameters.ackTimeout = 2000;
 33123  0150' 0E07               	movlw	7
 33124  0152' 6F00'              	movwf	(_loRa+147)& (0+255),b
 33125  0154' 0ED0               	movlw	208
 33126  0156' 6F00'              	movwf	(_loRa+146)& (0+255),b
 33127                           
 33128                           ; BSR set to: 2
 33129                           ;lorawan_na.c: 203: loRa.protocolParameters.adrAckDelay = 32;
 33130  0158' 0E20               	movlw	32
 33131  015A' 6F00'              	movwf	(_loRa+149)& (0+255),b
 33132                           
 33133                           ; BSR set to: 2
 33134                           ;lorawan_na.c: 204: loRa.protocolParameters.adrAckLimit = 64;
 33135  015C' 0E40               	movlw	64
 33136  015E' 6F00'              	movwf	(_loRa+148)& (0+255),b
 33137                           
 33138                           ; BSR set to: 2
 33139                           ;lorawan_na.c: 205: loRa.protocolParameters.maxFcntGap = 16384;
 33140  0160' 0E40               	movlw	64
 33141  0162' 6F00'              	movwf	(_loRa+143)& (0+255),b
 33142  0164' 0E00               	movlw	0
 33143  0166' 6F00'              	movwf	(_loRa+142)& (0+255),b
 33144                           
 33145                           ; BSR set to: 2
 33146                           ;lorawan_na.c: 207: LORAWAN_LinkCheckConfigure (0);
 33147  0168' 0E00               	movlw	0
 33148  016A' 0100               	movlb	0	; () banked
 33149  016C' 6F00'              	movwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 33150  016E' 0E00               	movlw	0
 33151  0170' 6F00'              	movwf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 33152  0172' EC00' F000'        	call	_LORAWAN_LinkCheckConfigure	;wreg free
 33153                           
 33154                           ;lorawan_na.c: 209: RADIO_SetPABoost (1);
 33155  0176' 0E01               	movlw	1
 33156  0178' EC00' F000'        	call	_RADIO_SetPABoost
 33157  017C' 0012               	return		;funcret
 33158  017E'                    __end_of_LORAWAN_Reset:
 33159                           	opt stack 0
 33160                           tosu	equ	0xFFF
 33161                           tosh	equ	0xFFE
 33162                           tosl	equ	0xFFD
 33163                           pclath	equ	0xFFA
 33164                           tblptru	equ	0xFF8
 33165                           tblptrh	equ	0xFF7
 33166                           tblptrl	equ	0xFF6
 33167                           tablat	equ	0xFF5
 33168                           prodh	equ	0xFF4
 33169                           prodl	equ	0xFF3
 33170                           intcon	equ	0xFF2
 33171                           intcon2	equ	0xFF1
 33172                           intcon3	equ	0xFF0
 33173                           indf0	equ	0xFEF
 33174                           postinc0	equ	0xFEE
 33175                           plusw0	equ	0xFEB
 33176                           fsr0h	equ	0xFEA
 33177                           fsr0l	equ	0xFE9
 33178                           wreg	equ	0xFE8
 33179                           postinc1	equ	0xFE6
 33180                           postdec1	equ	0xFE5
 33181                           plusw1	equ	0xFE3
 33182                           fsr1h	equ	0xFE2
 33183                           fsr1l	equ	0xFE1
 33184                           indf2	equ	0xFDF
 33185                           postinc2	equ	0xFDE
 33186                           postdec2	equ	0xFDD
 33187                           plusw2	equ	0xFDB
 33188                           fsr2h	equ	0xFDA
 33189                           fsr2l	equ	0xFD9
 33190                           status	equ	0xFD8
 33191                           
 33192 ;; *************** function _UpdateMinMaxChDataRate *****************
 33193 ;; Defined at:
 33194 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33195 ;; Parameters:    Size  Location     Type
 33196 ;;		None
 33197 ;; Auto vars:     Size  Location     Type
 33198 ;;  i               1    1[BANK0 ] unsigned char 
 33199 ;; Return value:  Size  Location     Type
 33200 ;;                  1    wreg      void 
 33201 ;; Registers used:
 33202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33203 ;; Tracked objects:
 33204 ;;		On entry : 0/0
 33205 ;;		On exit  : 0/0
 33206 ;;		Unchanged: 0/0
 33207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33212 ;;Total ram usage:        2 bytes
 33213 ;; Hardware stack levels used:    1
 33214 ;; Hardware stack levels required when called:    7
 33215 ;; This function calls:
 33216 ;;		Nothing
 33217 ;; This function is called by:
 33218 ;;		_LORAWAN_Reset
 33219 ;;		_UpdateChannelIdStatus
 33220 ;; This function uses a non-reentrant model
 33221 ;;
 33222                           
 33223                           	psect	text155
 33224  0000'                    __ptext155:
 33225                           	opt stack 0
 33226  0000'                    _UpdateMinMaxChDataRate:
 33227                           	opt stack 22
 33228                           
 33229                           ;lorawan.c: 1065: uint8_t i;
 33230                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 33231                           
 33232                           ;incstack = 0
 33233  0000' 0E07               	movlw	7
 33234  0002' 0102               	movlb	2	; () banked
 33235  0004' 6F00'              	movwf	(_loRa+220)& (0+255),b
 33236                           
 33237                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 33238  0006' 0E00               	movlw	0
 33239  0008' 6F00'              	movwf	(_loRa+221)& (0+255),b
 33240                           
 33241                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 33242  000A' 0E00               	movlw	0
 33243  000C' 0100               	movlb	0	; () banked
 33244  000E' 6F00'              	movwf	UpdateMinMaxChDataRate@i& (0+255),b
 33245  0010' D065               	goto	l640
 33246  0012'                    
 33247                           ; BSR set to: 0
 33248                           ;lorawan.c: 1072: {
 33249                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 33250                           
 33251                           ; BSR set to: 0
 33252  0012' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33253  0014' 0D02               	mullw	2
 33254  0016' 0E01               	movlw	1
 33255  0018' 26F3               	addwf	prodl,f,c
 33256  001A' 0E00               	movlw	0
 33257  001C' 22F4               	addwfc	prodh,f,c
 33258  001E' 0E00'              	movlw	low _Channels
 33259  0020' 24F3               	addwf	prodl,w,c
 33260  0022' 6ED9               	movwf	fsr2l,c
 33261  0024' 0E00'              	movlw	high _Channels
 33262  0026' 20F4               	addwfc	prodh,w,c
 33263  0028' 6EDA               	movwf	fsr2h,c
 33264  002A' 0104               	movlb	4	; () banked
 33265  002C' 50DF               	movf	223,w,c
 33266  002E' 0B0F               	andlw	15
 33267  0030' 0100               	movlb	0	; () banked
 33268  0032' 6F00'              	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 33269  0034' 0102               	movlb	2	; () banked
 33270  0036' 5100'              	movf	(_loRa+220)& (0+255),w,b
 33271  0038' 0100               	movlb	0	; () banked
 33272  003A' 5D00'              	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 33273  003C' B0D8               	btfsc	status,0,c
 33274  003E' D01C               	goto	l642
 33275                           
 33276                           ; BSR set to: 0
 33277  0040' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33278  0042' 0D02               	mullw	2
 33279  0044' 0E00'              	movlw	low _Channels
 33280  0046' 24F3               	addwf	prodl,w,c
 33281  0048' 6ED9               	movwf	fsr2l,c
 33282  004A' 0E00'              	movlw	high _Channels
 33283  004C' 20F4               	addwfc	prodh,w,c
 33284  004E' 6EDA               	movwf	fsr2h,c
 33285  0050' 04DE               	decf	postinc2,w,c
 33286  0052' A4D8               	btfss	status,2,c
 33287  0054' D011               	goto	l642
 33288                           
 33289                           ; BSR set to: 0
 33290                           ;lorawan.c: 1074: {
 33291                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 33292  0056' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33293  0058' 0D02               	mullw	2
 33294  005A' 0E01               	movlw	1
 33295  005C' 26F3               	addwf	prodl,f,c
 33296  005E' 0E00               	movlw	0
 33297  0060' 22F4               	addwfc	prodh,f,c
 33298  0062' 0E00'              	movlw	low _Channels
 33299  0064' 24F3               	addwf	prodl,w,c
 33300  0066' 6ED9               	movwf	fsr2l,c
 33301  0068' 0E00'              	movlw	high _Channels
 33302  006A' 20F4               	addwfc	prodh,w,c
 33303  006C' 6EDA               	movwf	fsr2h,c
 33304  006E' 0104               	movlb	4	; () banked
 33305  0070' 50DF               	movf	223,w,c
 33306  0072' 0B0F               	andlw	15
 33307  0074' 0102               	movlb	2	; () banked
 33308  0076' 6F00'              	movwf	(_loRa+220)& (0+255),b
 33309  0078'                    l642:
 33310                           
 33311                           ;lorawan.c: 1076: }
 33312                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 33313  0078' 0100               	movlb	0	; () banked
 33314  007A' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33315  007C' 0D02               	mullw	2
 33316  007E' 0E01               	movlw	1
 33317  0080' 26F3               	addwf	prodl,f,c
 33318  0082' 0E00               	movlw	0
 33319  0084' 22F4               	addwfc	prodh,f,c
 33320  0086' 0E00'              	movlw	low _Channels
 33321  0088' 24F3               	addwf	prodl,w,c
 33322  008A' 6ED9               	movwf	fsr2l,c
 33323  008C' 0E00'              	movlw	high _Channels
 33324  008E' 20F4               	addwfc	prodh,w,c
 33325  0090' 6EDA               	movwf	fsr2h,c
 33326  0092' 0104               	movlb	4	; () banked
 33327  0094' 38DF               	swapf	223,w,c
 33328  0096' 0B0F               	andlw	15
 33329  0098' 0102               	movlb	2	; () banked
 33330  009A' 6100'              	cpfslt	(_loRa+221)& (0+255),b
 33331  009C' D01D               	goto	l643
 33332                           
 33333                           ; BSR set to: 2
 33334  009E' 0100               	movlb	0	; () banked
 33335  00A0' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33336  00A2' 0D02               	mullw	2
 33337  00A4' 0E00'              	movlw	low _Channels
 33338  00A6' 24F3               	addwf	prodl,w,c
 33339  00A8' 6ED9               	movwf	fsr2l,c
 33340  00AA' 0E00'              	movlw	high _Channels
 33341  00AC' 20F4               	addwfc	prodh,w,c
 33342  00AE' 6EDA               	movwf	fsr2h,c
 33343  00B0' 04DE               	decf	postinc2,w,c
 33344  00B2' A4D8               	btfss	status,2,c
 33345  00B4' D011               	goto	l643
 33346                           
 33347                           ; BSR set to: 0
 33348                           ;lorawan.c: 1078: {
 33349                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 33350  00B6' 5100'              	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33351  00B8' 0D02               	mullw	2
 33352  00BA' 0E01               	movlw	1
 33353  00BC' 26F3               	addwf	prodl,f,c
 33354  00BE' 0E00               	movlw	0
 33355  00C0' 22F4               	addwfc	prodh,f,c
 33356  00C2' 0E00'              	movlw	low _Channels
 33357  00C4' 24F3               	addwf	prodl,w,c
 33358  00C6' 6ED9               	movwf	fsr2l,c
 33359  00C8' 0E00'              	movlw	high _Channels
 33360  00CA' 20F4               	addwfc	prodh,w,c
 33361  00CC' 6EDA               	movwf	fsr2h,c
 33362  00CE' 0104               	movlb	4	; () banked
 33363  00D0' 38DF               	swapf	223,w,c
 33364  00D2' 0B0F               	andlw	15
 33365  00D4' 0102               	movlb	2	; () banked
 33366  00D6' 6F00'              	movwf	(_loRa+221)& (0+255),b
 33367  00D8'                    l643:
 33368                           
 33369                           ; BSR set to: 2
 33370  00D8' 0100               	movlb	0	; () banked
 33371  00DA' 2B00'              	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 33372  00DC'                    l640:
 33373                           
 33374                           ; BSR set to: 0
 33375                           
 33376                           ; BSR set to: 0
 33377  00DC' 0102               	movlb	2	; () banked
 33378  00DE' 5100'              	movf	(_loRa+222)& (0+255),w,b
 33379  00E0' 0100               	movlb	0	; () banked
 33380  00E2' 5D00'              	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 33381  00E4' B0D8               	btfsc	status,0,c
 33382  00E6' 0012               	return	
 33383  00E8' D794               	goto	l641
 33384  00EA'                    __end_of_UpdateMinMaxChDataRate:
 33385                           	opt stack 0
 33386                           tosu	equ	0xFFF
 33387                           tosh	equ	0xFFE
 33388                           tosl	equ	0xFFD
 33389                           pclath	equ	0xFFA
 33390                           tblptru	equ	0xFF8
 33391                           tblptrh	equ	0xFF7
 33392                           tblptrl	equ	0xFF6
 33393                           tablat	equ	0xFF5
 33394                           prodh	equ	0xFF4
 33395                           prodl	equ	0xFF3
 33396                           intcon	equ	0xFF2
 33397                           intcon2	equ	0xFF1
 33398                           intcon3	equ	0xFF0
 33399                           indf0	equ	0xFEF
 33400                           postinc0	equ	0xFEE
 33401                           plusw0	equ	0xFEB
 33402                           fsr0h	equ	0xFEA
 33403                           fsr0l	equ	0xFE9
 33404                           wreg	equ	0xFE8
 33405                           postinc1	equ	0xFE6
 33406                           postdec1	equ	0xFE5
 33407                           plusw1	equ	0xFE3
 33408                           fsr1h	equ	0xFE2
 33409                           fsr1l	equ	0xFE1
 33410                           indf2	equ	0xFDF
 33411                           postinc2	equ	0xFDE
 33412                           postdec2	equ	0xFDD
 33413                           plusw2	equ	0xFDB
 33414                           fsr2h	equ	0xFDA
 33415                           fsr2l	equ	0xFD9
 33416                           status	equ	0xFD8
 33417                           
 33418 ;; *************** function _StopAllSoftwareTimers *****************
 33419 ;; Defined at:
 33420 ;;		line 817 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 33421 ;; Parameters:    Size  Location     Type
 33422 ;;		None
 33423 ;; Auto vars:     Size  Location     Type
 33424 ;;		None
 33425 ;; Return value:  Size  Location     Type
 33426 ;;                  1    wreg      void 
 33427 ;; Registers used:
 33428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33429 ;; Tracked objects:
 33430 ;;		On entry : 0/0
 33431 ;;		On exit  : 0/0
 33432 ;;		Unchanged: 0/0
 33433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33438 ;;Total ram usage:        0 bytes
 33439 ;; Hardware stack levels used:    1
 33440 ;; Hardware stack levels required when called:    8
 33441 ;; This function calls:
 33442 ;;		_SwTimerStop
 33443 ;; This function is called by:
 33444 ;;		_LORAWAN_Init
 33445 ;;		_LORAWAN_Reset
 33446 ;; This function uses a non-reentrant model
 33447 ;;
 33448                           
 33449                           	psect	text156
 33450  0000'                    __ptext156:
 33451                           	opt stack 0
 33452  0000'                    _StopAllSoftwareTimers:
 33453                           	opt stack 21
 33454                           
 33455                           ;lorawan_na.c: 819: SwTimerStop(loRa.joinAccept1TimerId);
 33456                           
 33457                           ; BSR set to: 0
 33458                           ;incstack = 0
 33459  0000' 0102               	movlb	2	; () banked
 33460  0002' 5100'              	movf	(_loRa+211)& (0+255),w,b
 33461  0004' EC00' F000'        	call	_SwTimerStop
 33462                           
 33463                           ;lorawan_na.c: 820: SwTimerStop(loRa.joinAccept2TimerId);
 33464  0008' 0102               	movlb	2	; () banked
 33465  000A' 5100'              	movf	(_loRa+212)& (0+255),w,b
 33466  000C' EC00' F000'        	call	_SwTimerStop
 33467                           
 33468                           ;lorawan_na.c: 821: SwTimerStop(loRa.linkCheckTimerId);
 33469  0010' 0102               	movlb	2	; () banked
 33470  0012' 5100'              	movf	(_loRa+216)& (0+255),w,b
 33471  0014' EC00' F000'        	call	_SwTimerStop
 33472                           
 33473                           ;lorawan_na.c: 822: SwTimerStop(loRa.receiveWindow1TimerId);
 33474  0018' 0102               	movlb	2	; () banked
 33475  001A' 5100'              	movf	(_loRa+213)& (0+255),w,b
 33476  001C' EC00' F000'        	call	_SwTimerStop
 33477                           
 33478                           ;lorawan_na.c: 823: SwTimerStop(loRa.receiveWindow2TimerId);
 33479  0020' 0102               	movlb	2	; () banked
 33480  0022' 5100'              	movf	(_loRa+214)& (0+255),w,b
 33481  0024' EC00' F000'        	call	_SwTimerStop
 33482                           
 33483                           ;lorawan_na.c: 824: SwTimerStop(loRa.ackTimeoutTimerId);
 33484  0028' 0102               	movlb	2	; () banked
 33485  002A' 5100'              	movf	(_loRa+217)& (0+255),w,b
 33486  002C' EC00' F000'        	call	_SwTimerStop
 33487                           
 33488                           ;lorawan_na.c: 825: SwTimerStop(loRa.automaticReplyTimerId);
 33489  0030' 0102               	movlb	2	; () banked
 33490  0032' 5100'              	movf	(_loRa+215)& (0+255),w,b
 33491  0034' EC00' F000'        	call	_SwTimerStop
 33492                           
 33493                           ;lorawan_na.c: 826: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 33494  0038' 0102               	movlb	2	; () banked
 33495  003A' 5100'              	movf	(_loRa+219)& (0+255),w,b
 33496  003C' EC00' F000'        	call	_SwTimerStop
 33497                           
 33498                           ;lorawan_na.c: 827: SwTimerStop(loRa.abpJoinTimerId);
 33499  0040' 0102               	movlb	2	; () banked
 33500  0042' 5100'              	movf	(_loRa+228)& (0+255),w,b
 33501  0044' EC00' F000'        	call	_SwTimerStop
 33502                           
 33503                           ;lorawan_na.c: 828: SwTimerStop(loRa.transmissionErrorTimerId);
 33504  0048' 0102               	movlb	2	; () banked
 33505  004A' 5100'              	movf	(_loRa+229)& (0+255),w,b
 33506  004C' EC00' F000'        	call	_SwTimerStop
 33507  0050' 0012               	return		;funcret
 33508  0052'                    __end_of_StopAllSoftwareTimers:
 33509                           	opt stack 0
 33510                           tosu	equ	0xFFF
 33511                           tosh	equ	0xFFE
 33512                           tosl	equ	0xFFD
 33513                           pclath	equ	0xFFA
 33514                           tblptru	equ	0xFF8
 33515                           tblptrh	equ	0xFF7
 33516                           tblptrl	equ	0xFF6
 33517                           tablat	equ	0xFF5
 33518                           prodh	equ	0xFF4
 33519                           prodl	equ	0xFF3
 33520                           intcon	equ	0xFF2
 33521                           intcon2	equ	0xFF1
 33522                           intcon3	equ	0xFF0
 33523                           indf0	equ	0xFEF
 33524                           postinc0	equ	0xFEE
 33525                           plusw0	equ	0xFEB
 33526                           fsr0h	equ	0xFEA
 33527                           fsr0l	equ	0xFE9
 33528                           wreg	equ	0xFE8
 33529                           postinc1	equ	0xFE6
 33530                           postdec1	equ	0xFE5
 33531                           plusw1	equ	0xFE3
 33532                           fsr1h	equ	0xFE2
 33533                           fsr1l	equ	0xFE1
 33534                           indf2	equ	0xFDF
 33535                           postinc2	equ	0xFDE
 33536                           postdec2	equ	0xFDD
 33537                           plusw2	equ	0xFDB
 33538                           fsr2h	equ	0xFDA
 33539                           fsr2l	equ	0xFD9
 33540                           status	equ	0xFD8
 33541                           
 33542 ;; *************** function _RADIO_SetPABoost *****************
 33543 ;; Defined at:
 33544 ;;		line 1598 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33545 ;; Parameters:    Size  Location     Type
 33546 ;;  paBoost         1    wreg     unsigned char 
 33547 ;; Auto vars:     Size  Location     Type
 33548 ;;  paBoost         1    0[BANK0 ] unsigned char 
 33549 ;; Return value:  Size  Location     Type
 33550 ;;                  1    wreg      void 
 33551 ;; Registers used:
 33552 ;;		wreg
 33553 ;; Tracked objects:
 33554 ;;		On entry : 0/0
 33555 ;;		On exit  : 0/0
 33556 ;;		Unchanged: 0/0
 33557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33561 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33562 ;;Total ram usage:        1 bytes
 33563 ;; Hardware stack levels used:    1
 33564 ;; Hardware stack levels required when called:    7
 33565 ;; This function calls:
 33566 ;;		Nothing
 33567 ;; This function is called by:
 33568 ;;		_LORAWAN_Reset
 33569 ;; This function uses a non-reentrant model
 33570 ;;
 33571                           
 33572                           	psect	text157
 33573  0000'                    __ptext157:
 33574                           	opt stack 0
 33575  0000'                    _RADIO_SetPABoost:
 33576                           	opt stack 22
 33577                           
 33578                           ;incstack = 0
 33579                           ;RADIO_SetPABoost@paBoost stored from wreg
 33580  0000' 0100               	movlb	0	; () banked
 33581  0002' 6F00'              	movwf	RADIO_SetPABoost@paBoost& (0+255),b
 33582                           
 33583                           ;radio_driver_SX1276.c: 1600: RadioConfiguration.paBoost = paBoost;
 33584  0004' C000' F034'        	movff	RADIO_SetPABoost@paBoost,_RadioConfiguration+29
 33585  0008' 0012               	return		;funcret
 33586  000A'                    __end_of_RADIO_SetPABoost:
 33587                           	opt stack 0
 33588                           tosu	equ	0xFFF
 33589                           tosh	equ	0xFFE
 33590                           tosl	equ	0xFFD
 33591                           pclath	equ	0xFFA
 33592                           tblptru	equ	0xFF8
 33593                           tblptrh	equ	0xFF7
 33594                           tblptrl	equ	0xFF6
 33595                           tablat	equ	0xFF5
 33596                           prodh	equ	0xFF4
 33597                           prodl	equ	0xFF3
 33598                           intcon	equ	0xFF2
 33599                           intcon2	equ	0xFF1
 33600                           intcon3	equ	0xFF0
 33601                           indf0	equ	0xFEF
 33602                           postinc0	equ	0xFEE
 33603                           plusw0	equ	0xFEB
 33604                           fsr0h	equ	0xFEA
 33605                           fsr0l	equ	0xFE9
 33606                           wreg	equ	0xFE8
 33607                           postinc1	equ	0xFE6
 33608                           postdec1	equ	0xFE5
 33609                           plusw1	equ	0xFE3
 33610                           fsr1h	equ	0xFE2
 33611                           fsr1l	equ	0xFE1
 33612                           indf2	equ	0xFDF
 33613                           postinc2	equ	0xFDE
 33614                           postdec2	equ	0xFDD
 33615                           plusw2	equ	0xFDB
 33616                           fsr2h	equ	0xFDA
 33617                           fsr2l	equ	0xFD9
 33618                           status	equ	0xFD8
 33619                           
 33620 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 33621 ;; Defined at:
 33622 ;;		line 550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33623 ;; Parameters:    Size  Location     Type
 33624 ;;  syncWord        1    wreg     unsigned char 
 33625 ;; Auto vars:     Size  Location     Type
 33626 ;;  syncWord        1    0[BANK0 ] unsigned char 
 33627 ;; Return value:  Size  Location     Type
 33628 ;;                  1    wreg      void 
 33629 ;; Registers used:
 33630 ;;		wreg
 33631 ;; Tracked objects:
 33632 ;;		On entry : 0/0
 33633 ;;		On exit  : 0/0
 33634 ;;		Unchanged: 0/0
 33635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33639 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33640 ;;Total ram usage:        1 bytes
 33641 ;; Hardware stack levels used:    1
 33642 ;; Hardware stack levels required when called:    7
 33643 ;; This function calls:
 33644 ;;		Nothing
 33645 ;; This function is called by:
 33646 ;;		_LORAWAN_Reset
 33647 ;;		_ConfigureRadio
 33648 ;;		_SelectChannelForTransmission
 33649 ;; This function uses a non-reentrant model
 33650 ;;
 33651                           
 33652                           	psect	text158
 33653  0000'                    __ptext158:
 33654                           	opt stack 0
 33655  0000'                    _RADIO_SetLoRaSyncWord:
 33656                           	opt stack 21
 33657                           
 33658                           ;incstack = 0
 33659                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 33660  0000' 0100               	movlb	0	; () banked
 33661  0002' 6F00'              	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 33662                           
 33663                           ;radio_driver_SX1276.c: 553: RadioConfiguration.syncWordLoRa = syncWord;
 33664  0004' C000' F025'        	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 33665  0008' 0012               	return		;funcret
 33666  000A'                    __end_of_RADIO_SetLoRaSyncWord:
 33667                           	opt stack 0
 33668                           tosu	equ	0xFFF
 33669                           tosh	equ	0xFFE
 33670                           tosl	equ	0xFFD
 33671                           pclath	equ	0xFFA
 33672                           tblptru	equ	0xFF8
 33673                           tblptrh	equ	0xFF7
 33674                           tblptrl	equ	0xFF6
 33675                           tablat	equ	0xFF5
 33676                           prodh	equ	0xFF4
 33677                           prodl	equ	0xFF3
 33678                           intcon	equ	0xFF2
 33679                           intcon2	equ	0xFF1
 33680                           intcon3	equ	0xFF0
 33681                           indf0	equ	0xFEF
 33682                           postinc0	equ	0xFEE
 33683                           plusw0	equ	0xFEB
 33684                           fsr0h	equ	0xFEA
 33685                           fsr0l	equ	0xFE9
 33686                           wreg	equ	0xFE8
 33687                           postinc1	equ	0xFE6
 33688                           postdec1	equ	0xFE5
 33689                           plusw1	equ	0xFE3
 33690                           fsr1h	equ	0xFE2
 33691                           fsr1l	equ	0xFE1
 33692                           indf2	equ	0xFDF
 33693                           postinc2	equ	0xFDE
 33694                           postdec2	equ	0xFDD
 33695                           plusw2	equ	0xFDB
 33696                           fsr2h	equ	0xFDA
 33697                           fsr2l	equ	0xFD9
 33698                           status	equ	0xFD8
 33699                           
 33700 ;; *************** function _RADIO_Init *****************
 33701 ;; Defined at:
 33702 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33703 ;; Parameters:    Size  Location     Type
 33704 ;;  radioBuffer     2   34[BANK0 ] PTR unsigned char 
 33705 ;;		 -> radioBuffer(271), 
 33706 ;;  frequency       4   36[BANK0 ] unsigned long 
 33707 ;; Auto vars:     Size  Location     Type
 33708 ;;  cnt             1   41[BANK0 ] unsigned char 
 33709 ;; Return value:  Size  Location     Type
 33710 ;;                  1    wreg      void 
 33711 ;; Registers used:
 33712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33713 ;; Tracked objects:
 33714 ;;		On entry : 0/0
 33715 ;;		On exit  : 0/0
 33716 ;;		Unchanged: 0/0
 33717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33718 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33721 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33722 ;;Total ram usage:        8 bytes
 33723 ;; Hardware stack levels used:    1
 33724 ;; Hardware stack levels required when called:   11
 33725 ;; This function calls:
 33726 ;;		_RADIO_RegisterRead
 33727 ;;		_RADIO_RegisterWrite
 33728 ;;		_RADIO_Reset
 33729 ;;		_RADIO_WriteFrequency
 33730 ;;		_RADIO_WriteMode
 33731 ;;		_SwTimerCreate
 33732 ;;		_SwTimerSetCallback
 33733 ;;		_SwTimerStop
 33734 ;; This function is called by:
 33735 ;;		_LORAWAN_Init
 33736 ;;		_LORAWAN_Reset
 33737 ;; This function uses a non-reentrant model
 33738 ;;
 33739                           
 33740                           	psect	text159
 33741  0000'                    __ptext159:
 33742                           	opt stack 0
 33743  0000'                    _RADIO_Init:
 33744                           	opt stack 18
 33745                           
 33746                           ;radio_driver_SX1276.c: 424: char cnt=0;
 33747                           
 33748                           ;incstack = 0
 33749  0000' 0E00               	movlw	0
 33750  0002' 0100               	movlb	0	; () banked
 33751  0004' 6F00'              	movwf	RADIO_Init@cnt& (0+255),b
 33752                           
 33753                           ; BSR set to: 0
 33754                           ;radio_driver_SX1276.c: 426: RadioConfiguration.frequency = frequency;
 33755  0006' C024' F017'        	movff	RADIO_Init@frequency,_RadioConfiguration
 33756  000A' C025' F018'        	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 33757  000E' C026' F019'        	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 33758  0012' C027' F01A'        	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 33759                           
 33760                           ;radio_driver_SX1276.c: 427: RadioConfiguration.frequencyDeviation = 25000;
 33761  0016' 0EA8               	movlw	168
 33762  0018' 0101               	movlb	1	; () banked
 33763  001A' 6F00'              	movwf	(_RadioConfiguration+4)& (0+255),b
 33764  001C' 0E61               	movlw	97
 33765  001E' 6F00'              	movwf	(_RadioConfiguration+5)& (0+255),b
 33766  0020' 0E00               	movlw	0
 33767  0022' 6F00'              	movwf	(_RadioConfiguration+6)& (0+255),b
 33768  0024' 0E00               	movlw	0
 33769  0026' 6F00'              	movwf	(_RadioConfiguration+7)& (0+255),b
 33770                           
 33771                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bitRate = 50000;
 33772  0028' 0E50               	movlw	80
 33773  002A' 6F00'              	movwf	(_RadioConfiguration+8)& (0+255),b
 33774  002C' 0EC3               	movlw	195
 33775  002E' 6F00'              	movwf	(_RadioConfiguration+9)& (0+255),b
 33776  0030' 0E00               	movlw	0
 33777  0032' 6F00'              	movwf	(_RadioConfiguration+10)& (0+255),b
 33778  0034' 0E00               	movlw	0
 33779  0036' 6F00'              	movwf	(_RadioConfiguration+11)& (0+255),b
 33780                           
 33781                           ;radio_driver_SX1276.c: 429: RadioConfiguration.modulation = MODULATION_LORA;
 33782  0038' 0E01               	movlw	1
 33783  003A' 6F00'              	movwf	(_RadioConfiguration+24)& (0+255),b
 33784                           
 33785                           ;radio_driver_SX1276.c: 430: RadioConfiguration.bandWidth = BW_125KHZ;
 33786  003C' 0E07               	movlw	7
 33787  003E' 6F00'              	movwf	(_RadioConfiguration+26)& (0+255),b
 33788                           
 33789                           ;radio_driver_SX1276.c: 431: RadioConfiguration.outputPower = 2;
 33790  0040' 0E02               	movlw	2
 33791  0042' 6F00'              	movwf	(_RadioConfiguration+27)& (0+255),b
 33792                           
 33793                           ;radio_driver_SX1276.c: 432: RadioConfiguration.errorCodingRate = CR_4_5;
 33794  0044' 0E01               	movlw	1
 33795  0046' 6F00'              	movwf	(_RadioConfiguration+33)& (0+255),b
 33796                           
 33797                           ;radio_driver_SX1276.c: 433: RadioConfiguration.implicitHeaderMode = 0;
 33798  0048' 0E00               	movlw	0
 33799  004A' 6F00'              	movwf	(_RadioConfiguration+34)& (0+255),b
 33800                           
 33801                           ;radio_driver_SX1276.c: 434: RadioConfiguration.preambleLen = 8;
 33802  004C' 0E00               	movlw	0
 33803  004E' 6F00'              	movwf	(_RadioConfiguration+13)& (0+255),b
 33804  0050' 0E08               	movlw	8
 33805  0052' 6F00'              	movwf	(_RadioConfiguration+12)& (0+255),b
 33806                           
 33807                           ;radio_driver_SX1276.c: 435: RadioConfiguration.dataRate = SF_12;
 33808  0054' 0E0C               	movlw	12
 33809  0056' 6F00'              	movwf	(_RadioConfiguration+25)& (0+255),b
 33810                           
 33811                           ;radio_driver_SX1276.c: 436: RadioConfiguration.crcOn = 1;
 33812  0058' 0E01               	movlw	1
 33813  005A' 6F00'              	movwf	(_RadioConfiguration+28)& (0+255),b
 33814                           
 33815                           ;radio_driver_SX1276.c: 437: RadioConfiguration.paBoost = 0;
 33816  005C' 0E00               	movlw	0
 33817  005E' 6F00'              	movwf	(_RadioConfiguration+29)& (0+255),b
 33818                           
 33819                           ;radio_driver_SX1276.c: 438: RadioConfiguration.iqInverted = 0;
 33820  0060' 0E00               	movlw	0
 33821  0062' 6F00'              	movwf	(_RadioConfiguration+32)& (0+255),b
 33822                           
 33823                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[0] = 0xC1;
 33824  0064' 0EC1               	movlw	193
 33825  0066' 6F00'              	movwf	(_RadioConfiguration+15)& (0+255),b
 33826                           
 33827                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWord[1] = 0x94;
 33828  0068' 0E94               	movlw	148
 33829  006A' 6F00'              	movwf	(_RadioConfiguration+16)& (0+255),b
 33830                           
 33831                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWord[2] = 0xC1;
 33832  006C' 0EC1               	movlw	193
 33833  006E' 6F00'              	movwf	(_RadioConfiguration+17)& (0+255),b
 33834                           
 33835                           ;radio_driver_SX1276.c: 442: RadioConfiguration.syncWordLen = 3;
 33836  0070' 0E03               	movlw	3
 33837  0072' 6F00'              	movwf	(_RadioConfiguration+23)& (0+255),b
 33838                           
 33839                           ;radio_driver_SX1276.c: 443: RadioConfiguration.syncWordLoRa = 0x34;
 33840  0074' 0E34               	movlw	52
 33841  0076' 6F00'              	movwf	(_RadioConfiguration+14)& (0+255),b
 33842                           
 33843                           ;radio_driver_SX1276.c: 444: RadioConfiguration.flags = 0;
 33844  0078' 0E00               	movlw	0
 33845  007A' 6F00'              	movwf	(_RadioConfiguration+35)& (0+255),b
 33846                           
 33847                           ;radio_driver_SX1276.c: 445: RadioConfiguration.dataBufferLen = 0;
 33848  007C' 0E00               	movlw	0
 33849  007E' 6F00'              	movwf	(_RadioConfiguration+36)& (0+255),b
 33850                           
 33851                           ; BSR set to: 1
 33852                           ;radio_driver_SX1276.c: 446: RadioConfiguration.dataBuffer = radioBuffer;
 33853  0080' C022' F03C'        	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 33854  0084' C023' F03D'        	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 33855                           
 33856                           ; BSR set to: 1
 33857                           ;radio_driver_SX1276.c: 447: RadioConfiguration.frequencyHopPeriod = 0;
 33858  0088' 0E00               	movlw	0
 33859  008A' 6F00'              	movwf	(_RadioConfiguration+31)& (0+255),b
 33860  008C' 0E00               	movlw	0
 33861  008E' 6F00'              	movwf	(_RadioConfiguration+30)& (0+255),b
 33862                           
 33863                           ; BSR set to: 1
 33864                           ;radio_driver_SX1276.c: 448: RadioConfiguration.packetSNR = -128;
 33865  0090' 0E80               	movlw	128
 33866  0092' 6F00'              	movwf	(_RadioConfiguration+50)& (0+255),b
 33867                           
 33868                           ; BSR set to: 1
 33869                           ;radio_driver_SX1276.c: 449: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 33870  0094' 0E98               	movlw	152
 33871  0096' 6F00'              	movwf	(_RadioConfiguration+42)& (0+255),b
 33872  0098' 0E3A               	movlw	58
 33873  009A' 6F00'              	movwf	(_RadioConfiguration+43)& (0+255),b
 33874  009C' 0E00               	movlw	0
 33875  009E' 6F00'              	movwf	(_RadioConfiguration+44)& (0+255),b
 33876  00A0' 0E00               	movlw	0
 33877  00A2' 6F00'              	movwf	(_RadioConfiguration+45)& (0+255),b
 33878                           
 33879                           ; BSR set to: 1
 33880                           ;radio_driver_SX1276.c: 450: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 33881  00A4' 0E02               	movlw	2
 33882  00A6' 6F00'              	movwf	(_RadioConfiguration+51)& (0+255),b
 33883                           
 33884                           ; BSR set to: 1
 33885                           ;radio_driver_SX1276.c: 451: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 33886  00A8' 0E0B               	movlw	11
 33887  00AA' 6F00'              	movwf	(_RadioConfiguration+52)& (0+255),b
 33888                           
 33889                           ; BSR set to: 1
 33890                           ;radio_driver_SX1276.c: 452: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 33891  00AC' 0E12               	movlw	18
 33892  00AE' 6F00'              	movwf	(_RadioConfiguration+53)& (0+255),b
 33893                           
 33894                           ; BSR set to: 1
 33895                           ;radio_driver_SX1276.c: 453: RadioConfiguration.fhssNextFrequency = (0);
 33896  00B0' 0E00               	movlw	0
 33897  00B2' 6F00'              	movwf	(_RadioConfiguration+47)& (0+255),b
 33898  00B4' 0E00               	movlw	0
 33899  00B6' 6F00'              	movwf	(_RadioConfiguration+48)& (0+255),b
 33900                           
 33901                           ;radio_driver_SX1276.c: 458: if (0 == RadioConfiguration.initialized)
 33902  00B8' 5100'              	movf	(_RadioConfiguration+46)& (0+255),w,b
 33903  00BA' A4D8               	btfss	status,2,c
 33904  00BC' D026               	goto	l1801
 33905                           
 33906                           ; BSR set to: 1
 33907                           ;radio_driver_SX1276.c: 459: {
 33908                           ;radio_driver_SX1276.c: 462: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 33909  00BE' EC00' F000'        	call	_SwTimerCreate	;wreg free
 33910  00C2' 0101               	movlb	1	; () banked
 33911  00C4' 6F00'              	movwf	(_RadioConfiguration+39)& (0+255),b
 33912                           
 33913                           ;radio_driver_SX1276.c: 463: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 33914  00C6' EC00' F000'        	call	_SwTimerCreate	;wreg free
 33915  00CA' 0101               	movlb	1	; () banked
 33916  00CC' 6F00'              	movwf	(_RadioConfiguration+40)& (0+255),b
 33917                           
 33918                           ;radio_driver_SX1276.c: 464: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 33919  00CE' EC00' F000'        	call	_SwTimerCreate	;wreg free
 33920  00D2' 0101               	movlb	1	; () banked
 33921  00D4' 6F00'              	movwf	(_RadioConfiguration+41)& (0+255),b
 33922                           
 33923                           ;radio_driver_SX1276.c: 465: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 33924  00D6' 0E00'              	movlw	low _RADIO_RxFSKTimeout
 33925  00D8' 0100               	movlb	0	; () banked
 33926  00DA' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 33927  00DC' 0E00'              	movlw	high _RADIO_RxFSKTimeout
 33928  00DE' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 33929  00E0' 0E00               	movlw	0
 33930  00E2' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 33931  00E4' 0101               	movlb	1	; () banked
 33932  00E6' 5100'              	movf	(_RadioConfiguration+40)& (0+255),w,b
 33933  00E8' EC00' F000'        	call	_SwTimerSetCallback
 33934                           
 33935                           ;radio_driver_SX1276.c: 466: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 33936  00EC' 0E00'              	movlw	low _RADIO_WatchdogTimeout
 33937  00EE' 0100               	movlb	0	; () banked
 33938  00F0' 6F00'              	movwf	SwTimerSetCallback@callback& (0+255),b
 33939  00F2' 0E00'              	movlw	high _RADIO_WatchdogTimeout
 33940  00F4' 6F00'              	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 33941  00F6' 0E00               	movlw	0
 33942  00F8' 6F00'              	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 33943  00FA' 0101               	movlb	1	; () banked
 33944  00FC' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 33945  00FE' EC00' F000'        	call	_SwTimerSetCallback
 33946                           
 33947                           ;radio_driver_SX1276.c: 467: RadioConfiguration.initialized = 1;
 33948  0102' 0E01               	movlw	1
 33949  0104' 0101               	movlb	1	; () banked
 33950  0106' 6F00'              	movwf	(_RadioConfiguration+46)& (0+255),b
 33951                           
 33952                           ;radio_driver_SX1276.c: 468: }
 33953  0108' D00B               	goto	l1802
 33954  010A'                    l1801:
 33955                           
 33956                           ; BSR set to: 1
 33957                           ;radio_driver_SX1276.c: 469: else
 33958                           ;radio_driver_SX1276.c: 470: {
 33959                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 33960                           
 33961                           ; BSR set to: 1
 33962  010A' 5100'              	movf	(_RadioConfiguration+39)& (0+255),w,b
 33963  010C' EC00' F000'        	call	_SwTimerStop
 33964                           
 33965                           ;radio_driver_SX1276.c: 472: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 33966  0110' 0101               	movlb	1	; () banked
 33967  0112' 5100'              	movf	(_RadioConfiguration+40)& (0+255),w,b
 33968  0114' EC00' F000'        	call	_SwTimerStop
 33969                           
 33970                           ;radio_driver_SX1276.c: 473: SwTimerStop(RadioConfiguration.watchdogTimerId);
 33971  0118' 0101               	movlb	1	; () banked
 33972  011A' 5100'              	movf	(_RadioConfiguration+41)& (0+255),w,b
 33973  011C' EC00' F000'        	call	_SwTimerStop
 33974  0120'                    l1802:
 33975                           
 33976                           ;radio_driver_SX1276.c: 474: }
 33977                           ;radio_driver_SX1276.c: 476: RADIO_Reset();
 33978  0120' EC00' F000'        	call	_RADIO_Reset	;wreg free
 33979                           
 33980                           ;radio_driver_SX1276.c: 481: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 33981  0124' 0E00               	movlw	0
 33982  0126' 0100               	movlb	0	; () banked
 33983  0128' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 33984  012A' 0E01               	movlw	1
 33985  012C' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 33986  012E' 0E01               	movlw	1
 33987  0130' EC00' F000'        	call	_RADIO_WriteMode
 33988                           
 33989                           ;radio_driver_SX1276.c: 484: RADIO_WriteFrequency(RadioConfiguration.frequency);
 33990  0134' C017' F016'        	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 33991  0138' C018' F017'        	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 33992  013C' C019' F018'        	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 33993  0140' C01A' F019'        	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 33994  0144' EC00' F000'        	call	_RADIO_WriteFrequency	;wreg free
 33995                           
 33996                           ;radio_driver_SX1276.c: 488: RADIO_RegisterWrite(0x3B, 0x42);
 33997  0148' 0E42               	movlw	66
 33998  014A' 0100               	movlb	0	; () banked
 33999  014C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34000  014E' 0E3B               	movlw	59
 34001  0150' EC00' F000'        	call	_RADIO_RegisterWrite
 34002  0154'                    
 34003                           ;radio_driver_SX1276.c: 492: ;
 34004  0154' 0E3B               	movlw	59
 34005  0156' EC00' F000'        	call	_RADIO_RegisterRead
 34006  015A' 0100               	movlb	0	; () banked
 34007  015C' 6F00'              	movwf	??_RADIO_Init& (0+255),b
 34008  015E' BB00'              	btfsc	??_RADIO_Init& (0+255),5,b
 34009  0160' D7F9               	goto	l1804
 34010                           
 34011                           ; BSR set to: 0
 34012                           ;radio_driver_SX1276.c: 495: RADIO_RegisterWrite(0x0C, 0x23);
 34013                           
 34014                           ; BSR set to: 0
 34015  0162' 0E23               	movlw	35
 34016  0164' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34017  0166' 0E0C               	movlw	12
 34018  0168' EC00' F000'        	call	_RADIO_RegisterWrite
 34019                           
 34020                           ;radio_driver_SX1276.c: 498: RADIO_RegisterWrite(0x0D, 0x1E);
 34021  016C' 0E1E               	movlw	30
 34022  016E' 0100               	movlb	0	; () banked
 34023  0170' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34024  0172' 0E0D               	movlw	13
 34025  0174' EC00' F000'        	call	_RADIO_RegisterWrite
 34026                           
 34027                           ;radio_driver_SX1276.c: 502: RADIO_RegisterWrite(0x1F, 0xAA);
 34028  0178' 0EAA               	movlw	170
 34029  017A' 0100               	movlb	0	; () banked
 34030  017C' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34031  017E' 0E1F               	movlw	31
 34032  0180' EC00' F000'        	call	_RADIO_RegisterWrite
 34033                           
 34034                           ;radio_driver_SX1276.c: 506: RADIO_RegisterWrite(0x35, 0x8F);
 34035  0184' 0E8F               	movlw	143
 34036  0186' 0100               	movlb	0	; () banked
 34037  0188' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34038  018A' 0E35               	movlw	53
 34039  018C' EC00' F000'        	call	_RADIO_RegisterWrite
 34040                           
 34041                           ;radio_driver_SX1276.c: 509: RADIO_RegisterWrite(0x32, 0xFF);
 34042  0190' 0EFF               	movlw	255
 34043  0192' 0100               	movlb	0	; () banked
 34044  0194' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34045  0196' 0E32               	movlw	50
 34046  0198' EC00' F000'        	call	_RADIO_RegisterWrite
 34047                           
 34048                           ;radio_driver_SX1276.c: 512: RADIO_RegisterWrite(0x31, 1 << (6));
 34049  019C' 0E40               	movlw	64
 34050  019E' 0100               	movlb	0	; () banked
 34051  01A0' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34052  01A2' 0E31               	movlw	49
 34053  01A4' EC00' F000'        	call	_RADIO_RegisterWrite
 34054                           
 34055                           ;radio_driver_SX1276.c: 515: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 34056  01A8' 0E01               	movlw	1
 34057  01AA' 0100               	movlb	0	; () banked
 34058  01AC' 6F00'              	movwf	RADIO_WriteMode@newModulation& (0+255),b
 34059  01AE' 0E01               	movlw	1
 34060  01B0' 6F00'              	movwf	RADIO_WriteMode@blocking& (0+255),b
 34061  01B2' 0E00               	movlw	0
 34062  01B4' EC00' F000'        	call	_RADIO_WriteMode
 34063                           
 34064                           ;radio_driver_SX1276.c: 531: do { TRISB3 = 1; } while(0);
 34065  01B8' 8693               	bsf	3987,3,c	;volatile
 34066                           
 34067                           ;radio_driver_SX1276.c: 532: do { WPUB3 = 1; } while(0);
 34068  01BA' 8661               	bsf	3937,3,c	;volatile
 34069                           
 34070                           ;radio_driver_SX1276.c: 533: INTCON2bits.nRBPU = 0;
 34071  01BC' 9EF1               	bcf	intcon2,7,c	;volatile
 34072                           
 34073                           ;radio_driver_SX1276.c: 534: for (cnt=0; !(cnt&0x80); cnt++)
 34074  01BE' 0E00               	movlw	0
 34075  01C0' 0100               	movlb	0	; () banked
 34076  01C2' 6F00'              	movwf	RADIO_Init@cnt& (0+255),b
 34077  01C4' D005               	goto	l1810
 34078  01C6'                    l1811:
 34079                           
 34080                           ; BSR set to: 0
 34081                           ;radio_driver_SX1276.c: 535: if (PORTBbits.RB3)
 34082  01C6' A681               	btfss	3969,3,c	;volatile
 34083  01C8' D002               	goto	l1812
 34084                           
 34085                           ; BSR set to: 0
 34086                           
 34087                           ;radio_driver_SX1276.c: 536: {
 34088                           ;radio_driver_SX1276.c: 537: do { TRISB3 = 0; } while(0);
 34089  01CA' 9693               	bcf	3987,3,c	;volatile
 34090                           
 34091                           ; BSR set to: 0
 34092                           ;radio_driver_SX1276.c: 538: break;
 34093  01CC' D003               	goto	u11980
 34094  01CE'                    l1812:
 34095                           
 34096                           ; BSR set to: 0
 34097                           
 34098                           ; BSR set to: 0
 34099  01CE' 2B00'              	incf	RADIO_Init@cnt& (0+255),f,b
 34100  01D0'                    l1810:
 34101                           
 34102                           ; BSR set to: 0
 34103                           
 34104                           ; BSR set to: 0
 34105  01D0' AF00'              	btfss	RADIO_Init@cnt& (0+255),7,b
 34106  01D2' D7F9               	goto	l1811
 34107  01D4'                    u11980:
 34108                           
 34109                           ; BSR set to: 0
 34110                           
 34111                           ; BSR set to: 0
 34112                           ;radio_driver_SX1276.c: 539: }
 34113                           ;radio_driver_SX1276.c: 541: do { WPUB3 = 0; } while(0);
 34114  01D4' 9661               	bcf	3937,3,c	;volatile
 34115                           
 34116                           ; BSR set to: 0
 34117                           ;radio_driver_SX1276.c: 542: INTCON2bits.nRBPU = 1;
 34118  01D6' 8EF1               	bsf	intcon2,7,c	;volatile
 34119                           
 34120                           ; BSR set to: 0
 34121                           ;radio_driver_SX1276.c: 545: RADIO_RegisterWrite(0x23, 0xFF);
 34122  01D8' 0EFF               	movlw	255
 34123  01DA' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34124  01DC' 0E23               	movlw	35
 34125  01DE' EC00' F000'        	call	_RADIO_RegisterWrite
 34126                           
 34127                           ;radio_driver_SX1276.c: 547: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 34128  01E2' 0E42               	movlw	66
 34129  01E4' EC00' F000'        	call	_RADIO_RegisterRead
 34130  01E8' 0101               	movlb	1	; () banked
 34131  01EA' 6F00'              	movwf	(_RadioConfiguration+49)& (0+255),b
 34132                           
 34133                           ; BSR set to: 1
 34134  01EC' 0012               	return		;funcret
 34135  01EE'                    __end_of_RADIO_Init:
 34136                           	opt stack 0
 34137                           tosu	equ	0xFFF
 34138                           tosh	equ	0xFFE
 34139                           tosl	equ	0xFFD
 34140                           pclath	equ	0xFFA
 34141                           tblptru	equ	0xFF8
 34142                           tblptrh	equ	0xFF7
 34143                           tblptrl	equ	0xFF6
 34144                           tablat	equ	0xFF5
 34145                           prodh	equ	0xFF4
 34146                           prodl	equ	0xFF3
 34147                           intcon	equ	0xFF2
 34148                           intcon2	equ	0xFF1
 34149                           intcon3	equ	0xFF0
 34150                           indf0	equ	0xFEF
 34151                           postinc0	equ	0xFEE
 34152                           plusw0	equ	0xFEB
 34153                           fsr0h	equ	0xFEA
 34154                           fsr0l	equ	0xFE9
 34155                           wreg	equ	0xFE8
 34156                           postinc1	equ	0xFE6
 34157                           postdec1	equ	0xFE5
 34158                           plusw1	equ	0xFE3
 34159                           fsr1h	equ	0xFE2
 34160                           fsr1l	equ	0xFE1
 34161                           indf2	equ	0xFDF
 34162                           postinc2	equ	0xFDE
 34163                           postdec2	equ	0xFDD
 34164                           plusw2	equ	0xFDB
 34165                           fsr2h	equ	0xFDA
 34166                           fsr2l	equ	0xFD9
 34167                           status	equ	0xFD8
 34168                           
 34169 ;; *************** function _SwTimerSetCallback *****************
 34170 ;; Defined at:
 34171 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34172 ;; Parameters:    Size  Location     Type
 34173 ;;  timerId         1    wreg     unsigned char 
 34174 ;;  callback        2    0[BANK0 ] PTR FTN(unsigned char ,)
 34175 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), TransmissionErrorCallback(1), UpdateJoinSuccessState(1), 
 34176 ;;		 -> AutomaticReplyCallback(1), UnconfirmedTransmissionCallback(1), AckRetransmissionCallback(1), LORAWAN_LinkCheckCa
      +llback(1), 
 34177 ;;		 -> LORAWAN_ReceiveWindow2Callback(1), LORAWAN_ReceiveWindow1Callback(1), 
 34178 ;;  callbackPara    1    2[BANK0 ] unsigned char 
 34179 ;; Auto vars:     Size  Location     Type
 34180 ;;  timerId         1    3[BANK0 ] unsigned char 
 34181 ;; Return value:  Size  Location     Type
 34182 ;;                  1    wreg      void 
 34183 ;; Registers used:
 34184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 34185 ;; Tracked objects:
 34186 ;;		On entry : 0/0
 34187 ;;		On exit  : 0/0
 34188 ;;		Unchanged: 0/0
 34189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34190 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34193 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34194 ;;Total ram usage:        4 bytes
 34195 ;; Hardware stack levels used:    1
 34196 ;; Hardware stack levels required when called:    7
 34197 ;; This function calls:
 34198 ;;		Nothing
 34199 ;; This function is called by:
 34200 ;;		_SetCallbackSoftwareTimers
 34201 ;;		_RADIO_Init
 34202 ;; This function uses a non-reentrant model
 34203 ;;
 34204                           
 34205                           	psect	text160
 34206  0000'                    __ptext160:
 34207                           	opt stack 0
 34208  0000'                    _SwTimerSetCallback:
 34209                           	opt stack 21
 34210                           
 34211                           ; BSR set to: 1
 34212                           ;incstack = 0
 34213                           ;SwTimerSetCallback@timerId stored from wreg
 34214  0000' 0100               	movlb	0	; () banked
 34215  0002' 6F00'              	movwf	SwTimerSetCallback@timerId& (0+255),b
 34216                           
 34217                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 34218  0004' 0100               	movlb	0	; () banked
 34219  0006' 5100'              	movf	SwTimerSetCallback@timerId& (0+255),w,b
 34220  0008' 0D08               	mullw	8
 34221  000A' 0E06               	movlw	6
 34222  000C' 26F3               	addwf	prodl,f,c
 34223  000E' 0E00               	movlw	0
 34224  0010' 22F4               	addwfc	prodh,f,c
 34225  0012' 0E00'              	movlw	low _swTimers
 34226  0014' 24F3               	addwf	prodl,w,c
 34227  0016' 6ED9               	movwf	fsr2l,c
 34228  0018' 0E00'              	movlw	high _swTimers
 34229  001A' 20F4               	addwfc	prodh,w,c
 34230  001C' 6EDA               	movwf	fsr2h,c
 34231  001E' C000' FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 34232  0022' C001' FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 34233                           
 34234                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 34235  0026' 5100'              	movf	SwTimerSetCallback@timerId& (0+255),w,b
 34236  0028' 0D08               	mullw	8
 34237  002A' 0E05               	movlw	5
 34238  002C' 26F3               	addwf	prodl,f,c
 34239  002E' 0E00               	movlw	0
 34240  0030' 22F4               	addwfc	prodh,f,c
 34241  0032' 0E00'              	movlw	low _swTimers
 34242  0034' 24F3               	addwf	prodl,w,c
 34243  0036' 6ED9               	movwf	fsr2l,c
 34244  0038' 0E00'              	movlw	high _swTimers
 34245  003A' 20F4               	addwfc	prodh,w,c
 34246  003C' 6EDA               	movwf	fsr2h,c
 34247  003E' C002' FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 34248                           
 34249                           ; BSR set to: 0
 34250  0042' 0012               	return		;funcret
 34251  0044'                    __end_of_SwTimerSetCallback:
 34252                           	opt stack 0
 34253                           tosu	equ	0xFFF
 34254                           tosh	equ	0xFFE
 34255                           tosl	equ	0xFFD
 34256                           pclath	equ	0xFFA
 34257                           tblptru	equ	0xFF8
 34258                           tblptrh	equ	0xFF7
 34259                           tblptrl	equ	0xFF6
 34260                           tablat	equ	0xFF5
 34261                           prodh	equ	0xFF4
 34262                           prodl	equ	0xFF3
 34263                           intcon	equ	0xFF2
 34264                           intcon2	equ	0xFF1
 34265                           intcon3	equ	0xFF0
 34266                           indf0	equ	0xFEF
 34267                           postinc0	equ	0xFEE
 34268                           plusw0	equ	0xFEB
 34269                           fsr0h	equ	0xFEA
 34270                           fsr0l	equ	0xFE9
 34271                           wreg	equ	0xFE8
 34272                           postinc1	equ	0xFE6
 34273                           postdec1	equ	0xFE5
 34274                           plusw1	equ	0xFE3
 34275                           fsr1h	equ	0xFE2
 34276                           fsr1l	equ	0xFE1
 34277                           indf2	equ	0xFDF
 34278                           postinc2	equ	0xFDE
 34279                           postdec2	equ	0xFDD
 34280                           plusw2	equ	0xFDB
 34281                           fsr2h	equ	0xFDA
 34282                           fsr2l	equ	0xFD9
 34283                           status	equ	0xFD8
 34284                           
 34285 ;; *************** function _RADIO_WriteMode *****************
 34286 ;; Defined at:
 34287 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 34288 ;; Parameters:    Size  Location     Type
 34289 ;;  newMode         1    wreg     enum E7712
 34290 ;;  newModulatio    1    5[BANK0 ] enum E6984
 34291 ;;  blocking        1    6[BANK0 ] unsigned char 
 34292 ;; Auto vars:     Size  Location     Type
 34293 ;;  newMode         1   10[BANK0 ] enum E7712
 34294 ;;  opMode          1   11[BANK0 ] unsigned char 
 34295 ;;  currentMode     1    9[BANK0 ] enum E7712
 34296 ;;  dioMapping      1    8[BANK0 ] unsigned char 
 34297 ;;  currentModul    1    7[BANK0 ] enum E6984
 34298 ;; Return value:  Size  Location     Type
 34299 ;;                  1    wreg      void 
 34300 ;; Registers used:
 34301 ;;		wreg, status,2, status,0, cstack
 34302 ;; Tracked objects:
 34303 ;;		On entry : 0/0
 34304 ;;		On exit  : 0/0
 34305 ;;		Unchanged: 0/0
 34306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34307 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34308 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34310 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34311 ;;Total ram usage:        7 bytes
 34312 ;; Hardware stack levels used:    1
 34313 ;; Hardware stack levels required when called:   10
 34314 ;; This function calls:
 34315 ;;		_HALDIO5PinValue
 34316 ;;		_RADIO_RegisterRead
 34317 ;;		_RADIO_RegisterWrite
 34318 ;;		_SystemBlockingWaitMs
 34319 ;; This function is called by:
 34320 ;;		_RADIO_Init
 34321 ;;		_RADIO_WriteConfiguration
 34322 ;;		_RADIO_Transmit
 34323 ;;		_RADIO_ReceiveStart
 34324 ;;		_RADIO_ReceiveStop
 34325 ;;		_RADIO_RxDone
 34326 ;;		_RADIO_FSKPayloadReady
 34327 ;;		_RADIO_RxTimeout
 34328 ;;		_RADIO_TxDone
 34329 ;;		_RADIO_FSKPacketSent
 34330 ;;		_RADIO_ReadRandom
 34331 ;;		_RADIO_RxFSKTimeout
 34332 ;;		_RADIO_WatchdogTimeout
 34333 ;;		_RADIO_StopCW
 34334 ;; This function uses a non-reentrant model
 34335 ;;
 34336                           
 34337                           	psect	text161
 34338  0000'                    __ptext161:
 34339                           	opt stack 0
 34340  0000'                    _RADIO_WriteMode:
 34341                           	opt stack 18
 34342                           
 34343                           ; BSR set to: 0
 34344                           ;incstack = 0
 34345                           ;RADIO_WriteMode@newMode stored from wreg
 34346  0000' 0100               	movlb	0	; () banked
 34347  0002' 6F00'              	movwf	RADIO_WriteMode@newMode& (0+255),b
 34348                           
 34349                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 34350                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 34351                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 34352                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 34353                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 34354                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 34355  0004' 0100               	movlb	0	; () banked
 34356  0006' 5100'              	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 34357  0008' A4D8               	btfss	status,2,c
 34358  000A' D008               	goto	l1747
 34359                           
 34360                           ; BSR set to: 0
 34361  000C' 0E06               	movlw	6
 34362  000E' 1900'              	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 34363  0010' B4D8               	btfsc	status,2,c
 34364  0012' 0012               	return	
 34365                           
 34366                           ; BSR set to: 0
 34367  0014' 0E07               	movlw	7
 34368  0016' 1900'              	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 34369  0018' B4D8               	btfsc	status,2,c
 34370  001A' 0012               	return	
 34371  001C'                    l1747:
 34372                           
 34373                           ; BSR set to: 0
 34374                           ;radio_driver_SX1276.c: 159: }
 34375                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 34376                           
 34377                           ; BSR set to: 0
 34378  001C' 0E07               	movlw	7
 34379  001E' 1700'              	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 34380                           
 34381                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 34382  0020' 0E01               	movlw	1
 34383  0022' 1700'              	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 34384                           
 34385                           ; BSR set to: 0
 34386                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 34387  0024' 0E01               	movlw	1
 34388  0026' EC00' F000'        	call	_RADIO_RegisterRead
 34389  002A' 0100               	movlb	0	; () banked
 34390  002C' 6F00'              	movwf	RADIO_WriteMode@opMode& (0+255),b
 34391                           
 34392                           ; BSR set to: 0
 34393                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 34394  002E' AF00'              	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 34395  0030' D002               	goto	l1751
 34396                           
 34397                           ; BSR set to: 0
 34398                           ;radio_driver_SX1276.c: 168: {
 34399                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 34400  0032' 0E01               	movlw	1
 34401  0034' D001               	goto	L23
 34402  0036'                    l1751:
 34403                           
 34404                           ; BSR set to: 0
 34405                           ;radio_driver_SX1276.c: 171: else
 34406                           ;radio_driver_SX1276.c: 172: {
 34407                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 34408                           
 34409                           ; BSR set to: 0
 34410  0036' 0E00               	movlw	0
 34411  0038'                    L23:
 34412  0038' 6F00'              	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 34413                           
 34414                           ; BSR set to: 0
 34415                           ;radio_driver_SX1276.c: 174: }
 34416                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 34417                           
 34418                           ; BSR set to: 0
 34419  003A' 5100'              	movf	RADIO_WriteMode@opMode& (0+255),w,b
 34420  003C' 0B07               	andlw	7
 34421  003E' 6F00'              	movwf	RADIO_WriteMode@currentMode& (0+255),b
 34422                           
 34423                           ; BSR set to: 0
 34424                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 34425  0040' 5100'              	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 34426  0042' 1900'              	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 34427  0044' B4D8               	btfsc	status,2,c
 34428  0046' D01B               	goto	l1753
 34429                           
 34430                           ; BSR set to: 0
 34431                           ;radio_driver_SX1276.c: 181: {
 34432                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 34433  0048' 5100'              	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 34434  004A' B4D8               	btfsc	status,2,c
 34435  004C' D009               	goto	l1754
 34436                           
 34437                           ; BSR set to: 0
 34438                           ;radio_driver_SX1276.c: 184: {
 34439                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 34440  004E' 5100'              	movf	RADIO_WriteMode@opMode& (0+255),w,b
 34441  0050' 0BF8               	andlw	248
 34442  0052' 6F00'              	movwf	RADIO_RegisterWrite@value& (0+255),b
 34443  0054' 0E01               	movlw	1
 34444  0056' EC00' F000'        	call	_RADIO_RegisterWrite
 34445                           
 34446                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 34447  005A' 0E00               	movlw	0
 34448  005C' 0100               	movlb	0	; () banked
 34449  005E' 6F00'              	movwf	RADIO_WriteMode@currentMode& (0+255),b
 34450  0060'                    l1754:
 34451                           
 34452                           ; BSR set to: 0
 34453                           ;radio_driver_SX1276.c: 188: }
 34454                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 34455                           
 34456                           ; BSR set to: 0
 34457  0060' 5100'              	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 34458  0062' A4D8               	btfss	status,2,c
 34459  0064' D003               	goto	l1755
 34460                           
 34461                           ; BSR set to: 0
 34462                           ;radio_driver_SX1276.c: 191: {
 34463                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 34464  0066' 5100'              	movf	RADIO_WriteMode@opMode& (0+255),w,b
 34465  0068' 0B78               	andlw	120
 34466  006A' D003               	goto	L24
 34467  006C'                    l1755:
 34468                           
 34469                           ; BSR set to: 0
 34470                           ;radio_driver_SX1276.c: 195: else
 34471                           ;radio_driver_SX1276.c: 196: {
 34472                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 34473                           
 34474                           ; BSR set to: 0
 34475  006C' 5100'              	movf	RADIO_WriteMode@opMode& (0+255),w,b
 34476  006E' 0B78               	andlw	120
 34477  0070' 0980               	iorlw	128
 34478  0072'                    L24:
 34479  0072' 6F00'              	movwf	RADIO_WriteMode@opMode& (0+255),b
 34480                           
 34481                           ; BSR set to: 0
 34482                           ;radio_driver_SX1276.c: 199: }
 34483                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 34484                           
 34485                           ; BSR set to: 0
 34486  0074' C00B' F002'        	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 34487  0078' 0E01               	movlw	1
 34488  007A' EC00' F000'        	call	_RADIO_RegisterWrite
 34489  007E'                    l1753:
 34490                           
 34491                           ;radio_driver_SX1276.c: 201: }
 34492                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 34493  007E' 0100               	movlb	0	; () banked
 34494  0080' 5100'              	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 34495  0082' 1900'              	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 34496  0084' B4D8               	btfsc	status,2,c
 34497  0086' 0012               	return	
 34498                           
 34499                           ; BSR set to: 0
 34500                           ;radio_driver_SX1276.c: 208: {
 34501                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 34502  0088' 5100'              	movf	RADIO_WriteMode@newMode& (0+255),w,b
 34503  008A' B4D8               	btfsc	status,2,c
 34504  008C' D015               	goto	l1758
 34505                           
 34506                           ; BSR set to: 0
 34507  008E' 0500'              	decf	RADIO_WriteMode@blocking& (0+255),w,b
 34508  0090' A4D8               	btfss	status,2,c
 34509  0092' D012               	goto	l1758
 34510                           
 34511                           ; BSR set to: 0
 34512                           ;radio_driver_SX1276.c: 212: {
 34513                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 34514  0094' 0E41               	movlw	65
 34515  0096' EC00' F000'        	call	_RADIO_RegisterRead
 34516  009A' 0100               	movlb	0	; () banked
 34517  009C' 6F00'              	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 34518                           
 34519                           ; BSR set to: 0
 34520                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 34521  009E' 5100'              	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 34522  00A0' A4D8               	btfss	status,2,c
 34523  00A2' D003               	goto	l1759
 34524                           
 34525                           ; BSR set to: 0
 34526                           ;radio_driver_SX1276.c: 215: {
 34527                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 34528  00A4' 0E30               	movlw	48
 34529  00A6' 1300'              	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 34530                           
 34531                           ;radio_driver_SX1276.c: 218: }
 34532  00A8' D002               	goto	l1760
 34533  00AA'                    l1759:
 34534                           
 34535                           ; BSR set to: 0
 34536                           ;radio_driver_SX1276.c: 219: else
 34537                           ;radio_driver_SX1276.c: 220: {
 34538                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 34539                           
 34540                           ; BSR set to: 0
 34541  00AA' 0ECF               	movlw	207
 34542  00AC' 1700'              	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 34543  00AE'                    l1760:
 34544                           
 34545                           ; BSR set to: 0
 34546                           ;radio_driver_SX1276.c: 223: }
 34547                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 34548                           
 34549                           ; BSR set to: 0
 34550  00AE' C008' F002'        	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 34551  00B2' 0E41               	movlw	65
 34552  00B4' EC00' F000'        	call	_RADIO_RegisterWrite
 34553  00B8'                    l1758:
 34554                           
 34555                           ;radio_driver_SX1276.c: 225: }
 34556                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 34557  00B8' 0EF8               	movlw	248
 34558  00BA' 0100               	movlb	0	; () banked
 34559  00BC' 1700'              	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 34560                           
 34561                           ; BSR set to: 0
 34562                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 34563  00BE' 5100'              	movf	RADIO_WriteMode@newMode& (0+255),w,b
 34564  00C0' 1300'              	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 34565                           
 34566                           ; BSR set to: 0
 34567                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 34568  00C2' C00B' F002'        	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 34569  00C6' 0E01               	movlw	1
 34570  00C8' EC00' F000'        	call	_RADIO_RegisterWrite
 34571                           
 34572                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 34573  00CC' 0100               	movlb	0	; () banked
 34574  00CE' 0500'              	decf	RADIO_WriteMode@blocking& (0+255),w,b
 34575  00D0' A4D8               	btfss	status,2,c
 34576  00D2' 0012               	return	
 34577                           
 34578                           ; BSR set to: 0
 34579                           ;radio_driver_SX1276.c: 234: {
 34580                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 34581  00D4' 5100'              	movf	RADIO_WriteMode@newMode& (0+255),w,b
 34582  00D6' B4D8               	btfsc	status,2,c
 34583  00D8' D006               	goto	l1762
 34584  00DA'                    u7550:
 34585                           
 34586                           ; BSR set to: 0
 34587                           
 34588                           ;radio_driver_SX1276.c: 238: ;
 34589                           
 34590                           ; BSR set to: 0
 34591                           
 34592                           ; BSR set to: 0
 34593                           ;radio_driver_SX1276.c: 236: {
 34594                           ;radio_driver_SX1276.c: 237: while (HALDIO5PinValue() == 0)
 34595  00DA' EC00' F000'        	call	_HALDIO5PinValue	;wreg free
 34596  00DE' 0900               	iorlw	0
 34597  00E0' A4D8               	btfss	status,2,c
 34598  00E2' 0012               	return	
 34599  00E4' D7FA               	goto	u7550
 34600  00E6'                    l1762:
 34601                           
 34602                           ;radio_driver_SX1276.c: 240: else
 34603                           ;radio_driver_SX1276.c: 241: {
 34604                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 34605  00E6' 0E01               	movlw	1
 34606  00E8' 0100               	movlb	0	; () banked
 34607  00EA' 6F00'              	movwf	SystemBlockingWaitMs@ms& (0+255),b
 34608  00EC' 0E00               	movlw	0
 34609  00EE' 6F00'              	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 34610  00F0' 0E00               	movlw	0
 34611  00F2' 6F00'              	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 34612  00F4' 0E00               	movlw	0
 34613  00F6' 6F00'              	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 34614  00F8' EC00' F000'        	call	_SystemBlockingWaitMs	;wreg free
 34615  00FC' 0012               	return	
 34616  00FE'                    __end_of_RADIO_WriteMode:
 34617                           	opt stack 0
 34618                           tosu	equ	0xFFF
 34619                           tosh	equ	0xFFE
 34620                           tosl	equ	0xFFD
 34621                           pclath	equ	0xFFA
 34622                           tblptru	equ	0xFF8
 34623                           tblptrh	equ	0xFF7
 34624                           tblptrl	equ	0xFF6
 34625                           tablat	equ	0xFF5
 34626                           prodh	equ	0xFF4
 34627                           prodl	equ	0xFF3
 34628                           intcon	equ	0xFF2
 34629                           intcon2	equ	0xFF1
 34630                           intcon3	equ	0xFF0
 34631                           indf0	equ	0xFEF
 34632                           postinc0	equ	0xFEE
 34633                           plusw0	equ	0xFEB
 34634                           fsr0h	equ	0xFEA
 34635                           fsr0l	equ	0xFE9
 34636                           wreg	equ	0xFE8
 34637                           postinc1	equ	0xFE6
 34638                           postdec1	equ	0xFE5
 34639                           plusw1	equ	0xFE3
 34640                           fsr1h	equ	0xFE2
 34641                           fsr1l	equ	0xFE1
 34642                           indf2	equ	0xFDF
 34643                           postinc2	equ	0xFDE
 34644                           postdec2	equ	0xFDD
 34645                           plusw2	equ	0xFDB
 34646                           fsr2h	equ	0xFDA
 34647                           fsr2l	equ	0xFD9
 34648                           status	equ	0xFD8
 34649                           
 34650 ;; *************** function _RADIO_RegisterRead *****************
 34651 ;; Defined at:
 34652 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 34653 ;; Parameters:    Size  Location     Type
 34654 ;;  reg             1    wreg     unsigned char 
 34655 ;; Auto vars:     Size  Location     Type
 34656 ;;  reg             1    2[BANK0 ] unsigned char 
 34657 ;;  readValue       1    3[BANK0 ] unsigned char 
 34658 ;; Return value:  Size  Location     Type
 34659 ;;                  1    wreg      unsigned char 
 34660 ;; Registers used:
 34661 ;;		wreg, status,2, status,0, cstack
 34662 ;; Tracked objects:
 34663 ;;		On entry : 0/0
 34664 ;;		On exit  : 0/0
 34665 ;;		Unchanged: 0/0
 34666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34668 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34671 ;;Total ram usage:        2 bytes
 34672 ;; Hardware stack levels used:    1
 34673 ;; Hardware stack levels required when called:    9
 34674 ;; This function calls:
 34675 ;;		_HALSPICSAssert
 34676 ;;		_HALSPICSDeassert
 34677 ;;		_HALSPISend
 34678 ;; This function is called by:
 34679 ;;		_RADIO_WriteMode
 34680 ;;		_RADIO_WritePower
 34681 ;;		_RADIO_Init
 34682 ;;		_RADIO_WriteConfiguration
 34683 ;;		_RADIO_Transmit
 34684 ;;		_RADIO_RxDone
 34685 ;;		_RADIO_FSKPayloadReady
 34686 ;;		_RADIO_FSKPacketSent
 34687 ;;		_RADIO_FHSSChangeChannel
 34688 ;;		_RADIO_DIO0
 34689 ;;		_RADIO_DIO1
 34690 ;;		_RADIO_DIO2
 34691 ;;		_RADIO_DIO3
 34692 ;;		_RADIO_DIO4
 34693 ;;		_RADIO_DIO5
 34694 ;;		_RADIO_ReadRandom
 34695 ;;		_RADIO_RxFSKTimeout
 34696 ;; This function uses a non-reentrant model
 34697 ;;
 34698                           
 34699                           	psect	text162
 34700  0000'                    __ptext162:
 34701                           	opt stack 0
 34702  0000'                    _RADIO_RegisterRead:
 34703                           	opt stack 18
 34704                           
 34705                           ;incstack = 0
 34706                           ;RADIO_RegisterRead@reg stored from wreg
 34707  0000' 0100               	movlb	0	; () banked
 34708  0002' 6F00'              	movwf	RADIO_RegisterRead@reg& (0+255),b
 34709                           
 34710                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 34711                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 34712  0004' 0100               	movlb	0	; () banked
 34713  0006' 9F00'              	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 34714                           
 34715                           ; BSR set to: 0
 34716                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 34717  0008' EC00' F000'        	call	_HALSPICSAssert	;wreg free
 34718                           
 34719                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 34720  000C' 0100               	movlb	0	; () banked
 34721  000E' 5100'              	movf	RADIO_RegisterRead@reg& (0+255),w,b
 34722  0010' EC00' F000'        	call	_HALSPISend
 34723                           
 34724                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 34725  0014' 0EFF               	movlw	255
 34726  0016' EC00' F000'        	call	_HALSPISend
 34727  001A' 0100               	movlb	0	; () banked
 34728  001C' 6F00'              	movwf	RADIO_RegisterRead@readValue& (0+255),b
 34729                           
 34730                           ; BSR set to: 0
 34731                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 34732  001E' EC00' F000'        	call	_HALSPICSDeassert	;wreg free
 34733                           
 34734                           ;radio_driver_SX1276.c: 142: return readValue;
 34735  0022' 0100               	movlb	0	; () banked
 34736  0024' 5100'              	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 34737  0026' 0012               	return	
 34738  0028'                    __end_of_RADIO_RegisterRead:
 34739                           	opt stack 0
 34740                           tosu	equ	0xFFF
 34741                           tosh	equ	0xFFE
 34742                           tosl	equ	0xFFD
 34743                           pclath	equ	0xFFA
 34744                           tblptru	equ	0xFF8
 34745                           tblptrh	equ	0xFF7
 34746                           tblptrl	equ	0xFF6
 34747                           tablat	equ	0xFF5
 34748                           prodh	equ	0xFF4
 34749                           prodl	equ	0xFF3
 34750                           intcon	equ	0xFF2
 34751                           intcon2	equ	0xFF1
 34752                           intcon3	equ	0xFF0
 34753                           indf0	equ	0xFEF
 34754                           postinc0	equ	0xFEE
 34755                           plusw0	equ	0xFEB
 34756                           fsr0h	equ	0xFEA
 34757                           fsr0l	equ	0xFE9
 34758                           wreg	equ	0xFE8
 34759                           postinc1	equ	0xFE6
 34760                           postdec1	equ	0xFE5
 34761                           plusw1	equ	0xFE3
 34762                           fsr1h	equ	0xFE2
 34763                           fsr1l	equ	0xFE1
 34764                           indf2	equ	0xFDF
 34765                           postinc2	equ	0xFDE
 34766                           postdec2	equ	0xFDD
 34767                           plusw2	equ	0xFDB
 34768                           fsr2h	equ	0xFDA
 34769                           fsr2l	equ	0xFD9
 34770                           status	equ	0xFD8
 34771                           
 34772 ;; *************** function _HALDIO5PinValue *****************
 34773 ;; Defined at:
 34774 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 34775 ;; Parameters:    Size  Location     Type
 34776 ;;		None
 34777 ;; Auto vars:     Size  Location     Type
 34778 ;;		None
 34779 ;; Return value:  Size  Location     Type
 34780 ;;                  1    wreg      unsigned char 
 34781 ;; Registers used:
 34782 ;;		wreg
 34783 ;; Tracked objects:
 34784 ;;		On entry : 0/0
 34785 ;;		On exit  : 0/0
 34786 ;;		Unchanged: 0/0
 34787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34792 ;;Total ram usage:        0 bytes
 34793 ;; Hardware stack levels used:    1
 34794 ;; Hardware stack levels required when called:    7
 34795 ;; This function calls:
 34796 ;;		Nothing
 34797 ;; This function is called by:
 34798 ;;		_RADIO_WriteMode
 34799 ;; This function uses a non-reentrant model
 34800 ;;
 34801                           
 34802                           	psect	text163
 34803  0000'                    __ptext163:
 34804                           	opt stack 0
 34805  0000'                    _HALDIO5PinValue:
 34806                           	opt stack 20
 34807                           
 34808                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 34809                           
 34810                           ; BSR set to: 0
 34811                           ;incstack = 0
 34812  0000' A081               	btfss	3969,0,c	;volatile
 34813  0002' D002               	goto	u7120
 34814  0004' 0E01               	movlw	1
 34815  0006' 0012               	return	
 34816  0008'                    u7120:
 34817  0008' 0E00               	movlw	0
 34818  000A' 0012               	return	
 34819  000C'                    __end_of_HALDIO5PinValue:
 34820                           	opt stack 0
 34821                           tosu	equ	0xFFF
 34822                           tosh	equ	0xFFE
 34823                           tosl	equ	0xFFD
 34824                           pclath	equ	0xFFA
 34825                           tblptru	equ	0xFF8
 34826                           tblptrh	equ	0xFF7
 34827                           tblptrl	equ	0xFF6
 34828                           tablat	equ	0xFF5
 34829                           prodh	equ	0xFF4
 34830                           prodl	equ	0xFF3
 34831                           intcon	equ	0xFF2
 34832                           intcon2	equ	0xFF1
 34833                           intcon3	equ	0xFF0
 34834                           indf0	equ	0xFEF
 34835                           postinc0	equ	0xFEE
 34836                           plusw0	equ	0xFEB
 34837                           fsr0h	equ	0xFEA
 34838                           fsr0l	equ	0xFE9
 34839                           wreg	equ	0xFE8
 34840                           postinc1	equ	0xFE6
 34841                           postdec1	equ	0xFE5
 34842                           plusw1	equ	0xFE3
 34843                           fsr1h	equ	0xFE2
 34844                           fsr1l	equ	0xFE1
 34845                           indf2	equ	0xFDF
 34846                           postinc2	equ	0xFDE
 34847                           postdec2	equ	0xFDD
 34848                           plusw2	equ	0xFDB
 34849                           fsr2h	equ	0xFDA
 34850                           fsr2l	equ	0xFD9
 34851                           status	equ	0xFD8
 34852                           
 34853 ;; *************** function _RADIO_WriteFrequency *****************
 34854 ;; Defined at:
 34855 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 34856 ;; Parameters:    Size  Location     Type
 34857 ;;  frequency       4   22[BANK0 ] unsigned long 
 34858 ;; Auto vars:     Size  Location     Type
 34859 ;;  num             4   30[BANK0 ] unsigned long 
 34860 ;;  num_mod         4   26[BANK0 ] unsigned long 
 34861 ;; Return value:  Size  Location     Type
 34862 ;;                  1    wreg      void 
 34863 ;; Registers used:
 34864 ;;		wreg, status,2, status,0, cstack
 34865 ;; Tracked objects:
 34866 ;;		On entry : 0/0
 34867 ;;		On exit  : 0/0
 34868 ;;		Unchanged: 0/0
 34869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34871 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34873 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34874 ;;Total ram usage:       12 bytes
 34875 ;; Hardware stack levels used:    1
 34876 ;; Hardware stack levels required when called:   10
 34877 ;; This function calls:
 34878 ;;		_RADIO_RegisterWrite
 34879 ;;		___lldiv
 34880 ;;		___llmod
 34881 ;; This function is called by:
 34882 ;;		_RADIO_Init
 34883 ;;		_RADIO_WriteConfiguration
 34884 ;;		_RADIO_FHSSChangeChannel
 34885 ;; This function uses a non-reentrant model
 34886 ;;
 34887                           
 34888                           	psect	text164
 34889  0000'                    __ptext164:
 34890                           	opt stack 0
 34891  0000'                    _RADIO_WriteFrequency:
 34892                           	opt stack 17
 34893                           
 34894                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 34895                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 34896                           
 34897                           ;incstack = 0
 34898  0000' C016' F000'        	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 34899  0004' C017' F001'        	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 34900  0008' C018' F002'        	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 34901  000C' C019' F003'        	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 34902  0010' 0E09               	movlw	9
 34903  0012' 0100               	movlb	0	; () banked
 34904  0014' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 34905  0016' 0E3D               	movlw	61
 34906  0018' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 34907  001A' 0E00               	movlw	0
 34908  001C' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 34909  001E' 0E00               	movlw	0
 34910  0020' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 34911  0022' EC00' F000'        	call	___lldiv	;wreg free
 34912  0026' C000' F01E'        	movff	?___lldiv,RADIO_WriteFrequency@num
 34913  002A' C001' F01F'        	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 34914  002E' C002' F020'        	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 34915  0032' C003' F021'        	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 34916                           
 34917                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 34918  0036' C016' F00D'        	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 34919  003A' C017' F00E'        	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 34920  003E' C018' F00F'        	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 34921  0042' C019' F010'        	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 34922  0046' 0E09               	movlw	9
 34923  0048' 0100               	movlb	0	; () banked
 34924  004A' 6F00'              	movwf	___llmod@divisor& (0+255),b
 34925  004C' 0E3D               	movlw	61
 34926  004E' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
 34927  0050' 0E00               	movlw	0
 34928  0052' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
 34929  0054' 0E00               	movlw	0
 34930  0056' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
 34931  0058' EC00' F000'        	call	___llmod	;wreg free
 34932  005C' C00D' F01A'        	movff	?___llmod,RADIO_WriteFrequency@num_mod
 34933  0060' C00E' F01B'        	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 34934  0064' C00F' F01C'        	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 34935  0068' C010' F01D'        	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 34936                           
 34937                           ;radio_driver_SX1276.c: 277: num <<= (8);
 34938  006C' C020' F021'        	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 34939  0070' C01F' F020'        	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 34940  0074' C01E' F01F'        	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 34941  0078' 0100               	movlb	0	; () banked
 34942  007A' 6B00'              	clrf	RADIO_WriteFrequency@num& (0+255),b
 34943                           
 34944                           ; BSR set to: 0
 34945                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 34946  007C' C01C' F01D'        	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 34947  0080' C01B' F01C'        	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 34948  0084' C01A' F01B'        	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 34949  0088' 6B00'              	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 34950                           
 34951                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 34952  008A' C01A' F000'        	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 34953  008E' C01B' F001'        	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 34954  0092' C01C' F002'        	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 34955  0096' C01D' F003'        	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 34956  009A' 0E09               	movlw	9
 34957  009C' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 34958  009E' 0E3D               	movlw	61
 34959  00A0' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 34960  00A2' 0E00               	movlw	0
 34961  00A4' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 34962  00A6' 0E00               	movlw	0
 34963  00A8' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 34964  00AA' EC00' F000'        	call	___lldiv	;wreg free
 34965  00AE' C000' F01A'        	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 34966  00B2' C001' F01B'        	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 34967  00B6' C002' F01C'        	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 34968  00BA' C003' F01D'        	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 34969                           
 34970                           ;radio_driver_SX1276.c: 283: num += num_mod;
 34971  00BE' 0100               	movlb	0	; () banked
 34972  00C0' 5100'              	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 34973  00C2' 2700'              	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 34974  00C4' 5100'              	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 34975  00C6' 2300'              	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 34976  00C8' 5100'              	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 34977  00CA' 2300'              	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 34978  00CC' 5100'              	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 34979  00CE' 2300'              	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 34980                           
 34981                           ; BSR set to: 0
 34982                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 34983  00D0' C020' F002'        	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 34984  00D4' 0E06               	movlw	6
 34985  00D6' EC00' F000'        	call	_RADIO_RegisterWrite
 34986                           
 34987                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 34988  00DA' C01F' F002'        	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 34989  00DE' 0E07               	movlw	7
 34990  00E0' EC00' F000'        	call	_RADIO_RegisterWrite
 34991                           
 34992                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 34993  00E4' C01E' F002'        	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 34994  00E8' 0E08               	movlw	8
 34995  00EA' EC00' F000'        	call	_RADIO_RegisterWrite
 34996  00EE' 0012               	return		;funcret
 34997  00F0'                    __end_of_RADIO_WriteFrequency:
 34998                           	opt stack 0
 34999                           tosu	equ	0xFFF
 35000                           tosh	equ	0xFFE
 35001                           tosl	equ	0xFFD
 35002                           pclath	equ	0xFFA
 35003                           tblptru	equ	0xFF8
 35004                           tblptrh	equ	0xFF7
 35005                           tblptrl	equ	0xFF6
 35006                           tablat	equ	0xFF5
 35007                           prodh	equ	0xFF4
 35008                           prodl	equ	0xFF3
 35009                           intcon	equ	0xFF2
 35010                           intcon2	equ	0xFF1
 35011                           intcon3	equ	0xFF0
 35012                           indf0	equ	0xFEF
 35013                           postinc0	equ	0xFEE
 35014                           plusw0	equ	0xFEB
 35015                           fsr0h	equ	0xFEA
 35016                           fsr0l	equ	0xFE9
 35017                           wreg	equ	0xFE8
 35018                           postinc1	equ	0xFE6
 35019                           postdec1	equ	0xFE5
 35020                           plusw1	equ	0xFE3
 35021                           fsr1h	equ	0xFE2
 35022                           fsr1l	equ	0xFE1
 35023                           indf2	equ	0xFDF
 35024                           postinc2	equ	0xFDE
 35025                           postdec2	equ	0xFDD
 35026                           plusw2	equ	0xFDB
 35027                           fsr2h	equ	0xFDA
 35028                           fsr2l	equ	0xFD9
 35029                           status	equ	0xFD8
 35030                           
 35031 ;; *************** function ___llmod *****************
 35032 ;; Defined at:
 35033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 35034 ;; Parameters:    Size  Location     Type
 35035 ;;  dividend        4   13[BANK0 ] unsigned long 
 35036 ;;  divisor         4   17[BANK0 ] unsigned long 
 35037 ;; Auto vars:     Size  Location     Type
 35038 ;;  counter         1   21[BANK0 ] unsigned char 
 35039 ;; Return value:  Size  Location     Type
 35040 ;;                  4   13[BANK0 ] unsigned long 
 35041 ;; Registers used:
 35042 ;;		wreg, status,2, status,0
 35043 ;; Tracked objects:
 35044 ;;		On entry : 0/0
 35045 ;;		On exit  : 0/0
 35046 ;;		Unchanged: 0/0
 35047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35048 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35051 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35052 ;;Total ram usage:        9 bytes
 35053 ;; Hardware stack levels used:    1
 35054 ;; Hardware stack levels required when called:    7
 35055 ;; This function calls:
 35056 ;;		Nothing
 35057 ;; This function is called by:
 35058 ;;		_ValidateFrequency
 35059 ;;		_RADIO_WriteFrequency
 35060 ;;		_printf
 35061 ;; This function uses a non-reentrant model
 35062 ;;
 35063                           
 35064                           	psect	text165
 35065  0000'                    __ptext165:
 35066                           	opt stack 0
 35067  0000'                    ___llmod:
 35068                           	opt stack 22
 35069                           
 35070                           ;incstack = 0
 35071  0000' 0100               	movlb	0	; () banked
 35072  0002' 5100'              	movf	___llmod@divisor& (0+255),w,b
 35073  0004' 1100'              	iorwf	(___llmod@divisor+1)& (0+255),w,b
 35074  0006' 1100'              	iorwf	(___llmod@divisor+2)& (0+255),w,b
 35075  0008' 1100'              	iorwf	(___llmod@divisor+3)& (0+255),w,b
 35076  000A' B4D8               	btfsc	status,2,c
 35077  000C' D024               	goto	l2996
 35078                           
 35079                           ; BSR set to: 0
 35080  000E' 0E01               	movlw	1
 35081  0010' 6F00'              	movwf	___llmod@counter& (0+255),b
 35082  0012' D006               	goto	l2991
 35083  0014'                    
 35084                           ; BSR set to: 0
 35085                           
 35086                           ; BSR set to: 0
 35087  0014' 90D8               	bcf	status,0,c
 35088  0016' 3700'              	rlcf	___llmod@divisor& (0+255),f,b
 35089  0018' 3700'              	rlcf	(___llmod@divisor+1)& (0+255),f,b
 35090  001A' 3700'              	rlcf	(___llmod@divisor+2)& (0+255),f,b
 35091  001C' 3700'              	rlcf	(___llmod@divisor+3)& (0+255),f,b
 35092  001E' 2B00'              	incf	___llmod@counter& (0+255),f,b
 35093  0020'                    l2991:
 35094                           
 35095                           ; BSR set to: 0
 35096                           
 35097                           ; BSR set to: 0
 35098  0020' AF00'              	btfss	(___llmod@divisor+3)& (0+255),7,b
 35099  0022' D7F8               	goto	l2992
 35100  0024'                    u7240:
 35101                           
 35102                           ; BSR set to: 0
 35103                           
 35104                           ; BSR set to: 0
 35105                           
 35106                           ; BSR set to: 0
 35107  0024' 5100'              	movf	___llmod@divisor& (0+255),w,b
 35108  0026' 5D00'              	subwf	___llmod@dividend& (0+255),w,b
 35109  0028' 5100'              	movf	(___llmod@divisor+1)& (0+255),w,b
 35110  002A' 5900'              	subwfb	(___llmod@dividend+1)& (0+255),w,b
 35111  002C' 5100'              	movf	(___llmod@divisor+2)& (0+255),w,b
 35112  002E' 5900'              	subwfb	(___llmod@dividend+2)& (0+255),w,b
 35113  0030' 5100'              	movf	(___llmod@divisor+3)& (0+255),w,b
 35114  0032' 5900'              	subwfb	(___llmod@dividend+3)& (0+255),w,b
 35115  0034' A0D8               	btfss	status,0,c
 35116  0036' D008               	goto	l2995
 35117                           
 35118                           ; BSR set to: 0
 35119  0038' 5100'              	movf	___llmod@divisor& (0+255),w,b
 35120  003A' 5F00'              	subwf	___llmod@dividend& (0+255),f,b
 35121  003C' 5100'              	movf	(___llmod@divisor+1)& (0+255),w,b
 35122  003E' 5B00'              	subwfb	(___llmod@dividend+1)& (0+255),f,b
 35123  0040' 5100'              	movf	(___llmod@divisor+2)& (0+255),w,b
 35124  0042' 5B00'              	subwfb	(___llmod@dividend+2)& (0+255),f,b
 35125  0044' 5100'              	movf	(___llmod@divisor+3)& (0+255),w,b
 35126  0046' 5B00'              	subwfb	(___llmod@dividend+3)& (0+255),f,b
 35127  0048'                    l2995:
 35128                           
 35129                           ; BSR set to: 0
 35130                           
 35131                           ; BSR set to: 0
 35132  0048' 90D8               	bcf	status,0,c
 35133  004A' 3300'              	rrcf	(___llmod@divisor+3)& (0+255),f,b
 35134  004C' 3300'              	rrcf	(___llmod@divisor+2)& (0+255),f,b
 35135  004E' 3300'              	rrcf	(___llmod@divisor+1)& (0+255),f,b
 35136  0050' 3300'              	rrcf	___llmod@divisor& (0+255),f,b
 35137                           
 35138                           ; BSR set to: 0
 35139  0052' 2F00'              	decfsz	___llmod@counter& (0+255),f,b
 35140  0054' D7E7               	goto	u7240
 35141  0056'                    l2996:
 35142                           
 35143                           ; BSR set to: 0
 35144                           
 35145                           ; BSR set to: 0
 35146  0056' C00D' F00D'        	movff	___llmod@dividend,?___llmod
 35147  005A' C00E' F00E'        	movff	___llmod@dividend+1,?___llmod+1
 35148  005E' C00F' F00F'        	movff	___llmod@dividend+2,?___llmod+2
 35149  0062' C010' F010'        	movff	___llmod@dividend+3,?___llmod+3
 35150                           
 35151                           ; BSR set to: 0
 35152  0066' 0012               	return		;funcret
 35153  0068'                    __end_of___llmod:
 35154                           	opt stack 0
 35155                           tosu	equ	0xFFF
 35156                           tosh	equ	0xFFE
 35157                           tosl	equ	0xFFD
 35158                           pclath	equ	0xFFA
 35159                           tblptru	equ	0xFF8
 35160                           tblptrh	equ	0xFF7
 35161                           tblptrl	equ	0xFF6
 35162                           tablat	equ	0xFF5
 35163                           prodh	equ	0xFF4
 35164                           prodl	equ	0xFF3
 35165                           intcon	equ	0xFF2
 35166                           intcon2	equ	0xFF1
 35167                           intcon3	equ	0xFF0
 35168                           indf0	equ	0xFEF
 35169                           postinc0	equ	0xFEE
 35170                           plusw0	equ	0xFEB
 35171                           fsr0h	equ	0xFEA
 35172                           fsr0l	equ	0xFE9
 35173                           wreg	equ	0xFE8
 35174                           postinc1	equ	0xFE6
 35175                           postdec1	equ	0xFE5
 35176                           plusw1	equ	0xFE3
 35177                           fsr1h	equ	0xFE2
 35178                           fsr1l	equ	0xFE1
 35179                           indf2	equ	0xFDF
 35180                           postinc2	equ	0xFDE
 35181                           postdec2	equ	0xFDD
 35182                           plusw2	equ	0xFDB
 35183                           fsr2h	equ	0xFDA
 35184                           fsr2l	equ	0xFD9
 35185                           status	equ	0xFD8
 35186                           
 35187 ;; *************** function _RADIO_RegisterWrite *****************
 35188 ;; Defined at:
 35189 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 35190 ;; Parameters:    Size  Location     Type
 35191 ;;  reg             1    wreg     unsigned char 
 35192 ;;  value           1    2[BANK0 ] unsigned char 
 35193 ;; Auto vars:     Size  Location     Type
 35194 ;;  reg             1    3[BANK0 ] unsigned char 
 35195 ;; Return value:  Size  Location     Type
 35196 ;;                  1    wreg      void 
 35197 ;; Registers used:
 35198 ;;		wreg, status,2, status,0, cstack
 35199 ;; Tracked objects:
 35200 ;;		On entry : 0/0
 35201 ;;		On exit  : 0/0
 35202 ;;		Unchanged: 0/0
 35203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35208 ;;Total ram usage:        2 bytes
 35209 ;; Hardware stack levels used:    1
 35210 ;; Hardware stack levels required when called:    9
 35211 ;; This function calls:
 35212 ;;		_HALSPICSAssert
 35213 ;;		_HALSPICSDeassert
 35214 ;;		_HALSPISend
 35215 ;; This function is called by:
 35216 ;;		_RADIO_WriteMode
 35217 ;;		_RADIO_WriteFrequency
 35218 ;;		_RADIO_WriteFSKFrequencyDeviation
 35219 ;;		_RADIO_WriteFSKBitRate
 35220 ;;		_RADIO_WritePower
 35221 ;;		_RADIO_Init
 35222 ;;		_RADIO_WriteConfiguration
 35223 ;;		_RADIO_Transmit
 35224 ;;		_RADIO_ReceiveStart
 35225 ;;		_RADIO_RxDone
 35226 ;;		_RADIO_RxTimeout
 35227 ;;		_RADIO_TxDone
 35228 ;;		_RADIO_UnhandledInterrupt
 35229 ;;		_RADIO_FHSSChangeChannel
 35230 ;;		_RADIO_ReadRandom
 35231 ;;		_RADIO_TransmitCW
 35232 ;; This function uses a non-reentrant model
 35233 ;;
 35234                           
 35235                           	psect	text166
 35236  0000'                    __ptext166:
 35237                           	opt stack 0
 35238  0000'                    _RADIO_RegisterWrite:
 35239                           	opt stack 18
 35240                           
 35241                           ; BSR set to: 0
 35242                           ;incstack = 0
 35243                           ;RADIO_RegisterWrite@reg stored from wreg
 35244  0000' 0100               	movlb	0	; () banked
 35245  0002' 6F00'              	movwf	RADIO_RegisterWrite@reg& (0+255),b
 35246                           
 35247                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 35248  0004' EC00' F000'        	call	_HALSPICSAssert	;wreg free
 35249                           
 35250                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 35251  0008' 0100               	movlb	0	; () banked
 35252  000A' 5100'              	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 35253  000C' 0980               	iorlw	128
 35254  000E' EC00' F000'        	call	_HALSPISend
 35255                           
 35256                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 35257  0012' 0100               	movlb	0	; () banked
 35258  0014' 5100'              	movf	RADIO_RegisterWrite@value& (0+255),w,b
 35259  0016' EC00' F000'        	call	_HALSPISend
 35260                           
 35261                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 35262  001A' EC00' F000'        	call	_HALSPICSDeassert	;wreg free
 35263  001E' 0012               	return		;funcret
 35264  0020'                    __end_of_RADIO_RegisterWrite:
 35265                           	opt stack 0
 35266                           tosu	equ	0xFFF
 35267                           tosh	equ	0xFFE
 35268                           tosl	equ	0xFFD
 35269                           pclath	equ	0xFFA
 35270                           tblptru	equ	0xFF8
 35271                           tblptrh	equ	0xFF7
 35272                           tblptrl	equ	0xFF6
 35273                           tablat	equ	0xFF5
 35274                           prodh	equ	0xFF4
 35275                           prodl	equ	0xFF3
 35276                           intcon	equ	0xFF2
 35277                           intcon2	equ	0xFF1
 35278                           intcon3	equ	0xFF0
 35279                           indf0	equ	0xFEF
 35280                           postinc0	equ	0xFEE
 35281                           plusw0	equ	0xFEB
 35282                           fsr0h	equ	0xFEA
 35283                           fsr0l	equ	0xFE9
 35284                           wreg	equ	0xFE8
 35285                           postinc1	equ	0xFE6
 35286                           postdec1	equ	0xFE5
 35287                           plusw1	equ	0xFE3
 35288                           fsr1h	equ	0xFE2
 35289                           fsr1l	equ	0xFE1
 35290                           indf2	equ	0xFDF
 35291                           postinc2	equ	0xFDE
 35292                           postdec2	equ	0xFDD
 35293                           plusw2	equ	0xFDB
 35294                           fsr2h	equ	0xFDA
 35295                           fsr2l	equ	0xFD9
 35296                           status	equ	0xFD8
 35297                           
 35298 ;; *************** function _HALSPISend *****************
 35299 ;; Defined at:
 35300 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 35301 ;; Parameters:    Size  Location     Type
 35302 ;;  data            1    wreg     unsigned char 
 35303 ;; Auto vars:     Size  Location     Type
 35304 ;;  data            1    1[BANK0 ] unsigned char 
 35305 ;; Return value:  Size  Location     Type
 35306 ;;                  1    wreg      unsigned char 
 35307 ;; Registers used:
 35308 ;;		wreg, status,2, cstack
 35309 ;; Tracked objects:
 35310 ;;		On entry : 0/0
 35311 ;;		On exit  : 0/0
 35312 ;;		Unchanged: 0/0
 35313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35317 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35318 ;;Total ram usage:        1 bytes
 35319 ;; Hardware stack levels used:    1
 35320 ;; Hardware stack levels required when called:    8
 35321 ;; This function calls:
 35322 ;;		_SPI2_Exchange8bit
 35323 ;; This function is called by:
 35324 ;;		_RADIO_RegisterWrite
 35325 ;;		_RADIO_RegisterRead
 35326 ;;		_RADIO_Transmit
 35327 ;;		_RADIO_RxDone
 35328 ;;		_RADIO_FSKPayloadReady
 35329 ;; This function uses a non-reentrant model
 35330 ;;
 35331                           
 35332                           	psect	text167
 35333  0000'                    __ptext167:
 35334                           	opt stack 0
 35335  0000'                    _HALSPISend:
 35336                           	opt stack 18
 35337                           
 35338                           ;incstack = 0
 35339                           ;HALSPISend@data stored from wreg
 35340  0000' 0100               	movlb	0	; () banked
 35341  0002' 6F00'              	movwf	HALSPISend@data& (0+255),b
 35342                           
 35343                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 35344  0004' 0100               	movlb	0	; () banked
 35345  0006' 5100'              	movf	HALSPISend@data& (0+255),w,b
 35346  0008' EC00' F000'        	call	_SPI2_Exchange8bit
 35347  000C' 0012               	return	
 35348  000E'                    __end_of_HALSPISend:
 35349                           	opt stack 0
 35350                           tosu	equ	0xFFF
 35351                           tosh	equ	0xFFE
 35352                           tosl	equ	0xFFD
 35353                           pclath	equ	0xFFA
 35354                           tblptru	equ	0xFF8
 35355                           tblptrh	equ	0xFF7
 35356                           tblptrl	equ	0xFF6
 35357                           tablat	equ	0xFF5
 35358                           prodh	equ	0xFF4
 35359                           prodl	equ	0xFF3
 35360                           intcon	equ	0xFF2
 35361                           intcon2	equ	0xFF1
 35362                           intcon3	equ	0xFF0
 35363                           indf0	equ	0xFEF
 35364                           postinc0	equ	0xFEE
 35365                           plusw0	equ	0xFEB
 35366                           fsr0h	equ	0xFEA
 35367                           fsr0l	equ	0xFE9
 35368                           wreg	equ	0xFE8
 35369                           postinc1	equ	0xFE6
 35370                           postdec1	equ	0xFE5
 35371                           plusw1	equ	0xFE3
 35372                           fsr1h	equ	0xFE2
 35373                           fsr1l	equ	0xFE1
 35374                           indf2	equ	0xFDF
 35375                           postinc2	equ	0xFDE
 35376                           postdec2	equ	0xFDD
 35377                           plusw2	equ	0xFDB
 35378                           fsr2h	equ	0xFDA
 35379                           fsr2l	equ	0xFD9
 35380                           status	equ	0xFD8
 35381                           
 35382 ;; *************** function _SPI2_Exchange8bit *****************
 35383 ;; Defined at:
 35384 ;;		line 79 in file "mcc_generated_files/spi2.c"
 35385 ;; Parameters:    Size  Location     Type
 35386 ;;  data            1    wreg     unsigned char 
 35387 ;; Auto vars:     Size  Location     Type
 35388 ;;  data            1    0[BANK0 ] unsigned char 
 35389 ;; Return value:  Size  Location     Type
 35390 ;;                  1    wreg      unsigned char 
 35391 ;; Registers used:
 35392 ;;		wreg, status,2
 35393 ;; Tracked objects:
 35394 ;;		On entry : 0/0
 35395 ;;		On exit  : 0/0
 35396 ;;		Unchanged: 0/0
 35397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35401 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35402 ;;Total ram usage:        1 bytes
 35403 ;; Hardware stack levels used:    1
 35404 ;; Hardware stack levels required when called:    7
 35405 ;; This function calls:
 35406 ;;		Nothing
 35407 ;; This function is called by:
 35408 ;;		_HALSPISend
 35409 ;;		_SPI2_Exchange8bitBuffer
 35410 ;; This function uses a non-reentrant model
 35411 ;;
 35412                           
 35413                           	psect	text168
 35414  0000'                    __ptext168:
 35415                           	opt stack 0
 35416  0000'                    _SPI2_Exchange8bit:
 35417                           	opt stack 18
 35418                           
 35419                           ;incstack = 0
 35420                           ;SPI2_Exchange8bit@data stored from wreg
 35421  0000' 0100               	movlb	0	; () banked
 35422  0002' 6F00'              	movwf	SPI2_Exchange8bit@data& (0+255),b
 35423                           
 35424                           ;spi2.c: 82: SSP2CON1bits.WCOL = 0;
 35425  0004' 9E6C               	bcf	3948,7,c	;volatile
 35426                           
 35427                           ;spi2.c: 84: SSP2BUF = data;
 35428  0006' C000' FF6F         	movff	SPI2_Exchange8bit@data,3951	;volatile
 35429  000A'                    
 35430                           ;spi2.c: 87: {
 35431  000A' A06D               	btfss	3949,0,c	;volatile
 35432  000C' D7FE               	goto	l2436
 35433                           
 35434                           ;spi2.c: 88: }
 35435                           ;spi2.c: 90: return (SSP2BUF);
 35436  000E' 506F               	movf	3951,w,c	;volatile
 35437  0010' 0012               	return		;funcret
 35438  0012'                    __end_of_SPI2_Exchange8bit:
 35439                           	opt stack 0
 35440                           tosu	equ	0xFFF
 35441                           tosh	equ	0xFFE
 35442                           tosl	equ	0xFFD
 35443                           pclath	equ	0xFFA
 35444                           tblptru	equ	0xFF8
 35445                           tblptrh	equ	0xFF7
 35446                           tblptrl	equ	0xFF6
 35447                           tablat	equ	0xFF5
 35448                           prodh	equ	0xFF4
 35449                           prodl	equ	0xFF3
 35450                           intcon	equ	0xFF2
 35451                           intcon2	equ	0xFF1
 35452                           intcon3	equ	0xFF0
 35453                           indf0	equ	0xFEF
 35454                           postinc0	equ	0xFEE
 35455                           plusw0	equ	0xFEB
 35456                           fsr0h	equ	0xFEA
 35457                           fsr0l	equ	0xFE9
 35458                           wreg	equ	0xFE8
 35459                           postinc1	equ	0xFE6
 35460                           postdec1	equ	0xFE5
 35461                           plusw1	equ	0xFE3
 35462                           fsr1h	equ	0xFE2
 35463                           fsr1l	equ	0xFE1
 35464                           indf2	equ	0xFDF
 35465                           postinc2	equ	0xFDE
 35466                           postdec2	equ	0xFDD
 35467                           plusw2	equ	0xFDB
 35468                           fsr2h	equ	0xFDA
 35469                           fsr2l	equ	0xFD9
 35470                           status	equ	0xFD8
 35471                           
 35472 ;; *************** function _HALSPICSDeassert *****************
 35473 ;; Defined at:
 35474 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 35475 ;; Parameters:    Size  Location     Type
 35476 ;;		None
 35477 ;; Auto vars:     Size  Location     Type
 35478 ;;		None
 35479 ;; Return value:  Size  Location     Type
 35480 ;;                  1    wreg      void 
 35481 ;; Registers used:
 35482 ;;		None
 35483 ;; Tracked objects:
 35484 ;;		On entry : 0/0
 35485 ;;		On exit  : 0/0
 35486 ;;		Unchanged: 0/0
 35487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35492 ;;Total ram usage:        0 bytes
 35493 ;; Hardware stack levels used:    1
 35494 ;; Hardware stack levels required when called:    7
 35495 ;; This function calls:
 35496 ;;		Nothing
 35497 ;; This function is called by:
 35498 ;;		_RADIO_RegisterWrite
 35499 ;;		_RADIO_RegisterRead
 35500 ;;		_RADIO_Transmit
 35501 ;;		_RADIO_RxDone
 35502 ;;		_RADIO_FSKPayloadReady
 35503 ;; This function uses a non-reentrant model
 35504 ;;
 35505                           
 35506                           	psect	text169
 35507  0000'                    __ptext169:
 35508                           	opt stack 0
 35509  0000'                    _HALSPICSDeassert:
 35510                           	opt stack 19
 35511                           
 35512                           ;incstack = 0
 35513                           ;radio_driver_hal.c: 70: do { LATD3 = 1; } while(0);
 35514  0000' 868C               	bsf	3980,3,c	;volatile
 35515  0002' 0012               	return	
 35516  0004'                    __end_of_HALSPICSDeassert:
 35517                           	opt stack 0
 35518                           tosu	equ	0xFFF
 35519                           tosh	equ	0xFFE
 35520                           tosl	equ	0xFFD
 35521                           pclath	equ	0xFFA
 35522                           tblptru	equ	0xFF8
 35523                           tblptrh	equ	0xFF7
 35524                           tblptrl	equ	0xFF6
 35525                           tablat	equ	0xFF5
 35526                           prodh	equ	0xFF4
 35527                           prodl	equ	0xFF3
 35528                           intcon	equ	0xFF2
 35529                           intcon2	equ	0xFF1
 35530                           intcon3	equ	0xFF0
 35531                           indf0	equ	0xFEF
 35532                           postinc0	equ	0xFEE
 35533                           plusw0	equ	0xFEB
 35534                           fsr0h	equ	0xFEA
 35535                           fsr0l	equ	0xFE9
 35536                           wreg	equ	0xFE8
 35537                           postinc1	equ	0xFE6
 35538                           postdec1	equ	0xFE5
 35539                           plusw1	equ	0xFE3
 35540                           fsr1h	equ	0xFE2
 35541                           fsr1l	equ	0xFE1
 35542                           indf2	equ	0xFDF
 35543                           postinc2	equ	0xFDE
 35544                           postdec2	equ	0xFDD
 35545                           plusw2	equ	0xFDB
 35546                           fsr2h	equ	0xFDA
 35547                           fsr2l	equ	0xFD9
 35548                           status	equ	0xFD8
 35549                           
 35550 ;; *************** function _HALSPICSAssert *****************
 35551 ;; Defined at:
 35552 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 35553 ;; Parameters:    Size  Location     Type
 35554 ;;		None
 35555 ;; Auto vars:     Size  Location     Type
 35556 ;;		None
 35557 ;; Return value:  Size  Location     Type
 35558 ;;                  1    wreg      void 
 35559 ;; Registers used:
 35560 ;;		None
 35561 ;; Tracked objects:
 35562 ;;		On entry : 0/0
 35563 ;;		On exit  : 0/0
 35564 ;;		Unchanged: 0/0
 35565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35570 ;;Total ram usage:        0 bytes
 35571 ;; Hardware stack levels used:    1
 35572 ;; Hardware stack levels required when called:    7
 35573 ;; This function calls:
 35574 ;;		Nothing
 35575 ;; This function is called by:
 35576 ;;		_RADIO_RegisterWrite
 35577 ;;		_RADIO_RegisterRead
 35578 ;;		_RADIO_Transmit
 35579 ;;		_RADIO_RxDone
 35580 ;;		_RADIO_FSKPayloadReady
 35581 ;; This function uses a non-reentrant model
 35582 ;;
 35583                           
 35584                           	psect	text170
 35585  0000'                    __ptext170:
 35586                           	opt stack 0
 35587  0000'                    _HALSPICSAssert:
 35588                           	opt stack 19
 35589                           
 35590                           ;incstack = 0
 35591                           ;radio_driver_hal.c: 65: do { LATD3 = 0; } while(0);
 35592  0000' 968C               	bcf	3980,3,c	;volatile
 35593  0002' 0012               	return	
 35594  0004'                    __end_of_HALSPICSAssert:
 35595                           	opt stack 0
 35596                           tosu	equ	0xFFF
 35597                           tosh	equ	0xFFE
 35598                           tosl	equ	0xFFD
 35599                           pclath	equ	0xFFA
 35600                           tblptru	equ	0xFF8
 35601                           tblptrh	equ	0xFF7
 35602                           tblptrl	equ	0xFF6
 35603                           tablat	equ	0xFF5
 35604                           prodh	equ	0xFF4
 35605                           prodl	equ	0xFF3
 35606                           intcon	equ	0xFF2
 35607                           intcon2	equ	0xFF1
 35608                           intcon3	equ	0xFF0
 35609                           indf0	equ	0xFEF
 35610                           postinc0	equ	0xFEE
 35611                           plusw0	equ	0xFEB
 35612                           fsr0h	equ	0xFEA
 35613                           fsr0l	equ	0xFE9
 35614                           wreg	equ	0xFE8
 35615                           postinc1	equ	0xFE6
 35616                           postdec1	equ	0xFE5
 35617                           plusw1	equ	0xFE3
 35618                           fsr1h	equ	0xFE2
 35619                           fsr1l	equ	0xFE1
 35620                           indf2	equ	0xFDF
 35621                           postinc2	equ	0xFDE
 35622                           postdec2	equ	0xFDD
 35623                           plusw2	equ	0xFDB
 35624                           fsr2h	equ	0xFDA
 35625                           fsr2l	equ	0xFD9
 35626                           status	equ	0xFD8
 35627                           
 35628 ;; *************** function _RADIO_Reset *****************
 35629 ;; Defined at:
 35630 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 35631 ;; Parameters:    Size  Location     Type
 35632 ;;		None
 35633 ;; Auto vars:     Size  Location     Type
 35634 ;;		None
 35635 ;; Return value:  Size  Location     Type
 35636 ;;                  1    wreg      void 
 35637 ;; Registers used:
 35638 ;;		wreg, status,2, status,0, cstack
 35639 ;; Tracked objects:
 35640 ;;		On entry : 0/0
 35641 ;;		On exit  : 0/0
 35642 ;;		Unchanged: 0/0
 35643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35648 ;;Total ram usage:        0 bytes
 35649 ;; Hardware stack levels used:    1
 35650 ;; Hardware stack levels required when called:    8
 35651 ;; This function calls:
 35652 ;;		_HALResetPinMakeInput
 35653 ;;		_HALResetPinMakeOutput
 35654 ;;		_HALResetPinOutputValue
 35655 ;;		_SystemBlockingWaitMs
 35656 ;; This function is called by:
 35657 ;;		_RADIO_Init
 35658 ;; This function uses a non-reentrant model
 35659 ;;
 35660                           
 35661                           	psect	text171
 35662  0000'                    __ptext171:
 35663                           	opt stack 0
 35664  0000'                    _RADIO_Reset:
 35665                           	opt stack 20
 35666                           
 35667                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 35668                           
 35669                           ;incstack = 0
 35670  0000' EC00' F000'        	call	_HALResetPinMakeOutput	;wreg free
 35671                           
 35672                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 35673  0004' 0E00               	movlw	0
 35674  0006' EC00' F000'        	call	_HALResetPinOutputValue
 35675                           
 35676                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 35677  000A' 0E01               	movlw	1
 35678  000C' 0100               	movlb	0	; () banked
 35679  000E' 6F00'              	movwf	SystemBlockingWaitMs@ms& (0+255),b
 35680  0010' 0E00               	movlw	0
 35681  0012' 6F00'              	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 35682  0014' 0E00               	movlw	0
 35683  0016' 6F00'              	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 35684  0018' 0E00               	movlw	0
 35685  001A' 6F00'              	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 35686  001C' EC00' F000'        	call	_SystemBlockingWaitMs	;wreg free
 35687                           
 35688                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 35689  0020' EC00' F000'        	call	_HALResetPinMakeInput	;wreg free
 35690                           
 35691                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 35692  0024' 0E0A               	movlw	10
 35693  0026' 0100               	movlb	0	; () banked
 35694  0028' 6F00'              	movwf	SystemBlockingWaitMs@ms& (0+255),b
 35695  002A' 0E00               	movlw	0
 35696  002C' 6F00'              	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 35697  002E' 0E00               	movlw	0
 35698  0030' 6F00'              	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 35699  0032' 0E00               	movlw	0
 35700  0034' 6F00'              	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 35701  0036' EC00' F000'        	call	_SystemBlockingWaitMs	;wreg free
 35702                           
 35703                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 35704  003A' 0E01               	movlw	1
 35705  003C' EC00' F000'        	call	_HALResetPinOutputValue
 35706                           
 35707                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 35708  0040' EC00' F000'        	call	_HALResetPinMakeOutput	;wreg free
 35709  0044' 0012               	return		;funcret
 35710  0046'                    __end_of_RADIO_Reset:
 35711                           	opt stack 0
 35712                           tosu	equ	0xFFF
 35713                           tosh	equ	0xFFE
 35714                           tosl	equ	0xFFD
 35715                           pclath	equ	0xFFA
 35716                           tblptru	equ	0xFF8
 35717                           tblptrh	equ	0xFF7
 35718                           tblptrl	equ	0xFF6
 35719                           tablat	equ	0xFF5
 35720                           prodh	equ	0xFF4
 35721                           prodl	equ	0xFF3
 35722                           intcon	equ	0xFF2
 35723                           intcon2	equ	0xFF1
 35724                           intcon3	equ	0xFF0
 35725                           indf0	equ	0xFEF
 35726                           postinc0	equ	0xFEE
 35727                           plusw0	equ	0xFEB
 35728                           fsr0h	equ	0xFEA
 35729                           fsr0l	equ	0xFE9
 35730                           wreg	equ	0xFE8
 35731                           postinc1	equ	0xFE6
 35732                           postdec1	equ	0xFE5
 35733                           plusw1	equ	0xFE3
 35734                           fsr1h	equ	0xFE2
 35735                           fsr1l	equ	0xFE1
 35736                           indf2	equ	0xFDF
 35737                           postinc2	equ	0xFDE
 35738                           postdec2	equ	0xFDD
 35739                           plusw2	equ	0xFDB
 35740                           fsr2h	equ	0xFDA
 35741                           fsr2l	equ	0xFD9
 35742                           status	equ	0xFD8
 35743                           
 35744 ;; *************** function _SystemBlockingWaitMs *****************
 35745 ;; Defined at:
 35746 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35747 ;; Parameters:    Size  Location     Type
 35748 ;;  ms              4    0[BANK0 ] unsigned long 
 35749 ;; Auto vars:     Size  Location     Type
 35750 ;;		None
 35751 ;; Return value:  Size  Location     Type
 35752 ;;                  1    wreg      void 
 35753 ;; Registers used:
 35754 ;;		wreg, status,2, status,0
 35755 ;; Tracked objects:
 35756 ;;		On entry : 0/0
 35757 ;;		On exit  : 0/0
 35758 ;;		Unchanged: 0/0
 35759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35763 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35764 ;;Total ram usage:        5 bytes
 35765 ;; Hardware stack levels used:    1
 35766 ;; Hardware stack levels required when called:    7
 35767 ;; This function calls:
 35768 ;;		Nothing
 35769 ;; This function is called by:
 35770 ;;		_RADIO_WriteMode
 35771 ;;		_RADIO_Reset
 35772 ;;		_RADIO_ReadRandom
 35773 ;;		_RADIO_StopCW
 35774 ;; This function uses a non-reentrant model
 35775 ;;
 35776                           
 35777                           	psect	text172
 35778  0000'                    __ptext172:
 35779                           	opt stack 0
 35780  0000'                    _SystemBlockingWaitMs:
 35781                           	opt stack 20
 35782                           
 35783                           ;sw_timer.c: 147: while (ms > 0)
 35784                           
 35785                           ;incstack = 0
 35786  0000' D00F               	goto	l1120
 35787  0002'                    
 35788                           ;sw_timer.c: 148: {
 35789                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 35790  0002' 0E06               	movlw	6
 35791  0004' 0100               	movlb	0	; () banked
 35792  0006' 6F00'              	movwf	??_SystemBlockingWaitMs& (0+255),b
 35793  0008' 0E30               	movlw	48
 35794  000A'                    u14997:
 35795  000A' 2EE8               	decfsz	wreg,f,c
 35796  000C' D7FE               	bra	u14997
 35797  000E' 2F00'              	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 35798  0010' D7FC               	bra	u14997
 35799  0012' F000               	nop	
 35800                           
 35801                           ;sw_timer.c: 150: ms--;
 35802  0014' 0100               	movlb	0	; () banked
 35803  0016' 0700'              	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 35804  0018' 0E00               	movlw	0
 35805  001A' 5B00'              	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 35806  001C' 5B00'              	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 35807  001E' 5B00'              	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 35808  0020'                    l1120:
 35809                           
 35810                           ; BSR set to: 0
 35811  0020' 0100               	movlb	0	; () banked
 35812  0022' 5100'              	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 35813  0024' 1100'              	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 35814  0026' 1100'              	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 35815  0028' 1100'              	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 35816  002A' B4D8               	btfsc	status,2,c
 35817  002C' 0012               	return	
 35818  002E' D7E9               	goto	l1121
 35819  0030'                    __end_of_SystemBlockingWaitMs:
 35820                           	opt stack 0
 35821                           tosu	equ	0xFFF
 35822                           tosh	equ	0xFFE
 35823                           tosl	equ	0xFFD
 35824                           pclath	equ	0xFFA
 35825                           tblptru	equ	0xFF8
 35826                           tblptrh	equ	0xFF7
 35827                           tblptrl	equ	0xFF6
 35828                           tablat	equ	0xFF5
 35829                           prodh	equ	0xFF4
 35830                           prodl	equ	0xFF3
 35831                           intcon	equ	0xFF2
 35832                           intcon2	equ	0xFF1
 35833                           intcon3	equ	0xFF0
 35834                           indf0	equ	0xFEF
 35835                           postinc0	equ	0xFEE
 35836                           plusw0	equ	0xFEB
 35837                           fsr0h	equ	0xFEA
 35838                           fsr0l	equ	0xFE9
 35839                           wreg	equ	0xFE8
 35840                           postinc1	equ	0xFE6
 35841                           postdec1	equ	0xFE5
 35842                           plusw1	equ	0xFE3
 35843                           fsr1h	equ	0xFE2
 35844                           fsr1l	equ	0xFE1
 35845                           indf2	equ	0xFDF
 35846                           postinc2	equ	0xFDE
 35847                           postdec2	equ	0xFDD
 35848                           plusw2	equ	0xFDB
 35849                           fsr2h	equ	0xFDA
 35850                           fsr2l	equ	0xFD9
 35851                           status	equ	0xFD8
 35852                           
 35853 ;; *************** function _HALResetPinOutputValue *****************
 35854 ;; Defined at:
 35855 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 35856 ;; Parameters:    Size  Location     Type
 35857 ;;  value           1    wreg     unsigned char 
 35858 ;; Auto vars:     Size  Location     Type
 35859 ;;  value           1    0[BANK0 ] unsigned char 
 35860 ;; Return value:  Size  Location     Type
 35861 ;;                  1    wreg      void 
 35862 ;; Registers used:
 35863 ;;		wreg, status,2, status,0
 35864 ;; Tracked objects:
 35865 ;;		On entry : 0/0
 35866 ;;		On exit  : 0/0
 35867 ;;		Unchanged: 0/0
 35868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35872 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35873 ;;Total ram usage:        1 bytes
 35874 ;; Hardware stack levels used:    1
 35875 ;; Hardware stack levels required when called:    7
 35876 ;; This function calls:
 35877 ;;		Nothing
 35878 ;; This function is called by:
 35879 ;;		_RADIO_Reset
 35880 ;; This function uses a non-reentrant model
 35881 ;;
 35882                           
 35883                           	psect	text173
 35884  0000'                    __ptext173:
 35885                           	opt stack 0
 35886  0000'                    _HALResetPinOutputValue:
 35887                           	opt stack 20
 35888                           
 35889                           ; BSR set to: 0
 35890                           ;incstack = 0
 35891                           ;HALResetPinOutputValue@value stored from wreg
 35892  0000' 0100               	movlb	0	; () banked
 35893  0002' 6F00'              	movwf	HALResetPinOutputValue@value& (0+255),b
 35894                           
 35895                           ;radio_driver_hal.c: 57: if (value == 0)
 35896  0004' 0100               	movlb	0	; () banked
 35897  0006' 5100'              	movf	HALResetPinOutputValue@value& (0+255),w,b
 35898  0008' A4D8               	btfss	status,2,c
 35899  000A' D002               	goto	l1020
 35900                           
 35901                           ; BSR set to: 0
 35902                           
 35903                           ;radio_driver_hal.c: 58: do { LATC2 = 0; } while(0);
 35904  000C' 948B               	bcf	3979,2,c	;volatile
 35905                           
 35906                           ; BSR set to: 0
 35907  000E' 0012               	return	
 35908  0010'                    l1020:
 35909                           
 35910                           ; BSR set to: 0
 35911                           ;radio_driver_hal.c: 59: else if (value == 1)
 35912                           
 35913                           ; BSR set to: 0
 35914  0010' 0500'              	decf	HALResetPinOutputValue@value& (0+255),w,b
 35915  0012' A4D8               	btfss	status,2,c
 35916  0014' 0012               	return	
 35917                           
 35918                           ; BSR set to: 0
 35919                           
 35920                           ;radio_driver_hal.c: 60: do { LATC2 = 1; } while(0);
 35921  0016' 848B               	bsf	3979,2,c	;volatile
 35922                           
 35923                           ; BSR set to: 0
 35924                           
 35925                           ; BSR set to: 0
 35926  0018' 0012               	return	
 35927  001A'                    __end_of_HALResetPinOutputValue:
 35928                           	opt stack 0
 35929                           tosu	equ	0xFFF
 35930                           tosh	equ	0xFFE
 35931                           tosl	equ	0xFFD
 35932                           pclath	equ	0xFFA
 35933                           tblptru	equ	0xFF8
 35934                           tblptrh	equ	0xFF7
 35935                           tblptrl	equ	0xFF6
 35936                           tablat	equ	0xFF5
 35937                           prodh	equ	0xFF4
 35938                           prodl	equ	0xFF3
 35939                           intcon	equ	0xFF2
 35940                           intcon2	equ	0xFF1
 35941                           intcon3	equ	0xFF0
 35942                           indf0	equ	0xFEF
 35943                           postinc0	equ	0xFEE
 35944                           plusw0	equ	0xFEB
 35945                           fsr0h	equ	0xFEA
 35946                           fsr0l	equ	0xFE9
 35947                           wreg	equ	0xFE8
 35948                           postinc1	equ	0xFE6
 35949                           postdec1	equ	0xFE5
 35950                           plusw1	equ	0xFE3
 35951                           fsr1h	equ	0xFE2
 35952                           fsr1l	equ	0xFE1
 35953                           indf2	equ	0xFDF
 35954                           postinc2	equ	0xFDE
 35955                           postdec2	equ	0xFDD
 35956                           plusw2	equ	0xFDB
 35957                           fsr2h	equ	0xFDA
 35958                           fsr2l	equ	0xFD9
 35959                           status	equ	0xFD8
 35960                           
 35961 ;; *************** function _HALResetPinMakeOutput *****************
 35962 ;; Defined at:
 35963 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 35964 ;; Parameters:    Size  Location     Type
 35965 ;;		None
 35966 ;; Auto vars:     Size  Location     Type
 35967 ;;		None
 35968 ;; Return value:  Size  Location     Type
 35969 ;;                  1    wreg      void 
 35970 ;; Registers used:
 35971 ;;		None
 35972 ;; Tracked objects:
 35973 ;;		On entry : 0/0
 35974 ;;		On exit  : 0/0
 35975 ;;		Unchanged: 0/0
 35976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35981 ;;Total ram usage:        0 bytes
 35982 ;; Hardware stack levels used:    1
 35983 ;; Hardware stack levels required when called:    7
 35984 ;; This function calls:
 35985 ;;		Nothing
 35986 ;; This function is called by:
 35987 ;;		_RADIO_Reset
 35988 ;; This function uses a non-reentrant model
 35989 ;;
 35990                           
 35991                           	psect	text174
 35992  0000'                    __ptext174:
 35993                           	opt stack 0
 35994  0000'                    _HALResetPinMakeOutput:
 35995                           	opt stack 20
 35996                           
 35997                           ; BSR set to: 0
 35998                           ;incstack = 0
 35999                           ;radio_driver_hal.c: 47: do { TRISC2 = 0; } while(0);
 36000  0000' 9494               	bcf	3988,2,c	;volatile
 36001  0002' 0012               	return	
 36002  0004'                    __end_of_HALResetPinMakeOutput:
 36003                           	opt stack 0
 36004                           tosu	equ	0xFFF
 36005                           tosh	equ	0xFFE
 36006                           tosl	equ	0xFFD
 36007                           pclath	equ	0xFFA
 36008                           tblptru	equ	0xFF8
 36009                           tblptrh	equ	0xFF7
 36010                           tblptrl	equ	0xFF6
 36011                           tablat	equ	0xFF5
 36012                           prodh	equ	0xFF4
 36013                           prodl	equ	0xFF3
 36014                           intcon	equ	0xFF2
 36015                           intcon2	equ	0xFF1
 36016                           intcon3	equ	0xFF0
 36017                           indf0	equ	0xFEF
 36018                           postinc0	equ	0xFEE
 36019                           plusw0	equ	0xFEB
 36020                           fsr0h	equ	0xFEA
 36021                           fsr0l	equ	0xFE9
 36022                           wreg	equ	0xFE8
 36023                           postinc1	equ	0xFE6
 36024                           postdec1	equ	0xFE5
 36025                           plusw1	equ	0xFE3
 36026                           fsr1h	equ	0xFE2
 36027                           fsr1l	equ	0xFE1
 36028                           indf2	equ	0xFDF
 36029                           postinc2	equ	0xFDE
 36030                           postdec2	equ	0xFDD
 36031                           plusw2	equ	0xFDB
 36032                           fsr2h	equ	0xFDA
 36033                           fsr2l	equ	0xFD9
 36034                           status	equ	0xFD8
 36035                           
 36036 ;; *************** function _HALResetPinMakeInput *****************
 36037 ;; Defined at:
 36038 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 36039 ;; Parameters:    Size  Location     Type
 36040 ;;		None
 36041 ;; Auto vars:     Size  Location     Type
 36042 ;;		None
 36043 ;; Return value:  Size  Location     Type
 36044 ;;                  1    wreg      void 
 36045 ;; Registers used:
 36046 ;;		None
 36047 ;; Tracked objects:
 36048 ;;		On entry : 0/0
 36049 ;;		On exit  : 0/0
 36050 ;;		Unchanged: 0/0
 36051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36056 ;;Total ram usage:        0 bytes
 36057 ;; Hardware stack levels used:    1
 36058 ;; Hardware stack levels required when called:    7
 36059 ;; This function calls:
 36060 ;;		Nothing
 36061 ;; This function is called by:
 36062 ;;		_RADIO_Reset
 36063 ;; This function uses a non-reentrant model
 36064 ;;
 36065                           
 36066                           	psect	text175
 36067  0000'                    __ptext175:
 36068                           	opt stack 0
 36069  0000'                    _HALResetPinMakeInput:
 36070                           	opt stack 20
 36071                           
 36072                           ;incstack = 0
 36073                           ;radio_driver_hal.c: 52: do { TRISC2 = 1; } while(0);
 36074  0000' 8494               	bsf	3988,2,c	;volatile
 36075  0002' 0012               	return	
 36076  0004'                    __end_of_HALResetPinMakeInput:
 36077                           	opt stack 0
 36078                           tosu	equ	0xFFF
 36079                           tosh	equ	0xFFE
 36080                           tosl	equ	0xFFD
 36081                           pclath	equ	0xFFA
 36082                           tblptru	equ	0xFF8
 36083                           tblptrh	equ	0xFF7
 36084                           tblptrl	equ	0xFF6
 36085                           tablat	equ	0xFF5
 36086                           prodh	equ	0xFF4
 36087                           prodl	equ	0xFF3
 36088                           intcon	equ	0xFF2
 36089                           intcon2	equ	0xFF1
 36090                           intcon3	equ	0xFF0
 36091                           indf0	equ	0xFEF
 36092                           postinc0	equ	0xFEE
 36093                           plusw0	equ	0xFEB
 36094                           fsr0h	equ	0xFEA
 36095                           fsr0l	equ	0xFE9
 36096                           wreg	equ	0xFE8
 36097                           postinc1	equ	0xFE6
 36098                           postdec1	equ	0xFE5
 36099                           plusw1	equ	0xFE3
 36100                           fsr1h	equ	0xFE2
 36101                           fsr1l	equ	0xFE1
 36102                           indf2	equ	0xFDF
 36103                           postinc2	equ	0xFDE
 36104                           postdec2	equ	0xFDD
 36105                           plusw2	equ	0xFDB
 36106                           fsr2h	equ	0xFDA
 36107                           fsr2l	equ	0xFD9
 36108                           status	equ	0xFD8
 36109                           
 36110 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 36111 ;; Defined at:
 36112 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 36113 ;; Parameters:    Size  Location     Type
 36114 ;;  period          2   70[BANK0 ] unsigned int 
 36115 ;; Auto vars:     Size  Location     Type
 36116 ;;  iCtr            1   80[BANK0 ] unsigned char 
 36117 ;; Return value:  Size  Location     Type
 36118 ;;                  1    wreg      void 
 36119 ;; Registers used:
 36120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36121 ;; Tracked objects:
 36122 ;;		On entry : 0/0
 36123 ;;		On exit  : 0/0
 36124 ;;		Unchanged: 0/0
 36125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36127 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36128 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36129 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36130 ;;Total ram usage:       11 bytes
 36131 ;; Hardware stack levels used:    1
 36132 ;; Hardware stack levels required when called:   11
 36133 ;; This function calls:
 36134 ;;		_SwTimerSetTimeout
 36135 ;;		_SwTimerStart
 36136 ;;		_SwTimerStop
 36137 ;;		___lldiv
 36138 ;;		___lmul
 36139 ;; This function is called by:
 36140 ;;		_LORAWAN_Reset
 36141 ;; This function uses a non-reentrant model
 36142 ;;
 36143                           
 36144                           	psect	text176
 36145  0000'                    __ptext176:
 36146                           	opt stack 0
 36147  0000'                    _LORAWAN_LinkCheckConfigure:
 36148                           	opt stack 18
 36149                           
 36150                           ;lorawan.c: 757: uint8_t iCtr;
 36151                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 36152                           
 36153                           ;incstack = 0
 36154  0000' C046' F03A'        	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 36155  0004' C047' F03B'        	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 36156  0008' 0100               	movlb	0	; () banked
 36157  000A' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 36158  000C' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 36159  000E' 0EE8               	movlw	232
 36160  0010' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 36161  0012' 0E03               	movlw	3
 36162  0014' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 36163  0016' 0E00               	movlw	0
 36164  0018' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 36165  001A' 0E00               	movlw	0
 36166  001C' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 36167  001E' EC00' F000'        	call	___lmul	;wreg free
 36168  0022' C03A' F0BD'        	movff	?___lmul,_loRa+189
 36169  0026' C03B' F0BE'        	movff	?___lmul+1,_loRa+190
 36170  002A' C03C' F0BF'        	movff	?___lmul+2,_loRa+191
 36171  002E' C03D' F0C0'        	movff	?___lmul+3,_loRa+192
 36172                           
 36173                           ;lorawan.c: 761: if (period == 0)
 36174  0032' 0100               	movlb	0	; () banked
 36175  0034' 5100'              	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 36176  0036' 1100'              	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 36177  0038' A4D8               	btfss	status,2,c
 36178  003A' D02B               	goto	l540
 36179                           
 36180                           ; BSR set to: 0
 36181                           ;lorawan.c: 762: {
 36182                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 36183  003C' 0102               	movlb	2	; () banked
 36184  003E' 5100'              	movf	(_loRa+216)& (0+255),w,b
 36185  0040' EC00' F000'        	call	_SwTimerStop
 36186                           
 36187                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 36188  0044' 0102               	movlb	2	; () banked
 36189  0046' 9500'              	bcf	(_loRa+3)& (0+255),2,b
 36190                           
 36191                           ; BSR set to: 2
 36192                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 36193  0048' 0E00               	movlw	0
 36194  004A' 0100               	movlb	0	; () banked
 36195  004C' 6F00'              	movwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 36196  004E' D01A               	goto	l541
 36197  0050'                    
 36198                           ; BSR set to: 0
 36199                           ;lorawan.c: 766: {
 36200                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 36201                           
 36202                           ; BSR set to: 0
 36203  0050' 5100'              	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 36204  0052' 0D02               	mullw	2
 36205  0054' 0E00'              	movlw	low (_loRa+153)
 36206  0056' 24F3               	addwf	prodl,w,c
 36207  0058' 6ED9               	movwf	fsr2l,c
 36208  005A' 0E00'              	movlw	high (_loRa+153)
 36209  005C' 20F4               	addwfc	prodh,w,c
 36210  005E' 6EDA               	movwf	fsr2h,c
 36211  0060' 0E02               	movlw	2
 36212  0062' 18DE               	xorwf	postinc2,w,c
 36213  0064' A4D8               	btfss	status,2,c
 36214  0066' D00C               	goto	l543
 36215                           
 36216                           ; BSR set to: 0
 36217                           ;lorawan.c: 768: {
 36218                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 36219  0068' 5100'              	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 36220  006A' 0D02               	mullw	2
 36221  006C' 0E00'              	movlw	low (_loRa+153)
 36222  006E' 24F3               	addwf	prodl,w,c
 36223  0070' 6ED9               	movwf	fsr2l,c
 36224  0072' 0E00'              	movlw	high (_loRa+153)
 36225  0074' 20F4               	addwfc	prodh,w,c
 36226  0076' 6EDA               	movwf	fsr2h,c
 36227  0078' 0EFF               	movlw	255
 36228  007A' 6EDF               	movwf	indf2,c
 36229                           
 36230                           ; BSR set to: 0
 36231                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 36232  007C' 0102               	movlb	2	; () banked
 36233  007E' 0700'              	decf	(_loRa+152)& (0+255),f,b
 36234  0080'                    l543:
 36235                           
 36236                           ; BSR set to: 2
 36237  0080' 0100               	movlb	0	; () banked
 36238  0082' 2B00'              	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 36239  0084'                    l541:
 36240                           
 36241                           ; BSR set to: 0
 36242                           
 36243                           ; BSR set to: 0
 36244  0084' 0102               	movlb	2	; () banked
 36245  0086' 5100'              	movf	(_loRa+152)& (0+255),w,b
 36246  0088' 0100               	movlb	0	; () banked
 36247  008A' 5D00'              	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 36248  008C' B0D8               	btfsc	status,0,c
 36249  008E' 0012               	return	
 36250  0090' D7DF               	goto	l542
 36251  0092'                    l540:
 36252                           
 36253                           ; BSR set to: 0
 36254                           ;lorawan.c: 776: else
 36255                           ;lorawan.c: 777: {
 36256                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 36257  0092' 0102               	movlb	2	; () banked
 36258  0094' 8500'              	bsf	(_loRa+3)& (0+255),2,b
 36259                           
 36260                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 36261  0096' A900'              	btfss	(_loRa+2)& (0+255),4,b
 36262  0098' 0012               	return	
 36263                           
 36264                           ; BSR set to: 2
 36265                           ;lorawan.c: 782: {
 36266                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 36267  009A' 5100'              	movf	(_loRa+192)& (0+255),w,b
 36268  009C' E107               	bnz	u11530
 36269  009E' 2900'              	incf	(_loRa+189)& (0+255),w,b
 36270  00A0' 0EFF               	movlw	255
 36271  00A2' 5900'              	subwfb	(_loRa+190)& (0+255),w,b
 36272  00A4' 0E0F               	movlw	15
 36273  00A6' 5900'              	subwfb	(_loRa+191)& (0+255),w,b
 36274  00A8' A0D8               	btfss	status,0,c
 36275  00AA' D01D               	goto	l548
 36276  00AC'                    u11530:
 36277                           
 36278                           ; BSR set to: 2
 36279  00AC' C0BD' F000'        	movff	_loRa+189,___lldiv@dividend
 36280  00B0' C0BE' F001'        	movff	_loRa+190,___lldiv@dividend+1
 36281  00B4' C0BF' F002'        	movff	_loRa+191,___lldiv@dividend+2
 36282  00B8' C0C0' F003'        	movff	_loRa+192,___lldiv@dividend+3
 36283  00BC' 0E7D               	movlw	125
 36284  00BE' 0100               	movlb	0	; () banked
 36285  00C0' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 36286  00C2' 0E00               	movlw	0
 36287  00C4' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 36288  00C6' 0E00               	movlw	0
 36289  00C8' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 36290  00CA' 0E00               	movlw	0
 36291  00CC' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 36292  00CE' EC00' F000'        	call	___lldiv	;wreg free
 36293  00D2' 0E0C               	movlw	12
 36294  00D4'                    u11545:
 36295  00D4' 90D8               	bcf	status,0,c
 36296  00D6' 0100               	movlb	0	; () banked
 36297  00D8' 3700'              	rlcf	?___lldiv& (0+255),f,b
 36298  00DA' 3700'              	rlcf	(?___lldiv+1)& (0+255),f,b
 36299  00DC' 3700'              	rlcf	(?___lldiv+2)& (0+255),f,b
 36300  00DE' 3700'              	rlcf	(?___lldiv+3)& (0+255),f,b
 36301  00E0' 2EE8               	decfsz	wreg,f,c
 36302  00E2' D7F8               	goto	u11545
 36303  00E4' D023               	goto	L25
 36304  00E6'                    l548:
 36305                           
 36306                           ; BSR set to: 0
 36307  00E6' C0BD' F048'        	movff	_loRa+189,??_LORAWAN_LinkCheckConfigure
 36308  00EA' C0BE' F049'        	movff	_loRa+190,??_LORAWAN_LinkCheckConfigure+1
 36309  00EE' C0BF' F04A'        	movff	_loRa+191,??_LORAWAN_LinkCheckConfigure+2
 36310  00F2' C0C0' F04B'        	movff	_loRa+192,??_LORAWAN_LinkCheckConfigure+3
 36311  00F6' 0E0C               	movlw	12
 36312  00F8'                    u11555:
 36313  00F8' 90D8               	bcf	status,0,c
 36314  00FA' 0100               	movlb	0	; () banked
 36315  00FC' 3700'              	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 36316  00FE' 3700'              	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 36317  0100' 3700'              	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 36318  0102' 3700'              	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 36319  0104' 2EE8               	decfsz	wreg,f,c
 36320  0106' D7F8               	goto	u11555
 36321  0108' C048' F000'        	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 36322  010C' C049' F001'        	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 36323  0110' C04A' F002'        	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 36324  0114' C04B' F003'        	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 36325  0118' 0E7D               	movlw	125
 36326  011A' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 36327  011C' 0E00               	movlw	0
 36328  011E' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 36329  0120' 0E00               	movlw	0
 36330  0122' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 36331  0124' 0E00               	movlw	0
 36332  0126' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 36333  0128' EC00' F000'        	call	___lldiv	;wreg free
 36334  012C'                    L25:
 36335  012C' C000' F04C'        	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$1092
 36336  0130' C001' F04D'        	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$1092+1
 36337  0134' C002' F04E'        	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$1092+2
 36338  0138' C003' F04F'        	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$1092+3
 36339  013C' C04C' F00D'        	movff	_LORAWAN_LinkCheckConfigure$1092,SwTimerSetTimeout@timeout
 36340  0140' C04D' F00E'        	movff	_LORAWAN_LinkCheckConfigure$1092+1,SwTimerSetTimeout@timeout+1
 36341  0144' C04E' F00F'        	movff	_LORAWAN_LinkCheckConfigure$1092+2,SwTimerSetTimeout@timeout+2
 36342  0148' C04F' F010'        	movff	_LORAWAN_LinkCheckConfigure$1092+3,SwTimerSetTimeout@timeout+3
 36343  014C' 0102               	movlb	2	; () banked
 36344  014E' 5100'              	movf	(_loRa+216)& (0+255),w,b
 36345  0150' EC00' F000'        	call	_SwTimerSetTimeout
 36346                           
 36347                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 36348  0154' 0102               	movlb	2	; () banked
 36349  0156' 5100'              	movf	(_loRa+216)& (0+255),w,b
 36350  0158' EC00' F000'        	call	_SwTimerStart
 36351  015C' 0012               	return	
 36352  015E'                    __end_of_LORAWAN_LinkCheckConfigure:
 36353                           	opt stack 0
 36354                           tosu	equ	0xFFF
 36355                           tosh	equ	0xFFE
 36356                           tosl	equ	0xFFD
 36357                           pclath	equ	0xFFA
 36358                           tblptru	equ	0xFF8
 36359                           tblptrh	equ	0xFF7
 36360                           tblptrl	equ	0xFF6
 36361                           tablat	equ	0xFF5
 36362                           prodh	equ	0xFF4
 36363                           prodl	equ	0xFF3
 36364                           intcon	equ	0xFF2
 36365                           intcon2	equ	0xFF1
 36366                           intcon3	equ	0xFF0
 36367                           indf0	equ	0xFEF
 36368                           postinc0	equ	0xFEE
 36369                           plusw0	equ	0xFEB
 36370                           fsr0h	equ	0xFEA
 36371                           fsr0l	equ	0xFE9
 36372                           wreg	equ	0xFE8
 36373                           postinc1	equ	0xFE6
 36374                           postdec1	equ	0xFE5
 36375                           plusw1	equ	0xFE3
 36376                           fsr1h	equ	0xFE2
 36377                           fsr1l	equ	0xFE1
 36378                           indf2	equ	0xFDF
 36379                           postinc2	equ	0xFDE
 36380                           postdec2	equ	0xFDD
 36381                           plusw2	equ	0xFDB
 36382                           fsr2h	equ	0xFDA
 36383                           fsr2l	equ	0xFD9
 36384                           status	equ	0xFD8
 36385                           
 36386 ;; *************** function ___lldiv *****************
 36387 ;; Defined at:
 36388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 36389 ;; Parameters:    Size  Location     Type
 36390 ;;  dividend        4    0[BANK0 ] unsigned long 
 36391 ;;  divisor         4    4[BANK0 ] unsigned long 
 36392 ;; Auto vars:     Size  Location     Type
 36393 ;;  quotient        4    8[BANK0 ] unsigned long 
 36394 ;;  counter         1   12[BANK0 ] unsigned char 
 36395 ;; Return value:  Size  Location     Type
 36396 ;;                  4    0[BANK0 ] unsigned long 
 36397 ;; Registers used:
 36398 ;;		wreg, status,2, status,0
 36399 ;; Tracked objects:
 36400 ;;		On entry : 0/0
 36401 ;;		On exit  : 0/0
 36402 ;;		Unchanged: 0/0
 36403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36404 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36405 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36407 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36408 ;;Total ram usage:       13 bytes
 36409 ;; Hardware stack levels used:    1
 36410 ;; Hardware stack levels required when called:    7
 36411 ;; This function calls:
 36412 ;;		Nothing
 36413 ;; This function is called by:
 36414 ;;		_LORAWAN_LinkCheckConfigure
 36415 ;;		_LORAWAN_LinkCheckCallback
 36416 ;;		_UpdateRetransmissionAckTimeoutState
 36417 ;;		_UpdateJoinSuccessState
 36418 ;;		_LORAWAN_TxDone
 36419 ;;		_RADIO_WriteFrequency
 36420 ;;		_RADIO_WriteFSKFrequencyDeviation
 36421 ;;		_RADIO_WriteFSKBitRate
 36422 ;;		_RADIO_Transmit
 36423 ;;		_RADIO_ReceiveStart
 36424 ;;		_printf
 36425 ;; This function uses a non-reentrant model
 36426 ;;
 36427                           
 36428                           	psect	text177
 36429  0000'                    __ptext177:
 36430                           	opt stack 0
 36431  0000'                    ___lldiv:
 36432                           	opt stack 22
 36433                           
 36434                           ;incstack = 0
 36435  0000' 0E00               	movlw	0
 36436  0002' 0100               	movlb	0	; () banked
 36437  0004' 6F00'              	movwf	___lldiv@quotient& (0+255),b
 36438  0006' 0E00               	movlw	0
 36439  0008' 6F00'              	movwf	(___lldiv@quotient+1)& (0+255),b
 36440  000A' 0E00               	movlw	0
 36441  000C' 6F00'              	movwf	(___lldiv@quotient+2)& (0+255),b
 36442  000E' 0E00               	movlw	0
 36443  0010' 6F00'              	movwf	(___lldiv@quotient+3)& (0+255),b
 36444                           
 36445                           ; BSR set to: 0
 36446  0012' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 36447  0014' 1100'              	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 36448  0016' 1100'              	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 36449  0018' 1100'              	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 36450  001A' B4D8               	btfsc	status,2,c
 36451  001C' D02A               	goto	l2986
 36452                           
 36453                           ; BSR set to: 0
 36454  001E' 0E01               	movlw	1
 36455  0020' 6F00'              	movwf	___lldiv@counter& (0+255),b
 36456  0022' D006               	goto	l2981
 36457  0024'                    
 36458                           ; BSR set to: 0
 36459                           
 36460                           ; BSR set to: 0
 36461  0024' 90D8               	bcf	status,0,c
 36462  0026' 3700'              	rlcf	___lldiv@divisor& (0+255),f,b
 36463  0028' 3700'              	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 36464  002A' 3700'              	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 36465  002C' 3700'              	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 36466  002E' 2B00'              	incf	___lldiv@counter& (0+255),f,b
 36467  0030'                    l2981:
 36468                           
 36469                           ; BSR set to: 0
 36470                           
 36471                           ; BSR set to: 0
 36472  0030' AF00'              	btfss	(___lldiv@divisor+3)& (0+255),7,b
 36473  0032' D7F8               	goto	l2982
 36474  0034'                    u7210:
 36475                           
 36476                           ; BSR set to: 0
 36477                           
 36478                           ; BSR set to: 0
 36479                           
 36480                           ; BSR set to: 0
 36481  0034' 90D8               	bcf	status,0,c
 36482  0036' 3700'              	rlcf	___lldiv@quotient& (0+255),f,b
 36483  0038' 3700'              	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 36484  003A' 3700'              	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 36485  003C' 3700'              	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 36486                           
 36487                           ; BSR set to: 0
 36488  003E' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 36489  0040' 5D00'              	subwf	___lldiv@dividend& (0+255),w,b
 36490  0042' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 36491  0044' 5900'              	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 36492  0046' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 36493  0048' 5900'              	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 36494  004A' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 36495  004C' 5900'              	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 36496  004E' A0D8               	btfss	status,0,c
 36497  0050' D009               	goto	l2985
 36498                           
 36499                           ; BSR set to: 0
 36500  0052' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 36501  0054' 5F00'              	subwf	___lldiv@dividend& (0+255),f,b
 36502  0056' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 36503  0058' 5B00'              	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 36504  005A' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 36505  005C' 5B00'              	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 36506  005E' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 36507  0060' 5B00'              	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 36508                           
 36509                           ; BSR set to: 0
 36510  0062' 8100'              	bsf	___lldiv@quotient& (0+255),0,b
 36511  0064'                    l2985:
 36512                           
 36513                           ; BSR set to: 0
 36514                           
 36515                           ; BSR set to: 0
 36516  0064' 90D8               	bcf	status,0,c
 36517  0066' 3300'              	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 36518  0068' 3300'              	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 36519  006A' 3300'              	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 36520  006C' 3300'              	rrcf	___lldiv@divisor& (0+255),f,b
 36521                           
 36522                           ; BSR set to: 0
 36523  006E' 2F00'              	decfsz	___lldiv@counter& (0+255),f,b
 36524  0070' D7E1               	goto	u7210
 36525  0072'                    l2986:
 36526                           
 36527                           ; BSR set to: 0
 36528                           
 36529                           ; BSR set to: 0
 36530  0072' C008' F000'        	movff	___lldiv@quotient,?___lldiv
 36531  0076' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
 36532  007A' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
 36533  007E' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
 36534                           
 36535                           ; BSR set to: 0
 36536  0082' 0012               	return		;funcret
 36537  0084'                    __end_of___lldiv:
 36538                           	opt stack 0
 36539                           tosu	equ	0xFFF
 36540                           tosh	equ	0xFFE
 36541                           tosl	equ	0xFFD
 36542                           pclath	equ	0xFFA
 36543                           tblptru	equ	0xFF8
 36544                           tblptrh	equ	0xFF7
 36545                           tblptrl	equ	0xFF6
 36546                           tablat	equ	0xFF5
 36547                           prodh	equ	0xFF4
 36548                           prodl	equ	0xFF3
 36549                           intcon	equ	0xFF2
 36550                           intcon2	equ	0xFF1
 36551                           intcon3	equ	0xFF0
 36552                           indf0	equ	0xFEF
 36553                           postinc0	equ	0xFEE
 36554                           plusw0	equ	0xFEB
 36555                           fsr0h	equ	0xFEA
 36556                           fsr0l	equ	0xFE9
 36557                           wreg	equ	0xFE8
 36558                           postinc1	equ	0xFE6
 36559                           postdec1	equ	0xFE5
 36560                           plusw1	equ	0xFE3
 36561                           fsr1h	equ	0xFE2
 36562                           fsr1l	equ	0xFE1
 36563                           indf2	equ	0xFDF
 36564                           postinc2	equ	0xFDE
 36565                           postdec2	equ	0xFDD
 36566                           plusw2	equ	0xFDB
 36567                           fsr2h	equ	0xFDA
 36568                           fsr2l	equ	0xFD9
 36569                           status	equ	0xFD8
 36570                           
 36571 ;; *************** function _SwTimerStop *****************
 36572 ;; Defined at:
 36573 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36574 ;; Parameters:    Size  Location     Type
 36575 ;;  timerId         1    wreg     unsigned char 
 36576 ;; Auto vars:     Size  Location     Type
 36577 ;;  timerId         1    0[BANK0 ] unsigned char 
 36578 ;; Return value:  Size  Location     Type
 36579 ;;                  1    wreg      void 
 36580 ;; Registers used:
 36581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 36582 ;; Tracked objects:
 36583 ;;		On entry : 0/0
 36584 ;;		On exit  : 0/0
 36585 ;;		Unchanged: 0/0
 36586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36590 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36591 ;;Total ram usage:        1 bytes
 36592 ;; Hardware stack levels used:    1
 36593 ;; Hardware stack levels required when called:    7
 36594 ;; This function calls:
 36595 ;;		Nothing
 36596 ;; This function is called by:
 36597 ;;		_LORAWAN_LinkCheckConfigure
 36598 ;;		_LORAWAN_RxDone
 36599 ;;		_StopAllSoftwareTimers
 36600 ;;		_RADIO_Init
 36601 ;;		_RADIO_Transmit
 36602 ;;		_RADIO_RxDone
 36603 ;;		_RADIO_FSKPayloadReady
 36604 ;;		_RADIO_RxTimeout
 36605 ;;		_RADIO_TxDone
 36606 ;;		_RADIO_FSKPacketSent
 36607 ;;		_RADIO_RxFSKTimeout
 36608 ;; This function uses a non-reentrant model
 36609 ;;
 36610                           
 36611                           	psect	text178
 36612  0000'                    __ptext178:
 36613                           	opt stack 0
 36614  0000'                    _SwTimerStop:
 36615                           	opt stack 21
 36616                           
 36617                           ; BSR set to: 0
 36618                           ;incstack = 0
 36619                           ;SwTimerStop@timerId stored from wreg
 36620  0000' 0100               	movlb	0	; () banked
 36621  0002' 6F00'              	movwf	SwTimerStop@timerId& (0+255),b
 36622                           
 36623                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 36624  0004' 9EF2               	bcf	intcon,7,c	;volatile
 36625                           
 36626                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 36627  0006' 0100               	movlb	0	; () banked
 36628  0008' 5100'              	movf	SwTimerStop@timerId& (0+255),w,b
 36629  000A' 0D08               	mullw	8
 36630  000C' 0E04               	movlw	4
 36631  000E' 26F3               	addwf	prodl,f,c
 36632  0010' 0E00               	movlw	0
 36633  0012' 22F4               	addwfc	prodh,f,c
 36634  0014' 0E00'              	movlw	low _swTimers
 36635  0016' 24F3               	addwf	prodl,w,c
 36636  0018' 6ED9               	movwf	fsr2l,c
 36637  001A' 0E00'              	movlw	high _swTimers
 36638  001C' 20F4               	addwfc	prodh,w,c
 36639  001E' 6EDA               	movwf	fsr2h,c
 36640  0020' 0E00               	movlw	0
 36641  0022' 6EDF               	movwf	indf2,c
 36642                           
 36643                           ; BSR set to: 0
 36644                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 36645  0024' 8EF2               	bsf	intcon,7,c	;volatile
 36646                           
 36647                           ; BSR set to: 0
 36648  0026' 0012               	return		;funcret
 36649  0028'                    __end_of_SwTimerStop:
 36650                           	opt stack 0
 36651                           tosu	equ	0xFFF
 36652                           tosh	equ	0xFFE
 36653                           tosl	equ	0xFFD
 36654                           pclath	equ	0xFFA
 36655                           tblptru	equ	0xFF8
 36656                           tblptrh	equ	0xFF7
 36657                           tblptrl	equ	0xFF6
 36658                           tablat	equ	0xFF5
 36659                           prodh	equ	0xFF4
 36660                           prodl	equ	0xFF3
 36661                           intcon	equ	0xFF2
 36662                           intcon2	equ	0xFF1
 36663                           intcon3	equ	0xFF0
 36664                           indf0	equ	0xFEF
 36665                           postinc0	equ	0xFEE
 36666                           plusw0	equ	0xFEB
 36667                           fsr0h	equ	0xFEA
 36668                           fsr0l	equ	0xFE9
 36669                           wreg	equ	0xFE8
 36670                           postinc1	equ	0xFE6
 36671                           postdec1	equ	0xFE5
 36672                           plusw1	equ	0xFE3
 36673                           fsr1h	equ	0xFE2
 36674                           fsr1l	equ	0xFE1
 36675                           indf2	equ	0xFDF
 36676                           postinc2	equ	0xFDE
 36677                           postdec2	equ	0xFDD
 36678                           plusw2	equ	0xFDB
 36679                           fsr2h	equ	0xFDA
 36680                           fsr2l	equ	0xFD9
 36681                           status	equ	0xFD8
 36682                           
 36683 ;; *************** function _SwTimerStart *****************
 36684 ;; Defined at:
 36685 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36686 ;; Parameters:    Size  Location     Type
 36687 ;;  timerId         1    wreg     unsigned char 
 36688 ;; Auto vars:     Size  Location     Type
 36689 ;;  timerId         1   57[BANK0 ] unsigned char 
 36690 ;;  ticksRemaini    4   53[BANK0 ] unsigned long 
 36691 ;; Return value:  Size  Location     Type
 36692 ;;                  1    wreg      void 
 36693 ;; Registers used:
 36694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36695 ;; Tracked objects:
 36696 ;;		On entry : 0/0
 36697 ;;		On exit  : 0/0
 36698 ;;		Unchanged: 0/0
 36699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36701 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36702 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36703 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36704 ;;Total ram usage:        9 bytes
 36705 ;; Hardware stack levels used:    1
 36706 ;; Hardware stack levels required when called:   10
 36707 ;; This function calls:
 36708 ;;		_SwTimersInterrupt
 36709 ;;		_TMR_OverrideRemaining
 36710 ;; This function is called by:
 36711 ;;		_LORAWAN_Join
 36712 ;;		_LORAWAN_LinkCheckConfigure
 36713 ;;		_LORAWAN_LinkCheckCallback
 36714 ;;		_UpdateRetransmissionAckTimeoutState
 36715 ;;		_UpdateJoinSuccessState
 36716 ;;		_LORAWAN_TxDone
 36717 ;;		_Retransmissions
 36718 ;;		_TransmissionErrorCallback
 36719 ;;		_RADIO_Transmit
 36720 ;;		_RADIO_ReceiveStart
 36721 ;; This function uses a non-reentrant model
 36722 ;;
 36723                           
 36724                           	psect	text179
 36725  0000'                    __ptext179:
 36726                           	opt stack 0
 36727  0000'                    _SwTimerStart:
 36728                           	opt stack 18
 36729                           
 36730                           ; BSR set to: 0
 36731                           ;incstack = 0
 36732                           ;SwTimerStart@timerId stored from wreg
 36733  0000' 0100               	movlb	0	; () banked
 36734  0002' 6F00'              	movwf	SwTimerStart@timerId& (0+255),b
 36735                           
 36736                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 36737                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 36738  0004' 9EF2               	bcf	intcon,7,c	;volatile
 36739                           
 36740                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 36741  0006' EC00' F000'        	call	_SwTimersInterrupt	;wreg free
 36742  000A' C020' F035'        	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 36743  000E' C021' F036'        	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 36744  0012' C022' F037'        	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 36745  0016' C023' F038'        	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 36746                           
 36747                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 36748  001A' 0100               	movlb	0	; () banked
 36749  001C' 5100'              	movf	SwTimerStart@timerId& (0+255),w,b
 36750  001E' 0D08               	mullw	8
 36751  0020' 0E00'              	movlw	low _swTimers
 36752  0022' 24F3               	addwf	prodl,w,c
 36753  0024' 6ED9               	movwf	fsr2l,c
 36754  0026' 0E00'              	movlw	high _swTimers
 36755  0028' 20F4               	addwfc	prodh,w,c
 36756  002A' 6EDA               	movwf	fsr2h,c
 36757  002C' 5100'              	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 36758  002E' 5CDE               	subwf	postinc2,w,c
 36759  0030' 5100'              	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 36760  0032' 58DE               	subwfb	postinc2,w,c
 36761  0034' 5100'              	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 36762  0036' 58DE               	subwfb	postinc2,w,c
 36763  0038' 5100'              	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 36764  003A' 58DE               	subwfb	postinc2,w,c
 36765  003C' B0D8               	btfsc	status,0,c
 36766  003E' D010               	goto	l1146
 36767                           
 36768                           ; BSR set to: 0
 36769                           ;sw_timer.c: 225: {
 36770                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 36771  0040' 5100'              	movf	SwTimerStart@timerId& (0+255),w,b
 36772  0042' 0D08               	mullw	8
 36773  0044' 0E00'              	movlw	low _swTimers
 36774  0046' 24F3               	addwf	prodl,w,c
 36775  0048' 6ED9               	movwf	fsr2l,c
 36776  004A' 0E00'              	movlw	high _swTimers
 36777  004C' 20F4               	addwfc	prodh,w,c
 36778  004E' 6EDA               	movwf	fsr2h,c
 36779  0050' CFDE F035'         	movff	postinc2,SwTimerStart@ticksRemaining
 36780  0054' CFDE F036'         	movff	postinc2,SwTimerStart@ticksRemaining+1
 36781  0058' CFDE F037'         	movff	postinc2,SwTimerStart@ticksRemaining+2
 36782  005C' CFDE F038'         	movff	postinc2,SwTimerStart@ticksRemaining+3
 36783  0060'                    l1146:
 36784                           
 36785                           ; BSR set to: 0
 36786                           ;sw_timer.c: 227: }
 36787                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 36788                           
 36789                           ; BSR set to: 0
 36790  0060' C035' F00A'        	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 36791  0064' C036' F00B'        	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 36792  0068' C037' F00C'        	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 36793  006C' C038' F00D'        	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 36794  0070' EC00' F000'        	call	_TMR_OverrideRemaining	;wreg free
 36795                           
 36796                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 36797  0074' 0100               	movlb	0	; () banked
 36798  0076' 5100'              	movf	SwTimerStart@timerId& (0+255),w,b
 36799  0078' 0D08               	mullw	8
 36800  007A' 0E04               	movlw	4
 36801  007C' 26F3               	addwf	prodl,f,c
 36802  007E' 0E00               	movlw	0
 36803  0080' 22F4               	addwfc	prodh,f,c
 36804  0082' 0E00'              	movlw	low _swTimers
 36805  0084' 24F3               	addwf	prodl,w,c
 36806  0086' 6ED9               	movwf	fsr2l,c
 36807  0088' 0E00'              	movlw	high _swTimers
 36808  008A' 20F4               	addwfc	prodh,w,c
 36809  008C' 6EDA               	movwf	fsr2h,c
 36810  008E' 0E01               	movlw	1
 36811  0090' 6EDF               	movwf	indf2,c
 36812                           
 36813                           ; BSR set to: 0
 36814                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 36815  0092' 8EF2               	bsf	intcon,7,c	;volatile
 36816                           
 36817                           ; BSR set to: 0
 36818  0094' 0012               	return		;funcret
 36819  0096'                    __end_of_SwTimerStart:
 36820                           	opt stack 0
 36821                           tosu	equ	0xFFF
 36822                           tosh	equ	0xFFE
 36823                           tosl	equ	0xFFD
 36824                           pclath	equ	0xFFA
 36825                           tblptru	equ	0xFF8
 36826                           tblptrh	equ	0xFF7
 36827                           tblptrl	equ	0xFF6
 36828                           tablat	equ	0xFF5
 36829                           prodh	equ	0xFF4
 36830                           prodl	equ	0xFF3
 36831                           intcon	equ	0xFF2
 36832                           intcon2	equ	0xFF1
 36833                           intcon3	equ	0xFF0
 36834                           indf0	equ	0xFEF
 36835                           postinc0	equ	0xFEE
 36836                           plusw0	equ	0xFEB
 36837                           fsr0h	equ	0xFEA
 36838                           fsr0l	equ	0xFE9
 36839                           wreg	equ	0xFE8
 36840                           postinc1	equ	0xFE6
 36841                           postdec1	equ	0xFE5
 36842                           plusw1	equ	0xFE3
 36843                           fsr1h	equ	0xFE2
 36844                           fsr1l	equ	0xFE1
 36845                           indf2	equ	0xFDF
 36846                           postinc2	equ	0xFDE
 36847                           postdec2	equ	0xFDD
 36848                           plusw2	equ	0xFDB
 36849                           fsr2h	equ	0xFDA
 36850                           fsr2l	equ	0xFD9
 36851                           status	equ	0xFD8
 36852                           
 36853 ;; *************** function _TMR_OverrideRemaining *****************
 36854 ;; Defined at:
 36855 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36856 ;; Parameters:    Size  Location     Type
 36857 ;;  ticksRemaini    4   10[BANK0 ] unsigned long 
 36858 ;; Auto vars:     Size  Location     Type
 36859 ;;  oldReloadVal    2   18[BANK0 ] unsigned int 
 36860 ;;  tmrVal          2   16[BANK0 ] unsigned int 
 36861 ;; Return value:  Size  Location     Type
 36862 ;;                  1    wreg      void 
 36863 ;; Registers used:
 36864 ;;		wreg, status,2, status,0, cstack
 36865 ;; Tracked objects:
 36866 ;;		On entry : 0/0
 36867 ;;		On exit  : 0/0
 36868 ;;		Unchanged: 0/0
 36869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36871 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36873 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36874 ;;Total ram usage:       10 bytes
 36875 ;; Hardware stack levels used:    1
 36876 ;; Hardware stack levels required when called:    9
 36877 ;; This function calls:
 36878 ;;		_TMR_SwapTimer
 36879 ;; This function is called by:
 36880 ;;		_SwTimerStart
 36881 ;; This function uses a non-reentrant model
 36882 ;;
 36883                           
 36884                           	psect	text180
 36885  0000'                    __ptext180:
 36886                           	opt stack 0
 36887  0000'                    _TMR_OverrideRemaining:
 36888                           	opt stack 18
 36889                           
 36890                           ;sw_timer.c: 67: uint16_t tmrVal;
 36891                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 36892                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 36893                           
 36894                           ; BSR set to: 0
 36895                           ;incstack = 0
 36896  0000' 5003'              	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 36897  0002' 1002'              	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 36898  0004' 1001'              	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 36899  0006' E104               	bnz	u7310
 36900  0008' 0E0B               	movlw	11
 36901  000A' 5C00'              	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 36902  000C' A0D8               	btfss	status,0,c
 36903  000E' 0012               	return	
 36904  0010'                    u7310:
 36905                           
 36906                           ;sw_timer.c: 72: {
 36907                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 36908  0010' 5000'              	movf	_ticksToScheduledInterrupt,w,c	;volatile
 36909  0012' 0100               	movlb	0	; () banked
 36910  0014' 5D00'              	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 36911  0016' 5001'              	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 36912  0018' 5900'              	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 36913  001A' 5002'              	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 36914  001C' 5900'              	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 36915  001E' 5003'              	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 36916  0020' 5900'              	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 36917  0022' B0D8               	btfsc	status,0,c
 36918  0024' 0012               	return	
 36919                           
 36920                           ; BSR set to: 0
 36921                           ;sw_timer.c: 74: {
 36922                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 36923  0026' C00A' F000'        	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 36924  002A' C00B' F001'        	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 36925  002E' C00C' F002'        	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 36926  0032' C00D' F003'        	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 36927                           
 36928                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 36929  0036' C008' F012'        	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 36930  003A' C009' F013'        	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 36931                           
 36932                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 36933  003E' C00A' F00E'        	movff	TMR_OverrideRemaining@ticksRemaining,??_TMR_OverrideRemaining
 36934  0042' C00B' F00F'        	movff	TMR_OverrideRemaining@ticksRemaining+1,??_TMR_OverrideRemaining+1
 36935  0046' 1F00'              	comf	??_TMR_OverrideRemaining& (0+255),f,b
 36936  0048' 1F00'              	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 36937  004A' 4B00'              	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 36938  004C' 2B00'              	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 36939  004E' C00E' F008'        	movff	??_TMR_OverrideRemaining,_reloadVal	;volatile
 36940  0052' C00F' F009'        	movff	??_TMR_OverrideRemaining+1,_reloadVal+1	;volatile
 36941                           
 36942                           ; BSR set to: 0
 36943                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 36944  0056' C008' F008'        	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 36945  005A' C009' F009'        	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 36946  005E' EC00' F000'        	call	_TMR_SwapTimer	;wreg free
 36947  0062' C008' F010'        	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 36948  0066' C009' F011'        	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 36949                           
 36950                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 36951  006A' C012' F00E'        	movff	TMR_OverrideRemaining@oldReloadVal,??_TMR_OverrideRemaining
 36952  006E' C013' F00F'        	movff	TMR_OverrideRemaining@oldReloadVal+1,??_TMR_OverrideRemaining+1
 36953  0072' 0100               	movlb	0	; () banked
 36954  0074' 1F00'              	comf	??_TMR_OverrideRemaining& (0+255),f,b
 36955  0076' 1F00'              	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 36956  0078' 4B00'              	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 36957  007A' 2B00'              	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 36958  007C' 5100'              	movf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 36959  007E' 2700'              	addwf	??_TMR_OverrideRemaining& (0+255),f,b
 36960  0080' 5100'              	movf	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 36961  0082' 2300'              	addwfc	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 36962  0084' 5100'              	movf	??_TMR_OverrideRemaining& (0+255),w,b
 36963  0086' 2604'              	addwf	_ticksAdded,f,c	;volatile
 36964  0088' 5100'              	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 36965  008A' 2205'              	addwfc	_ticksAdded+1,f,c	;volatile
 36966  008C' 0E00               	movlw	0
 36967  008E' 2206'              	addwfc	_ticksAdded+2,f,c	;volatile
 36968  0090' 0E00               	movlw	0
 36969  0092' 2207'              	addwfc	_ticksAdded+3,f,c	;volatile
 36970                           
 36971                           ; BSR set to: 0
 36972  0094' 0012               	return	
 36973  0096'                    __end_of_TMR_OverrideRemaining:
 36974                           	opt stack 0
 36975                           tosu	equ	0xFFF
 36976                           tosh	equ	0xFFE
 36977                           tosl	equ	0xFFD
 36978                           pclath	equ	0xFFA
 36979                           tblptru	equ	0xFF8
 36980                           tblptrh	equ	0xFF7
 36981                           tblptrl	equ	0xFF6
 36982                           tablat	equ	0xFF5
 36983                           prodh	equ	0xFF4
 36984                           prodl	equ	0xFF3
 36985                           intcon	equ	0xFF2
 36986                           intcon2	equ	0xFF1
 36987                           intcon3	equ	0xFF0
 36988                           indf0	equ	0xFEF
 36989                           postinc0	equ	0xFEE
 36990                           plusw0	equ	0xFEB
 36991                           fsr0h	equ	0xFEA
 36992                           fsr0l	equ	0xFE9
 36993                           wreg	equ	0xFE8
 36994                           postinc1	equ	0xFE6
 36995                           postdec1	equ	0xFE5
 36996                           plusw1	equ	0xFE3
 36997                           fsr1h	equ	0xFE2
 36998                           fsr1l	equ	0xFE1
 36999                           indf2	equ	0xFDF
 37000                           postinc2	equ	0xFDE
 37001                           postdec2	equ	0xFDD
 37002                           plusw2	equ	0xFDB
 37003                           fsr2h	equ	0xFDA
 37004                           fsr2l	equ	0xFD9
 37005                           status	equ	0xFD8
 37006                           
 37007 ;; *************** function _TMR_SwapTimer *****************
 37008 ;; Defined at:
 37009 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37010 ;; Parameters:    Size  Location     Type
 37011 ;;  timerVal        2    8[BANK0 ] unsigned int 
 37012 ;; Auto vars:     Size  Location     Type
 37013 ;;		None
 37014 ;; Return value:  Size  Location     Type
 37015 ;;                  2    8[BANK0 ] unsigned int 
 37016 ;; Registers used:
 37017 ;;		wreg, status,2, status,0, cstack
 37018 ;; Tracked objects:
 37019 ;;		On entry : 0/0
 37020 ;;		On exit  : 0/0
 37021 ;;		Unchanged: 0/0
 37022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37027 ;;Total ram usage:        2 bytes
 37028 ;; Hardware stack levels used:    1
 37029 ;; Hardware stack levels required when called:    8
 37030 ;; This function calls:
 37031 ;;		_TMR1_ReadTimer
 37032 ;;		_TMR1_WriteTimer
 37033 ;; This function is called by:
 37034 ;;		_TMR_OverrideRemaining
 37035 ;; This function uses a non-reentrant model
 37036 ;;
 37037                           
 37038                           	psect	text181
 37039  0000'                    __ptext181:
 37040                           	opt stack 0
 37041  0000'                    _TMR_SwapTimer:
 37042                           	opt stack 18
 37043                           
 37044                           ;sw_timer.c: 114: static uint16_t oldVal;
 37045                           ;sw_timer.c: 115: static uint16_t retVal;
 37046                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 37047                           
 37048                           ;incstack = 0
 37049  0000' EC00' F000'        	call	_TMR1_ReadTimer	;wreg free
 37050  0004' C000' F010'        	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 37051  0008' C001' F011'        	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 37052  000C'                    
 37053                           ;sw_timer.c: 123: ;
 37054  000C' EC00' F000'        	call	_TMR1_ReadTimer	;wreg free
 37055  0010' 0101               	movlb	1	; () banked
 37056  0012' 5100'              	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 37057  0014' 0100               	movlb	0	; () banked
 37058  0016' 1900'              	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 37059  0018' E106               	bnz	l8234
 37060  001A' 0101               	movlb	1	; () banked
 37061  001C' 5100'              	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 37062  001E' 0100               	movlb	0	; () banked
 37063  0020' 1900'              	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 37064  0022' B4D8               	btfsc	status,2,c
 37065  0024' D7F3               	goto	l1112
 37066  0026'                    l8234:
 37067                           
 37068                           ; BSR set to: 0
 37069                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 37070  0026' C008' F000'        	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 37071  002A' C009' F001'        	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 37072  002E' EC00' F000'        	call	_TMR1_WriteTimer	;wreg free
 37073                           
 37074                           ;sw_timer.c: 128: oldVal++;
 37075  0032' 0101               	movlb	1	; () banked
 37076  0034' 4B00'              	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 37077  0036' 2B00'              	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 37078                           
 37079                           ; BSR set to: 1
 37080                           ;sw_timer.c: 130: retVal = oldVal;
 37081  0038' C010' F00E'        	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 37082  003C' C011' F00F'        	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 37083                           
 37084                           ; BSR set to: 1
 37085                           ;sw_timer.c: 132: return retVal;
 37086  0040' C00E' F008'        	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 37087  0044' C00F' F009'        	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 37088  0048' 0012               	return	
 37089  004A'                    __end_of_TMR_SwapTimer:
 37090                           	opt stack 0
 37091                           tosu	equ	0xFFF
 37092                           tosh	equ	0xFFE
 37093                           tosl	equ	0xFFD
 37094                           pclath	equ	0xFFA
 37095                           tblptru	equ	0xFF8
 37096                           tblptrh	equ	0xFF7
 37097                           tblptrl	equ	0xFF6
 37098                           tablat	equ	0xFF5
 37099                           prodh	equ	0xFF4
 37100                           prodl	equ	0xFF3
 37101                           intcon	equ	0xFF2
 37102                           intcon2	equ	0xFF1
 37103                           intcon3	equ	0xFF0
 37104                           indf0	equ	0xFEF
 37105                           postinc0	equ	0xFEE
 37106                           plusw0	equ	0xFEB
 37107                           fsr0h	equ	0xFEA
 37108                           fsr0l	equ	0xFE9
 37109                           wreg	equ	0xFE8
 37110                           postinc1	equ	0xFE6
 37111                           postdec1	equ	0xFE5
 37112                           plusw1	equ	0xFE3
 37113                           fsr1h	equ	0xFE2
 37114                           fsr1l	equ	0xFE1
 37115                           indf2	equ	0xFDF
 37116                           postinc2	equ	0xFDE
 37117                           postdec2	equ	0xFDD
 37118                           plusw2	equ	0xFDB
 37119                           fsr2h	equ	0xFDA
 37120                           fsr2l	equ	0xFD9
 37121                           status	equ	0xFD8
 37122                           
 37123 ;; *************** function _TMR1_WriteTimer *****************
 37124 ;; Defined at:
 37125 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 37126 ;; Parameters:    Size  Location     Type
 37127 ;;  timerVal        2    0[BANK0 ] unsigned int 
 37128 ;; Auto vars:     Size  Location     Type
 37129 ;;		None
 37130 ;; Return value:  Size  Location     Type
 37131 ;;                  1    wreg      void 
 37132 ;; Registers used:
 37133 ;;		wreg, status,2
 37134 ;; Tracked objects:
 37135 ;;		On entry : 0/0
 37136 ;;		On exit  : 0/0
 37137 ;;		Unchanged: 0/0
 37138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37143 ;;Total ram usage:        2 bytes
 37144 ;; Hardware stack levels used:    1
 37145 ;; Hardware stack levels required when called:    7
 37146 ;; This function calls:
 37147 ;;		Nothing
 37148 ;; This function is called by:
 37149 ;;		_TMR_SwapTimer
 37150 ;;		_TMR1_Reload
 37151 ;; This function uses a non-reentrant model
 37152 ;;
 37153                           
 37154                           	psect	text182
 37155  0000'                    __ptext182:
 37156                           	opt stack 0
 37157  0000'                    _TMR1_WriteTimer:
 37158                           	opt stack 18
 37159                           
 37160                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 37161                           
 37162                           ; BSR set to: 1
 37163                           ;incstack = 0
 37164  0000' A4CD               	btfss	4045,2,c	;volatile
 37165  0002' D008               	goto	l2251
 37166                           
 37167                           ;tmr1.c: 124: {
 37168                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 37169  0004' 90CD               	bcf	4045,0,c	;volatile
 37170                           
 37171                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 37172  0006' 0100               	movlb	0	; () banked
 37173  0008' 5100'              	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 37174  000A' 6ECF               	movwf	4047,c	;volatile
 37175                           
 37176                           ; BSR set to: 0
 37177                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 37178  000C' C000' FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 37179                           
 37180                           ; BSR set to: 0
 37181                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 37182  0010' 80CD               	bsf	4045,0,c	;volatile
 37183                           
 37184                           ;tmr1.c: 134: }
 37185  0012' 0012               	return	
 37186  0014'                    l2251:
 37187                           
 37188                           ;tmr1.c: 135: else
 37189                           ;tmr1.c: 136: {
 37190                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 37191                           
 37192                           ; BSR set to: 0
 37193  0014' 0100               	movlb	0	; () banked
 37194  0016' 5100'              	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 37195  0018' 6ECF               	movwf	4047,c	;volatile
 37196                           
 37197                           ; BSR set to: 0
 37198                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 37199  001A' C000' FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 37200  001E' 0012               	return	
 37201  0020'                    __end_of_TMR1_WriteTimer:
 37202                           	opt stack 0
 37203                           tosu	equ	0xFFF
 37204                           tosh	equ	0xFFE
 37205                           tosl	equ	0xFFD
 37206                           pclath	equ	0xFFA
 37207                           tblptru	equ	0xFF8
 37208                           tblptrh	equ	0xFF7
 37209                           tblptrl	equ	0xFF6
 37210                           tablat	equ	0xFF5
 37211                           prodh	equ	0xFF4
 37212                           prodl	equ	0xFF3
 37213                           intcon	equ	0xFF2
 37214                           intcon2	equ	0xFF1
 37215                           intcon3	equ	0xFF0
 37216                           indf0	equ	0xFEF
 37217                           postinc0	equ	0xFEE
 37218                           plusw0	equ	0xFEB
 37219                           fsr0h	equ	0xFEA
 37220                           fsr0l	equ	0xFE9
 37221                           wreg	equ	0xFE8
 37222                           postinc1	equ	0xFE6
 37223                           postdec1	equ	0xFE5
 37224                           plusw1	equ	0xFE3
 37225                           fsr1h	equ	0xFE2
 37226                           fsr1l	equ	0xFE1
 37227                           indf2	equ	0xFDF
 37228                           postinc2	equ	0xFDE
 37229                           postdec2	equ	0xFDD
 37230                           plusw2	equ	0xFDB
 37231                           fsr2h	equ	0xFDA
 37232                           fsr2l	equ	0xFD9
 37233                           status	equ	0xFD8
 37234                           
 37235 ;; *************** function _SwTimersInterrupt *****************
 37236 ;; Defined at:
 37237 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37238 ;; Parameters:    Size  Location     Type
 37239 ;;		None
 37240 ;; Auto vars:     Size  Location     Type
 37241 ;;  ticksToNextT    4   44[BANK0 ] unsigned long 
 37242 ;;  timeElapsed     4   40[BANK0 ] unsigned long 
 37243 ;;  i               1   48[BANK0 ] unsigned char 
 37244 ;; Return value:  Size  Location     Type
 37245 ;;                  4   32[BANK0 ] unsigned long 
 37246 ;; Registers used:
 37247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37248 ;; Tracked objects:
 37249 ;;		On entry : 0/0
 37250 ;;		On exit  : 0/0
 37251 ;;		Unchanged: 0/0
 37252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37253 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37254 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37255 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37256 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37257 ;;Total ram usage:       17 bytes
 37258 ;; Hardware stack levels used:    1
 37259 ;; Hardware stack levels required when called:    9
 37260 ;; This function calls:
 37261 ;;		_TMR_GetDeltaTime
 37262 ;; This function is called by:
 37263 ;;		_SwTimerReadValue
 37264 ;;		_SwTimerStart
 37265 ;;		_SwTimersCanSleep
 37266 ;; This function uses a non-reentrant model
 37267 ;;
 37268                           
 37269                           	psect	text183
 37270  0000'                    __ptext183:
 37271                           	opt stack 0
 37272  0000'                    _SwTimersInterrupt:
 37273                           	opt stack 18
 37274                           
 37275                           ;sw_timer.c: 289: uint8_t i;
 37276                           ;sw_timer.c: 290: uint32_t timeElapsed;
 37277                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 37278                           
 37279                           ; BSR set to: 0
 37280                           ;incstack = 0
 37281  0000' 0100               	movlb	0	; () banked
 37282  0002' 6900'              	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 37283  0004' 6900'              	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 37284  0006' 6900'              	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 37285  0008' 6900'              	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 37286                           
 37287                           ; BSR set to: 0
 37288                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 37289  000A' EC00' F000'        	call	_TMR_GetDeltaTime	;wreg free
 37290  000E' C008' F028'        	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 37291  0012' C009' F029'        	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 37292  0016' C00A' F02A'        	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 37293  001A' C00B' F02B'        	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 37294                           
 37295                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 37296  001E' 0E00               	movlw	0
 37297  0020' 0100               	movlb	0	; () banked
 37298  0022' 6F00'              	movwf	SwTimersInterrupt@i& (0+255),b
 37299  0024' D061               	goto	l1169
 37300  0026'                    
 37301                           ; BSR set to: 0
 37302                           ;sw_timer.c: 298: {
 37303                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 37304                           
 37305                           ; BSR set to: 0
 37306  0026' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37307  0028' 0D08               	mullw	8
 37308  002A' 0E04               	movlw	4
 37309  002C' 26F3               	addwf	prodl,f,c
 37310  002E' 0E00               	movlw	0
 37311  0030' 22F4               	addwfc	prodh,f,c
 37312  0032' 0E00'              	movlw	low _swTimers
 37313  0034' 24F3               	addwf	prodl,w,c
 37314  0036' 6ED9               	movwf	fsr2l,c
 37315  0038' 0E00'              	movlw	high _swTimers
 37316  003A' 20F4               	addwfc	prodh,w,c
 37317  003C' 6EDA               	movwf	fsr2h,c
 37318  003E' 04DE               	decf	postinc2,w,c
 37319  0040' A4D8               	btfss	status,2,c
 37320  0042' D051               	goto	l1174
 37321                           
 37322                           ; BSR set to: 0
 37323                           ;sw_timer.c: 302: {
 37324                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 37325  0044' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37326  0046' 0D08               	mullw	8
 37327  0048' 0E00'              	movlw	low _swTimers
 37328  004A' 24F3               	addwf	prodl,w,c
 37329  004C' 6ED9               	movwf	fsr2l,c
 37330  004E' 0E00'              	movlw	high _swTimers
 37331  0050' 20F4               	addwfc	prodh,w,c
 37332  0052' 6EDA               	movwf	fsr2h,c
 37333  0054' 50DE               	movf	postinc2,w,c
 37334  0056' 5D00'              	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 37335  0058' 50DE               	movf	postinc2,w,c
 37336  005A' 5900'              	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 37337  005C' 50DE               	movf	postinc2,w,c
 37338  005E' 5900'              	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 37339  0060' 50DE               	movf	postinc2,w,c
 37340  0062' 5900'              	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 37341  0064' A0D8               	btfss	status,0,c
 37342  0066' D00D               	goto	l1172
 37343                           
 37344                           ; BSR set to: 0
 37345                           ;sw_timer.c: 304: {
 37346                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 37347  0068' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37348  006A' 0D08               	mullw	8
 37349  006C' 0E00'              	movlw	low _swTimers
 37350  006E' 24F3               	addwf	prodl,w,c
 37351  0070' 6ED9               	movwf	fsr2l,c
 37352  0072' 0E00'              	movlw	high _swTimers
 37353  0074' 20F4               	addwfc	prodh,w,c
 37354  0076' 6EDA               	movwf	fsr2h,c
 37355  0078' 6ADE               	clrf	postinc2,c
 37356  007A' 6ADE               	clrf	postinc2,c
 37357  007C' 6ADE               	clrf	postinc2,c
 37358  007E' 6ADD               	clrf	postdec2,c
 37359                           
 37360                           ;sw_timer.c: 306: }
 37361  0080' D032               	goto	l1174
 37362  0082'                    l1172:
 37363                           
 37364                           ; BSR set to: 0
 37365                           ;sw_timer.c: 307: else
 37366                           ;sw_timer.c: 308: {
 37367                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 37368                           
 37369                           ; BSR set to: 0
 37370  0082' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37371  0084' 0D08               	mullw	8
 37372  0086' 0E00'              	movlw	low _swTimers
 37373  0088' 24F3               	addwf	prodl,w,c
 37374  008A' 6ED9               	movwf	fsr2l,c
 37375  008C' 0E00'              	movlw	high _swTimers
 37376  008E' 20F4               	addwfc	prodh,w,c
 37377  0090' 6EDA               	movwf	fsr2h,c
 37378  0092' 5100'              	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 37379  0094' 5EDE               	subwf	postinc2,f,c
 37380  0096' 5100'              	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 37381  0098' 5ADE               	subwfb	postinc2,f,c
 37382  009A' 5100'              	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 37383  009C' 5ADE               	subwfb	postinc2,f,c
 37384  009E' 5100'              	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 37385  00A0' 5ADE               	subwfb	postinc2,f,c
 37386                           
 37387                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 37388  00A2' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37389  00A4' 0D08               	mullw	8
 37390  00A6' 0E00'              	movlw	low _swTimers
 37391  00A8' 24F3               	addwf	prodl,w,c
 37392  00AA' 6ED9               	movwf	fsr2l,c
 37393  00AC' 0E00'              	movlw	high _swTimers
 37394  00AE' 20F4               	addwfc	prodh,w,c
 37395  00B0' 6EDA               	movwf	fsr2h,c
 37396  00B2' 5100'              	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 37397  00B4' 5CDE               	subwf	postinc2,w,c
 37398  00B6' 5100'              	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 37399  00B8' 58DE               	subwfb	postinc2,w,c
 37400  00BA' 5100'              	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 37401  00BC' 58DE               	subwfb	postinc2,w,c
 37402  00BE' 5100'              	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 37403  00C0' 58DE               	subwfb	postinc2,w,c
 37404  00C2' B0D8               	btfsc	status,0,c
 37405  00C4' D010               	goto	l1174
 37406                           
 37407                           ; BSR set to: 0
 37408                           ;sw_timer.c: 313: {
 37409                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 37410  00C6' 5100'              	movf	SwTimersInterrupt@i& (0+255),w,b
 37411  00C8' 0D08               	mullw	8
 37412  00CA' 0E00'              	movlw	low _swTimers
 37413  00CC' 24F3               	addwf	prodl,w,c
 37414  00CE' 6ED9               	movwf	fsr2l,c
 37415  00D0' 0E00'              	movlw	high _swTimers
 37416  00D2' 20F4               	addwfc	prodh,w,c
 37417  00D4' 6EDA               	movwf	fsr2h,c
 37418  00D6' CFDE F02C'         	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 37419  00DA' CFDE F02D'         	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 37420  00DE' CFDE F02E'         	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 37421  00E2' CFDE F02F'         	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 37422  00E6'                    l1174:
 37423                           
 37424                           ; BSR set to: 0
 37425                           
 37426                           ; BSR set to: 0
 37427                           
 37428                           ; BSR set to: 0
 37429                           
 37430                           ; BSR set to: 0
 37431  00E6' 2B00'              	incf	SwTimersInterrupt@i& (0+255),f,b
 37432  00E8'                    l1169:
 37433                           
 37434                           ; BSR set to: 0
 37435                           
 37436                           ; BSR set to: 0
 37437  00E8' 5100'              	movf	_allocatedTimers& (0+255),w,b	;volatile
 37438  00EA' 5D00'              	subwf	SwTimersInterrupt@i& (0+255),w,b
 37439  00EC' A0D8               	btfss	status,0,c
 37440  00EE' D79B               	goto	l1170
 37441                           
 37442                           ; BSR set to: 0
 37443                           ;sw_timer.c: 315: }
 37444                           ;sw_timer.c: 316: }
 37445                           ;sw_timer.c: 317: }
 37446                           ;sw_timer.c: 318: }
 37447                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 37448  00F0' C02C' F020'        	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 37449  00F4' C02D' F021'        	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 37450  00F8' C02E' F022'        	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 37451  00FC' C02F' F023'        	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 37452                           
 37453                           ; BSR set to: 0
 37454  0100' 0012               	return		;funcret
 37455  0102'                    __end_of_SwTimersInterrupt:
 37456                           	opt stack 0
 37457                           tosu	equ	0xFFF
 37458                           tosh	equ	0xFFE
 37459                           tosl	equ	0xFFD
 37460                           pclath	equ	0xFFA
 37461                           tblptru	equ	0xFF8
 37462                           tblptrh	equ	0xFF7
 37463                           tblptrl	equ	0xFF6
 37464                           tablat	equ	0xFF5
 37465                           prodh	equ	0xFF4
 37466                           prodl	equ	0xFF3
 37467                           intcon	equ	0xFF2
 37468                           intcon2	equ	0xFF1
 37469                           intcon3	equ	0xFF0
 37470                           indf0	equ	0xFEF
 37471                           postinc0	equ	0xFEE
 37472                           plusw0	equ	0xFEB
 37473                           fsr0h	equ	0xFEA
 37474                           fsr0l	equ	0xFE9
 37475                           wreg	equ	0xFE8
 37476                           postinc1	equ	0xFE6
 37477                           postdec1	equ	0xFE5
 37478                           plusw1	equ	0xFE3
 37479                           fsr1h	equ	0xFE2
 37480                           fsr1l	equ	0xFE1
 37481                           indf2	equ	0xFDF
 37482                           postinc2	equ	0xFDE
 37483                           postdec2	equ	0xFDD
 37484                           plusw2	equ	0xFDB
 37485                           fsr2h	equ	0xFDA
 37486                           fsr2l	equ	0xFD9
 37487                           status	equ	0xFD8
 37488                           
 37489 ;; *************** function _TMR_GetDeltaTime *****************
 37490 ;; Defined at:
 37491 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37492 ;; Parameters:    Size  Location     Type
 37493 ;;		None
 37494 ;; Auto vars:     Size  Location     Type
 37495 ;;		None
 37496 ;; Return value:  Size  Location     Type
 37497 ;;                  4    8[BANK0 ] unsigned long 
 37498 ;; Registers used:
 37499 ;;		wreg, status,2, status,0, cstack
 37500 ;; Tracked objects:
 37501 ;;		On entry : 0/0
 37502 ;;		On exit  : 0/0
 37503 ;;		Unchanged: 0/0
 37504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37507 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37508 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37509 ;;Total ram usage:       24 bytes
 37510 ;; Hardware stack levels used:    1
 37511 ;; Hardware stack levels required when called:    8
 37512 ;; This function calls:
 37513 ;;		_TMR1_ReadTimer
 37514 ;; This function is called by:
 37515 ;;		_SwTimersInterrupt
 37516 ;; This function uses a non-reentrant model
 37517 ;;
 37518                           
 37519                           	psect	text184
 37520  0000'                    __ptext184:
 37521                           	opt stack 0
 37522  0000'                    _TMR_GetDeltaTime:
 37523                           	opt stack 18
 37524                           
 37525                           ;sw_timer.c: 90: static uint32_t retVal;
 37526                           ;sw_timer.c: 91: static uint16_t tmrVal;
 37527                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 37528                           
 37529                           ; BSR set to: 0
 37530                           ;incstack = 0
 37531  0000' EC00' F000'        	call	_TMR1_ReadTimer	;wreg free
 37532  0004' C000' F012'        	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 37533  0008' C001' F013'        	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 37534                           
 37535                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37536  000C' 040A'              	decf	_timerOverflow,w,c	;volatile
 37537  000E' A4D8               	btfss	status,2,c
 37538  0010' D071               	goto	l1102
 37539                           
 37540                           ;sw_timer.c: 96: {
 37541                           ;sw_timer.c: 97: timerOverflow = 0;
 37542  0012' 0E00               	movlw	0
 37543  0014' 6E0A'              	movwf	_timerOverflow,c	;volatile
 37544                           
 37545                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37546  0016' C000' F00C'        	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 37547  001A' C001' F00D'        	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 37548  001E' C002' F00E'        	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 37549  0022' C003' F00F'        	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 37550  0026' 0100               	movlb	0	; () banked
 37551  0028' 1F00'              	comf	??_TMR_GetDeltaTime& (0+255),f,b
 37552  002A' 1F00'              	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 37553  002C' 1F00'              	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 37554  002E' 1F00'              	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 37555  0030' 2B00'              	incf	??_TMR_GetDeltaTime& (0+255),f,b
 37556  0032' 0E00               	movlw	0
 37557  0034' 2300'              	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 37558  0036' 2300'              	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 37559  0038' 2300'              	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 37560  003A' 5008'              	movf	_reloadVal,w,c	;volatile
 37561  003C' 6F00'              	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 37562  003E' 5009'              	movf	_reloadVal+1,w,c	;volatile
 37563  0040' 6F00'              	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 37564  0042' 6B00'              	clrf	(??_TMR_GetDeltaTime+6)& (0+255),b
 37565  0044' 6B00'              	clrf	(??_TMR_GetDeltaTime+7)& (0+255),b
 37566  0046' 1F00'              	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 37567  0048' 1F00'              	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 37568  004A' 1F00'              	comf	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 37569  004C' 1F00'              	comf	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 37570  004E' 2B00'              	incf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 37571  0050' 0E00               	movlw	0
 37572  0052' 2300'              	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 37573  0054' 2300'              	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 37574  0056' 2300'              	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 37575  0058' 0101               	movlb	1	; () banked
 37576  005A' 5100'              	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 37577  005C' 0100               	movlb	0	; () banked
 37578  005E' 2500'              	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 37579  0060' 6F00'              	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 37580  0062' 0101               	movlb	1	; () banked
 37581  0064' 5100'              	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 37582  0066' 0100               	movlb	0	; () banked
 37583  0068' 2100'              	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 37584  006A' 6F00'              	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 37585  006C' 0E00               	movlw	0
 37586  006E' 2100'              	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 37587  0070' 6F00'              	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 37588  0072' 0E00               	movlw	0
 37589  0074' 2100'              	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 37590  0076' 6F00'              	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 37591  0078' 5100'              	movf	??_TMR_GetDeltaTime& (0+255),w,b
 37592  007A' 2500'              	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 37593  007C' 6F00'              	movwf	(??_TMR_GetDeltaTime+12)& (0+255),b
 37594  007E' 5100'              	movf	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 37595  0080' 2100'              	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 37596  0082' 6F00'              	movwf	(??_TMR_GetDeltaTime+13)& (0+255),b
 37597  0084' 5100'              	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 37598  0086' 2100'              	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 37599  0088' 6F00'              	movwf	(??_TMR_GetDeltaTime+14)& (0+255),b
 37600  008A' 5100'              	movf	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 37601  008C' 2100'              	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 37602  008E' 6F00'              	movwf	(??_TMR_GetDeltaTime+15)& (0+255),b
 37603  0090' 5004'              	movf	_ticksAdded,w,c	;volatile
 37604  0092' 2500'              	addwf	(??_TMR_GetDeltaTime+12)& (0+255),w,b
 37605  0094' 6F00'              	movwf	(??_TMR_GetDeltaTime+16)& (0+255),b
 37606  0096' 5005'              	movf	_ticksAdded+1,w,c	;volatile
 37607  0098' 2100'              	addwfc	(??_TMR_GetDeltaTime+13)& (0+255),w,b
 37608  009A' 6F00'              	movwf	(??_TMR_GetDeltaTime+17)& (0+255),b
 37609  009C' 5006'              	movf	_ticksAdded+2,w,c	;volatile
 37610  009E' 2100'              	addwfc	(??_TMR_GetDeltaTime+14)& (0+255),w,b
 37611  00A0' 6F00'              	movwf	(??_TMR_GetDeltaTime+18)& (0+255),b
 37612  00A2' 5007'              	movf	_ticksAdded+3,w,c	;volatile
 37613  00A4' 2100'              	addwfc	(??_TMR_GetDeltaTime+15)& (0+255),w,b
 37614  00A6' 6F00'              	movwf	(??_TMR_GetDeltaTime+19)& (0+255),b
 37615  00A8' 0E00               	movlw	0
 37616  00AA' 2500'              	addwf	(??_TMR_GetDeltaTime+16)& (0+255),w,b
 37617  00AC' 0101               	movlb	1	; () banked
 37618  00AE' 6F00'              	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 37619  00B0' 0E00               	movlw	0
 37620  00B2' 0100               	movlb	0	; () banked
 37621  00B4' 2100'              	addwfc	(??_TMR_GetDeltaTime+17)& (0+255),w,b
 37622  00B6' 0101               	movlb	1	; () banked
 37623  00B8' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 37624  00BA' 0E01               	movlw	1
 37625  00BC' 0100               	movlb	0	; () banked
 37626  00BE' 2100'              	addwfc	(??_TMR_GetDeltaTime+18)& (0+255),w,b
 37627  00C0' 0101               	movlb	1	; () banked
 37628  00C2' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 37629  00C4' 0E00               	movlw	0
 37630  00C6' 0100               	movlb	0	; () banked
 37631  00C8' 2100'              	addwfc	(??_TMR_GetDeltaTime+19)& (0+255),w,b
 37632  00CA' 0101               	movlb	1	; () banked
 37633  00CC' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 37634                           
 37635                           ; BSR set to: 1
 37636                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37637  00CE' C012' F000'        	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37638  00D2' C013' F001'        	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37639  00D6' 6A02'              	clrf	_ticksAccounted+2,c	;volatile
 37640  00D8' 6A03'              	clrf	_ticksAccounted+3,c	;volatile
 37641                           
 37642                           ; BSR set to: 1
 37643                           ;sw_timer.c: 100: ticksAdded = 0;
 37644  00DA' 0E00               	movlw	0
 37645  00DC' 6E04'              	movwf	_ticksAdded,c	;volatile
 37646  00DE' 0E00               	movlw	0
 37647  00E0' 6E05'              	movwf	_ticksAdded+1,c	;volatile
 37648  00E2' 0E00               	movlw	0
 37649  00E4' 6E06'              	movwf	_ticksAdded+2,c	;volatile
 37650  00E6' 0E00               	movlw	0
 37651  00E8' 6E07'              	movwf	_ticksAdded+3,c	;volatile
 37652                           
 37653                           ; BSR set to: 1
 37654                           ;sw_timer.c: 101: reloadVal = 0;
 37655  00EA' 0E00               	movlw	0
 37656  00EC' 6E09'              	movwf	_reloadVal+1,c	;volatile
 37657  00EE' 0E00               	movlw	0
 37658  00F0' 6E08'              	movwf	_reloadVal,c	;volatile
 37659                           
 37660                           ;sw_timer.c: 102: }
 37661  00F2' D049               	goto	l1103
 37662  00F4'                    l1102:
 37663                           
 37664                           ;sw_timer.c: 103: else
 37665                           ;sw_timer.c: 104: {
 37666                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37667                           
 37668                           ; BSR set to: 1
 37669  00F4' C000' F00C'        	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 37670  00F8' C001' F00D'        	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 37671  00FC' C002' F00E'        	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 37672  0100' C003' F00F'        	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 37673  0104' 0100               	movlb	0	; () banked
 37674  0106' 1F00'              	comf	??_TMR_GetDeltaTime& (0+255),f,b
 37675  0108' 1F00'              	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 37676  010A' 1F00'              	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 37677  010C' 1F00'              	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 37678  010E' 2B00'              	incf	??_TMR_GetDeltaTime& (0+255),f,b
 37679  0110' 0E00               	movlw	0
 37680  0112' 2300'              	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 37681  0114' 2300'              	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 37682  0116' 2300'              	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 37683  0118' C008' F010'        	movff	_reloadVal,??_TMR_GetDeltaTime+4	;volatile
 37684  011C' C009' F011'        	movff	_reloadVal+1,??_TMR_GetDeltaTime+5	;volatile
 37685  0120' 1F00'              	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 37686  0122' 1F00'              	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 37687  0124' 4B00'              	infsnz	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 37688  0126' 2B00'              	incf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 37689  0128' 0101               	movlb	1	; () banked
 37690  012A' 5100'              	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 37691  012C' 0100               	movlb	0	; () banked
 37692  012E' 2700'              	addwf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 37693  0130' 0101               	movlb	1	; () banked
 37694  0132' 5100'              	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 37695  0134' 0100               	movlb	0	; () banked
 37696  0136' 2300'              	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 37697  0138' 5100'              	movf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 37698  013A' 2500'              	addwf	??_TMR_GetDeltaTime& (0+255),w,b
 37699  013C' 6F00'              	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 37700  013E' 5100'              	movf	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 37701  0140' 2100'              	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 37702  0142' 6F00'              	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 37703  0144' 0E00               	movlw	0
 37704  0146' 2100'              	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 37705  0148' 6F00'              	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 37706  014A' 0E00               	movlw	0
 37707  014C' 2100'              	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 37708  014E' 6F00'              	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 37709  0150' 5004'              	movf	_ticksAdded,w,c	;volatile
 37710  0152' 2500'              	addwf	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 37711  0154' 0101               	movlb	1	; () banked
 37712  0156' 6F00'              	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 37713  0158' 5005'              	movf	_ticksAdded+1,w,c	;volatile
 37714  015A' 0100               	movlb	0	; () banked
 37715  015C' 2100'              	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 37716  015E' 0101               	movlb	1	; () banked
 37717  0160' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 37718  0162' 5006'              	movf	_ticksAdded+2,w,c	;volatile
 37719  0164' 0100               	movlb	0	; () banked
 37720  0166' 2100'              	addwfc	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 37721  0168' 0101               	movlb	1	; () banked
 37722  016A' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 37723  016C' 5007'              	movf	_ticksAdded+3,w,c	;volatile
 37724  016E' 0100               	movlb	0	; () banked
 37725  0170' 2100'              	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 37726  0172' 0101               	movlb	1	; () banked
 37727  0174' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 37728                           
 37729                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37730  0176' 5100'              	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 37731  0178' 2600'              	addwf	_ticksAccounted,f,c	;volatile
 37732  017A' 5100'              	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 37733  017C' 2201'              	addwfc	_ticksAccounted+1,f,c	;volatile
 37734  017E' 5100'              	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 37735  0180' 2202'              	addwfc	_ticksAccounted+2,f,c	;volatile
 37736  0182' 5100'              	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 37737  0184' 2203'              	addwfc	_ticksAccounted+3,f,c	;volatile
 37738  0186'                    l1103:
 37739                           
 37740                           ; BSR set to: 1
 37741                           ;sw_timer.c: 107: }
 37742                           ;sw_timer.c: 109: return retVal;
 37743                           
 37744                           ; BSR set to: 1
 37745  0186' C000' F008'        	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 37746  018A' C001' F009'        	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 37747  018E' C002' F00A'        	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 37748  0192' C003' F00B'        	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 37749  0196' 0012               	return	
 37750  0198'                    __end_of_TMR_GetDeltaTime:
 37751                           	opt stack 0
 37752                           tosu	equ	0xFFF
 37753                           tosh	equ	0xFFE
 37754                           tosl	equ	0xFFD
 37755                           pclath	equ	0xFFA
 37756                           tblptru	equ	0xFF8
 37757                           tblptrh	equ	0xFF7
 37758                           tblptrl	equ	0xFF6
 37759                           tablat	equ	0xFF5
 37760                           prodh	equ	0xFF4
 37761                           prodl	equ	0xFF3
 37762                           intcon	equ	0xFF2
 37763                           intcon2	equ	0xFF1
 37764                           intcon3	equ	0xFF0
 37765                           indf0	equ	0xFEF
 37766                           postinc0	equ	0xFEE
 37767                           plusw0	equ	0xFEB
 37768                           fsr0h	equ	0xFEA
 37769                           fsr0l	equ	0xFE9
 37770                           wreg	equ	0xFE8
 37771                           postinc1	equ	0xFE6
 37772                           postdec1	equ	0xFE5
 37773                           plusw1	equ	0xFE3
 37774                           fsr1h	equ	0xFE2
 37775                           fsr1l	equ	0xFE1
 37776                           indf2	equ	0xFDF
 37777                           postinc2	equ	0xFDE
 37778                           postdec2	equ	0xFDD
 37779                           plusw2	equ	0xFDB
 37780                           fsr2h	equ	0xFDA
 37781                           fsr2l	equ	0xFD9
 37782                           status	equ	0xFD8
 37783                           
 37784 ;; *************** function _TMR1_ReadTimer *****************
 37785 ;; Defined at:
 37786 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 37787 ;; Parameters:    Size  Location     Type
 37788 ;;		None
 37789 ;; Auto vars:     Size  Location     Type
 37790 ;;  readVal         2    4[BANK0 ] unsigned int 
 37791 ;;  readValLow      1    7[BANK0 ] unsigned char 
 37792 ;;  readValHigh     1    6[BANK0 ] unsigned char 
 37793 ;; Return value:  Size  Location     Type
 37794 ;;                  2    0[BANK0 ] unsigned int 
 37795 ;; Registers used:
 37796 ;;		wreg, status,2
 37797 ;; Tracked objects:
 37798 ;;		On entry : 0/0
 37799 ;;		On exit  : 0/0
 37800 ;;		Unchanged: 0/0
 37801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37802 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37803 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37805 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37806 ;;Total ram usage:        8 bytes
 37807 ;; Hardware stack levels used:    1
 37808 ;; Hardware stack levels required when called:    7
 37809 ;; This function calls:
 37810 ;;		Nothing
 37811 ;; This function is called by:
 37812 ;;		_TMR_GetDeltaTime
 37813 ;;		_TMR_SwapTimer
 37814 ;; This function uses a non-reentrant model
 37815 ;;
 37816                           
 37817                           	psect	text185
 37818  0000'                    __ptext185:
 37819                           	opt stack 0
 37820  0000'                    _TMR1_ReadTimer:
 37821                           	opt stack 18
 37822                           
 37823                           ;tmr1.c: 107: uint16_t readVal;
 37824                           ;tmr1.c: 108: uint8_t readValHigh;
 37825                           ;tmr1.c: 109: uint8_t readValLow;
 37826                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 37827                           
 37828                           ; BSR set to: 1
 37829                           ;incstack = 0
 37830  0000' 82CD               	bsf	4045,1,c	;volatile
 37831                           
 37832                           ;tmr1.c: 113: readValLow = TMR1L;
 37833  0002' CFCE F007'         	movff	4046,TMR1_ReadTimer@readValLow	;volatile
 37834                           
 37835                           ;tmr1.c: 114: readValHigh = TMR1H;
 37836  0006' CFCF F006'         	movff	4047,TMR1_ReadTimer@readValHigh	;volatile
 37837                           
 37838                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 37839  000A' 0100               	movlb	0	; () banked
 37840  000C' 5100'              	movf	TMR1_ReadTimer@readValHigh& (0+255),w,b
 37841  000E' 6F00'              	movwf	??_TMR1_ReadTimer& (0+255),b
 37842  0010' 5100'              	movf	TMR1_ReadTimer@readValLow& (0+255),w,b
 37843  0012' 6F00'              	movwf	TMR1_ReadTimer@readVal& (0+255),b
 37844  0014' C002' F005'        	movff	??_TMR1_ReadTimer,TMR1_ReadTimer@readVal+1
 37845                           
 37846                           ; BSR set to: 0
 37847                           ;tmr1.c: 118: return readVal;
 37848  0018' C004' F000'        	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 37849  001C' C005' F001'        	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 37850  0020' 0012               	return	
 37851  0022'                    __end_of_TMR1_ReadTimer:
 37852                           	opt stack 0
 37853                           tosu	equ	0xFFF
 37854                           tosh	equ	0xFFE
 37855                           tosl	equ	0xFFD
 37856                           pclath	equ	0xFFA
 37857                           tblptru	equ	0xFF8
 37858                           tblptrh	equ	0xFF7
 37859                           tblptrl	equ	0xFF6
 37860                           tablat	equ	0xFF5
 37861                           prodh	equ	0xFF4
 37862                           prodl	equ	0xFF3
 37863                           intcon	equ	0xFF2
 37864                           intcon2	equ	0xFF1
 37865                           intcon3	equ	0xFF0
 37866                           indf0	equ	0xFEF
 37867                           postinc0	equ	0xFEE
 37868                           plusw0	equ	0xFEB
 37869                           fsr0h	equ	0xFEA
 37870                           fsr0l	equ	0xFE9
 37871                           wreg	equ	0xFE8
 37872                           postinc1	equ	0xFE6
 37873                           postdec1	equ	0xFE5
 37874                           plusw1	equ	0xFE3
 37875                           fsr1h	equ	0xFE2
 37876                           fsr1l	equ	0xFE1
 37877                           indf2	equ	0xFDF
 37878                           postinc2	equ	0xFDE
 37879                           postdec2	equ	0xFDD
 37880                           plusw2	equ	0xFDB
 37881                           fsr2h	equ	0xFDA
 37882                           fsr2l	equ	0xFD9
 37883                           status	equ	0xFD8
 37884                           
 37885 ;; *************** function _SwTimerSetTimeout *****************
 37886 ;; Defined at:
 37887 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37888 ;; Parameters:    Size  Location     Type
 37889 ;;  timerId         1    wreg     unsigned char 
 37890 ;;  timeout         4   13[BANK0 ] unsigned long 
 37891 ;; Auto vars:     Size  Location     Type
 37892 ;;  timerId         1   21[BANK0 ] unsigned char 
 37893 ;; Return value:  Size  Location     Type
 37894 ;;                  1    wreg      void 
 37895 ;; Registers used:
 37896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 37897 ;; Tracked objects:
 37898 ;;		On entry : 0/0
 37899 ;;		On exit  : 0/0
 37900 ;;		Unchanged: 0/0
 37901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37904 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37905 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37906 ;;Total ram usage:        9 bytes
 37907 ;; Hardware stack levels used:    1
 37908 ;; Hardware stack levels required when called:    7
 37909 ;; This function calls:
 37910 ;;		Nothing
 37911 ;; This function is called by:
 37912 ;;		_LORAWAN_Join
 37913 ;;		_LORAWAN_LinkCheckConfigure
 37914 ;;		_LORAWAN_LinkCheckCallback
 37915 ;;		_UpdateRetransmissionAckTimeoutState
 37916 ;;		_UpdateJoinSuccessState
 37917 ;;		_LORAWAN_TxDone
 37918 ;;		_Retransmissions
 37919 ;;		_TransmissionErrorCallback
 37920 ;;		_RADIO_Transmit
 37921 ;;		_RADIO_ReceiveStart
 37922 ;; This function uses a non-reentrant model
 37923 ;;
 37924                           
 37925                           	psect	text186
 37926  0000'                    __ptext186:
 37927                           	opt stack 0
 37928  0000'                    _SwTimerSetTimeout:
 37929                           	opt stack 21
 37930                           
 37931                           ; BSR set to: 0
 37932                           ;incstack = 0
 37933                           ;SwTimerSetTimeout@timerId stored from wreg
 37934  0000' 0100               	movlb	0	; () banked
 37935  0002' 6F00'              	movwf	SwTimerSetTimeout@timerId& (0+255),b
 37936                           
 37937                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 37938  0004' 9EF2               	bcf	intcon,7,c	;volatile
 37939                           
 37940                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 37941  0006' 0EE0               	movlw	224
 37942  0008' 0100               	movlb	0	; () banked
 37943  000A' 2500'              	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 37944  000C' 6F00'              	movwf	??_SwTimerSetTimeout& (0+255),b
 37945  000E' 0EFF               	movlw	255
 37946  0010' 2100'              	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 37947  0012' 6F00'              	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 37948  0014' 0EFF               	movlw	255
 37949  0016' 2100'              	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 37950  0018' 6F00'              	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 37951  001A' 0EFF               	movlw	255
 37952  001C' 2100'              	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 37953  001E' 6F00'              	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 37954  0020' 5100'              	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 37955  0022' 0D08               	mullw	8
 37956  0024' 0E00'              	movlw	low _swTimers
 37957  0026' 24F3               	addwf	prodl,w,c
 37958  0028' 6ED9               	movwf	fsr2l,c
 37959  002A' 0E00'              	movlw	high _swTimers
 37960  002C' 20F4               	addwfc	prodh,w,c
 37961  002E' 6EDA               	movwf	fsr2h,c
 37962  0030' C011' FFDE         	movff	??_SwTimerSetTimeout,postinc2
 37963  0034' C012' FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 37964  0038' C013' FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 37965  003C' C014' FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 37966                           
 37967                           ; BSR set to: 0
 37968                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 37969  0040' 8EF2               	bsf	intcon,7,c	;volatile
 37970                           
 37971                           ; BSR set to: 0
 37972  0042' 0012               	return		;funcret
 37973  0044'                    __end_of_SwTimerSetTimeout:
 37974                           	opt stack 0
 37975                           tosu	equ	0xFFF
 37976                           tosh	equ	0xFFE
 37977                           tosl	equ	0xFFD
 37978                           pclath	equ	0xFFA
 37979                           tblptru	equ	0xFF8
 37980                           tblptrh	equ	0xFF7
 37981                           tblptrl	equ	0xFF6
 37982                           tablat	equ	0xFF5
 37983                           prodh	equ	0xFF4
 37984                           prodl	equ	0xFF3
 37985                           intcon	equ	0xFF2
 37986                           intcon2	equ	0xFF1
 37987                           intcon3	equ	0xFF0
 37988                           indf0	equ	0xFEF
 37989                           postinc0	equ	0xFEE
 37990                           plusw0	equ	0xFEB
 37991                           fsr0h	equ	0xFEA
 37992                           fsr0l	equ	0xFE9
 37993                           wreg	equ	0xFE8
 37994                           postinc1	equ	0xFE6
 37995                           postdec1	equ	0xFE5
 37996                           plusw1	equ	0xFE3
 37997                           fsr1h	equ	0xFE2
 37998                           fsr1l	equ	0xFE1
 37999                           indf2	equ	0xFDF
 38000                           postinc2	equ	0xFDE
 38001                           postdec2	equ	0xFDD
 38002                           plusw2	equ	0xFDB
 38003                           fsr2h	equ	0xFDA
 38004                           fsr2l	equ	0xFD9
 38005                           status	equ	0xFD8
 38006                           
 38007 ;; *************** function _InitDefault915Channels *****************
 38008 ;; Defined at:
 38009 ;;		line 831 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 38010 ;; Parameters:    Size  Location     Type
 38011 ;;		None
 38012 ;; Auto vars:     Size  Location     Type
 38013 ;;		None
 38014 ;; Return value:  Size  Location     Type
 38015 ;;                  1    wreg      void 
 38016 ;; Registers used:
 38017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 38018 ;; Tracked objects:
 38019 ;;		On entry : 0/0
 38020 ;;		On exit  : 0/0
 38021 ;;		Unchanged: 0/0
 38022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38027 ;;Total ram usage:        0 bytes
 38028 ;; Hardware stack levels used:    1
 38029 ;; Hardware stack levels required when called:    8
 38030 ;; This function calls:
 38031 ;;		_memcpy
 38032 ;;		_memset
 38033 ;; This function is called by:
 38034 ;;		_LORAWAN_Reset
 38035 ;; This function uses a non-reentrant model
 38036 ;;
 38037                           
 38038                           	psect	text187
 38039  0000'                    __ptext187:
 38040                           	opt stack 0
 38041  0000'                    _InitDefault915Channels:
 38042                           	opt stack 21
 38043                           
 38044                           ;lorawan_na.c: 833: memset (Channels, 0, sizeof(Channels) );
 38045                           
 38046                           ; BSR set to: 0
 38047                           ;incstack = 0
 38048  0000' 0E00'              	movlw	low _Channels
 38049  0002' 0100               	movlb	0	; () banked
 38050  0004' 6F00'              	movwf	memset@p1& (0+255),b
 38051  0006' 0E00'              	movlw	high _Channels
 38052  0008' 6F00'              	movwf	(memset@p1+1)& (0+255),b
 38053  000A' 0E00               	movlw	0
 38054  000C' 6F00'              	movwf	(memset@c+1)& (0+255),b
 38055  000E' 0E00               	movlw	0
 38056  0010' 6F00'              	movwf	memset@c& (0+255),b
 38057  0012' 0E00               	movlw	0
 38058  0014' 6F00'              	movwf	(memset@n+1)& (0+255),b
 38059  0016' 0E90               	movlw	144
 38060  0018' 6F00'              	movwf	memset@n& (0+255),b
 38061  001A' EC00' F000'        	call	_memset	;wreg free
 38062                           
 38063                           ;lorawan_na.c: 834: memcpy (Channels, DefaultChannels915, sizeof(DefaultChannels915) );
 38064  001E' 0E00'              	movlw	low _Channels
 38065  0020' 0100               	movlb	0	; () banked
 38066  0022' 6F00'              	movwf	memcpy@d1& (0+255),b
 38067  0024' 0E00'              	movlw	high _Channels
 38068  0026' 6F00'              	movwf	(memcpy@d1+1)& (0+255),b
 38069  0028' 0E00'              	movlw	low _DefaultChannels915
 38070  002A' 6F00'              	movwf	memcpy@s1& (0+255),b
 38071  002C' 0E00'              	movlw	high _DefaultChannels915
 38072  002E' 6F00'              	movwf	(memcpy@s1+1)& (0+255),b
 38073  0030' 0E00               	movlw	0
 38074  0032' 6F00'              	movwf	(memcpy@n+1)& (0+255),b
 38075  0034' 0E90               	movlw	144
 38076  0036' 6F00'              	movwf	memcpy@n& (0+255),b
 38077  0038' EC00' F000'        	call	_memcpy	;wreg free
 38078                           
 38079                           ;lorawan_na.c: 835: loRa.maxChannels = 72;
 38080  003C' 0E48               	movlw	72
 38081  003E' 0102               	movlb	2	; () banked
 38082  0040' 6F00'              	movwf	(_loRa+222)& (0+255),b
 38083                           
 38084                           ; BSR set to: 2
 38085  0042' 0012               	return		;funcret
 38086  0044'                    __end_of_InitDefault915Channels:
 38087                           	opt stack 0
 38088                           tosu	equ	0xFFF
 38089                           tosh	equ	0xFFE
 38090                           tosl	equ	0xFFD
 38091                           pclath	equ	0xFFA
 38092                           tblptru	equ	0xFF8
 38093                           tblptrh	equ	0xFF7
 38094                           tblptrl	equ	0xFF6
 38095                           tablat	equ	0xFF5
 38096                           prodh	equ	0xFF4
 38097                           prodl	equ	0xFF3
 38098                           intcon	equ	0xFF2
 38099                           intcon2	equ	0xFF1
 38100                           intcon3	equ	0xFF0
 38101                           indf0	equ	0xFEF
 38102                           postinc0	equ	0xFEE
 38103                           plusw0	equ	0xFEB
 38104                           fsr0h	equ	0xFEA
 38105                           fsr0l	equ	0xFE9
 38106                           wreg	equ	0xFE8
 38107                           postinc1	equ	0xFE6
 38108                           postdec1	equ	0xFE5
 38109                           plusw1	equ	0xFE3
 38110                           fsr1h	equ	0xFE2
 38111                           fsr1l	equ	0xFE1
 38112                           indf2	equ	0xFDF
 38113                           postinc2	equ	0xFDE
 38114                           postdec2	equ	0xFDD
 38115                           plusw2	equ	0xFDB
 38116                           fsr2h	equ	0xFDA
 38117                           fsr2l	equ	0xFD9
 38118                           status	equ	0xFD8
 38119                           
 38120 ;; *************** function _memset *****************
 38121 ;; Defined at:
 38122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 38123 ;; Parameters:    Size  Location     Type
 38124 ;;  p1              2    0[BANK0 ] PTR void 
 38125 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 38126 ;;		 -> Channels(144), macBuffer(271), loRa.activationParameters(105), loRa(231), 
 38127 ;;  c               2    2[BANK0 ] int 
 38128 ;;  n               2    4[BANK0 ] unsigned int 
 38129 ;; Auto vars:     Size  Location     Type
 38130 ;;  p               2    6[BANK0 ] PTR unsigned char 
 38131 ;;		 -> GenerateSubkey@l(16), AESCmac@x(16), AssemblePacket@mhdr(1), aesBuffer(16), 
 38132 ;;		 -> Channels(144), macBuffer(271), loRa.activationParameters(105), loRa(231), 
 38133 ;; Return value:  Size  Location     Type
 38134 ;;                  2    0[BANK0 ] PTR void 
 38135 ;; Registers used:
 38136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 38137 ;; Tracked objects:
 38138 ;;		On entry : 0/0
 38139 ;;		On exit  : 0/0
 38140 ;;		Unchanged: 0/0
 38141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38142 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38145 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38146 ;;Total ram usage:        8 bytes
 38147 ;; Hardware stack levels used:    1
 38148 ;; Hardware stack levels required when called:    7
 38149 ;; This function calls:
 38150 ;;		Nothing
 38151 ;; This function is called by:
 38152 ;;		_AssemblePacket
 38153 ;;		_PrepareJoinRequestFrame
 38154 ;;		_PrepareSessionKeys
 38155 ;;		_AssembleEncryptionBlock
 38156 ;;		_AESCmac
 38157 ;;		_GenerateSubkey
 38158 ;;		_LORAWAN_Reset
 38159 ;;		_InitDefault915Channels
 38160 ;; This function uses a non-reentrant model
 38161 ;;
 38162                           
 38163                           	psect	text188
 38164  0000'                    __ptext188:
 38165                           	opt stack 0
 38166  0000'                    _memset:
 38167                           	opt stack 21
 38168                           
 38169                           ; BSR set to: 2
 38170                           ;incstack = 0
 38171  0000' C000' F006'        	movff	memset@p1,memset@p
 38172  0004' C001' F007'        	movff	memset@p1+1,memset@p+1
 38173  0008' D009               	goto	l3064
 38174  000A'                    l8372:
 38175  000A' C006' FFD9         	movff	memset@p,fsr2l
 38176  000E' C007' FFDA         	movff	memset@p+1,fsr2h
 38177  0012' C002' FFDF         	movff	memset@c,indf2
 38178  0016' 0100               	movlb	0	; () banked
 38179  0018' 4B00'              	infsnz	memset@p& (0+255),f,b
 38180  001A' 2B00'              	incf	(memset@p+1)& (0+255),f,b
 38181  001C'                    l3064:
 38182                           
 38183                           ; BSR set to: 0
 38184  001C' 0100               	movlb	0	; () banked
 38185  001E' 0700'              	decf	memset@n& (0+255),f,b
 38186  0020' A0D8               	btfss	status,0,c
 38187  0022' 0700'              	decf	(memset@n+1)& (0+255),f,b
 38188  0024' 2900'              	incf	memset@n& (0+255),w,b
 38189  0026' E1F1               	bnz	l8372
 38190  0028' 2900'              	incf	(memset@n+1)& (0+255),w,b
 38191  002A' B4D8               	btfsc	status,2,c
 38192  002C' 0012               	return	
 38193  002E' D7ED               	goto	l3065
 38194  0030'                    __end_of_memset:
 38195                           	opt stack 0
 38196                           tosu	equ	0xFFF
 38197                           tosh	equ	0xFFE
 38198                           tosl	equ	0xFFD
 38199                           pclath	equ	0xFFA
 38200                           tblptru	equ	0xFF8
 38201                           tblptrh	equ	0xFF7
 38202                           tblptrl	equ	0xFF6
 38203                           tablat	equ	0xFF5
 38204                           prodh	equ	0xFF4
 38205                           prodl	equ	0xFF3
 38206                           intcon	equ	0xFF2
 38207                           intcon2	equ	0xFF1
 38208                           intcon3	equ	0xFF0
 38209                           indf0	equ	0xFEF
 38210                           postinc0	equ	0xFEE
 38211                           plusw0	equ	0xFEB
 38212                           fsr0h	equ	0xFEA
 38213                           fsr0l	equ	0xFE9
 38214                           wreg	equ	0xFE8
 38215                           postinc1	equ	0xFE6
 38216                           postdec1	equ	0xFE5
 38217                           plusw1	equ	0xFE3
 38218                           fsr1h	equ	0xFE2
 38219                           fsr1l	equ	0xFE1
 38220                           indf2	equ	0xFDF
 38221                           postinc2	equ	0xFDE
 38222                           postdec2	equ	0xFDD
 38223                           plusw2	equ	0xFDB
 38224                           fsr2h	equ	0xFDA
 38225                           fsr2l	equ	0xFD9
 38226                           status	equ	0xFD8
 38227                           
 38228 ;; *************** function _memcpy *****************
 38229 ;; Defined at:
 38230 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 38231 ;; Parameters:    Size  Location     Type
 38232 ;;  d1              2    0[BANK0 ] PTR void 
 38233 ;;		 -> RadioConfiguration(54), AESCmac@x(16), AESEncodeLoRa@useKey(16), ComputeMic@mic(4), 
 38234 ;;		 -> ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@computedMic(4), 
 38235 ;;		 -> Channels(144), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), macBuffer(27
      +1), 
 38236 ;;		 -> loRa.activationParameters(105), loRa(231), 
 38237 ;;  s1              2    2[BANK0 ] PTR const void 
 38238 ;;		 -> STR_4(5), applicationKeyNew(16), deviceEuiNew(8), applicationEuiNew(8), 
 38239 ;;		 -> RadioConfiguration.syncWord(8), RadioConfiguration(54), DefaultChannels915(144), AESCmac@y(16), 
 38240 ;;		 -> AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequestFrame@mic(4),
      + loRa.devNonce(2), 
 38241 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 38242 ;;		 -> loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessionKey(16), loRa.activati
      +onParameters.networkSessionKey(16), loRa.activationParameters.deviceAddress(4), 
 38243 ;;		 -> loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), NULL(0), loRa.activationPar
      +ameters.mcastApplicationSessionKey(16), 
 38244 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 38245 ;;		 -> loRa(231), 
 38246 ;;  n               2    4[BANK0 ] unsigned int 
 38247 ;; Auto vars:     Size  Location     Type
 38248 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 38249 ;;		 -> STR_4(5), applicationKeyNew(16), deviceEuiNew(8), applicationEuiNew(8), 
 38250 ;;		 -> RadioConfiguration.syncWord(8), RadioConfiguration(54), DefaultChannels915(144), AESCmac@y(16), 
 38251 ;;		 -> AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequestFrame@mic(4),
      + loRa.devNonce(2), 
 38252 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 38253 ;;		 -> loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessionKey(16), loRa.activati
      +onParameters.networkSessionKey(16), loRa.activationParameters.deviceAddress(4), 
 38254 ;;		 -> loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), NULL(0), loRa.activationPar
      +ameters.mcastApplicationSessionKey(16), 
 38255 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 38256 ;;		 -> loRa(231), 
 38257 ;;  d               2    6[BANK0 ] PTR unsigned char 
 38258 ;;		 -> RadioConfiguration(54), AESCmac@x(16), AESEncodeLoRa@useKey(16), ComputeMic@mic(4), 
 38259 ;;		 -> ExtractMic@mic(4), aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@computedMic(4), 
 38260 ;;		 -> Channels(144), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(8), macBuffer(27
      +1), 
 38261 ;;		 -> loRa.activationParameters(105), loRa(231), 
 38262 ;;  tmp             1   10[BANK0 ] unsigned char 
 38263 ;; Return value:  Size  Location     Type
 38264 ;;                  2    0[BANK0 ] PTR void 
 38265 ;; Registers used:
 38266 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 38267 ;; Tracked objects:
 38268 ;;		On entry : 0/0
 38269 ;;		On exit  : 0/0
 38270 ;;		Unchanged: 0/0
 38271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38272 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38273 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38275 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38276 ;;Total ram usage:       11 bytes
 38277 ;; Hardware stack levels used:    1
 38278 ;; Hardware stack levels required when called:    7
 38279 ;; This function calls:
 38280 ;;		Nothing
 38281 ;; This function is called by:
 38282 ;;		_LORAWAN_SetDeviceEui
 38283 ;;		_LORAWAN_SetApplicationEui
 38284 ;;		_LORAWAN_SetApplicationKey
 38285 ;;		_LORAWAN_RxDone
 38286 ;;		_AssemblePacket
 38287 ;;		_PrepareJoinRequestFrame
 38288 ;;		_PrepareSessionKeys
 38289 ;;		_AssembleEncryptionBlock
 38290 ;;		_ExtractMic
 38291 ;;		_ComputeMic
 38292 ;;		_AESEncodeLoRa
 38293 ;;		_AESCmac
 38294 ;;		_InitDefault915Channels
 38295 ;;		_LORAWAN_SetMcastNetworkSessionKey
 38296 ;;		_LORAWAN_SetMcastApplicationSessionKey
 38297 ;;		_LORAWAN_GetMcastApplicationSessionKey
 38298 ;;		_LORAWAN_GetMcastNetworkSessionKey
 38299 ;;		_LORAWAN_GetDeviceEui
 38300 ;;		_LORAWAN_GetApplicationEui
 38301 ;;		_LORAWAN_SetNetworkSessionKey
 38302 ;;		_LORAWAN_GetNetworkSessionKey
 38303 ;;		_LORAWAN_SetApplicationSessionKey
 38304 ;;		_LORAWAN_GetApplicationSessionKey
 38305 ;;		_LORAWAN_GetApplicationKey
 38306 ;;		_RADIO_GetData
 38307 ;;		_RADIO_SetFSKSyncWord
 38308 ;;		_RADIO_GetFSKSyncWord
 38309 ;; This function uses a non-reentrant model
 38310 ;;
 38311                           
 38312                           	psect	text189
 38313  0000'                    __ptext189:
 38314                           	opt stack 0
 38315  0000'                    _memcpy:
 38316                           	opt stack 22
 38317                           
 38318                           ; BSR set to: 0
 38319                           ;incstack = 0
 38320  0000' C002' F008'        	movff	memcpy@s1,memcpy@s
 38321  0004' C003' F009'        	movff	memcpy@s1+1,memcpy@s+1
 38322  0008' C000' F006'        	movff	memcpy@d1,memcpy@d
 38323  000C' C001' F007'        	movff	memcpy@d1+1,memcpy@d+1
 38324  0010' D01D               	goto	l3058
 38325  0012'                    l8200:
 38326  0012' C008' FFF6         	movff	memcpy@s,tblptrl
 38327  0016' C009' FFF7         	movff	memcpy@s+1,tblptrh
 38328  001A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 38329  001C' 6EF8               	movwf	tblptru,c
 38330  001E' 0EFF'              	movlw	(high __ramtop+-1)
 38331  0020' 64F7               	cpfsgt	tblptrh,c
 38332  0022' D003               	bra	u7057
 38333  0024' 0008               	tblrd		*
 38334  0026' 50F5               	movf	tablat,w,c
 38335  0028' D005               	bra	u7050
 38336  002A'                    u7057:
 38337  002A' CFF6 FFE9          	movff	tblptrl,fsr0l
 38338  002E' CFF7 FFEA          	movff	tblptrh,fsr0h
 38339  0032' 50EF               	movf	indf0,w,c
 38340  0034'                    u7050:
 38341  0034' 0100               	movlb	0	; () banked
 38342  0036' 6F00'              	movwf	memcpy@tmp& (0+255),b
 38343                           
 38344                           ; BSR set to: 0
 38345  0038' 4B00'              	infsnz	memcpy@s& (0+255),f,b
 38346  003A' 2B00'              	incf	(memcpy@s+1)& (0+255),f,b
 38347                           
 38348                           ; BSR set to: 0
 38349  003C' C006' FFD9         	movff	memcpy@d,fsr2l
 38350  0040' C007' FFDA         	movff	memcpy@d+1,fsr2h
 38351  0044' C00A' FFDF         	movff	memcpy@tmp,indf2
 38352                           
 38353                           ; BSR set to: 0
 38354  0048' 4B00'              	infsnz	memcpy@d& (0+255),f,b
 38355  004A' 2B00'              	incf	(memcpy@d+1)& (0+255),f,b
 38356  004C'                    l3058:
 38357                           
 38358                           ; BSR set to: 0
 38359  004C' 0100               	movlb	0	; () banked
 38360  004E' 0700'              	decf	memcpy@n& (0+255),f,b
 38361  0050' A0D8               	btfss	status,0,c
 38362  0052' 0700'              	decf	(memcpy@n+1)& (0+255),f,b
 38363  0054' 2900'              	incf	memcpy@n& (0+255),w,b
 38364  0056' E1DD               	bnz	l8200
 38365  0058' 2900'              	incf	(memcpy@n+1)& (0+255),w,b
 38366  005A' B4D8               	btfsc	status,2,c
 38367  005C' 0012               	return	
 38368  005E' D7D9               	goto	l3059
 38369  0060'                    __end_of_memcpy:
 38370                           	opt stack 0
 38371                           tosu	equ	0xFFF
 38372                           tosh	equ	0xFFE
 38373                           tosl	equ	0xFFD
 38374                           pclath	equ	0xFFA
 38375                           tblptru	equ	0xFF8
 38376                           tblptrh	equ	0xFF7
 38377                           tblptrl	equ	0xFF6
 38378                           tablat	equ	0xFF5
 38379                           prodh	equ	0xFF4
 38380                           prodl	equ	0xFF3
 38381                           intcon	equ	0xFF2
 38382                           intcon2	equ	0xFF1
 38383                           intcon3	equ	0xFF0
 38384                           indf0	equ	0xFEF
 38385                           postinc0	equ	0xFEE
 38386                           plusw0	equ	0xFEB
 38387                           fsr0h	equ	0xFEA
 38388                           fsr0l	equ	0xFE9
 38389                           wreg	equ	0xFE8
 38390                           postinc1	equ	0xFE6
 38391                           postdec1	equ	0xFE5
 38392                           plusw1	equ	0xFE3
 38393                           fsr1h	equ	0xFE2
 38394                           fsr1l	equ	0xFE1
 38395                           indf2	equ	0xFDF
 38396                           postinc2	equ	0xFDE
 38397                           postdec2	equ	0xFDD
 38398                           plusw2	equ	0xFDB
 38399                           fsr2h	equ	0xFDA
 38400                           fsr2l	equ	0xFD9
 38401                           status	equ	0xFD8
 38402                           
 38403 ;; *************** function _CreateAllSoftwareTimers *****************
 38404 ;; Defined at:
 38405 ;;		line 789 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 38406 ;; Parameters:    Size  Location     Type
 38407 ;;		None
 38408 ;; Auto vars:     Size  Location     Type
 38409 ;;		None
 38410 ;; Return value:  Size  Location     Type
 38411 ;;                  1    wreg      void 
 38412 ;; Registers used:
 38413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38414 ;; Tracked objects:
 38415 ;;		On entry : 0/0
 38416 ;;		On exit  : 0/0
 38417 ;;		Unchanged: 0/0
 38418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38423 ;;Total ram usage:        0 bytes
 38424 ;; Hardware stack levels used:    1
 38425 ;; Hardware stack levels required when called:    8
 38426 ;; This function calls:
 38427 ;;		_SwTimerCreate
 38428 ;; This function is called by:
 38429 ;;		_LORAWAN_Init
 38430 ;; This function uses a non-reentrant model
 38431 ;;
 38432                           
 38433                           	psect	text190
 38434  0000'                    __ptext190:
 38435                           	opt stack 0
 38436  0000'                    _CreateAllSoftwareTimers:
 38437                           	opt stack 21
 38438                           
 38439                           ;lorawan_na.c: 791: loRa.joinAccept1TimerId = SwTimerCreate();
 38440                           
 38441                           ; BSR set to: 0
 38442                           ;incstack = 0
 38443  0000' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38444  0004' 0102               	movlb	2	; () banked
 38445  0006' 6F00'              	movwf	(_loRa+211)& (0+255),b
 38446                           
 38447                           ;lorawan_na.c: 792: loRa.joinAccept2TimerId = SwTimerCreate();
 38448  0008' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38449  000C' 0102               	movlb	2	; () banked
 38450  000E' 6F00'              	movwf	(_loRa+212)& (0+255),b
 38451                           
 38452                           ;lorawan_na.c: 793: loRa.receiveWindow1TimerId = SwTimerCreate();
 38453  0010' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38454  0014' 0102               	movlb	2	; () banked
 38455  0016' 6F00'              	movwf	(_loRa+213)& (0+255),b
 38456                           
 38457                           ;lorawan_na.c: 794: loRa.receiveWindow2TimerId = SwTimerCreate();
 38458  0018' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38459  001C' 0102               	movlb	2	; () banked
 38460  001E' 6F00'              	movwf	(_loRa+214)& (0+255),b
 38461                           
 38462                           ;lorawan_na.c: 795: loRa.linkCheckTimerId = SwTimerCreate();
 38463  0020' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38464  0024' 0102               	movlb	2	; () banked
 38465  0026' 6F00'              	movwf	(_loRa+216)& (0+255),b
 38466                           
 38467                           ;lorawan_na.c: 796: loRa.ackTimeoutTimerId = SwTimerCreate();
 38468  0028' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38469  002C' 0102               	movlb	2	; () banked
 38470  002E' 6F00'              	movwf	(_loRa+217)& (0+255),b
 38471                           
 38472                           ;lorawan_na.c: 797: loRa.automaticReplyTimerId = SwTimerCreate();
 38473  0030' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38474  0034' 0102               	movlb	2	; () banked
 38475  0036' 6F00'              	movwf	(_loRa+215)& (0+255),b
 38476                           
 38477                           ;lorawan_na.c: 798: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 38478  0038' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38479  003C' 0102               	movlb	2	; () banked
 38480  003E' 6F00'              	movwf	(_loRa+219)& (0+255),b
 38481                           
 38482                           ;lorawan_na.c: 799: loRa.abpJoinTimerId = SwTimerCreate();
 38483  0040' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38484  0044' 0102               	movlb	2	; () banked
 38485  0046' 6F00'              	movwf	(_loRa+228)& (0+255),b
 38486                           
 38487                           ;lorawan_na.c: 800: loRa.transmissionErrorTimerId = SwTimerCreate();
 38488  0048' EC00' F000'        	call	_SwTimerCreate	;wreg free
 38489  004C' 0102               	movlb	2	; () banked
 38490  004E' 6F00'              	movwf	(_loRa+229)& (0+255),b
 38491                           
 38492                           ; BSR set to: 2
 38493  0050' 0012               	return		;funcret
 38494  0052'                    __end_of_CreateAllSoftwareTimers:
 38495                           	opt stack 0
 38496                           tosu	equ	0xFFF
 38497                           tosh	equ	0xFFE
 38498                           tosl	equ	0xFFD
 38499                           pclath	equ	0xFFA
 38500                           tblptru	equ	0xFF8
 38501                           tblptrh	equ	0xFF7
 38502                           tblptrl	equ	0xFF6
 38503                           tablat	equ	0xFF5
 38504                           prodh	equ	0xFF4
 38505                           prodl	equ	0xFF3
 38506                           intcon	equ	0xFF2
 38507                           intcon2	equ	0xFF1
 38508                           intcon3	equ	0xFF0
 38509                           indf0	equ	0xFEF
 38510                           postinc0	equ	0xFEE
 38511                           plusw0	equ	0xFEB
 38512                           fsr0h	equ	0xFEA
 38513                           fsr0l	equ	0xFE9
 38514                           wreg	equ	0xFE8
 38515                           postinc1	equ	0xFE6
 38516                           postdec1	equ	0xFE5
 38517                           plusw1	equ	0xFE3
 38518                           fsr1h	equ	0xFE2
 38519                           fsr1l	equ	0xFE1
 38520                           indf2	equ	0xFDF
 38521                           postinc2	equ	0xFDE
 38522                           postdec2	equ	0xFDD
 38523                           plusw2	equ	0xFDB
 38524                           fsr2h	equ	0xFDA
 38525                           fsr2l	equ	0xFD9
 38526                           status	equ	0xFD8
 38527                           
 38528 ;; *************** function _SwTimerCreate *****************
 38529 ;; Defined at:
 38530 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 38531 ;; Parameters:    Size  Location     Type
 38532 ;;		None
 38533 ;; Auto vars:     Size  Location     Type
 38534 ;;  retVal          1    0[BANK0 ] unsigned char 
 38535 ;; Return value:  Size  Location     Type
 38536 ;;                  1    wreg      unsigned char 
 38537 ;; Registers used:
 38538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 38539 ;; Tracked objects:
 38540 ;;		On entry : 0/0
 38541 ;;		On exit  : 0/0
 38542 ;;		Unchanged: 0/0
 38543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38548 ;;Total ram usage:        1 bytes
 38549 ;; Hardware stack levels used:    1
 38550 ;; Hardware stack levels required when called:    7
 38551 ;; This function calls:
 38552 ;;		Nothing
 38553 ;; This function is called by:
 38554 ;;		_CreateAllSoftwareTimers
 38555 ;;		_RADIO_Init
 38556 ;; This function uses a non-reentrant model
 38557 ;;
 38558                           
 38559                           	psect	text191
 38560  0000'                    __ptext191:
 38561                           	opt stack 0
 38562  0000'                    _SwTimerCreate:
 38563                           	opt stack 21
 38564                           
 38565                           ;sw_timer.c: 156: uint8_t retVal;
 38566                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 38567                           
 38568                           ; BSR set to: 2
 38569                           ;incstack = 0
 38570  0000' 0E14               	movlw	20
 38571  0002' 0100               	movlb	0	; () banked
 38572  0004' 6100'              	cpfslt	_allocatedTimers& (0+255),b	;volatile
 38573  0006' D03E               	goto	l1126
 38574                           
 38575                           ; BSR set to: 0
 38576                           ;sw_timer.c: 158: {
 38577                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 38578  0008' 9EF2               	bcf	intcon,7,c	;volatile
 38579                           
 38580                           ;sw_timer.c: 160: retVal = allocatedTimers;
 38581  000A' C004' F000'        	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 38582                           
 38583                           ; BSR set to: 0
 38584                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 38585  000E' 5100'              	movf	SwTimerCreate@retVal& (0+255),w,b
 38586  0010' 0D08               	mullw	8
 38587  0012' 0E04               	movlw	4
 38588  0014' 26F3               	addwf	prodl,f,c
 38589  0016' 0E00               	movlw	0
 38590  0018' 22F4               	addwfc	prodh,f,c
 38591  001A' 0E00'              	movlw	low _swTimers
 38592  001C' 24F3               	addwf	prodl,w,c
 38593  001E' 6ED9               	movwf	fsr2l,c
 38594  0020' 0E00'              	movlw	high _swTimers
 38595  0022' 20F4               	addwfc	prodh,w,c
 38596  0024' 6EDA               	movwf	fsr2h,c
 38597  0026' 0E00               	movlw	0
 38598  0028' 6EDF               	movwf	indf2,c
 38599                           
 38600                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 38601  002A' 5100'              	movf	SwTimerCreate@retVal& (0+255),w,b
 38602  002C' 0D08               	mullw	8
 38603  002E' 0E00'              	movlw	low _swTimers
 38604  0030' 24F3               	addwf	prodl,w,c
 38605  0032' 6ED9               	movwf	fsr2l,c
 38606  0034' 0E00'              	movlw	high _swTimers
 38607  0036' 20F4               	addwfc	prodh,w,c
 38608  0038' 6EDA               	movwf	fsr2h,c
 38609  003A' 6ADE               	clrf	postinc2,c
 38610  003C' 6ADE               	clrf	postinc2,c
 38611  003E' 6ADE               	clrf	postinc2,c
 38612  0040' 6ADD               	clrf	postdec2,c
 38613                           
 38614                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 38615  0042' 5100'              	movf	SwTimerCreate@retVal& (0+255),w,b
 38616  0044' 0D08               	mullw	8
 38617  0046' 0E05               	movlw	5
 38618  0048' 26F3               	addwf	prodl,f,c
 38619  004A' 0E00               	movlw	0
 38620  004C' 22F4               	addwfc	prodh,f,c
 38621  004E' 0E00'              	movlw	low _swTimers
 38622  0050' 24F3               	addwf	prodl,w,c
 38623  0052' 6ED9               	movwf	fsr2l,c
 38624  0054' 0E00'              	movlw	high _swTimers
 38625  0056' 20F4               	addwfc	prodh,w,c
 38626  0058' 6EDA               	movwf	fsr2h,c
 38627  005A' 0E00               	movlw	0
 38628  005C' 6EDF               	movwf	indf2,c
 38629                           
 38630                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 38631  005E' 5100'              	movf	SwTimerCreate@retVal& (0+255),w,b
 38632  0060' 0D08               	mullw	8
 38633  0062' 0E06               	movlw	6
 38634  0064' 26F3               	addwf	prodl,f,c
 38635  0066' 0E00               	movlw	0
 38636  0068' 22F4               	addwfc	prodh,f,c
 38637  006A' 0E00'              	movlw	low _swTimers
 38638  006C' 24F3               	addwf	prodl,w,c
 38639  006E' 6ED9               	movwf	fsr2l,c
 38640  0070' 0E00'              	movlw	high _swTimers
 38641  0072' 20F4               	addwfc	prodh,w,c
 38642  0074' 6EDA               	movwf	fsr2h,c
 38643  0076' 0E00               	movlw	0
 38644  0078' 6EDE               	movwf	postinc2,c
 38645  007A' 0E00               	movlw	0
 38646  007C' 6EDD               	movwf	postdec2,c
 38647                           
 38648                           ; BSR set to: 0
 38649                           ;sw_timer.c: 165: allocatedTimers++;
 38650  007E' 2B00'              	incf	_allocatedTimers& (0+255),f,b	;volatile
 38651                           
 38652                           ; BSR set to: 0
 38653                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 38654  0080' 8EF2               	bsf	intcon,7,c	;volatile
 38655                           
 38656                           ;sw_timer.c: 167: }
 38657  0082' D001               	goto	l1130
 38658  0084'                    l1126:
 38659                           
 38660                           ;sw_timer.c: 171: {
 38661                           
 38662                           ; BSR set to: 0
 38663                           ;sw_timer.c: 168: else
 38664                           ;sw_timer.c: 169: {
 38665                           ;sw_timer.c: 170: while(1)
 38666  0084' D7FF               	goto	l1126
 38667  0086'                    l1130:
 38668                           
 38669                           ;sw_timer.c: 175: }
 38670                           ;sw_timer.c: 176: }
 38671                           ;sw_timer.c: 177: return retVal;
 38672  0086' 0100               	movlb	0	; () banked
 38673  0088' 5100'              	movf	SwTimerCreate@retVal& (0+255),w,b
 38674  008A' 0012               	return	
 38675  008C'                    __end_of_SwTimerCreate:
 38676                           	opt stack 0
 38677                           tosu	equ	0xFFF
 38678                           tosh	equ	0xFFE
 38679                           tosl	equ	0xFFD
 38680                           pclath	equ	0xFFA
 38681                           tblptru	equ	0xFF8
 38682                           tblptrh	equ	0xFF7
 38683                           tblptrl	equ	0xFF6
 38684                           tablat	equ	0xFF5
 38685                           prodh	equ	0xFF4
 38686                           prodl	equ	0xFF3
 38687                           intcon	equ	0xFF2
 38688                           intcon2	equ	0xFF1
 38689                           intcon3	equ	0xFF0
 38690                           indf0	equ	0xFEF
 38691                           postinc0	equ	0xFEE
 38692                           plusw0	equ	0xFEB
 38693                           fsr0h	equ	0xFEA
 38694                           fsr0l	equ	0xFE9
 38695                           wreg	equ	0xFE8
 38696                           postinc1	equ	0xFE6
 38697                           postdec1	equ	0xFE5
 38698                           plusw1	equ	0xFE3
 38699                           fsr1h	equ	0xFE2
 38700                           fsr1l	equ	0xFE1
 38701                           indf2	equ	0xFDF
 38702                           postinc2	equ	0xFDE
 38703                           postdec2	equ	0xFDD
 38704                           plusw2	equ	0xFDB
 38705                           fsr2h	equ	0xFDA
 38706                           fsr2l	equ	0xFD9
 38707                           status	equ	0xFD8
 38708                           
 38709 ;; *************** function _LORAWAN_GetFrequency *****************
 38710 ;; Defined at:
 38711 ;;		line 227 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 38712 ;; Parameters:    Size  Location     Type
 38713 ;;  channelId       1    wreg     unsigned char 
 38714 ;; Auto vars:     Size  Location     Type
 38715 ;;  channelId       1   91[BANK0 ] unsigned char 
 38716 ;;  result          4   87[BANK0 ] unsigned long 
 38717 ;; Return value:  Size  Location     Type
 38718 ;;                  4   83[BANK0 ] unsigned long 
 38719 ;; Registers used:
 38720 ;;		wreg, status,2, status,0, cstack
 38721 ;; Tracked objects:
 38722 ;;		On entry : 0/0
 38723 ;;		On exit  : 0/0
 38724 ;;		Unchanged: 0/0
 38725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38726 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38727 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38729 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38730 ;;Total ram usage:        9 bytes
 38731 ;; Hardware stack levels used:    1
 38732 ;; Hardware stack levels required when called:    9
 38733 ;; This function calls:
 38734 ;;		_GenerateUSFrequency1
 38735 ;;		_GenerateUSFrequency2
 38736 ;; This function is called by:
 38737 ;;		_main
 38738 ;; This function uses a non-reentrant model
 38739 ;;
 38740                           
 38741                           	psect	text192
 38742  0000'                    __ptext192:
 38743                           	opt stack 0
 38744  0000'                    _LORAWAN_GetFrequency:
 38745                           	opt stack 21
 38746                           
 38747                           ; BSR set to: 0
 38748                           ;incstack = 0
 38749                           ;LORAWAN_GetFrequency@channelId stored from wreg
 38750  0000' 0100               	movlb	0	; () banked
 38751  0002' 6F00'              	movwf	LORAWAN_GetFrequency@channelId& (0+255),b
 38752                           
 38753                           ;lorawan_na.c: 229: uint32_t result = 0;
 38754  0004' 0E00               	movlw	0
 38755  0006' 0100               	movlb	0	; () banked
 38756  0008' 6F00'              	movwf	LORAWAN_GetFrequency@result& (0+255),b
 38757  000A' 0E00               	movlw	0
 38758  000C' 6F00'              	movwf	(LORAWAN_GetFrequency@result+1)& (0+255),b
 38759  000E' 0E00               	movlw	0
 38760  0010' 6F00'              	movwf	(LORAWAN_GetFrequency@result+2)& (0+255),b
 38761  0012' 0E00               	movlw	0
 38762  0014' 6F00'              	movwf	(LORAWAN_GetFrequency@result+3)& (0+255),b
 38763                           
 38764                           ; BSR set to: 0
 38765                           ;lorawan_na.c: 231: if (channelId < 64)
 38766  0016' 0E40               	movlw	64
 38767  0018' 6100'              	cpfslt	LORAWAN_GetFrequency@channelId& (0+255),b
 38768  001A' D00C               	goto	l1401
 38769                           
 38770                           ; BSR set to: 0
 38771                           ;lorawan_na.c: 232: {
 38772                           ;lorawan_na.c: 233: result = GenerateUSFrequency1 (channelId);
 38773  001C' 5100'              	movf	LORAWAN_GetFrequency@channelId& (0+255),w,b
 38774  001E' EC00' F000'        	call	_GenerateUSFrequency1
 38775  0022' C046' F057'        	movff	?_GenerateUSFrequency1,LORAWAN_GetFrequency@result
 38776  0026' C047' F058'        	movff	?_GenerateUSFrequency1+1,LORAWAN_GetFrequency@result+1
 38777  002A' C048' F059'        	movff	?_GenerateUSFrequency1+2,LORAWAN_GetFrequency@result+2
 38778  002E' C049' F05A'        	movff	?_GenerateUSFrequency1+3,LORAWAN_GetFrequency@result+3
 38779                           
 38780                           ;lorawan_na.c: 234: }
 38781  0032' D014               	goto	l1403
 38782  0034'                    l1401:
 38783                           
 38784                           ;lorawan_na.c: 235: else if ( (channelId < loRa.maxChannels) && (channelId >= 64) )
 38785  0034' 0102               	movlb	2	; () banked
 38786  0036' 5100'              	movf	(_loRa+222)& (0+255),w,b
 38787  0038' 0100               	movlb	0	; () banked
 38788  003A' 5D00'              	subwf	LORAWAN_GetFrequency@channelId& (0+255),w,b
 38789  003C' B0D8               	btfsc	status,0,c
 38790  003E' D00E               	goto	l1403
 38791                           
 38792                           ; BSR set to: 0
 38793  0040' 0E3F               	movlw	63
 38794  0042' 6500'              	cpfsgt	LORAWAN_GetFrequency@channelId& (0+255),b
 38795  0044' D00B               	goto	l1403
 38796                           
 38797                           ; BSR set to: 0
 38798                           ;lorawan_na.c: 236: {
 38799                           ;lorawan_na.c: 237: result = GenerateUSFrequency2 (channelId);
 38800  0046' 5100'              	movf	LORAWAN_GetFrequency@channelId& (0+255),w,b
 38801  0048' EC00' F000'        	call	_GenerateUSFrequency2
 38802  004C' C046' F057'        	movff	?_GenerateUSFrequency2,LORAWAN_GetFrequency@result
 38803  0050' C047' F058'        	movff	?_GenerateUSFrequency2+1,LORAWAN_GetFrequency@result+1
 38804  0054' C048' F059'        	movff	?_GenerateUSFrequency2+2,LORAWAN_GetFrequency@result+2
 38805  0058' C049' F05A'        	movff	?_GenerateUSFrequency2+3,LORAWAN_GetFrequency@result+3
 38806  005C'                    l1403:
 38807                           
 38808                           ;lorawan_na.c: 238: }
 38809                           ;lorawan_na.c: 240: return result;
 38810  005C' C057' F053'        	movff	LORAWAN_GetFrequency@result,?_LORAWAN_GetFrequency
 38811  0060' C058' F054'        	movff	LORAWAN_GetFrequency@result+1,?_LORAWAN_GetFrequency+1
 38812  0064' C059' F055'        	movff	LORAWAN_GetFrequency@result+2,?_LORAWAN_GetFrequency+2
 38813  0068' C05A' F056'        	movff	LORAWAN_GetFrequency@result+3,?_LORAWAN_GetFrequency+3
 38814  006C' 0012               	return	
 38815  006E'                    __end_of_LORAWAN_GetFrequency:
 38816                           	opt stack 0
 38817                           tosu	equ	0xFFF
 38818                           tosh	equ	0xFFE
 38819                           tosl	equ	0xFFD
 38820                           pclath	equ	0xFFA
 38821                           tblptru	equ	0xFF8
 38822                           tblptrh	equ	0xFF7
 38823                           tblptrl	equ	0xFF6
 38824                           tablat	equ	0xFF5
 38825                           prodh	equ	0xFF4
 38826                           prodl	equ	0xFF3
 38827                           intcon	equ	0xFF2
 38828                           intcon2	equ	0xFF1
 38829                           intcon3	equ	0xFF0
 38830                           indf0	equ	0xFEF
 38831                           postinc0	equ	0xFEE
 38832                           plusw0	equ	0xFEB
 38833                           fsr0h	equ	0xFEA
 38834                           fsr0l	equ	0xFE9
 38835                           wreg	equ	0xFE8
 38836                           postinc1	equ	0xFE6
 38837                           postdec1	equ	0xFE5
 38838                           plusw1	equ	0xFE3
 38839                           fsr1h	equ	0xFE2
 38840                           fsr1l	equ	0xFE1
 38841                           indf2	equ	0xFDF
 38842                           postinc2	equ	0xFDE
 38843                           postdec2	equ	0xFDD
 38844                           plusw2	equ	0xFDB
 38845                           fsr2h	equ	0xFDA
 38846                           fsr2l	equ	0xFD9
 38847                           status	equ	0xFD8
 38848                           
 38849 ;; *************** function _GenerateUSFrequency2 *****************
 38850 ;; Defined at:
 38851 ;;		line 987 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 38852 ;; Parameters:    Size  Location     Type
 38853 ;;  channelIndex    1    wreg     unsigned char 
 38854 ;; Auto vars:     Size  Location     Type
 38855 ;;  channelIndex    1   82[BANK0 ] unsigned char 
 38856 ;;  channelFrequ    4   78[BANK0 ] unsigned long 
 38857 ;; Return value:  Size  Location     Type
 38858 ;;                  4   70[BANK0 ] unsigned long 
 38859 ;; Registers used:
 38860 ;;		wreg, status,2, status,0, cstack
 38861 ;; Tracked objects:
 38862 ;;		On entry : 0/0
 38863 ;;		On exit  : 0/0
 38864 ;;		Unchanged: 0/0
 38865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38867 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38869 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38870 ;;Total ram usage:       13 bytes
 38871 ;; Hardware stack levels used:    1
 38872 ;; Hardware stack levels required when called:    8
 38873 ;; This function calls:
 38874 ;;		___lmul
 38875 ;; This function is called by:
 38876 ;;		_LORAWAN_GetFrequency
 38877 ;;		_ExecuteNewChannel
 38878 ;;		_SelectChannelForTransmission
 38879 ;; This function uses a non-reentrant model
 38880 ;;
 38881                           
 38882                           	psect	text193
 38883  0000'                    __ptext193:
 38884                           	opt stack 0
 38885  0000'                    _GenerateUSFrequency2:
 38886                           	opt stack 20
 38887                           
 38888                           ;incstack = 0
 38889                           ;GenerateUSFrequency2@channelIndex stored from wreg
 38890  0000' 0100               	movlb	0	; () banked
 38891  0002' 6F00'              	movwf	GenerateUSFrequency2@channelIndex& (0+255),b
 38892                           
 38893                           ;lorawan_na.c: 989: uint32_t channelFrequency;
 38894                           ;lorawan_na.c: 991: channelFrequency = (915900000) + 1600000 * (channelIndex - 64);
 38895  0004' 0EC0               	movlw	192
 38896  0006' 0100               	movlb	0	; () banked
 38897  0008' 6F00'              	movwf	??_GenerateUSFrequency2& (0+255),b
 38898  000A' 0EFF               	movlw	255
 38899  000C' 6F00'              	movwf	(??_GenerateUSFrequency2+1)& (0+255),b
 38900  000E' 5100'              	movf	GenerateUSFrequency2@channelIndex& (0+255),w,b
 38901  0010' 6F00'              	movwf	(??_GenerateUSFrequency2+2)& (0+255),b
 38902  0012' 6B00'              	clrf	(??_GenerateUSFrequency2+3)& (0+255),b
 38903  0014' 5100'              	movf	??_GenerateUSFrequency2& (0+255),w,b
 38904  0016' 2700'              	addwf	(??_GenerateUSFrequency2+2)& (0+255),f,b
 38905  0018' 5100'              	movf	(??_GenerateUSFrequency2+1)& (0+255),w,b
 38906  001A' 2300'              	addwfc	(??_GenerateUSFrequency2+3)& (0+255),f,b
 38907  001C' C04C' F03A'        	movff	??_GenerateUSFrequency2+2,___lmul@multiplier
 38908  0020' C04D' F03B'        	movff	??_GenerateUSFrequency2+3,___lmul@multiplier+1
 38909  0024' 0E00               	movlw	0
 38910  0026' BF00'              	btfsc	(___lmul@multiplier+1)& (0+255),7,b
 38911  0028' 0EFF               	movlw	-1
 38912  002A' 6F00'              	movwf	(___lmul@multiplier+2)& (0+255),b
 38913  002C' 6F00'              	movwf	(___lmul@multiplier+3)& (0+255),b
 38914  002E' 0E00               	movlw	0
 38915  0030' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 38916  0032' 0E6A               	movlw	106
 38917  0034' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 38918  0036' 0E18               	movlw	24
 38919  0038' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 38920  003A' 0E00               	movlw	0
 38921  003C' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 38922  003E' EC00' F000'        	call	___lmul	;wreg free
 38923  0042' 0E60               	movlw	96
 38924  0044' 0100               	movlb	0	; () banked
 38925  0046' 2500'              	addwf	?___lmul& (0+255),w,b
 38926  0048' 6F00'              	movwf	GenerateUSFrequency2@channelFrequency& (0+255),b
 38927  004A' 0E86               	movlw	134
 38928  004C' 2100'              	addwfc	(?___lmul+1)& (0+255),w,b
 38929  004E' 6F00'              	movwf	(GenerateUSFrequency2@channelFrequency+1)& (0+255),b
 38930  0050' 0E97               	movlw	151
 38931  0052' 2100'              	addwfc	(?___lmul+2)& (0+255),w,b
 38932  0054' 6F00'              	movwf	(GenerateUSFrequency2@channelFrequency+2)& (0+255),b
 38933  0056' 0E36               	movlw	54
 38934  0058' 2100'              	addwfc	(?___lmul+3)& (0+255),w,b
 38935  005A' 6F00'              	movwf	(GenerateUSFrequency2@channelFrequency+3)& (0+255),b
 38936                           
 38937                           ; BSR set to: 0
 38938                           ;lorawan_na.c: 992: return channelFrequency;
 38939  005C' C04E' F046'        	movff	GenerateUSFrequency2@channelFrequency,?_GenerateUSFrequency2
 38940  0060' C04F' F047'        	movff	GenerateUSFrequency2@channelFrequency+1,?_GenerateUSFrequency2+1
 38941  0064' C050' F048'        	movff	GenerateUSFrequency2@channelFrequency+2,?_GenerateUSFrequency2+2
 38942  0068' C051' F049'        	movff	GenerateUSFrequency2@channelFrequency+3,?_GenerateUSFrequency2+3
 38943  006C' 0012               	return	
 38944  006E'                    __end_of_GenerateUSFrequency2:
 38945                           	opt stack 0
 38946                           tosu	equ	0xFFF
 38947                           tosh	equ	0xFFE
 38948                           tosl	equ	0xFFD
 38949                           pclath	equ	0xFFA
 38950                           tblptru	equ	0xFF8
 38951                           tblptrh	equ	0xFF7
 38952                           tblptrl	equ	0xFF6
 38953                           tablat	equ	0xFF5
 38954                           prodh	equ	0xFF4
 38955                           prodl	equ	0xFF3
 38956                           intcon	equ	0xFF2
 38957                           intcon2	equ	0xFF1
 38958                           intcon3	equ	0xFF0
 38959                           indf0	equ	0xFEF
 38960                           postinc0	equ	0xFEE
 38961                           plusw0	equ	0xFEB
 38962                           fsr0h	equ	0xFEA
 38963                           fsr0l	equ	0xFE9
 38964                           wreg	equ	0xFE8
 38965                           postinc1	equ	0xFE6
 38966                           postdec1	equ	0xFE5
 38967                           plusw1	equ	0xFE3
 38968                           fsr1h	equ	0xFE2
 38969                           fsr1l	equ	0xFE1
 38970                           indf2	equ	0xFDF
 38971                           postinc2	equ	0xFDE
 38972                           postdec2	equ	0xFDD
 38973                           plusw2	equ	0xFDB
 38974                           fsr2h	equ	0xFDA
 38975                           fsr2l	equ	0xFD9
 38976                           status	equ	0xFD8
 38977                           
 38978 ;; *************** function _GenerateUSFrequency1 *****************
 38979 ;; Defined at:
 38980 ;;		line 978 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 38981 ;; Parameters:    Size  Location     Type
 38982 ;;  channelIndex    1    wreg     unsigned char 
 38983 ;; Auto vars:     Size  Location     Type
 38984 ;;  channelIndex    1   78[BANK0 ] unsigned char 
 38985 ;;  channelFrequ    4   74[BANK0 ] unsigned long 
 38986 ;; Return value:  Size  Location     Type
 38987 ;;                  4   70[BANK0 ] unsigned long 
 38988 ;; Registers used:
 38989 ;;		wreg, status,2, status,0, cstack
 38990 ;; Tracked objects:
 38991 ;;		On entry : 0/0
 38992 ;;		On exit  : 0/0
 38993 ;;		Unchanged: 0/0
 38994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38995 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38996 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38998 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38999 ;;Total ram usage:        9 bytes
 39000 ;; Hardware stack levels used:    1
 39001 ;; Hardware stack levels required when called:    8
 39002 ;; This function calls:
 39003 ;;		___lmul
 39004 ;; This function is called by:
 39005 ;;		_LORAWAN_GetFrequency
 39006 ;;		_ExecuteNewChannel
 39007 ;;		_SelectChannelForTransmission
 39008 ;; This function uses a non-reentrant model
 39009 ;;
 39010                           
 39011                           	psect	text194
 39012  0000'                    __ptext194:
 39013                           	opt stack 0
 39014  0000'                    _GenerateUSFrequency1:
 39015                           	opt stack 20
 39016                           
 39017                           ; BSR set to: 0
 39018                           ;incstack = 0
 39019                           ;GenerateUSFrequency1@channelIndex stored from wreg
 39020  0000' 0100               	movlb	0	; () banked
 39021  0002' 6F00'              	movwf	GenerateUSFrequency1@channelIndex& (0+255),b
 39022                           
 39023                           ;lorawan_na.c: 980: uint32_t channelFrequency;
 39024                           ;lorawan_na.c: 982: channelFrequency = (915200000) + 200000 * channelIndex;
 39025  0004' 0100               	movlb	0	; () banked
 39026  0006' 5100'              	movf	GenerateUSFrequency1@channelIndex& (0+255),w,b
 39027  0008' 6F00'              	movwf	___lmul@multiplier& (0+255),b
 39028  000A' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
 39029  000C' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 39030  000E' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 39031  0010' 0E40               	movlw	64
 39032  0012' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 39033  0014' 0E0D               	movlw	13
 39034  0016' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 39035  0018' 0E03               	movlw	3
 39036  001A' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 39037  001C' 0E00               	movlw	0
 39038  001E' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 39039  0020' EC00' F000'        	call	___lmul	;wreg free
 39040  0024' 0E00               	movlw	0
 39041  0026' 0100               	movlb	0	; () banked
 39042  0028' 2500'              	addwf	?___lmul& (0+255),w,b
 39043  002A' 6F00'              	movwf	GenerateUSFrequency1@channelFrequency& (0+255),b
 39044  002C' 0ED8               	movlw	216
 39045  002E' 2100'              	addwfc	(?___lmul+1)& (0+255),w,b
 39046  0030' 6F00'              	movwf	(GenerateUSFrequency1@channelFrequency+1)& (0+255),b
 39047  0032' 0E8C               	movlw	140
 39048  0034' 2100'              	addwfc	(?___lmul+2)& (0+255),w,b
 39049  0036' 6F00'              	movwf	(GenerateUSFrequency1@channelFrequency+2)& (0+255),b
 39050  0038' 0E36               	movlw	54
 39051  003A' 2100'              	addwfc	(?___lmul+3)& (0+255),w,b
 39052  003C' 6F00'              	movwf	(GenerateUSFrequency1@channelFrequency+3)& (0+255),b
 39053                           
 39054                           ; BSR set to: 0
 39055                           ;lorawan_na.c: 983: return channelFrequency;
 39056  003E' C04A' F046'        	movff	GenerateUSFrequency1@channelFrequency,?_GenerateUSFrequency1
 39057  0042' C04B' F047'        	movff	GenerateUSFrequency1@channelFrequency+1,?_GenerateUSFrequency1+1
 39058  0046' C04C' F048'        	movff	GenerateUSFrequency1@channelFrequency+2,?_GenerateUSFrequency1+2
 39059  004A' C04D' F049'        	movff	GenerateUSFrequency1@channelFrequency+3,?_GenerateUSFrequency1+3
 39060  004E' 0012               	return	
 39061  0050'                    __end_of_GenerateUSFrequency1:
 39062                           	opt stack 0
 39063                           tosu	equ	0xFFF
 39064                           tosh	equ	0xFFE
 39065                           tosl	equ	0xFFD
 39066                           pclath	equ	0xFFA
 39067                           tblptru	equ	0xFF8
 39068                           tblptrh	equ	0xFF7
 39069                           tblptrl	equ	0xFF6
 39070                           tablat	equ	0xFF5
 39071                           prodh	equ	0xFF4
 39072                           prodl	equ	0xFF3
 39073                           intcon	equ	0xFF2
 39074                           intcon2	equ	0xFF1
 39075                           intcon3	equ	0xFF0
 39076                           indf0	equ	0xFEF
 39077                           postinc0	equ	0xFEE
 39078                           plusw0	equ	0xFEB
 39079                           fsr0h	equ	0xFEA
 39080                           fsr0l	equ	0xFE9
 39081                           wreg	equ	0xFE8
 39082                           postinc1	equ	0xFE6
 39083                           postdec1	equ	0xFE5
 39084                           plusw1	equ	0xFE3
 39085                           fsr1h	equ	0xFE2
 39086                           fsr1l	equ	0xFE1
 39087                           indf2	equ	0xFDF
 39088                           postinc2	equ	0xFDE
 39089                           postdec2	equ	0xFDD
 39090                           plusw2	equ	0xFDB
 39091                           fsr2h	equ	0xFDA
 39092                           fsr2l	equ	0xFD9
 39093                           status	equ	0xFD8
 39094                           
 39095 ;; *************** function ___lmul *****************
 39096 ;; Defined at:
 39097 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 39098 ;; Parameters:    Size  Location     Type
 39099 ;;  multiplier      4   58[BANK0 ] unsigned long 
 39100 ;;  multiplicand    4   62[BANK0 ] unsigned long 
 39101 ;; Auto vars:     Size  Location     Type
 39102 ;;  product         4   66[BANK0 ] unsigned long 
 39103 ;; Return value:  Size  Location     Type
 39104 ;;                  4   58[BANK0 ] unsigned long 
 39105 ;; Registers used:
 39106 ;;		wreg, status,2, status,0
 39107 ;; Tracked objects:
 39108 ;;		On entry : 0/0
 39109 ;;		On exit  : 0/0
 39110 ;;		Unchanged: 0/0
 39111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39112 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39113 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39115 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39116 ;;Total ram usage:       12 bytes
 39117 ;; Hardware stack levels used:    1
 39118 ;; Hardware stack levels required when called:    7
 39119 ;; This function calls:
 39120 ;;		Nothing
 39121 ;; This function is called by:
 39122 ;;		_LORAWAN_LinkCheckConfigure
 39123 ;;		_ExecuteNewChannel
 39124 ;;		_ExecuteRxParamSetupReq
 39125 ;;		_GenerateUSFrequency1
 39126 ;;		_GenerateUSFrequency2
 39127 ;;		_GenerateUSFrequencyReception
 39128 ;;		_RADIO_WriteConfiguration
 39129 ;;		_RADIO_TxDone
 39130 ;;		_RADIO_FSKPacketSent
 39131 ;;		_rand
 39132 ;;		_LORAWAN_Pause
 39133 ;; This function uses a non-reentrant model
 39134 ;;
 39135                           
 39136                           	psect	text195
 39137  0000'                    __ptext195:
 39138                           	opt stack 0
 39139  0000'                    ___lmul:
 39140                           	opt stack 18
 39141                           
 39142                           ; BSR set to: 0
 39143                           ;incstack = 0
 39144  0000' 0E00               	movlw	0
 39145  0002' 0100               	movlb	0	; () banked
 39146  0004' 6F00'              	movwf	___lmul@product& (0+255),b
 39147  0006' 0E00               	movlw	0
 39148  0008' 6F00'              	movwf	(___lmul@product+1)& (0+255),b
 39149  000A' 0E00               	movlw	0
 39150  000C' 6F00'              	movwf	(___lmul@product+2)& (0+255),b
 39151  000E' 0E00               	movlw	0
 39152  0010' 6F00'              	movwf	(___lmul@product+3)& (0+255),b
 39153  0012'                    
 39154                           ; BSR set to: 0
 39155                           
 39156                           ; BSR set to: 0
 39157  0012' A100'              	btfss	___lmul@multiplier& (0+255),0,b
 39158  0014' D008               	goto	l2638
 39159                           
 39160                           ; BSR set to: 0
 39161  0016' 5100'              	movf	___lmul@multiplicand& (0+255),w,b
 39162  0018' 2700'              	addwf	___lmul@product& (0+255),f,b
 39163  001A' 5100'              	movf	(___lmul@multiplicand+1)& (0+255),w,b
 39164  001C' 2300'              	addwfc	(___lmul@product+1)& (0+255),f,b
 39165  001E' 5100'              	movf	(___lmul@multiplicand+2)& (0+255),w,b
 39166  0020' 2300'              	addwfc	(___lmul@product+2)& (0+255),f,b
 39167  0022' 5100'              	movf	(___lmul@multiplicand+3)& (0+255),w,b
 39168  0024' 2300'              	addwfc	(___lmul@product+3)& (0+255),f,b
 39169  0026'                    l2638:
 39170                           
 39171                           ; BSR set to: 0
 39172                           
 39173                           ; BSR set to: 0
 39174  0026' 90D8               	bcf	status,0,c
 39175  0028' 3700'              	rlcf	___lmul@multiplicand& (0+255),f,b
 39176  002A' 3700'              	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 39177  002C' 3700'              	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 39178  002E' 3700'              	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 39179                           
 39180                           ; BSR set to: 0
 39181  0030' 90D8               	bcf	status,0,c
 39182  0032' 3300'              	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 39183  0034' 3300'              	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 39184  0036' 3300'              	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 39185  0038' 3300'              	rrcf	___lmul@multiplier& (0+255),f,b
 39186  003A' 5100'              	movf	___lmul@multiplier& (0+255),w,b
 39187  003C' 1100'              	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 39188  003E' 1100'              	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 39189  0040' 1100'              	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 39190  0042' A4D8               	btfss	status,2,c
 39191  0044' D7E6               	goto	l2637
 39192                           
 39193                           ; BSR set to: 0
 39194  0046' C042' F03A'        	movff	___lmul@product,?___lmul
 39195  004A' C043' F03B'        	movff	___lmul@product+1,?___lmul+1
 39196  004E' C044' F03C'        	movff	___lmul@product+2,?___lmul+2
 39197  0052' C045' F03D'        	movff	___lmul@product+3,?___lmul+3
 39198                           
 39199                           ; BSR set to: 0
 39200  0056' 0012               	return		;funcret
 39201  0058'                    __end_of___lmul:
 39202                           	opt stack 0
 39203                           tosu	equ	0xFFF
 39204                           tosh	equ	0xFFE
 39205                           tosl	equ	0xFFD
 39206                           pclath	equ	0xFFA
 39207                           tblptru	equ	0xFF8
 39208                           tblptrh	equ	0xFF7
 39209                           tblptrl	equ	0xFF6
 39210                           tablat	equ	0xFF5
 39211                           prodh	equ	0xFF4
 39212                           prodl	equ	0xFF3
 39213                           intcon	equ	0xFF2
 39214                           intcon2	equ	0xFF1
 39215                           intcon3	equ	0xFF0
 39216                           indf0	equ	0xFEF
 39217                           postinc0	equ	0xFEE
 39218                           plusw0	equ	0xFEB
 39219                           fsr0h	equ	0xFEA
 39220                           fsr0l	equ	0xFE9
 39221                           wreg	equ	0xFE8
 39222                           postinc1	equ	0xFE6
 39223                           postdec1	equ	0xFE5
 39224                           plusw1	equ	0xFE3
 39225                           fsr1h	equ	0xFE2
 39226                           fsr1l	equ	0xFE1
 39227                           indf2	equ	0xFDF
 39228                           postinc2	equ	0xFDE
 39229                           postdec2	equ	0xFDD
 39230                           plusw2	equ	0xFDB
 39231                           fsr2h	equ	0xFDA
 39232                           fsr2l	equ	0xFD9
 39233                           status	equ	0xFD8
 39234                           
 39235 ;; *************** function _LORAWAN_GetChannelIdStatus *****************
 39236 ;; Defined at:
 39237 ;;		line 286 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 39238 ;; Parameters:    Size  Location     Type
 39239 ;;  channelId       1    wreg     unsigned char 
 39240 ;; Auto vars:     Size  Location     Type
 39241 ;;  channelId       1    3[BANK0 ] unsigned char 
 39242 ;;  result          1    2[BANK0 ] unsigned char 
 39243 ;; Return value:  Size  Location     Type
 39244 ;;                  1    wreg      unsigned char 
 39245 ;; Registers used:
 39246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39247 ;; Tracked objects:
 39248 ;;		On entry : 0/0
 39249 ;;		On exit  : 0/0
 39250 ;;		Unchanged: 0/0
 39251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39256 ;;Total ram usage:        2 bytes
 39257 ;; Hardware stack levels used:    1
 39258 ;; Hardware stack levels required when called:    8
 39259 ;; This function calls:
 39260 ;;		_ValidateChannelId
 39261 ;; This function is called by:
 39262 ;;		_main
 39263 ;; This function uses a non-reentrant model
 39264 ;;
 39265                           
 39266                           	psect	text196
 39267  0000'                    __ptext196:
 39268                           	opt stack 0
 39269  0000'                    _LORAWAN_GetChannelIdStatus:
 39270                           	opt stack 22
 39271                           
 39272                           ; BSR set to: 0
 39273                           ;incstack = 0
 39274                           ;LORAWAN_GetChannelIdStatus@channelId stored from wreg
 39275  0000' 0100               	movlb	0	; () banked
 39276  0002' 6F00'              	movwf	LORAWAN_GetChannelIdStatus@channelId& (0+255),b
 39277                           
 39278                           ;lorawan_na.c: 288: bool result = 0;
 39279  0004' 0E00               	movlw	0
 39280  0006' 0100               	movlb	0	; () banked
 39281  0008' 6F00'              	movwf	LORAWAN_GetChannelIdStatus@result& (0+255),b
 39282                           
 39283                           ; BSR set to: 0
 39284                           ;lorawan_na.c: 290: if (ValidateChannelId (channelId) == OK)
 39285  000A' 5100'              	movf	LORAWAN_GetChannelIdStatus@channelId& (0+255),w,b
 39286  000C' EC00' F000'        	call	_ValidateChannelId
 39287  0010' 0900               	iorlw	0
 39288  0012' A4D8               	btfss	status,2,c
 39289  0014' D00B               	goto	l1421
 39290                           
 39291                           ;lorawan_na.c: 291: {
 39292                           ;lorawan_na.c: 292: result = Channels[channelId].status;
 39293  0016' 0100               	movlb	0	; () banked
 39294  0018' 5100'              	movf	LORAWAN_GetChannelIdStatus@channelId& (0+255),w,b
 39295  001A' 0D02               	mullw	2
 39296  001C' 0E00'              	movlw	low _Channels
 39297  001E' 24F3               	addwf	prodl,w,c
 39298  0020' 6ED9               	movwf	fsr2l,c
 39299  0022' 0E00'              	movlw	high _Channels
 39300  0024' 20F4               	addwfc	prodh,w,c
 39301  0026' 6EDA               	movwf	fsr2h,c
 39302  0028' 50DF               	movf	indf2,w,c
 39303  002A' 6F00'              	movwf	LORAWAN_GetChannelIdStatus@result& (0+255),b
 39304  002C'                    l1421:
 39305                           
 39306                           ;lorawan_na.c: 293: }
 39307                           ;lorawan_na.c: 294: return result;
 39308                           
 39309                           ; BSR set to: 0
 39310  002C' 0100               	movlb	0	; () banked
 39311  002E' 5100'              	movf	LORAWAN_GetChannelIdStatus@result& (0+255),w,b
 39312  0030' 0012               	return	
 39313  0032'                    __end_of_LORAWAN_GetChannelIdStatus:
 39314                           	opt stack 0
 39315                           tosu	equ	0xFFF
 39316                           tosh	equ	0xFFE
 39317                           tosl	equ	0xFFD
 39318                           pclath	equ	0xFFA
 39319                           tblptru	equ	0xFF8
 39320                           tblptrh	equ	0xFF7
 39321                           tblptrl	equ	0xFF6
 39322                           tablat	equ	0xFF5
 39323                           prodh	equ	0xFF4
 39324                           prodl	equ	0xFF3
 39325                           intcon	equ	0xFF2
 39326                           intcon2	equ	0xFF1
 39327                           intcon3	equ	0xFF0
 39328                           indf0	equ	0xFEF
 39329                           postinc0	equ	0xFEE
 39330                           plusw0	equ	0xFEB
 39331                           fsr0h	equ	0xFEA
 39332                           fsr0l	equ	0xFE9
 39333                           wreg	equ	0xFE8
 39334                           postinc1	equ	0xFE6
 39335                           postdec1	equ	0xFE5
 39336                           plusw1	equ	0xFE3
 39337                           fsr1h	equ	0xFE2
 39338                           fsr1l	equ	0xFE1
 39339                           indf2	equ	0xFDF
 39340                           postinc2	equ	0xFDE
 39341                           postdec2	equ	0xFDD
 39342                           plusw2	equ	0xFDB
 39343                           fsr2h	equ	0xFDA
 39344                           fsr2l	equ	0xFD9
 39345                           status	equ	0xFD8
 39346                           
 39347 ;; *************** function _ValidateChannelId *****************
 39348 ;; Defined at:
 39349 ;;		line 898 in file "mcc_generated_files/LoRaWAN/lorawan_na.c"
 39350 ;; Parameters:    Size  Location     Type
 39351 ;;  channelId       1    wreg     unsigned char 
 39352 ;; Auto vars:     Size  Location     Type
 39353 ;;  channelId       1    0[BANK0 ] unsigned char 
 39354 ;;  result          1    1[BANK0 ] enum E7249
 39355 ;; Return value:  Size  Location     Type
 39356 ;;                  1    wreg      enum E7249
 39357 ;; Registers used:
 39358 ;;		wreg, status,2, status,0
 39359 ;; Tracked objects:
 39360 ;;		On entry : 0/0
 39361 ;;		On exit  : 0/0
 39362 ;;		Unchanged: 0/0
 39363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39368 ;;Total ram usage:        2 bytes
 39369 ;; Hardware stack levels used:    1
 39370 ;; Hardware stack levels required when called:    7
 39371 ;; This function calls:
 39372 ;;		Nothing
 39373 ;; This function is called by:
 39374 ;;		_LORAWAN_SetChannelIdStatus
 39375 ;;		_LORAWAN_GetChannelIdStatus
 39376 ;;		_ExecuteNewChannel
 39377 ;;		_LORAWAN_GetDataRange
 39378 ;; This function uses a non-reentrant model
 39379 ;;
 39380                           
 39381                           	psect	text197
 39382  0000'                    __ptext197:
 39383                           	opt stack 0
 39384  0000'                    _ValidateChannelId:
 39385                           	opt stack 17
 39386                           
 39387                           ; BSR set to: 0
 39388                           ;incstack = 0
 39389                           ;ValidateChannelId@channelId stored from wreg
 39390  0000' 0100               	movlb	0	; () banked
 39391  0002' 6F00'              	movwf	ValidateChannelId@channelId& (0+255),b
 39392                           
 39393                           ;lorawan_na.c: 900: LorawanError_t result = OK;
 39394  0004' 0E00               	movlw	0
 39395  0006' 0100               	movlb	0	; () banked
 39396  0008' 6F00'              	movwf	ValidateChannelId@result& (0+255),b
 39397                           
 39398                           ; BSR set to: 0
 39399                           ;lorawan_na.c: 902: if (channelId >= loRa.maxChannels)
 39400  000A' 0102               	movlb	2	; () banked
 39401  000C' 5100'              	movf	(_loRa+222)& (0+255),w,b
 39402  000E' 0100               	movlb	0	; () banked
 39403  0010' 5D00'              	subwf	ValidateChannelId@channelId& (0+255),w,b
 39404  0012' A0D8               	btfss	status,0,c
 39405  0014' D002               	goto	l1602
 39406                           
 39407                           ; BSR set to: 0
 39408                           ;lorawan_na.c: 903: {
 39409                           ;lorawan_na.c: 904: result = INVALID_PARAMETER ;
 39410  0016' 0E03               	movlw	3
 39411  0018' 6F00'              	movwf	ValidateChannelId@result& (0+255),b
 39412  001A'                    l1602:
 39413                           
 39414                           ; BSR set to: 0
 39415                           ;lorawan_na.c: 905: }
 39416                           ;lorawan_na.c: 907: return result;
 39417  001A' 5100'              	movf	ValidateChannelId@result& (0+255),w,b
 39418  001C' 0012               	return	
 39419  001E'                    __end_of_ValidateChannelId:
 39420                           	opt stack 0
 39421                           tosu	equ	0xFFF
 39422                           tosh	equ	0xFFE
 39423                           tosl	equ	0xFFD
 39424                           pclath	equ	0xFFA
 39425                           tblptru	equ	0xFF8
 39426                           tblptrh	equ	0xFF7
 39427                           tblptrl	equ	0xFF6
 39428                           tablat	equ	0xFF5
 39429                           prodh	equ	0xFF4
 39430                           prodl	equ	0xFF3
 39431                           intcon	equ	0xFF2
 39432                           intcon2	equ	0xFF1
 39433                           intcon3	equ	0xFF0
 39434                           indf0	equ	0xFEF
 39435                           postinc0	equ	0xFEE
 39436                           plusw0	equ	0xFEB
 39437                           fsr0h	equ	0xFEA
 39438                           fsr0l	equ	0xFE9
 39439                           wreg	equ	0xFE8
 39440                           postinc1	equ	0xFE6
 39441                           postdec1	equ	0xFE5
 39442                           plusw1	equ	0xFE3
 39443                           fsr1h	equ	0xFE2
 39444                           fsr1l	equ	0xFE1
 39445                           indf2	equ	0xFDF
 39446                           postinc2	equ	0xFDE
 39447                           postdec2	equ	0xFDD
 39448                           plusw2	equ	0xFDB
 39449                           fsr2h	equ	0xFDA
 39450                           fsr2l	equ	0xFD9
 39451                           status	equ	0xFD8
 39452                           
 39453 ;; *************** function _INTERRUPT_InterruptManager *****************
 39454 ;; Defined at:
 39455 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 39456 ;; Parameters:    Size  Location     Type
 39457 ;;		None
 39458 ;; Auto vars:     Size  Location     Type
 39459 ;;		None
 39460 ;; Return value:  Size  Location     Type
 39461 ;;                  1    wreg      void 
 39462 ;; Registers used:
 39463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 39464 ;; Tracked objects:
 39465 ;;		On entry : 0/0
 39466 ;;		On exit  : 0/0
 39467 ;;		Unchanged: 0/0
 39468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39471 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39473 ;;Total ram usage:        8 bytes
 39474 ;; Hardware stack levels used:    1
 39475 ;; Hardware stack levels required when called:    6
 39476 ;; This function calls:
 39477 ;;		_INT1_ISR
 39478 ;;		_INT2_ISR
 39479 ;;		_PIN_MANAGER_IOC
 39480 ;;		_TMR1_ISR
 39481 ;; This function is called by:
 39482 ;;		Interrupt level 2
 39483 ;; This function uses a non-reentrant model
 39484 ;;
 39485                           
 39486                           	psect	intcode
 39487  0000'                    __pintcode:
 39488                           	opt stack 0
 39489  0000'                    _INTERRUPT_InterruptManager:
 39490                           	opt stack 12
 39491                           
 39492                           ; BSR set to: 0
 39493                           ;incstack = 0
 39494  0000' CFFA F033'         	movff	pclath,??_INTERRUPT_InterruptManager
 39495  0004' CFFB F034'         	movff	pclatu,??_INTERRUPT_InterruptManager+1
 39496  0008' CFE1 F035'         	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 39497  000C' CFE2 F036'         	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 39498  0010' CFD9 F037'         	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 39499  0014' CFDA F038'         	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 39500  0018' CFF3 F039'         	movff	prodl,??_INTERRUPT_InterruptManager+6
 39501  001C' CFF4 F03A'         	movff	prodh,??_INTERRUPT_InterruptManager+7
 39502  0020' EE10' F000'        	lfsr	1,___inthi_sp
 39503                           
 39504                           ;interrupt_manager.c: 61: if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
 39505  0024' B6F0               	btfsc	intcon3,3,c	;volatile
 39506  0026' A0F0               	btfss	intcon3,0,c	;volatile
 39507  0028' D003               	goto	i2l2366
 39508                           
 39509                           ;interrupt_manager.c: 62: {
 39510                           ;interrupt_manager.c: 63: INT1_ISR();
 39511  002A' EC00' F000'        	call	_INT1_ISR	;wreg free
 39512                           
 39513                           ;interrupt_manager.c: 64: }
 39514  002E' D012               	goto	i2l2373
 39515  0030'                    i2l2366:
 39516                           
 39517                           ;interrupt_manager.c: 65: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
 39518  0030' B8F0               	btfsc	intcon3,4,c	;volatile
 39519  0032' A2F0               	btfss	intcon3,1,c	;volatile
 39520  0034' D003               	goto	i2l2368
 39521                           
 39522                           ;interrupt_manager.c: 66: {
 39523                           ;interrupt_manager.c: 67: INT2_ISR();
 39524  0036' EC00' F000'        	call	_INT2_ISR	;wreg free
 39525                           
 39526                           ;interrupt_manager.c: 68: }
 39527  003A' D00C               	goto	i2l2373
 39528  003C'                    i2l2368:
 39529                           
 39530                           ;interrupt_manager.c: 69: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 39531  003C' B6F2               	btfsc	intcon,3,c	;volatile
 39532  003E' A0F2               	btfss	intcon,0,c	;volatile
 39533  0040' D003               	goto	i2l2370
 39534                           
 39535                           ;interrupt_manager.c: 70: {
 39536                           ;interrupt_manager.c: 71: PIN_MANAGER_IOC();
 39537  0042' EC00' F000'        	call	_PIN_MANAGER_IOC	;wreg free
 39538                           
 39539                           ;interrupt_manager.c: 72: }
 39540  0046' D006               	goto	i2l2373
 39541  0048'                    i2l2370:
 39542                           
 39543                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1)
 39544  0048' BCF2               	btfsc	intcon,6,c	;volatile
 39545                           
 39546                           ;interrupt_manager.c: 74: {
 39547                           ;interrupt_manager.c: 75: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 39548  004A' A09D               	btfss	3997,0,c	;volatile
 39549  004C' D003               	goto	i2l2373
 39550  004E' B09E               	btfsc	3998,0,c	;volatile
 39551                           
 39552                           ;interrupt_manager.c: 76: {
 39553                           ;interrupt_manager.c: 77: TMR1_ISR();
 39554  0050' EC00' F000'        	call	_TMR1_ISR	;wreg free
 39555  0054'                    i2l2373:
 39556                           
 39557                           ;interrupt_manager.c: 84: else
 39558                           ;interrupt_manager.c: 85: {
 39559                           
 39560                           ;interrupt_manager.c: 82: }
 39561                           ;interrupt_manager.c: 83: }
 39562                           
 39563                           ;interrupt_manager.c: 79: else
 39564                           ;interrupt_manager.c: 80: {
 39565  0054' C03A' FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 39566  0058' C039' FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 39567  005C' C038' FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 39568  0060' C037' FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 39569  0064' C036' FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 39570  0068' C035' FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 39571  006C' C034' FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 39572  0070' C033' FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 39573  0074' 0011               	retfie		f
 39574  0076'                    __end_of_INTERRUPT_InterruptManager:
 39575                           	opt stack 0
 39576                           tosu	equ	0xFFF
 39577                           tosh	equ	0xFFE
 39578                           tosl	equ	0xFFD
 39579                           pclatu	equ	0xFFB
 39580                           pclath	equ	0xFFA
 39581                           tblptru	equ	0xFF8
 39582                           tblptrh	equ	0xFF7
 39583                           tblptrl	equ	0xFF6
 39584                           tablat	equ	0xFF5
 39585                           prodh	equ	0xFF4
 39586                           prodl	equ	0xFF3
 39587                           intcon	equ	0xFF2
 39588                           intcon2	equ	0xFF1
 39589                           intcon3	equ	0xFF0
 39590                           indf0	equ	0xFEF
 39591                           postinc0	equ	0xFEE
 39592                           plusw0	equ	0xFEB
 39593                           fsr0h	equ	0xFEA
 39594                           fsr0l	equ	0xFE9
 39595                           wreg	equ	0xFE8
 39596                           postinc1	equ	0xFE6
 39597                           postdec1	equ	0xFE5
 39598                           plusw1	equ	0xFE3
 39599                           fsr1h	equ	0xFE2
 39600                           fsr1l	equ	0xFE1
 39601                           indf2	equ	0xFDF
 39602                           postinc2	equ	0xFDE
 39603                           postdec2	equ	0xFDD
 39604                           plusw2	equ	0xFDB
 39605                           fsr2h	equ	0xFDA
 39606                           fsr2l	equ	0xFD9
 39607                           status	equ	0xFD8
 39608                           
 39609 ;; *************** function _TMR1_ISR *****************
 39610 ;; Defined at:
 39611 ;;		line 158 in file "mcc_generated_files/tmr1.c"
 39612 ;; Parameters:    Size  Location     Type
 39613 ;;		None
 39614 ;; Auto vars:     Size  Location     Type
 39615 ;;		None
 39616 ;; Return value:  Size  Location     Type
 39617 ;;                  1    wreg      void 
 39618 ;; Registers used:
 39619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 39620 ;; Tracked objects:
 39621 ;;		On entry : 0/0
 39622 ;;		On exit  : 0/0
 39623 ;;		Unchanged: 0/0
 39624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39629 ;;Total ram usage:        0 bytes
 39630 ;; Hardware stack levels used:    1
 39631 ;; Hardware stack levels required when called:    5
 39632 ;; This function calls:
 39633 ;;		_TMR1_CallBack
 39634 ;;		i2_TMR1_WriteTimer
 39635 ;; This function is called by:
 39636 ;;		_INTERRUPT_InterruptManager
 39637 ;; This function uses a non-reentrant model
 39638 ;;
 39639                           
 39640                           	psect	text199
 39641  0000'                    __ptext199:
 39642                           	opt stack 0
 39643  0000'                    _TMR1_ISR:
 39644                           	opt stack 12
 39645                           
 39646                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
 39647                           
 39648                           ;incstack = 0
 39649  0000' 909E               	bcf	3998,0,c	;volatile
 39650                           
 39651                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
 39652  0002' C00C' F000'        	movff	_timer1ReloadVal,i2TMR1_WriteTimer@timerVal	;volatile
 39653  0006' C00D' F001'        	movff	_timer1ReloadVal+1,i2TMR1_WriteTimer@timerVal+1	;volatile
 39654  000A' EC00' F000'        	call	i2_TMR1_WriteTimer	;wreg free
 39655                           
 39656                           ;tmr1.c: 167: TMR1_CallBack();
 39657  000E' EC00' F000'        	call	_TMR1_CallBack	;wreg free
 39658  0012' 0012               	return		;funcret
 39659  0014'                    __end_of_TMR1_ISR:
 39660                           	opt stack 0
 39661                           tosu	equ	0xFFF
 39662                           tosh	equ	0xFFE
 39663                           tosl	equ	0xFFD
 39664                           pclatu	equ	0xFFB
 39665                           pclath	equ	0xFFA
 39666                           tblptru	equ	0xFF8
 39667                           tblptrh	equ	0xFF7
 39668                           tblptrl	equ	0xFF6
 39669                           tablat	equ	0xFF5
 39670                           prodh	equ	0xFF4
 39671                           prodl	equ	0xFF3
 39672                           intcon	equ	0xFF2
 39673                           intcon2	equ	0xFF1
 39674                           intcon3	equ	0xFF0
 39675                           indf0	equ	0xFEF
 39676                           postinc0	equ	0xFEE
 39677                           plusw0	equ	0xFEB
 39678                           fsr0h	equ	0xFEA
 39679                           fsr0l	equ	0xFE9
 39680                           wreg	equ	0xFE8
 39681                           postinc1	equ	0xFE6
 39682                           postdec1	equ	0xFE5
 39683                           plusw1	equ	0xFE3
 39684                           fsr1h	equ	0xFE2
 39685                           fsr1l	equ	0xFE1
 39686                           indf2	equ	0xFDF
 39687                           postinc2	equ	0xFDE
 39688                           postdec2	equ	0xFDD
 39689                           plusw2	equ	0xFDB
 39690                           fsr2h	equ	0xFDA
 39691                           fsr2l	equ	0xFD9
 39692                           status	equ	0xFD8
 39693                           
 39694 ;; *************** function _TMR1_CallBack *****************
 39695 ;; Defined at:
 39696 ;;		line 170 in file "mcc_generated_files/tmr1.c"
 39697 ;; Parameters:    Size  Location     Type
 39698 ;;		None
 39699 ;; Auto vars:     Size  Location     Type
 39700 ;;		None
 39701 ;; Return value:  Size  Location     Type
 39702 ;;                  1    wreg      void 
 39703 ;; Registers used:
 39704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 39705 ;; Tracked objects:
 39706 ;;		On entry : 0/0
 39707 ;;		On exit  : 0/0
 39708 ;;		Unchanged: 0/0
 39709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39714 ;;Total ram usage:        0 bytes
 39715 ;; Hardware stack levels used:    1
 39716 ;; Hardware stack levels required when called:    4
 39717 ;; This function calls:
 39718 ;;		Absolute function
 39719 ;;		_TMR1_DefaultInterruptHandler
 39720 ;;		_TMR_ISR_lora
 39721 ;; This function is called by:
 39722 ;;		_TMR1_ISR
 39723 ;; This function uses a non-reentrant model
 39724 ;;
 39725                           
 39726                           	psect	text200
 39727  0000'                    __ptext200:
 39728                           	opt stack 0
 39729  0000'                    _TMR1_CallBack:
 39730                           	opt stack 12
 39731                           
 39732                           ;tmr1.c: 173: if(TMR1_InterruptHandler)
 39733                           
 39734                           ;incstack = 0
 39735  0000' 0101               	movlb	1	; () banked
 39736  0002' 5100'              	movf	_TMR1_InterruptHandler& (0+255),w,b
 39737  0004' 1100'              	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 39738  0006' B4D8               	btfsc	status,2,c
 39739  0008' 0012               	return	
 39740                           
 39741                           ; BSR set to: 1
 39742                           ;tmr1.c: 174: {
 39743                           ;tmr1.c: 175: TMR1_InterruptHandler();
 39744  000A' D801               	call	i2u1472_48
 39745  000C' 0012               	return	
 39746  000E'                    i2u1472_48:
 39747  000E' 0005               	push	
 39748  0010' 6EFA               	movwf	pclath,c
 39749  0012' 5100'              	movf	_TMR1_InterruptHandler& (0+255),w,b
 39750  0014' 6EFD               	movwf	tosl,c
 39751  0016' 5100'              	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 39752  0018' 6EFE               	movwf	tosh,c
 39753  001A' 6AFF               	clrf	tosu,c
 39754  001C' 50FA               	movf	pclath,w,c
 39755  001E' 0012               	return		;indir
 39756  0020'                    __end_of_TMR1_CallBack:
 39757                           	opt stack 0
 39758                           tosu	equ	0xFFF
 39759                           tosh	equ	0xFFE
 39760                           tosl	equ	0xFFD
 39761                           pclatu	equ	0xFFB
 39762                           pclath	equ	0xFFA
 39763                           tblptru	equ	0xFF8
 39764                           tblptrh	equ	0xFF7
 39765                           tblptrl	equ	0xFF6
 39766                           tablat	equ	0xFF5
 39767                           prodh	equ	0xFF4
 39768                           prodl	equ	0xFF3
 39769                           intcon	equ	0xFF2
 39770                           intcon2	equ	0xFF1
 39771                           intcon3	equ	0xFF0
 39772                           indf0	equ	0xFEF
 39773                           postinc0	equ	0xFEE
 39774                           plusw0	equ	0xFEB
 39775                           fsr0h	equ	0xFEA
 39776                           fsr0l	equ	0xFE9
 39777                           wreg	equ	0xFE8
 39778                           postinc1	equ	0xFE6
 39779                           postdec1	equ	0xFE5
 39780                           plusw1	equ	0xFE3
 39781                           fsr1h	equ	0xFE2
 39782                           fsr1l	equ	0xFE1
 39783                           indf2	equ	0xFDF
 39784                           postinc2	equ	0xFDE
 39785                           postdec2	equ	0xFDD
 39786                           plusw2	equ	0xFDB
 39787                           fsr2h	equ	0xFDA
 39788                           fsr2l	equ	0xFD9
 39789                           status	equ	0xFD8
 39790                           
 39791 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 39792 ;; Defined at:
 39793 ;;		line 183 in file "mcc_generated_files/tmr1.c"
 39794 ;; Parameters:    Size  Location     Type
 39795 ;;		None
 39796 ;; Auto vars:     Size  Location     Type
 39797 ;;		None
 39798 ;; Return value:  Size  Location     Type
 39799 ;;                  1    wreg      void 
 39800 ;; Registers used:
 39801 ;;		None
 39802 ;; Tracked objects:
 39803 ;;		On entry : 0/0
 39804 ;;		On exit  : 0/0
 39805 ;;		Unchanged: 0/0
 39806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39811 ;;Total ram usage:        0 bytes
 39812 ;; Hardware stack levels used:    1
 39813 ;; This function calls:
 39814 ;;		Nothing
 39815 ;; This function is called by:
 39816 ;;		_TMR1_Initialize
 39817 ;;		_TMR1_CallBack
 39818 ;; This function uses a non-reentrant model
 39819 ;;
 39820                           
 39821                           	psect	text201
 39822  0000'                    __ptext201:
 39823                           	opt stack 0
 39824  0000'                    _TMR1_DefaultInterruptHandler:
 39825                           	opt stack 15
 39826                           
 39827                           ;incstack = 0
 39828  0000' 0012               	return		;funcret
 39829  0002'                    __end_of_TMR1_DefaultInterruptHandler:
 39830                           	opt stack 0
 39831                           tosu	equ	0xFFF
 39832                           tosh	equ	0xFFE
 39833                           tosl	equ	0xFFD
 39834                           pclatu	equ	0xFFB
 39835                           pclath	equ	0xFFA
 39836                           tblptru	equ	0xFF8
 39837                           tblptrh	equ	0xFF7
 39838                           tblptrl	equ	0xFF6
 39839                           tablat	equ	0xFF5
 39840                           prodh	equ	0xFF4
 39841                           prodl	equ	0xFF3
 39842                           intcon	equ	0xFF2
 39843                           intcon2	equ	0xFF1
 39844                           intcon3	equ	0xFF0
 39845                           indf0	equ	0xFEF
 39846                           postinc0	equ	0xFEE
 39847                           plusw0	equ	0xFEB
 39848                           fsr0h	equ	0xFEA
 39849                           fsr0l	equ	0xFE9
 39850                           wreg	equ	0xFE8
 39851                           postinc1	equ	0xFE6
 39852                           postdec1	equ	0xFE5
 39853                           plusw1	equ	0xFE3
 39854                           fsr1h	equ	0xFE2
 39855                           fsr1l	equ	0xFE1
 39856                           indf2	equ	0xFDF
 39857                           postinc2	equ	0xFDE
 39858                           postdec2	equ	0xFDD
 39859                           plusw2	equ	0xFDB
 39860                           fsr2h	equ	0xFDA
 39861                           fsr2l	equ	0xFD9
 39862                           status	equ	0xFD8
 39863                           
 39864 ;; *************** function _TMR_ISR_lora *****************
 39865 ;; Defined at:
 39866 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 39867 ;; Parameters:    Size  Location     Type
 39868 ;;		None
 39869 ;; Auto vars:     Size  Location     Type
 39870 ;;		None
 39871 ;; Return value:  Size  Location     Type
 39872 ;;                  1    wreg      void 
 39873 ;; Registers used:
 39874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39875 ;; Tracked objects:
 39876 ;;		On entry : 0/0
 39877 ;;		On exit  : 0/0
 39878 ;;		Unchanged: 0/0
 39879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39882 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39884 ;;Total ram usage:        2 bytes
 39885 ;; Hardware stack levels used:    1
 39886 ;; Hardware stack levels required when called:    3
 39887 ;; This function calls:
 39888 ;;		i2_SwTimersInterrupt
 39889 ;;		i2_TMR_SwapTimer
 39890 ;; This function is called by:
 39891 ;;		_TMR_ISR_Lora_Init
 39892 ;;		_TMR1_CallBack
 39893 ;; This function uses a non-reentrant model
 39894 ;;
 39895                           
 39896                           	psect	text202
 39897  0000'                    __ptext202:
 39898                           	opt stack 0
 39899  0000'                    _TMR_ISR_lora:
 39900                           	opt stack 12
 39901                           
 39902                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 39903                           
 39904                           ;incstack = 0
 39905  0000' 0E01               	movlw	1
 39906  0002' 6E0A'              	movwf	_timerOverflow,c	;volatile
 39907                           
 39908                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 39909  0004' EC00' F000'        	call	i2_SwTimersInterrupt	;wreg free
 39910  0008' C020' F000'        	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 39911  000C' C021' F001'        	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 39912  0010' C022' F002'        	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 39913  0014' C023' F003'        	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 39914                           
 39915                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 39916  0018' 5003'              	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 39917  001A' E11C               	bnz	i2l1199
 39918  001C' 0402'              	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 39919  001E' B0D8               	btfsc	status,0,c
 39920  0020' 0012               	return	
 39921                           
 39922                           ;tmr_lora_addons.c: 66: {
 39923                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 39924  0022' C000' F031'        	movff	_ticksToScheduledInterrupt,??_TMR_ISR_lora	;volatile
 39925  0026' C001' F032'        	movff	_ticksToScheduledInterrupt+1,??_TMR_ISR_lora+1	;volatile
 39926  002A' 1E31'              	comf	??_TMR_ISR_lora,f,c
 39927  002C' 1E32'              	comf	??_TMR_ISR_lora+1,f,c
 39928  002E' 4A31'              	infsnz	??_TMR_ISR_lora,f,c
 39929  0030' 2A32'              	incf	??_TMR_ISR_lora+1,f,c
 39930  0032' C031' F008'        	movff	??_TMR_ISR_lora,_reloadVal	;volatile
 39931  0036' C032' F009'        	movff	??_TMR_ISR_lora+1,_reloadVal+1	;volatile
 39932                           
 39933                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 39934  003A' C008' F008'        	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 39935  003E' C009' F009'        	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 39936  0042' EC00' F000'        	call	i2_TMR_SwapTimer	;wreg free
 39937  0046' C008' F004'        	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 39938  004A' C009' F005'        	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 39939  004E' 6A06'              	clrf	_ticksAdded+2,c	;volatile
 39940  0050' 6A07'              	clrf	_ticksAdded+3,c	;volatile
 39941  0052' 0012               	return	
 39942  0054'                    i2l1199:
 39943  0054' 0012               	return		;funcret
 39944  0056'                    __end_of_TMR_ISR_lora:
 39945                           	opt stack 0
 39946                           tosu	equ	0xFFF
 39947                           tosh	equ	0xFFE
 39948                           tosl	equ	0xFFD
 39949                           pclatu	equ	0xFFB
 39950                           pclath	equ	0xFFA
 39951                           tblptru	equ	0xFF8
 39952                           tblptrh	equ	0xFF7
 39953                           tblptrl	equ	0xFF6
 39954                           tablat	equ	0xFF5
 39955                           prodh	equ	0xFF4
 39956                           prodl	equ	0xFF3
 39957                           intcon	equ	0xFF2
 39958                           intcon2	equ	0xFF1
 39959                           intcon3	equ	0xFF0
 39960                           indf0	equ	0xFEF
 39961                           postinc0	equ	0xFEE
 39962                           plusw0	equ	0xFEB
 39963                           fsr0h	equ	0xFEA
 39964                           fsr0l	equ	0xFE9
 39965                           wreg	equ	0xFE8
 39966                           postinc1	equ	0xFE6
 39967                           postdec1	equ	0xFE5
 39968                           plusw1	equ	0xFE3
 39969                           fsr1h	equ	0xFE2
 39970                           fsr1l	equ	0xFE1
 39971                           indf2	equ	0xFDF
 39972                           postinc2	equ	0xFDE
 39973                           postdec2	equ	0xFDD
 39974                           plusw2	equ	0xFDB
 39975                           fsr2h	equ	0xFDA
 39976                           fsr2l	equ	0xFD9
 39977                           status	equ	0xFD8
 39978                           
 39979 ;; *************** function i2_TMR_SwapTimer *****************
 39980 ;; Defined at:
 39981 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39982 ;; Parameters:    Size  Location     Type
 39983 ;;  timerVal        2    8[COMRAM] unsigned int 
 39984 ;; Auto vars:     Size  Location     Type
 39985 ;;		None
 39986 ;; Return value:  Size  Location     Type
 39987 ;;                  2    8[COMRAM] unsigned int 
 39988 ;; Registers used:
 39989 ;;		wreg, status,2, status,0, cstack
 39990 ;; Tracked objects:
 39991 ;;		On entry : 0/0
 39992 ;;		On exit  : 0/0
 39993 ;;		Unchanged: 0/0
 39994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39999 ;;Total ram usage:        2 bytes
 40000 ;; Hardware stack levels used:    1
 40001 ;; Hardware stack levels required when called:    1
 40002 ;; This function calls:
 40003 ;;		i2_TMR1_ReadTimer
 40004 ;;		i2_TMR1_WriteTimer
 40005 ;; This function is called by:
 40006 ;;		_TMR_ISR_lora
 40007 ;; This function uses a non-reentrant model
 40008 ;;
 40009                           
 40010                           	psect	text203
 40011  0000'                    __ptext203:
 40012                           	opt stack 0
 40013  0000'                    i2_TMR_SwapTimer:
 40014                           	opt stack 13
 40015                           
 40016                           ;sw_timer.c: 114: static uint16_t oldVal;
 40017                           ;sw_timer.c: 115: static uint16_t retVal;
 40018                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 40019                           
 40020                           ;incstack = 0
 40021  0000' EC00' F000'        	call	i2_TMR1_ReadTimer	;wreg free
 40022  0004' C000' F010'        	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 40023  0008' C001' F011'        	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 40024  000C'                    
 40025                           ;sw_timer.c: 123: ;
 40026  000C' EC00' F000'        	call	i2_TMR1_ReadTimer	;wreg free
 40027  0010' 0101               	movlb	1	; () banked
 40028  0012' 5100'              	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 40029  0014' 1800'              	xorwf	?i2_TMR1_ReadTimer,w,c
 40030  0016' E104               	bnz	i2l11010
 40031  0018' 5100'              	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 40032  001A' 1801'              	xorwf	?i2_TMR1_ReadTimer+1,w,c
 40033  001C' B4D8               	btfsc	status,2,c
 40034  001E' D7F6               	goto	i2l1112
 40035  0020'                    i2l11010:
 40036                           
 40037                           ; BSR set to: 1
 40038                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 40039  0020' C008' F000'        	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 40040  0024' C009' F001'        	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 40041  0028' EC00' F000'        	call	i2_TMR1_WriteTimer	;wreg free
 40042                           
 40043                           ;sw_timer.c: 128: oldVal++;
 40044  002C' 0101               	movlb	1	; () banked
 40045  002E' 4B00'              	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 40046  0030' 2B00'              	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 40047                           
 40048                           ; BSR set to: 1
 40049                           ;sw_timer.c: 130: retVal = oldVal;
 40050  0032' C010' F00E'        	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 40051  0036' C011' F00F'        	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 40052                           
 40053                           ; BSR set to: 1
 40054                           ;sw_timer.c: 132: return retVal;
 40055  003A' C00E' F008'        	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 40056  003E' C00F' F009'        	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 40057  0042' 0012               	return	
 40058  0044'                    __end_ofi2_TMR_SwapTimer:
 40059                           	opt stack 0
 40060                           tosu	equ	0xFFF
 40061                           tosh	equ	0xFFE
 40062                           tosl	equ	0xFFD
 40063                           pclatu	equ	0xFFB
 40064                           pclath	equ	0xFFA
 40065                           tblptru	equ	0xFF8
 40066                           tblptrh	equ	0xFF7
 40067                           tblptrl	equ	0xFF6
 40068                           tablat	equ	0xFF5
 40069                           prodh	equ	0xFF4
 40070                           prodl	equ	0xFF3
 40071                           intcon	equ	0xFF2
 40072                           intcon2	equ	0xFF1
 40073                           intcon3	equ	0xFF0
 40074                           indf0	equ	0xFEF
 40075                           postinc0	equ	0xFEE
 40076                           plusw0	equ	0xFEB
 40077                           fsr0h	equ	0xFEA
 40078                           fsr0l	equ	0xFE9
 40079                           wreg	equ	0xFE8
 40080                           postinc1	equ	0xFE6
 40081                           postdec1	equ	0xFE5
 40082                           plusw1	equ	0xFE3
 40083                           fsr1h	equ	0xFE2
 40084                           fsr1l	equ	0xFE1
 40085                           indf2	equ	0xFDF
 40086                           postinc2	equ	0xFDE
 40087                           postdec2	equ	0xFDD
 40088                           plusw2	equ	0xFDB
 40089                           fsr2h	equ	0xFDA
 40090                           fsr2l	equ	0xFD9
 40091                           status	equ	0xFD8
 40092                           
 40093 ;; *************** function i2_TMR1_WriteTimer *****************
 40094 ;; Defined at:
 40095 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 40096 ;; Parameters:    Size  Location     Type
 40097 ;;  timerVal        2    0[COMRAM] unsigned int 
 40098 ;; Auto vars:     Size  Location     Type
 40099 ;;		None
 40100 ;; Return value:  Size  Location     Type
 40101 ;;                  1    wreg      void 
 40102 ;; Registers used:
 40103 ;;		wreg, status,2
 40104 ;; Tracked objects:
 40105 ;;		On entry : 0/0
 40106 ;;		On exit  : 0/0
 40107 ;;		Unchanged: 0/0
 40108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40113 ;;Total ram usage:        2 bytes
 40114 ;; Hardware stack levels used:    1
 40115 ;; This function calls:
 40116 ;;		Nothing
 40117 ;; This function is called by:
 40118 ;;		_TMR1_ISR
 40119 ;;		i2_TMR_SwapTimer
 40120 ;; This function uses a non-reentrant model
 40121 ;;
 40122                           
 40123                           	psect	text204
 40124  0000'                    __ptext204:
 40125                           	opt stack 0
 40126  0000'                    i2_TMR1_WriteTimer:
 40127                           	opt stack 16
 40128                           
 40129                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 40130                           
 40131                           ; BSR set to: 1
 40132                           ;incstack = 0
 40133  0000' A4CD               	btfss	4045,2,c	;volatile
 40134  0002' D007               	goto	i2l2251
 40135                           
 40136                           ;tmr1.c: 124: {
 40137                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 40138  0004' 90CD               	bcf	4045,0,c	;volatile
 40139                           
 40140                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 40141  0006' 5001'              	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 40142  0008' 6ECF               	movwf	4047,c	;volatile
 40143                           
 40144                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 40145  000A' C000' FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 40146                           
 40147                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 40148  000E' 80CD               	bsf	4045,0,c	;volatile
 40149                           
 40150                           ;tmr1.c: 134: }
 40151  0010' 0012               	return	
 40152  0012'                    i2l2251:
 40153                           
 40154                           ;tmr1.c: 135: else
 40155                           ;tmr1.c: 136: {
 40156                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 40157  0012' 5001'              	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 40158  0014' 6ECF               	movwf	4047,c	;volatile
 40159                           
 40160                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 40161  0016' C000' FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 40162  001A' 0012               	return	
 40163  001C'                    __end_ofi2_TMR1_WriteTimer:
 40164                           	opt stack 0
 40165                           tosu	equ	0xFFF
 40166                           tosh	equ	0xFFE
 40167                           tosl	equ	0xFFD
 40168                           pclatu	equ	0xFFB
 40169                           pclath	equ	0xFFA
 40170                           tblptru	equ	0xFF8
 40171                           tblptrh	equ	0xFF7
 40172                           tblptrl	equ	0xFF6
 40173                           tablat	equ	0xFF5
 40174                           prodh	equ	0xFF4
 40175                           prodl	equ	0xFF3
 40176                           intcon	equ	0xFF2
 40177                           intcon2	equ	0xFF1
 40178                           intcon3	equ	0xFF0
 40179                           indf0	equ	0xFEF
 40180                           postinc0	equ	0xFEE
 40181                           plusw0	equ	0xFEB
 40182                           fsr0h	equ	0xFEA
 40183                           fsr0l	equ	0xFE9
 40184                           wreg	equ	0xFE8
 40185                           postinc1	equ	0xFE6
 40186                           postdec1	equ	0xFE5
 40187                           plusw1	equ	0xFE3
 40188                           fsr1h	equ	0xFE2
 40189                           fsr1l	equ	0xFE1
 40190                           indf2	equ	0xFDF
 40191                           postinc2	equ	0xFDE
 40192                           postdec2	equ	0xFDD
 40193                           plusw2	equ	0xFDB
 40194                           fsr2h	equ	0xFDA
 40195                           fsr2l	equ	0xFD9
 40196                           status	equ	0xFD8
 40197                           
 40198 ;; *************** function i2_SwTimersInterrupt *****************
 40199 ;; Defined at:
 40200 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40201 ;; Parameters:    Size  Location     Type
 40202 ;;		None
 40203 ;; Auto vars:     Size  Location     Type
 40204 ;;  SwTimersInte    4   44[COMRAM] unsigned long 
 40205 ;;  SwTimersInte    4   40[COMRAM] unsigned long 
 40206 ;;  SwTimersInte    1   48[COMRAM] unsigned char 
 40207 ;; Return value:  Size  Location     Type
 40208 ;;                  4   32[COMRAM] unsigned long 
 40209 ;; Registers used:
 40210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40211 ;; Tracked objects:
 40212 ;;		On entry : 0/0
 40213 ;;		On exit  : 0/0
 40214 ;;		Unchanged: 0/0
 40215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40217 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40218 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40219 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40220 ;;Total ram usage:       17 bytes
 40221 ;; Hardware stack levels used:    1
 40222 ;; Hardware stack levels required when called:    2
 40223 ;; This function calls:
 40224 ;;		i2_TMR_GetDeltaTime
 40225 ;; This function is called by:
 40226 ;;		_TMR_ISR_lora
 40227 ;; This function uses a non-reentrant model
 40228 ;;
 40229                           
 40230                           	psect	text205
 40231  0000'                    __ptext205:
 40232                           	opt stack 0
 40233  0000'                    i2_SwTimersInterrupt:
 40234                           	opt stack 12
 40235                           
 40236                           ;sw_timer.c: 289: uint8_t i;
 40237                           ;sw_timer.c: 290: uint32_t timeElapsed;
 40238                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 40239                           
 40240                           ;incstack = 0
 40241  0000' 682C'              	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 40242  0002' 682D'              	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 40243  0004' 682E'              	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 40244  0006' 682F'              	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 40245                           
 40246                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 40247  0008' EC00' F000'        	call	i2_TMR_GetDeltaTime	;wreg free
 40248  000C' C008' F028'        	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 40249  0010' C009' F029'        	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 40250  0014' C00A' F02A'        	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 40251  0018' C00B' F02B'        	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 40252                           
 40253                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 40254  001C' 0E00               	movlw	0
 40255  001E' 6E30'              	movwf	i2SwTimersInterrupt@i,c
 40256  0020' D061               	goto	i2l1169
 40257  0022'                    
 40258                           ;sw_timer.c: 298: {
 40259                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 40260  0022' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40261  0024' 0D08               	mullw	8
 40262  0026' 0E04               	movlw	4
 40263  0028' 26F3               	addwf	prodl,f,c
 40264  002A' 0E00               	movlw	0
 40265  002C' 22F4               	addwfc	prodh,f,c
 40266  002E' 0E00'              	movlw	low _swTimers
 40267  0030' 24F3               	addwf	prodl,w,c
 40268  0032' 6ED9               	movwf	fsr2l,c
 40269  0034' 0E00'              	movlw	high _swTimers
 40270  0036' 20F4               	addwfc	prodh,w,c
 40271  0038' 6EDA               	movwf	fsr2h,c
 40272  003A' 04DE               	decf	postinc2,w,c
 40273  003C' A4D8               	btfss	status,2,c
 40274  003E' D051               	goto	i2l1174
 40275                           
 40276                           ;sw_timer.c: 302: {
 40277                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 40278  0040' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40279  0042' 0D08               	mullw	8
 40280  0044' 0E00'              	movlw	low _swTimers
 40281  0046' 24F3               	addwf	prodl,w,c
 40282  0048' 6ED9               	movwf	fsr2l,c
 40283  004A' 0E00'              	movlw	high _swTimers
 40284  004C' 20F4               	addwfc	prodh,w,c
 40285  004E' 6EDA               	movwf	fsr2h,c
 40286  0050' 50DE               	movf	postinc2,w,c
 40287  0052' 5C28'              	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 40288  0054' 50DE               	movf	postinc2,w,c
 40289  0056' 5829'              	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 40290  0058' 50DE               	movf	postinc2,w,c
 40291  005A' 582A'              	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 40292  005C' 50DE               	movf	postinc2,w,c
 40293  005E' 582B'              	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 40294  0060' A0D8               	btfss	status,0,c
 40295  0062' D00D               	goto	i2l1172
 40296                           
 40297                           ;sw_timer.c: 304: {
 40298                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 40299  0064' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40300  0066' 0D08               	mullw	8
 40301  0068' 0E00'              	movlw	low _swTimers
 40302  006A' 24F3               	addwf	prodl,w,c
 40303  006C' 6ED9               	movwf	fsr2l,c
 40304  006E' 0E00'              	movlw	high _swTimers
 40305  0070' 20F4               	addwfc	prodh,w,c
 40306  0072' 6EDA               	movwf	fsr2h,c
 40307  0074' 6ADE               	clrf	postinc2,c
 40308  0076' 6ADE               	clrf	postinc2,c
 40309  0078' 6ADE               	clrf	postinc2,c
 40310  007A' 6ADD               	clrf	postdec2,c
 40311                           
 40312                           ;sw_timer.c: 306: }
 40313  007C' D032               	goto	i2l1174
 40314  007E'                    i2l1172:
 40315                           
 40316                           ;sw_timer.c: 307: else
 40317                           ;sw_timer.c: 308: {
 40318                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 40319  007E' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40320  0080' 0D08               	mullw	8
 40321  0082' 0E00'              	movlw	low _swTimers
 40322  0084' 24F3               	addwf	prodl,w,c
 40323  0086' 6ED9               	movwf	fsr2l,c
 40324  0088' 0E00'              	movlw	high _swTimers
 40325  008A' 20F4               	addwfc	prodh,w,c
 40326  008C' 6EDA               	movwf	fsr2h,c
 40327  008E' 5028'              	movf	i2SwTimersInterrupt@timeElapsed,w,c
 40328  0090' 5EDE               	subwf	postinc2,f,c
 40329  0092' 5029'              	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 40330  0094' 5ADE               	subwfb	postinc2,f,c
 40331  0096' 502A'              	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 40332  0098' 5ADE               	subwfb	postinc2,f,c
 40333  009A' 502B'              	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 40334  009C' 5ADE               	subwfb	postinc2,f,c
 40335                           
 40336                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 40337  009E' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40338  00A0' 0D08               	mullw	8
 40339  00A2' 0E00'              	movlw	low _swTimers
 40340  00A4' 24F3               	addwf	prodl,w,c
 40341  00A6' 6ED9               	movwf	fsr2l,c
 40342  00A8' 0E00'              	movlw	high _swTimers
 40343  00AA' 20F4               	addwfc	prodh,w,c
 40344  00AC' 6EDA               	movwf	fsr2h,c
 40345  00AE' 502C'              	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 40346  00B0' 5CDE               	subwf	postinc2,w,c
 40347  00B2' 502D'              	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 40348  00B4' 58DE               	subwfb	postinc2,w,c
 40349  00B6' 502E'              	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 40350  00B8' 58DE               	subwfb	postinc2,w,c
 40351  00BA' 502F'              	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 40352  00BC' 58DE               	subwfb	postinc2,w,c
 40353  00BE' B0D8               	btfsc	status,0,c
 40354  00C0' D010               	goto	i2l1174
 40355                           
 40356                           ;sw_timer.c: 313: {
 40357                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 40358  00C2' 5030'              	movf	i2SwTimersInterrupt@i,w,c
 40359  00C4' 0D08               	mullw	8
 40360  00C6' 0E00'              	movlw	low _swTimers
 40361  00C8' 24F3               	addwf	prodl,w,c
 40362  00CA' 6ED9               	movwf	fsr2l,c
 40363  00CC' 0E00'              	movlw	high _swTimers
 40364  00CE' 20F4               	addwfc	prodh,w,c
 40365  00D0' 6EDA               	movwf	fsr2h,c
 40366  00D2' CFDE F02C'         	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 40367  00D6' CFDE F02D'         	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 40368  00DA' CFDE F02E'         	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 40369  00DE' CFDE F02F'         	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 40370  00E2'                    i2l1174:
 40371  00E2' 2A30'              	incf	i2SwTimersInterrupt@i,f,c
 40372  00E4'                    i2l1169:
 40373  00E4' 0100               	movlb	0	; () banked
 40374  00E6' 5100'              	movf	_allocatedTimers& (0+255),w,b	;volatile
 40375  00E8' 5C30'              	subwf	i2SwTimersInterrupt@i,w,c
 40376  00EA' A0D8               	btfss	status,0,c
 40377  00EC' D79A               	goto	i2l1170
 40378                           
 40379                           ; BSR set to: 0
 40380                           ;sw_timer.c: 315: }
 40381                           ;sw_timer.c: 316: }
 40382                           ;sw_timer.c: 317: }
 40383                           ;sw_timer.c: 318: }
 40384                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 40385  00EE' C02C' F020'        	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 40386  00F2' C02D' F021'        	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 40387  00F6' C02E' F022'        	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 40388  00FA' C02F' F023'        	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 40389                           
 40390                           ; BSR set to: 0
 40391  00FE' 0012               	return		;funcret
 40392  0100'                    __end_ofi2_SwTimersInterrupt:
 40393                           	opt stack 0
 40394                           tosu	equ	0xFFF
 40395                           tosh	equ	0xFFE
 40396                           tosl	equ	0xFFD
 40397                           pclatu	equ	0xFFB
 40398                           pclath	equ	0xFFA
 40399                           tblptru	equ	0xFF8
 40400                           tblptrh	equ	0xFF7
 40401                           tblptrl	equ	0xFF6
 40402                           tablat	equ	0xFF5
 40403                           prodh	equ	0xFF4
 40404                           prodl	equ	0xFF3
 40405                           intcon	equ	0xFF2
 40406                           intcon2	equ	0xFF1
 40407                           intcon3	equ	0xFF0
 40408                           indf0	equ	0xFEF
 40409                           postinc0	equ	0xFEE
 40410                           plusw0	equ	0xFEB
 40411                           fsr0h	equ	0xFEA
 40412                           fsr0l	equ	0xFE9
 40413                           wreg	equ	0xFE8
 40414                           postinc1	equ	0xFE6
 40415                           postdec1	equ	0xFE5
 40416                           plusw1	equ	0xFE3
 40417                           fsr1h	equ	0xFE2
 40418                           fsr1l	equ	0xFE1
 40419                           indf2	equ	0xFDF
 40420                           postinc2	equ	0xFDE
 40421                           postdec2	equ	0xFDD
 40422                           plusw2	equ	0xFDB
 40423                           fsr2h	equ	0xFDA
 40424                           fsr2l	equ	0xFD9
 40425                           status	equ	0xFD8
 40426                           
 40427 ;; *************** function i2_TMR_GetDeltaTime *****************
 40428 ;; Defined at:
 40429 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40430 ;; Parameters:    Size  Location     Type
 40431 ;;		None
 40432 ;; Auto vars:     Size  Location     Type
 40433 ;;		None
 40434 ;; Return value:  Size  Location     Type
 40435 ;;                  4    8[COMRAM] unsigned long 
 40436 ;; Registers used:
 40437 ;;		wreg, status,2, status,0, cstack
 40438 ;; Tracked objects:
 40439 ;;		On entry : 0/0
 40440 ;;		On exit  : 0/0
 40441 ;;		Unchanged: 0/0
 40442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40445 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40446 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40447 ;;Total ram usage:       24 bytes
 40448 ;; Hardware stack levels used:    1
 40449 ;; Hardware stack levels required when called:    1
 40450 ;; This function calls:
 40451 ;;		i2_TMR1_ReadTimer
 40452 ;; This function is called by:
 40453 ;;		i2_SwTimersInterrupt
 40454 ;; This function uses a non-reentrant model
 40455 ;;
 40456                           
 40457                           	psect	text206
 40458  0000'                    __ptext206:
 40459                           	opt stack 0
 40460  0000'                    i2_TMR_GetDeltaTime:
 40461                           	opt stack 12
 40462                           
 40463                           ;sw_timer.c: 90: static uint32_t retVal;
 40464                           ;sw_timer.c: 91: static uint16_t tmrVal;
 40465                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 40466                           
 40467                           ; BSR set to: 0
 40468                           ;incstack = 0
 40469  0000' EC00' F000'        	call	i2_TMR1_ReadTimer	;wreg free
 40470  0004' C000' F012'        	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 40471  0008' C001' F013'        	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 40472                           
 40473                           ;sw_timer.c: 95: if (timerOverflow == 1)
 40474  000C' 040A'              	decf	_timerOverflow,w,c	;volatile
 40475  000E' A4D8               	btfss	status,2,c
 40476  0010' D066               	goto	i2l1102
 40477                           
 40478                           ;sw_timer.c: 96: {
 40479                           ;sw_timer.c: 97: timerOverflow = 0;
 40480  0012' 0E00               	movlw	0
 40481  0014' 6E0A'              	movwf	_timerOverflow,c	;volatile
 40482                           
 40483                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 40484  0016' C000' F00C'        	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 40485  001A' C001' F00D'        	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 40486  001E' C002' F00E'        	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 40487  0022' C003' F00F'        	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 40488  0026' 1E0C'              	comf	??i2_TMR_GetDeltaTime,f,c
 40489  0028' 1E0D'              	comf	??i2_TMR_GetDeltaTime+1,f,c
 40490  002A' 1E0E'              	comf	??i2_TMR_GetDeltaTime+2,f,c
 40491  002C' 1E0F'              	comf	??i2_TMR_GetDeltaTime+3,f,c
 40492  002E' 2A0C'              	incf	??i2_TMR_GetDeltaTime,f,c
 40493  0030' 0E00               	movlw	0
 40494  0032' 220D'              	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 40495  0034' 220E'              	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 40496  0036' 220F'              	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 40497  0038' 5008'              	movf	_reloadVal,w,c	;volatile
 40498  003A' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 40499  003C' 5009'              	movf	_reloadVal+1,w,c	;volatile
 40500  003E' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 40501  0040' 6A00'              	clrf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 40502  0042' 6A00'              	clrf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 40503  0044' 1E10'              	comf	??i2_TMR_GetDeltaTime+4,f,c
 40504  0046' 1E11'              	comf	??i2_TMR_GetDeltaTime+5,f,c
 40505  0048' 1E12'              	comf	??i2_TMR_GetDeltaTime+6,f,c
 40506  004A' 1E13'              	comf	??i2_TMR_GetDeltaTime+7,f,c
 40507  004C' 2A10'              	incf	??i2_TMR_GetDeltaTime+4,f,c
 40508  004E' 0E00               	movlw	0
 40509  0050' 2211'              	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 40510  0052' 2212'              	addwfc	??i2_TMR_GetDeltaTime+6,f,c
 40511  0054' 2213'              	addwfc	??i2_TMR_GetDeltaTime+7,f,c
 40512  0056' 0101               	movlb	1	; () banked
 40513  0058' 5100'              	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40514  005A' 2410'              	addwf	??i2_TMR_GetDeltaTime+4,w,c
 40515  005C' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 40516  005E' 5100'              	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40517  0060' 2011'              	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 40518  0062' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 40519  0064' 0E00               	movlw	0
 40520  0066' 2012'              	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 40521  0068' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 40522  006A' 0E00               	movlw	0
 40523  006C' 2013'              	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 40524  006E' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 40525  0070' 500C'              	movf	??i2_TMR_GetDeltaTime,w,c
 40526  0072' 2414'              	addwf	??i2_TMR_GetDeltaTime+8,w,c
 40527  0074' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+12)& (0+255),c
 40528  0076' 500D'              	movf	??i2_TMR_GetDeltaTime+1,w,c
 40529  0078' 2015'              	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 40530  007A' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+13)& (0+255),c
 40531  007C' 500E'              	movf	??i2_TMR_GetDeltaTime+2,w,c
 40532  007E' 2016'              	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 40533  0080' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+14)& (0+255),c
 40534  0082' 500F'              	movf	??i2_TMR_GetDeltaTime+3,w,c
 40535  0084' 2017'              	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 40536  0086' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+15)& (0+255),c
 40537  0088' 5004'              	movf	_ticksAdded,w,c	;volatile
 40538  008A' 2418'              	addwf	??i2_TMR_GetDeltaTime+12,w,c
 40539  008C' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+16)& (0+255),c
 40540  008E' 5005'              	movf	_ticksAdded+1,w,c	;volatile
 40541  0090' 2019'              	addwfc	??i2_TMR_GetDeltaTime+13,w,c
 40542  0092' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+17)& (0+255),c
 40543  0094' 5006'              	movf	_ticksAdded+2,w,c	;volatile
 40544  0096' 201A'              	addwfc	??i2_TMR_GetDeltaTime+14,w,c
 40545  0098' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+18)& (0+255),c
 40546  009A' 5007'              	movf	_ticksAdded+3,w,c	;volatile
 40547  009C' 201B'              	addwfc	??i2_TMR_GetDeltaTime+15,w,c
 40548  009E' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+19)& (0+255),c
 40549  00A0' 0E00               	movlw	0
 40550  00A2' 241C'              	addwf	??i2_TMR_GetDeltaTime+16,w,c
 40551  00A4' 6F00'              	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40552  00A6' 0E00               	movlw	0
 40553  00A8' 201D'              	addwfc	??i2_TMR_GetDeltaTime+17,w,c
 40554  00AA' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40555  00AC' 0E01               	movlw	1
 40556  00AE' 201E'              	addwfc	??i2_TMR_GetDeltaTime+18,w,c
 40557  00B0' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40558  00B2' 0E00               	movlw	0
 40559  00B4' 201F'              	addwfc	??i2_TMR_GetDeltaTime+19,w,c
 40560  00B6' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40561                           
 40562                           ; BSR set to: 1
 40563                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 40564  00B8' C012' F000'        	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 40565  00BC' C013' F001'        	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 40566  00C0' 6A02'              	clrf	_ticksAccounted+2,c	;volatile
 40567  00C2' 6A03'              	clrf	_ticksAccounted+3,c	;volatile
 40568                           
 40569                           ; BSR set to: 1
 40570                           ;sw_timer.c: 100: ticksAdded = 0;
 40571  00C4' 0E00               	movlw	0
 40572  00C6' 6E04'              	movwf	_ticksAdded,c	;volatile
 40573  00C8' 0E00               	movlw	0
 40574  00CA' 6E05'              	movwf	_ticksAdded+1,c	;volatile
 40575  00CC' 0E00               	movlw	0
 40576  00CE' 6E06'              	movwf	_ticksAdded+2,c	;volatile
 40577  00D0' 0E00               	movlw	0
 40578  00D2' 6E07'              	movwf	_ticksAdded+3,c	;volatile
 40579                           
 40580                           ; BSR set to: 1
 40581                           ;sw_timer.c: 101: reloadVal = 0;
 40582  00D4' 0E00               	movlw	0
 40583  00D6' 6E09'              	movwf	_reloadVal+1,c	;volatile
 40584  00D8' 0E00               	movlw	0
 40585  00DA' 6E08'              	movwf	_reloadVal,c	;volatile
 40586                           
 40587                           ;sw_timer.c: 102: }
 40588  00DC' D03E               	goto	i2l1103
 40589  00DE'                    i2l1102:
 40590                           
 40591                           ;sw_timer.c: 103: else
 40592                           ;sw_timer.c: 104: {
 40593                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 40594                           
 40595                           ; BSR set to: 1
 40596  00DE' C000' F00C'        	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 40597  00E2' C001' F00D'        	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 40598  00E6' C002' F00E'        	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 40599  00EA' C003' F00F'        	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 40600  00EE' 1E0C'              	comf	??i2_TMR_GetDeltaTime,f,c
 40601  00F0' 1E0D'              	comf	??i2_TMR_GetDeltaTime+1,f,c
 40602  00F2' 1E0E'              	comf	??i2_TMR_GetDeltaTime+2,f,c
 40603  00F4' 1E0F'              	comf	??i2_TMR_GetDeltaTime+3,f,c
 40604  00F6' 2A0C'              	incf	??i2_TMR_GetDeltaTime,f,c
 40605  00F8' 0E00               	movlw	0
 40606  00FA' 220D'              	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 40607  00FC' 220E'              	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 40608  00FE' 220F'              	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 40609  0100' C008' F010'        	movff	_reloadVal,??i2_TMR_GetDeltaTime+4	;volatile
 40610  0104' C009' F011'        	movff	_reloadVal+1,??i2_TMR_GetDeltaTime+5	;volatile
 40611  0108' 1E10'              	comf	??i2_TMR_GetDeltaTime+4,f,c
 40612  010A' 1E11'              	comf	??i2_TMR_GetDeltaTime+5,f,c
 40613  010C' 4A10'              	infsnz	??i2_TMR_GetDeltaTime+4,f,c
 40614  010E' 2A11'              	incf	??i2_TMR_GetDeltaTime+5,f,c
 40615  0110' 0101               	movlb	1	; () banked
 40616  0112' 5100'              	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40617  0114' 2610'              	addwf	??i2_TMR_GetDeltaTime+4,f,c
 40618  0116' 5100'              	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40619  0118' 2211'              	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 40620  011A' 5010'              	movf	??i2_TMR_GetDeltaTime+4,w,c
 40621  011C' 240C'              	addwf	??i2_TMR_GetDeltaTime,w,c
 40622  011E' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 40623  0120' 5011'              	movf	??i2_TMR_GetDeltaTime+5,w,c
 40624  0122' 200D'              	addwfc	??i2_TMR_GetDeltaTime+1,w,c
 40625  0124' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 40626  0126' 0E00               	movlw	0
 40627  0128' 200E'              	addwfc	??i2_TMR_GetDeltaTime+2,w,c
 40628  012A' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 40629  012C' 0E00               	movlw	0
 40630  012E' 200F'              	addwfc	??i2_TMR_GetDeltaTime+3,w,c
 40631  0130' 6E00'              	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 40632  0132' 5004'              	movf	_ticksAdded,w,c	;volatile
 40633  0134' 2412'              	addwf	??i2_TMR_GetDeltaTime+6,w,c
 40634  0136' 6F00'              	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40635  0138' 5005'              	movf	_ticksAdded+1,w,c	;volatile
 40636  013A' 2013'              	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 40637  013C' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40638  013E' 5006'              	movf	_ticksAdded+2,w,c	;volatile
 40639  0140' 2014'              	addwfc	??i2_TMR_GetDeltaTime+8,w,c
 40640  0142' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40641  0144' 5007'              	movf	_ticksAdded+3,w,c	;volatile
 40642  0146' 2015'              	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 40643  0148' 6F00'              	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40644                           
 40645                           ;sw_timer.c: 106: ticksAccounted += retVal;
 40646  014A' 5100'              	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 40647  014C' 2600'              	addwf	_ticksAccounted,f,c	;volatile
 40648  014E' 5100'              	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 40649  0150' 2201'              	addwfc	_ticksAccounted+1,f,c	;volatile
 40650  0152' 5100'              	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 40651  0154' 2202'              	addwfc	_ticksAccounted+2,f,c	;volatile
 40652  0156' 5100'              	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 40653  0158' 2203'              	addwfc	_ticksAccounted+3,f,c	;volatile
 40654  015A'                    i2l1103:
 40655                           
 40656                           ; BSR set to: 1
 40657                           ;sw_timer.c: 107: }
 40658                           ;sw_timer.c: 109: return retVal;
 40659                           
 40660                           ; BSR set to: 1
 40661  015A' C000' F008'        	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 40662  015E' C001' F009'        	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 40663  0162' C002' F00A'        	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 40664  0166' C003' F00B'        	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 40665  016A' 0012               	return	
 40666  016C'                    __end_ofi2_TMR_GetDeltaTime:
 40667                           	opt stack 0
 40668                           tosu	equ	0xFFF
 40669                           tosh	equ	0xFFE
 40670                           tosl	equ	0xFFD
 40671                           pclatu	equ	0xFFB
 40672                           pclath	equ	0xFFA
 40673                           tblptru	equ	0xFF8
 40674                           tblptrh	equ	0xFF7
 40675                           tblptrl	equ	0xFF6
 40676                           tablat	equ	0xFF5
 40677                           prodh	equ	0xFF4
 40678                           prodl	equ	0xFF3
 40679                           intcon	equ	0xFF2
 40680                           intcon2	equ	0xFF1
 40681                           intcon3	equ	0xFF0
 40682                           indf0	equ	0xFEF
 40683                           postinc0	equ	0xFEE
 40684                           plusw0	equ	0xFEB
 40685                           fsr0h	equ	0xFEA
 40686                           fsr0l	equ	0xFE9
 40687                           wreg	equ	0xFE8
 40688                           postinc1	equ	0xFE6
 40689                           postdec1	equ	0xFE5
 40690                           plusw1	equ	0xFE3
 40691                           fsr1h	equ	0xFE2
 40692                           fsr1l	equ	0xFE1
 40693                           indf2	equ	0xFDF
 40694                           postinc2	equ	0xFDE
 40695                           postdec2	equ	0xFDD
 40696                           plusw2	equ	0xFDB
 40697                           fsr2h	equ	0xFDA
 40698                           fsr2l	equ	0xFD9
 40699                           status	equ	0xFD8
 40700                           
 40701 ;; *************** function i2_TMR1_ReadTimer *****************
 40702 ;; Defined at:
 40703 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 40704 ;; Parameters:    Size  Location     Type
 40705 ;;		None
 40706 ;; Auto vars:     Size  Location     Type
 40707 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 40708 ;;  TMR1_ReadTim    1    7[COMRAM] unsigned char 
 40709 ;;  TMR1_ReadTim    1    6[COMRAM] unsigned char 
 40710 ;; Return value:  Size  Location     Type
 40711 ;;                  2    0[COMRAM] unsigned int 
 40712 ;; Registers used:
 40713 ;;		wreg, status,2
 40714 ;; Tracked objects:
 40715 ;;		On entry : 0/0
 40716 ;;		On exit  : 0/0
 40717 ;;		Unchanged: 0/0
 40718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40720 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40722 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40723 ;;Total ram usage:        8 bytes
 40724 ;; Hardware stack levels used:    1
 40725 ;; This function calls:
 40726 ;;		Nothing
 40727 ;; This function is called by:
 40728 ;;		i2_TMR_GetDeltaTime
 40729 ;;		i2_TMR_SwapTimer
 40730 ;; This function uses a non-reentrant model
 40731 ;;
 40732                           
 40733                           	psect	text207
 40734  0000'                    __ptext207:
 40735                           	opt stack 0
 40736  0000'                    i2_TMR1_ReadTimer:
 40737                           	opt stack 13
 40738                           
 40739                           ;tmr1.c: 107: uint16_t readVal;
 40740                           ;tmr1.c: 108: uint8_t readValHigh;
 40741                           ;tmr1.c: 109: uint8_t readValLow;
 40742                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 40743                           
 40744                           ; BSR set to: 1
 40745                           ;incstack = 0
 40746  0000' 82CD               	bsf	4045,1,c	;volatile
 40747                           
 40748                           ;tmr1.c: 113: readValLow = TMR1L;
 40749  0002' CFCE F007'         	movff	4046,i2TMR1_ReadTimer@readValLow	;volatile
 40750                           
 40751                           ;tmr1.c: 114: readValHigh = TMR1H;
 40752  0006' CFCF F006'         	movff	4047,i2TMR1_ReadTimer@readValHigh	;volatile
 40753                           
 40754                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 40755  000A' 5006'              	movf	i2TMR1_ReadTimer@readValHigh,w,c
 40756  000C' 6E00'              	movwf	??i2_TMR1_ReadTimer& (0+255),c
 40757  000E' 5007'              	movf	i2TMR1_ReadTimer@readValLow,w,c
 40758  0010' 6E04'              	movwf	i2TMR1_ReadTimer@readVal,c
 40759  0012' C002' F005'        	movff	??i2_TMR1_ReadTimer,i2TMR1_ReadTimer@readVal+1
 40760                           
 40761                           ;tmr1.c: 118: return readVal;
 40762  0016' C004' F000'        	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 40763  001A' C005' F001'        	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 40764  001E' 0012               	return	
 40765  0020'                    __end_ofi2_TMR1_ReadTimer:
 40766                           	opt stack 0
 40767                           tosu	equ	0xFFF
 40768                           tosh	equ	0xFFE
 40769                           tosl	equ	0xFFD
 40770                           pclatu	equ	0xFFB
 40771                           pclath	equ	0xFFA
 40772                           tblptru	equ	0xFF8
 40773                           tblptrh	equ	0xFF7
 40774                           tblptrl	equ	0xFF6
 40775                           tablat	equ	0xFF5
 40776                           prodh	equ	0xFF4
 40777                           prodl	equ	0xFF3
 40778                           intcon	equ	0xFF2
 40779                           intcon2	equ	0xFF1
 40780                           intcon3	equ	0xFF0
 40781                           indf0	equ	0xFEF
 40782                           postinc0	equ	0xFEE
 40783                           plusw0	equ	0xFEB
 40784                           fsr0h	equ	0xFEA
 40785                           fsr0l	equ	0xFE9
 40786                           wreg	equ	0xFE8
 40787                           postinc1	equ	0xFE6
 40788                           postdec1	equ	0xFE5
 40789                           plusw1	equ	0xFE3
 40790                           fsr1h	equ	0xFE2
 40791                           fsr1l	equ	0xFE1
 40792                           indf2	equ	0xFDF
 40793                           postinc2	equ	0xFDE
 40794                           postdec2	equ	0xFDD
 40795                           plusw2	equ	0xFDB
 40796                           fsr2h	equ	0xFDA
 40797                           fsr2l	equ	0xFD9
 40798                           status	equ	0xFD8
 40799                           
 40800 ;; *************** function _PIN_MANAGER_IOC *****************
 40801 ;; Defined at:
 40802 ;;		line 113 in file "mcc_generated_files/pin_manager.c"
 40803 ;; Parameters:    Size  Location     Type
 40804 ;;		None
 40805 ;; Auto vars:     Size  Location     Type
 40806 ;;		None
 40807 ;; Return value:  Size  Location     Type
 40808 ;;                  1    wreg      void 
 40809 ;; Registers used:
 40810 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 40811 ;; Tracked objects:
 40812 ;;		On entry : 0/0
 40813 ;;		On exit  : 0/0
 40814 ;;		Unchanged: 0/0
 40815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40820 ;;Total ram usage:        0 bytes
 40821 ;; Hardware stack levels used:    1
 40822 ;; Hardware stack levels required when called:    2
 40823 ;; This function calls:
 40824 ;;		_IOCB4_ISR
 40825 ;; This function is called by:
 40826 ;;		_INTERRUPT_InterruptManager
 40827 ;; This function uses a non-reentrant model
 40828 ;;
 40829                           
 40830                           	psect	text208
 40831  0000'                    __ptext208:
 40832                           	opt stack 0
 40833  0000'                    _PIN_MANAGER_IOC:
 40834                           	opt stack 15
 40835                           
 40836                           ;pin_manager.c: 116: if(IOCBbits.IOCB4 == 1)
 40837                           
 40838                           ;incstack = 0
 40839  0000' B862               	btfsc	3938,4,c	;volatile
 40840                           
 40841                           ;pin_manager.c: 117: {
 40842                           ;pin_manager.c: 118: IOCB4_ISR();
 40843  0002' EC00' F000'        	call	_IOCB4_ISR	;wreg free
 40844                           
 40845                           ;pin_manager.c: 119: }
 40846                           ;pin_manager.c: 121: INTCONbits.RBIF = 0;
 40847  0006' 90F2               	bcf	intcon,0,c	;volatile
 40848  0008' 0012               	return		;funcret
 40849  000A'                    __end_of_PIN_MANAGER_IOC:
 40850                           	opt stack 0
 40851                           tosu	equ	0xFFF
 40852                           tosh	equ	0xFFE
 40853                           tosl	equ	0xFFD
 40854                           pclatu	equ	0xFFB
 40855                           pclath	equ	0xFFA
 40856                           tblptru	equ	0xFF8
 40857                           tblptrh	equ	0xFF7
 40858                           tblptrl	equ	0xFF6
 40859                           tablat	equ	0xFF5
 40860                           prodh	equ	0xFF4
 40861                           prodl	equ	0xFF3
 40862                           intcon	equ	0xFF2
 40863                           intcon2	equ	0xFF1
 40864                           intcon3	equ	0xFF0
 40865                           indf0	equ	0xFEF
 40866                           postinc0	equ	0xFEE
 40867                           plusw0	equ	0xFEB
 40868                           fsr0h	equ	0xFEA
 40869                           fsr0l	equ	0xFE9
 40870                           wreg	equ	0xFE8
 40871                           postinc1	equ	0xFE6
 40872                           postdec1	equ	0xFE5
 40873                           plusw1	equ	0xFE3
 40874                           fsr1h	equ	0xFE2
 40875                           fsr1l	equ	0xFE1
 40876                           indf2	equ	0xFDF
 40877                           postinc2	equ	0xFDE
 40878                           postdec2	equ	0xFDD
 40879                           plusw2	equ	0xFDB
 40880                           fsr2h	equ	0xFDA
 40881                           fsr2l	equ	0xFD9
 40882                           status	equ	0xFD8
 40883                           
 40884 ;; *************** function _IOCB4_ISR *****************
 40885 ;; Defined at:
 40886 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
 40887 ;; Parameters:    Size  Location     Type
 40888 ;;		None
 40889 ;; Auto vars:     Size  Location     Type
 40890 ;;		None
 40891 ;; Return value:  Size  Location     Type
 40892 ;;                  1    wreg      void 
 40893 ;; Registers used:
 40894 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 40895 ;; Tracked objects:
 40896 ;;		On entry : 0/0
 40897 ;;		On exit  : 0/0
 40898 ;;		Unchanged: 0/0
 40899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40904 ;;Total ram usage:        0 bytes
 40905 ;; Hardware stack levels used:    1
 40906 ;; Hardware stack levels required when called:    1
 40907 ;; This function calls:
 40908 ;;		Absolute function
 40909 ;;		_DIO2_ISR_Lora
 40910 ;;		_IOCB4_DefaultInterruptHandler
 40911 ;; This function is called by:
 40912 ;;		_PIN_MANAGER_IOC
 40913 ;; This function uses a non-reentrant model
 40914 ;;
 40915                           
 40916                           	psect	text209
 40917  0000'                    __ptext209:
 40918                           	opt stack 0
 40919  0000'                    _IOCB4_ISR:
 40920                           	opt stack 15
 40921                           
 40922                           ;pin_manager.c: 132: if(IOCB4_InterruptHandler)
 40923                           
 40924                           ;incstack = 0
 40925  0000' 0101               	movlb	1	; () banked
 40926  0002' 5100'              	movf	_IOCB4_InterruptHandler& (0+255),w,b
 40927  0004' 1100'              	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 40928  0006' B4D8               	btfsc	status,2,c
 40929  0008' 0012               	return	
 40930                           
 40931                           ; BSR set to: 1
 40932                           ;pin_manager.c: 133: {
 40933                           ;pin_manager.c: 134: IOCB4_InterruptHandler();
 40934  000A' D801               	call	i2u1474_48
 40935  000C' 0012               	return	
 40936  000E'                    i2u1474_48:
 40937  000E' 0005               	push	
 40938  0010' 6EFA               	movwf	pclath,c
 40939  0012' 5100'              	movf	_IOCB4_InterruptHandler& (0+255),w,b
 40940  0014' 6EFD               	movwf	tosl,c
 40941  0016' 5100'              	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 40942  0018' 6EFE               	movwf	tosh,c
 40943  001A' 6AFF               	clrf	tosu,c
 40944  001C' 50FA               	movf	pclath,w,c
 40945  001E' 0012               	return		;indir
 40946  0020'                    __end_of_IOCB4_ISR:
 40947                           	opt stack 0
 40948                           tosu	equ	0xFFF
 40949                           tosh	equ	0xFFE
 40950                           tosl	equ	0xFFD
 40951                           pclatu	equ	0xFFB
 40952                           pclath	equ	0xFFA
 40953                           tblptru	equ	0xFF8
 40954                           tblptrh	equ	0xFF7
 40955                           tblptrl	equ	0xFF6
 40956                           tablat	equ	0xFF5
 40957                           prodh	equ	0xFF4
 40958                           prodl	equ	0xFF3
 40959                           intcon	equ	0xFF2
 40960                           intcon2	equ	0xFF1
 40961                           intcon3	equ	0xFF0
 40962                           indf0	equ	0xFEF
 40963                           postinc0	equ	0xFEE
 40964                           plusw0	equ	0xFEB
 40965                           fsr0h	equ	0xFEA
 40966                           fsr0l	equ	0xFE9
 40967                           wreg	equ	0xFE8
 40968                           postinc1	equ	0xFE6
 40969                           postdec1	equ	0xFE5
 40970                           plusw1	equ	0xFE3
 40971                           fsr1h	equ	0xFE2
 40972                           fsr1l	equ	0xFE1
 40973                           indf2	equ	0xFDF
 40974                           postinc2	equ	0xFDE
 40975                           postdec2	equ	0xFDD
 40976                           plusw2	equ	0xFDB
 40977                           fsr2h	equ	0xFDA
 40978                           fsr2l	equ	0xFD9
 40979                           status	equ	0xFD8
 40980                           
 40981 ;; *************** function _DIO2_ISR_Lora *****************
 40982 ;; Defined at:
 40983 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 40984 ;; Parameters:    Size  Location     Type
 40985 ;;		None
 40986 ;; Auto vars:     Size  Location     Type
 40987 ;;		None
 40988 ;; Return value:  Size  Location     Type
 40989 ;;                  1    wreg      void 
 40990 ;; Registers used:
 40991 ;;		status,2, status,0
 40992 ;; Tracked objects:
 40993 ;;		On entry : 0/0
 40994 ;;		On exit  : 0/0
 40995 ;;		Unchanged: 0/0
 40996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41001 ;;Total ram usage:        0 bytes
 41002 ;; Hardware stack levels used:    1
 41003 ;; This function calls:
 41004 ;;		Nothing
 41005 ;; This function is called by:
 41006 ;;		_DIO2_ISR_Lora_Init
 41007 ;;		_IOCB4_ISR
 41008 ;; This function uses a non-reentrant model
 41009 ;;
 41010                           
 41011                           	psect	text210
 41012  0000'                    __ptext210:
 41013                           	opt stack 0
 41014  0000'                    _DIO2_ISR_Lora:
 41015                           	opt stack 15
 41016                           
 41017                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 41018                           
 41019                           ;incstack = 0
 41020  0000' 0101               	movlb	1	; () banked
 41021  0002' 8500'              	bsf	_dioStatus& (0+255),2,b	;volatile
 41022                           
 41023                           ; BSR set to: 1
 41024  0004' 0012               	return		;funcret
 41025  0006'                    __end_of_DIO2_ISR_Lora:
 41026                           	opt stack 0
 41027                           tosu	equ	0xFFF
 41028                           tosh	equ	0xFFE
 41029                           tosl	equ	0xFFD
 41030                           pclatu	equ	0xFFB
 41031                           pclath	equ	0xFFA
 41032                           tblptru	equ	0xFF8
 41033                           tblptrh	equ	0xFF7
 41034                           tblptrl	equ	0xFF6
 41035                           tablat	equ	0xFF5
 41036                           prodh	equ	0xFF4
 41037                           prodl	equ	0xFF3
 41038                           intcon	equ	0xFF2
 41039                           intcon2	equ	0xFF1
 41040                           intcon3	equ	0xFF0
 41041                           indf0	equ	0xFEF
 41042                           postinc0	equ	0xFEE
 41043                           plusw0	equ	0xFEB
 41044                           fsr0h	equ	0xFEA
 41045                           fsr0l	equ	0xFE9
 41046                           wreg	equ	0xFE8
 41047                           postinc1	equ	0xFE6
 41048                           postdec1	equ	0xFE5
 41049                           plusw1	equ	0xFE3
 41050                           fsr1h	equ	0xFE2
 41051                           fsr1l	equ	0xFE1
 41052                           indf2	equ	0xFDF
 41053                           postinc2	equ	0xFDE
 41054                           postdec2	equ	0xFDD
 41055                           plusw2	equ	0xFDB
 41056                           fsr2h	equ	0xFDA
 41057                           fsr2l	equ	0xFD9
 41058                           status	equ	0xFD8
 41059                           
 41060 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 41061 ;; Defined at:
 41062 ;;		line 148 in file "mcc_generated_files/pin_manager.c"
 41063 ;; Parameters:    Size  Location     Type
 41064 ;;		None
 41065 ;; Auto vars:     Size  Location     Type
 41066 ;;		None
 41067 ;; Return value:  Size  Location     Type
 41068 ;;                  1    wreg      void 
 41069 ;; Registers used:
 41070 ;;		None
 41071 ;; Tracked objects:
 41072 ;;		On entry : 0/0
 41073 ;;		On exit  : 0/0
 41074 ;;		Unchanged: 0/0
 41075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41080 ;;Total ram usage:        0 bytes
 41081 ;; Hardware stack levels used:    1
 41082 ;; This function calls:
 41083 ;;		Nothing
 41084 ;; This function is called by:
 41085 ;;		_PIN_MANAGER_Initialize
 41086 ;;		_IOCB4_ISR
 41087 ;; This function uses a non-reentrant model
 41088 ;;
 41089                           
 41090                           	psect	text211
 41091  0000'                    __ptext211:
 41092                           	opt stack 0
 41093  0000'                    _IOCB4_DefaultInterruptHandler:
 41094                           	opt stack 15
 41095                           
 41096                           ; BSR set to: 1
 41097                           ;incstack = 0
 41098  0000' 0012               	return		;funcret
 41099  0002'                    __end_of_IOCB4_DefaultInterruptHandler:
 41100                           	opt stack 0
 41101                           tosu	equ	0xFFF
 41102                           tosh	equ	0xFFE
 41103                           tosl	equ	0xFFD
 41104                           pclatu	equ	0xFFB
 41105                           pclath	equ	0xFFA
 41106                           tblptru	equ	0xFF8
 41107                           tblptrh	equ	0xFF7
 41108                           tblptrl	equ	0xFF6
 41109                           tablat	equ	0xFF5
 41110                           prodh	equ	0xFF4
 41111                           prodl	equ	0xFF3
 41112                           intcon	equ	0xFF2
 41113                           intcon2	equ	0xFF1
 41114                           intcon3	equ	0xFF0
 41115                           indf0	equ	0xFEF
 41116                           postinc0	equ	0xFEE
 41117                           plusw0	equ	0xFEB
 41118                           fsr0h	equ	0xFEA
 41119                           fsr0l	equ	0xFE9
 41120                           wreg	equ	0xFE8
 41121                           postinc1	equ	0xFE6
 41122                           postdec1	equ	0xFE5
 41123                           plusw1	equ	0xFE3
 41124                           fsr1h	equ	0xFE2
 41125                           fsr1l	equ	0xFE1
 41126                           indf2	equ	0xFDF
 41127                           postinc2	equ	0xFDE
 41128                           postdec2	equ	0xFDD
 41129                           plusw2	equ	0xFDB
 41130                           fsr2h	equ	0xFDA
 41131                           fsr2l	equ	0xFD9
 41132                           status	equ	0xFD8
 41133                           
 41134 ;; *************** function _INT2_ISR *****************
 41135 ;; Defined at:
 41136 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 41137 ;; Parameters:    Size  Location     Type
 41138 ;;		None
 41139 ;; Auto vars:     Size  Location     Type
 41140 ;;		None
 41141 ;; Return value:  Size  Location     Type
 41142 ;;                  1    wreg      void 
 41143 ;; Registers used:
 41144 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 41145 ;; Tracked objects:
 41146 ;;		On entry : 0/0
 41147 ;;		On exit  : 0/0
 41148 ;;		Unchanged: 0/0
 41149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41154 ;;Total ram usage:        0 bytes
 41155 ;; Hardware stack levels used:    1
 41156 ;; Hardware stack levels required when called:    2
 41157 ;; This function calls:
 41158 ;;		_INT2_CallBack
 41159 ;; This function is called by:
 41160 ;;		_INTERRUPT_InterruptManager
 41161 ;; This function uses a non-reentrant model
 41162 ;;
 41163                           
 41164                           	psect	text212
 41165  0000'                    __ptext212:
 41166                           	opt stack 0
 41167  0000'                    _INT2_ISR:
 41168                           	opt stack 15
 41169                           
 41170                           ;ext_int.c: 61: (INTCON3bits.INT2IF = 0);
 41171                           
 41172                           ;incstack = 0
 41173  0000' 92F0               	bcf	intcon3,1,c	;volatile
 41174                           
 41175                           ;ext_int.c: 64: INT2_CallBack();
 41176  0002' EC00' F000'        	call	_INT2_CallBack	;wreg free
 41177  0006' 0012               	return		;funcret
 41178  0008'                    __end_of_INT2_ISR:
 41179                           	opt stack 0
 41180                           tosu	equ	0xFFF
 41181                           tosh	equ	0xFFE
 41182                           tosl	equ	0xFFD
 41183                           pclatu	equ	0xFFB
 41184                           pclath	equ	0xFFA
 41185                           tblptru	equ	0xFF8
 41186                           tblptrh	equ	0xFF7
 41187                           tblptrl	equ	0xFF6
 41188                           tablat	equ	0xFF5
 41189                           prodh	equ	0xFF4
 41190                           prodl	equ	0xFF3
 41191                           intcon	equ	0xFF2
 41192                           intcon2	equ	0xFF1
 41193                           intcon3	equ	0xFF0
 41194                           indf0	equ	0xFEF
 41195                           postinc0	equ	0xFEE
 41196                           plusw0	equ	0xFEB
 41197                           fsr0h	equ	0xFEA
 41198                           fsr0l	equ	0xFE9
 41199                           wreg	equ	0xFE8
 41200                           postinc1	equ	0xFE6
 41201                           postdec1	equ	0xFE5
 41202                           plusw1	equ	0xFE3
 41203                           fsr1h	equ	0xFE2
 41204                           fsr1l	equ	0xFE1
 41205                           indf2	equ	0xFDF
 41206                           postinc2	equ	0xFDE
 41207                           postdec2	equ	0xFDD
 41208                           plusw2	equ	0xFDB
 41209                           fsr2h	equ	0xFDA
 41210                           fsr2l	equ	0xFD9
 41211                           status	equ	0xFD8
 41212                           
 41213 ;; *************** function _INT2_CallBack *****************
 41214 ;; Defined at:
 41215 ;;		line 68 in file "mcc_generated_files/ext_int.c"
 41216 ;; Parameters:    Size  Location     Type
 41217 ;;		None
 41218 ;; Auto vars:     Size  Location     Type
 41219 ;;		None
 41220 ;; Return value:  Size  Location     Type
 41221 ;;                  1    wreg      void 
 41222 ;; Registers used:
 41223 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 41224 ;; Tracked objects:
 41225 ;;		On entry : 0/0
 41226 ;;		On exit  : 0/0
 41227 ;;		Unchanged: 0/0
 41228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41233 ;;Total ram usage:        0 bytes
 41234 ;; Hardware stack levels used:    1
 41235 ;; Hardware stack levels required when called:    1
 41236 ;; This function calls:
 41237 ;;		Absolute function
 41238 ;;		_DIO1_ISR_Lora
 41239 ;;		_INT2_DefaultInterruptHandler
 41240 ;; This function is called by:
 41241 ;;		_INT2_ISR
 41242 ;; This function uses a non-reentrant model
 41243 ;;
 41244                           
 41245                           	psect	text213
 41246  0000'                    __ptext213:
 41247                           	opt stack 0
 41248  0000'                    _INT2_CallBack:
 41249                           	opt stack 15
 41250                           
 41251                           ;ext_int.c: 71: if(INT2_InterruptHandler)
 41252                           
 41253                           ;incstack = 0
 41254  0000' 0101               	movlb	1	; () banked
 41255  0002' 5100'              	movf	_INT2_InterruptHandler& (0+255),w,b
 41256  0004' 1100'              	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 41257  0006' B4D8               	btfsc	status,2,c
 41258  0008' 0012               	return	
 41259                           
 41260                           ; BSR set to: 1
 41261                           ;ext_int.c: 72: {
 41262                           ;ext_int.c: 73: INT2_InterruptHandler();
 41263  000A' D801               	call	i2u1478_48
 41264  000C' 0012               	return	
 41265  000E'                    i2u1478_48:
 41266  000E' 0005               	push	
 41267  0010' 6EFA               	movwf	pclath,c
 41268  0012' 5100'              	movf	_INT2_InterruptHandler& (0+255),w,b
 41269  0014' 6EFD               	movwf	tosl,c
 41270  0016' 5100'              	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 41271  0018' 6EFE               	movwf	tosh,c
 41272  001A' 6AFF               	clrf	tosu,c
 41273  001C' 50FA               	movf	pclath,w,c
 41274  001E' 0012               	return		;indir
 41275  0020'                    __end_of_INT2_CallBack:
 41276                           	opt stack 0
 41277                           tosu	equ	0xFFF
 41278                           tosh	equ	0xFFE
 41279                           tosl	equ	0xFFD
 41280                           pclatu	equ	0xFFB
 41281                           pclath	equ	0xFFA
 41282                           tblptru	equ	0xFF8
 41283                           tblptrh	equ	0xFF7
 41284                           tblptrl	equ	0xFF6
 41285                           tablat	equ	0xFF5
 41286                           prodh	equ	0xFF4
 41287                           prodl	equ	0xFF3
 41288                           intcon	equ	0xFF2
 41289                           intcon2	equ	0xFF1
 41290                           intcon3	equ	0xFF0
 41291                           indf0	equ	0xFEF
 41292                           postinc0	equ	0xFEE
 41293                           plusw0	equ	0xFEB
 41294                           fsr0h	equ	0xFEA
 41295                           fsr0l	equ	0xFE9
 41296                           wreg	equ	0xFE8
 41297                           postinc1	equ	0xFE6
 41298                           postdec1	equ	0xFE5
 41299                           plusw1	equ	0xFE3
 41300                           fsr1h	equ	0xFE2
 41301                           fsr1l	equ	0xFE1
 41302                           indf2	equ	0xFDF
 41303                           postinc2	equ	0xFDE
 41304                           postdec2	equ	0xFDD
 41305                           plusw2	equ	0xFDB
 41306                           fsr2h	equ	0xFDA
 41307                           fsr2l	equ	0xFD9
 41308                           status	equ	0xFD8
 41309                           
 41310 ;; *************** function _DIO1_ISR_Lora *****************
 41311 ;; Defined at:
 41312 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 41313 ;; Parameters:    Size  Location     Type
 41314 ;;		None
 41315 ;; Auto vars:     Size  Location     Type
 41316 ;;		None
 41317 ;; Return value:  Size  Location     Type
 41318 ;;                  1    wreg      void 
 41319 ;; Registers used:
 41320 ;;		status,2, status,0
 41321 ;; Tracked objects:
 41322 ;;		On entry : 0/0
 41323 ;;		On exit  : 0/0
 41324 ;;		Unchanged: 0/0
 41325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41330 ;;Total ram usage:        0 bytes
 41331 ;; Hardware stack levels used:    1
 41332 ;; This function calls:
 41333 ;;		Nothing
 41334 ;; This function is called by:
 41335 ;;		_DIO1_ISR_Lora_Init
 41336 ;;		_INT2_CallBack
 41337 ;; This function uses a non-reentrant model
 41338 ;;
 41339                           
 41340                           	psect	text214
 41341  0000'                    __ptext214:
 41342                           	opt stack 0
 41343  0000'                    _DIO1_ISR_Lora:
 41344                           	opt stack 15
 41345                           
 41346                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 41347                           
 41348                           ;incstack = 0
 41349  0000' 0101               	movlb	1	; () banked
 41350  0002' 8300'              	bsf	_dioStatus& (0+255),1,b	;volatile
 41351                           
 41352                           ; BSR set to: 1
 41353  0004' 0012               	return		;funcret
 41354  0006'                    __end_of_DIO1_ISR_Lora:
 41355                           	opt stack 0
 41356                           tosu	equ	0xFFF
 41357                           tosh	equ	0xFFE
 41358                           tosl	equ	0xFFD
 41359                           pclatu	equ	0xFFB
 41360                           pclath	equ	0xFFA
 41361                           tblptru	equ	0xFF8
 41362                           tblptrh	equ	0xFF7
 41363                           tblptrl	equ	0xFF6
 41364                           tablat	equ	0xFF5
 41365                           prodh	equ	0xFF4
 41366                           prodl	equ	0xFF3
 41367                           intcon	equ	0xFF2
 41368                           intcon2	equ	0xFF1
 41369                           intcon3	equ	0xFF0
 41370                           indf0	equ	0xFEF
 41371                           postinc0	equ	0xFEE
 41372                           plusw0	equ	0xFEB
 41373                           fsr0h	equ	0xFEA
 41374                           fsr0l	equ	0xFE9
 41375                           wreg	equ	0xFE8
 41376                           postinc1	equ	0xFE6
 41377                           postdec1	equ	0xFE5
 41378                           plusw1	equ	0xFE3
 41379                           fsr1h	equ	0xFE2
 41380                           fsr1l	equ	0xFE1
 41381                           indf2	equ	0xFDF
 41382                           postinc2	equ	0xFDE
 41383                           postdec2	equ	0xFDD
 41384                           plusw2	equ	0xFDB
 41385                           fsr2h	equ	0xFDA
 41386                           fsr2l	equ	0xFD9
 41387                           status	equ	0xFD8
 41388                           
 41389 ;; *************** function _INT2_DefaultInterruptHandler *****************
 41390 ;; Defined at:
 41391 ;;		line 81 in file "mcc_generated_files/ext_int.c"
 41392 ;; Parameters:    Size  Location     Type
 41393 ;;		None
 41394 ;; Auto vars:     Size  Location     Type
 41395 ;;		None
 41396 ;; Return value:  Size  Location     Type
 41397 ;;                  1    wreg      void 
 41398 ;; Registers used:
 41399 ;;		None
 41400 ;; Tracked objects:
 41401 ;;		On entry : 0/0
 41402 ;;		On exit  : 0/0
 41403 ;;		Unchanged: 0/0
 41404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41409 ;;Total ram usage:        0 bytes
 41410 ;; Hardware stack levels used:    1
 41411 ;; This function calls:
 41412 ;;		Nothing
 41413 ;; This function is called by:
 41414 ;;		_EXT_INT_Initialize
 41415 ;;		_INT2_CallBack
 41416 ;; This function uses a non-reentrant model
 41417 ;;
 41418                           
 41419                           	psect	text215
 41420  0000'                    __ptext215:
 41421                           	opt stack 0
 41422  0000'                    _INT2_DefaultInterruptHandler:
 41423                           	opt stack 15
 41424                           
 41425                           ; BSR set to: 1
 41426                           ;incstack = 0
 41427  0000' 0012               	return		;funcret
 41428  0002'                    __end_of_INT2_DefaultInterruptHandler:
 41429                           	opt stack 0
 41430                           tosu	equ	0xFFF
 41431                           tosh	equ	0xFFE
 41432                           tosl	equ	0xFFD
 41433                           pclatu	equ	0xFFB
 41434                           pclath	equ	0xFFA
 41435                           tblptru	equ	0xFF8
 41436                           tblptrh	equ	0xFF7
 41437                           tblptrl	equ	0xFF6
 41438                           tablat	equ	0xFF5
 41439                           prodh	equ	0xFF4
 41440                           prodl	equ	0xFF3
 41441                           intcon	equ	0xFF2
 41442                           intcon2	equ	0xFF1
 41443                           intcon3	equ	0xFF0
 41444                           indf0	equ	0xFEF
 41445                           postinc0	equ	0xFEE
 41446                           plusw0	equ	0xFEB
 41447                           fsr0h	equ	0xFEA
 41448                           fsr0l	equ	0xFE9
 41449                           wreg	equ	0xFE8
 41450                           postinc1	equ	0xFE6
 41451                           postdec1	equ	0xFE5
 41452                           plusw1	equ	0xFE3
 41453                           fsr1h	equ	0xFE2
 41454                           fsr1l	equ	0xFE1
 41455                           indf2	equ	0xFDF
 41456                           postinc2	equ	0xFDE
 41457                           postdec2	equ	0xFDD
 41458                           plusw2	equ	0xFDB
 41459                           fsr2h	equ	0xFDA
 41460                           fsr2l	equ	0xFD9
 41461                           status	equ	0xFD8
 41462                           
 41463 ;; *************** function _INT1_ISR *****************
 41464 ;; Defined at:
 41465 ;;		line 33 in file "mcc_generated_files/ext_int.c"
 41466 ;; Parameters:    Size  Location     Type
 41467 ;;		None
 41468 ;; Auto vars:     Size  Location     Type
 41469 ;;		None
 41470 ;; Return value:  Size  Location     Type
 41471 ;;                  1    wreg      void 
 41472 ;; Registers used:
 41473 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 41474 ;; Tracked objects:
 41475 ;;		On entry : 0/0
 41476 ;;		On exit  : 0/0
 41477 ;;		Unchanged: 0/0
 41478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41483 ;;Total ram usage:        0 bytes
 41484 ;; Hardware stack levels used:    1
 41485 ;; Hardware stack levels required when called:    2
 41486 ;; This function calls:
 41487 ;;		_INT1_CallBack
 41488 ;; This function is called by:
 41489 ;;		_INTERRUPT_InterruptManager
 41490 ;; This function uses a non-reentrant model
 41491 ;;
 41492                           
 41493                           	psect	text216
 41494  0000'                    __ptext216:
 41495                           	opt stack 0
 41496  0000'                    _INT1_ISR:
 41497                           	opt stack 15
 41498                           
 41499                           ;ext_int.c: 35: (INTCON3bits.INT1IF = 0);
 41500                           
 41501                           ;incstack = 0
 41502  0000' 90F0               	bcf	intcon3,0,c	;volatile
 41503                           
 41504                           ;ext_int.c: 38: INT1_CallBack();
 41505  0002' EC00' F000'        	call	_INT1_CallBack	;wreg free
 41506  0006' 0012               	return		;funcret
 41507  0008'                    __end_of_INT1_ISR:
 41508                           	opt stack 0
 41509                           tosu	equ	0xFFF
 41510                           tosh	equ	0xFFE
 41511                           tosl	equ	0xFFD
 41512                           pclatu	equ	0xFFB
 41513                           pclath	equ	0xFFA
 41514                           tblptru	equ	0xFF8
 41515                           tblptrh	equ	0xFF7
 41516                           tblptrl	equ	0xFF6
 41517                           tablat	equ	0xFF5
 41518                           prodh	equ	0xFF4
 41519                           prodl	equ	0xFF3
 41520                           intcon	equ	0xFF2
 41521                           intcon2	equ	0xFF1
 41522                           intcon3	equ	0xFF0
 41523                           indf0	equ	0xFEF
 41524                           postinc0	equ	0xFEE
 41525                           plusw0	equ	0xFEB
 41526                           fsr0h	equ	0xFEA
 41527                           fsr0l	equ	0xFE9
 41528                           wreg	equ	0xFE8
 41529                           postinc1	equ	0xFE6
 41530                           postdec1	equ	0xFE5
 41531                           plusw1	equ	0xFE3
 41532                           fsr1h	equ	0xFE2
 41533                           fsr1l	equ	0xFE1
 41534                           indf2	equ	0xFDF
 41535                           postinc2	equ	0xFDE
 41536                           postdec2	equ	0xFDD
 41537                           plusw2	equ	0xFDB
 41538                           fsr2h	equ	0xFDA
 41539                           fsr2l	equ	0xFD9
 41540                           status	equ	0xFD8
 41541                           
 41542 ;; *************** function _INT1_CallBack *****************
 41543 ;; Defined at:
 41544 ;;		line 42 in file "mcc_generated_files/ext_int.c"
 41545 ;; Parameters:    Size  Location     Type
 41546 ;;		None
 41547 ;; Auto vars:     Size  Location     Type
 41548 ;;		None
 41549 ;; Return value:  Size  Location     Type
 41550 ;;                  1    wreg      void 
 41551 ;; Registers used:
 41552 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 41553 ;; Tracked objects:
 41554 ;;		On entry : 0/0
 41555 ;;		On exit  : 0/0
 41556 ;;		Unchanged: 0/0
 41557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41562 ;;Total ram usage:        0 bytes
 41563 ;; Hardware stack levels used:    1
 41564 ;; Hardware stack levels required when called:    1
 41565 ;; This function calls:
 41566 ;;		Absolute function
 41567 ;;		_DIO0_ISR_Lora
 41568 ;;		_INT1_DefaultInterruptHandler
 41569 ;; This function is called by:
 41570 ;;		_INT1_ISR
 41571 ;; This function uses a non-reentrant model
 41572 ;;
 41573                           
 41574                           	psect	text217
 41575  0000'                    __ptext217:
 41576                           	opt stack 0
 41577  0000'                    _INT1_CallBack:
 41578                           	opt stack 15
 41579                           
 41580                           ;ext_int.c: 45: if(INT1_InterruptHandler)
 41581                           
 41582                           ;incstack = 0
 41583  0000' 0101               	movlb	1	; () banked
 41584  0002' 5100'              	movf	_INT1_InterruptHandler& (0+255),w,b
 41585  0004' 1100'              	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 41586  0006' B4D8               	btfsc	status,2,c
 41587  0008' 0012               	return	
 41588                           
 41589                           ; BSR set to: 1
 41590                           ;ext_int.c: 46: {
 41591                           ;ext_int.c: 47: INT1_InterruptHandler();
 41592  000A' D801               	call	i2u1476_48
 41593  000C' 0012               	return	
 41594  000E'                    i2u1476_48:
 41595  000E' 0005               	push	
 41596  0010' 6EFA               	movwf	pclath,c
 41597  0012' 5100'              	movf	_INT1_InterruptHandler& (0+255),w,b
 41598  0014' 6EFD               	movwf	tosl,c
 41599  0016' 5100'              	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 41600  0018' 6EFE               	movwf	tosh,c
 41601  001A' 6AFF               	clrf	tosu,c
 41602  001C' 50FA               	movf	pclath,w,c
 41603  001E' 0012               	return		;indir
 41604  0020'                    __end_of_INT1_CallBack:
 41605                           	opt stack 0
 41606                           tosu	equ	0xFFF
 41607                           tosh	equ	0xFFE
 41608                           tosl	equ	0xFFD
 41609                           pclatu	equ	0xFFB
 41610                           pclath	equ	0xFFA
 41611                           tblptru	equ	0xFF8
 41612                           tblptrh	equ	0xFF7
 41613                           tblptrl	equ	0xFF6
 41614                           tablat	equ	0xFF5
 41615                           prodh	equ	0xFF4
 41616                           prodl	equ	0xFF3
 41617                           intcon	equ	0xFF2
 41618                           intcon2	equ	0xFF1
 41619                           intcon3	equ	0xFF0
 41620                           indf0	equ	0xFEF
 41621                           postinc0	equ	0xFEE
 41622                           plusw0	equ	0xFEB
 41623                           fsr0h	equ	0xFEA
 41624                           fsr0l	equ	0xFE9
 41625                           wreg	equ	0xFE8
 41626                           postinc1	equ	0xFE6
 41627                           postdec1	equ	0xFE5
 41628                           plusw1	equ	0xFE3
 41629                           fsr1h	equ	0xFE2
 41630                           fsr1l	equ	0xFE1
 41631                           indf2	equ	0xFDF
 41632                           postinc2	equ	0xFDE
 41633                           postdec2	equ	0xFDD
 41634                           plusw2	equ	0xFDB
 41635                           fsr2h	equ	0xFDA
 41636                           fsr2l	equ	0xFD9
 41637                           status	equ	0xFD8
 41638                           
 41639 ;; *************** function _DIO0_ISR_Lora *****************
 41640 ;; Defined at:
 41641 ;;		line 63 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 41642 ;; Parameters:    Size  Location     Type
 41643 ;;		None
 41644 ;; Auto vars:     Size  Location     Type
 41645 ;;		None
 41646 ;; Return value:  Size  Location     Type
 41647 ;;                  1    wreg      void 
 41648 ;; Registers used:
 41649 ;;		status,2, status,0
 41650 ;; Tracked objects:
 41651 ;;		On entry : 0/0
 41652 ;;		On exit  : 0/0
 41653 ;;		Unchanged: 0/0
 41654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41659 ;;Total ram usage:        0 bytes
 41660 ;; Hardware stack levels used:    1
 41661 ;; This function calls:
 41662 ;;		Nothing
 41663 ;; This function is called by:
 41664 ;;		_DIO0_ISR_Lora_Init
 41665 ;;		_INT1_CallBack
 41666 ;; This function uses a non-reentrant model
 41667 ;;
 41668                           
 41669                           	psect	text218
 41670  0000'                    __ptext218:
 41671                           	opt stack 0
 41672  0000'                    _DIO0_ISR_Lora:
 41673                           	opt stack 15
 41674                           
 41675                           ;interrupt_manager_lora_addons.c: 65: dioStatus |= 0x01;
 41676                           
 41677                           ;incstack = 0
 41678  0000' 0101               	movlb	1	; () banked
 41679  0002' 8100'              	bsf	_dioStatus& (0+255),0,b	;volatile
 41680                           
 41681                           ; BSR set to: 1
 41682  0004' 0012               	return		;funcret
 41683  0006'                    __end_of_DIO0_ISR_Lora:
 41684                           	opt stack 0
 41685                           tosu	equ	0xFFF
 41686                           tosh	equ	0xFFE
 41687                           tosl	equ	0xFFD
 41688                           pclatu	equ	0xFFB
 41689                           pclath	equ	0xFFA
 41690                           tblptru	equ	0xFF8
 41691                           tblptrh	equ	0xFF7
 41692                           tblptrl	equ	0xFF6
 41693                           tablat	equ	0xFF5
 41694                           prodh	equ	0xFF4
 41695                           prodl	equ	0xFF3
 41696                           intcon	equ	0xFF2
 41697                           intcon2	equ	0xFF1
 41698                           intcon3	equ	0xFF0
 41699                           indf0	equ	0xFEF
 41700                           postinc0	equ	0xFEE
 41701                           plusw0	equ	0xFEB
 41702                           fsr0h	equ	0xFEA
 41703                           fsr0l	equ	0xFE9
 41704                           wreg	equ	0xFE8
 41705                           postinc1	equ	0xFE6
 41706                           postdec1	equ	0xFE5
 41707                           plusw1	equ	0xFE3
 41708                           fsr1h	equ	0xFE2
 41709                           fsr1l	equ	0xFE1
 41710                           indf2	equ	0xFDF
 41711                           postinc2	equ	0xFDE
 41712                           postdec2	equ	0xFDD
 41713                           plusw2	equ	0xFDB
 41714                           fsr2h	equ	0xFDA
 41715                           fsr2l	equ	0xFD9
 41716                           status	equ	0xFD8
 41717                           
 41718 ;; *************** function _INT1_DefaultInterruptHandler *****************
 41719 ;; Defined at:
 41720 ;;		line 55 in file "mcc_generated_files/ext_int.c"
 41721 ;; Parameters:    Size  Location     Type
 41722 ;;		None
 41723 ;; Auto vars:     Size  Location     Type
 41724 ;;		None
 41725 ;; Return value:  Size  Location     Type
 41726 ;;                  1    wreg      void 
 41727 ;; Registers used:
 41728 ;;		None
 41729 ;; Tracked objects:
 41730 ;;		On entry : 0/0
 41731 ;;		On exit  : 0/0
 41732 ;;		Unchanged: 0/0
 41733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41738 ;;Total ram usage:        0 bytes
 41739 ;; Hardware stack levels used:    1
 41740 ;; This function calls:
 41741 ;;		Nothing
 41742 ;; This function is called by:
 41743 ;;		_EXT_INT_Initialize
 41744 ;;		_INT1_CallBack
 41745 ;; This function uses a non-reentrant model
 41746 ;;
 41747                           
 41748                           	psect	text219
 41749  0000'                    __ptext219:
 41750                           	opt stack 0
 41751  0000'                    _INT1_DefaultInterruptHandler:
 41752                           	opt stack 15
 41753                           
 41754                           ; BSR set to: 1
 41755                           ;incstack = 0
 41756  0000' 0012               	return		;funcret
 41757  0002'                    __end_of_INT1_DefaultInterruptHandler:
 41758                           	opt stack 0
 41759                           tosu	equ	0xFFF
 41760                           tosh	equ	0xFFE
 41761                           tosl	equ	0xFFD
 41762                           pclatu	equ	0xFFB
 41763                           pclath	equ	0xFFA
 41764                           tblptru	equ	0xFF8
 41765                           tblptrh	equ	0xFF7
 41766                           tblptrl	equ	0xFF6
 41767                           tablat	equ	0xFF5
 41768                           prodh	equ	0xFF4
 41769                           prodl	equ	0xFF3
 41770                           intcon	equ	0xFF2
 41771                           intcon2	equ	0xFF1
 41772                           intcon3	equ	0xFF0
 41773                           indf0	equ	0xFEF
 41774                           postinc0	equ	0xFEE
 41775                           plusw0	equ	0xFEB
 41776                           fsr0h	equ	0xFEA
 41777                           fsr0l	equ	0xFE9
 41778                           wreg	equ	0xFE8
 41779                           postinc1	equ	0xFE6
 41780                           postdec1	equ	0xFE5
 41781                           plusw1	equ	0xFE3
 41782                           fsr1h	equ	0xFE2
 41783                           fsr1l	equ	0xFE1
 41784                           indf2	equ	0xFDF
 41785                           postinc2	equ	0xFDE
 41786                           postdec2	equ	0xFDD
 41787                           plusw2	equ	0xFDB
 41788                           fsr2h	equ	0xFDA
 41789                           fsr2l	equ	0xFD9
 41790                           status	equ	0xFD8
 41791                           tosu	equ	0xFFF
 41792                           tosh	equ	0xFFE
 41793                           tosl	equ	0xFFD
 41794                           pclatu	equ	0xFFB
 41795                           pclath	equ	0xFFA
 41796                           tblptru	equ	0xFF8
 41797                           tblptrh	equ	0xFF7
 41798                           tblptrl	equ	0xFF6
 41799                           tablat	equ	0xFF5
 41800                           prodh	equ	0xFF4
 41801                           prodl	equ	0xFF3
 41802                           intcon	equ	0xFF2
 41803                           intcon2	equ	0xFF1
 41804                           intcon3	equ	0xFF0
 41805                           indf0	equ	0xFEF
 41806                           postinc0	equ	0xFEE
 41807                           plusw0	equ	0xFEB
 41808                           fsr0h	equ	0xFEA
 41809                           fsr0l	equ	0xFE9
 41810                           wreg	equ	0xFE8
 41811                           postinc1	equ	0xFE6
 41812                           postdec1	equ	0xFE5
 41813                           plusw1	equ	0xFE3
 41814                           fsr1h	equ	0xFE2
 41815                           fsr1l	equ	0xFE1
 41816                           indf2	equ	0xFDF
 41817                           postinc2	equ	0xFDE
 41818                           postdec2	equ	0xFDD
 41819                           plusw2	equ	0xFDB
 41820                           fsr2h	equ	0xFDA
 41821                           fsr2l	equ	0xFD9
 41822                           status	equ	0xFD8
 41823                           
 41824                           	psect	text220
 41825  0000'                    __ptext220:
 41826                           	opt stack 0
 41827                           tosu	equ	0xFFF
 41828                           tosh	equ	0xFFE
 41829                           tosl	equ	0xFFD
 41830                           pclatu	equ	0xFFB
 41831                           pclath	equ	0xFFA
 41832                           tblptru	equ	0xFF8
 41833                           tblptrh	equ	0xFF7
 41834                           tblptrl	equ	0xFF6
 41835                           tablat	equ	0xFF5
 41836                           prodh	equ	0xFF4
 41837                           prodl	equ	0xFF3
 41838                           intcon	equ	0xFF2
 41839                           intcon2	equ	0xFF1
 41840                           intcon3	equ	0xFF0
 41841                           indf0	equ	0xFEF
 41842                           postinc0	equ	0xFEE
 41843                           plusw0	equ	0xFEB
 41844                           fsr0h	equ	0xFEA
 41845                           fsr0l	equ	0xFE9
 41846                           wreg	equ	0xFE8
 41847                           postinc1	equ	0xFE6
 41848                           postdec1	equ	0xFE5
 41849                           plusw1	equ	0xFE3
 41850                           fsr1h	equ	0xFE2
 41851                           fsr1l	equ	0xFE1
 41852                           indf2	equ	0xFDF
 41853                           postinc2	equ	0xFDE
 41854                           postdec2	equ	0xFDD
 41855                           plusw2	equ	0xFDB
 41856                           fsr2h	equ	0xFDA
 41857                           fsr2l	equ	0xFD9
 41858                           status	equ	0xFD8
 41859                           
 41860                           	psect	rparam
 41861  0000                     tosu	equ	0xFFF
 41862                           tosh	equ	0xFFE
 41863                           tosl	equ	0xFFD
 41864                           pclatu	equ	0xFFB
 41865                           pclath	equ	0xFFA
 41866                           tblptru	equ	0xFF8
 41867                           tblptrh	equ	0xFF7
 41868                           tblptrl	equ	0xFF6
 41869                           tablat	equ	0xFF5
 41870                           prodh	equ	0xFF4
 41871                           prodl	equ	0xFF3
 41872                           intcon	equ	0xFF2
 41873                           intcon2	equ	0xFF1
 41874                           intcon3	equ	0xFF0
 41875                           indf0	equ	0xFEF
 41876                           postinc0	equ	0xFEE
 41877                           plusw0	equ	0xFEB
 41878                           fsr0h	equ	0xFEA
 41879                           fsr0l	equ	0xFE9
 41880                           wreg	equ	0xFE8
 41881                           postinc1	equ	0xFE6
 41882                           postdec1	equ	0xFE5
 41883                           plusw1	equ	0xFE3
 41884                           fsr1h	equ	0xFE2
 41885                           fsr1l	equ	0xFE1
 41886                           indf2	equ	0xFDF
 41887                           postinc2	equ	0xFDE
 41888                           postdec2	equ	0xFDD
 41889                           plusw2	equ	0xFDB
 41890                           fsr2h	equ	0xFDA
 41891                           fsr2l	equ	0xFD9
 41892                           status	equ	0xFD8
 41893                           
 41894                           	psect	temp
 41895  0000'                    btemp:
 41896                           	opt stack 0
 41897  0000'                    	ds	12
 41898  0000                     wtemp0	set	btemp
 41899  0000                     wtemp1	set	btemp+2
 41900  0000                     wtemp2	set	btemp+4
 41901  0000                     wtemp3	set	btemp+6
 41902  0000                     wtemp4	set	btemp+8
 41903  0000                     wtemp5	set	btemp+10
 41904  0000                     wtemp6	set	btemp+1
 41905  0000                     ttemp0	set	btemp
 41906  0000                     ttemp1	set	btemp+3
 41907  0000                     ttemp2	set	btemp+6
 41908  0000                     ttemp3	set	btemp+9
 41909  0000                     ltemp0	set	btemp
 41910  0000                     ltemp1	set	btemp+4
 41911  0000                     ltemp2	set	btemp+8
 41912                           tosu	equ	0xFFF
 41913                           tosh	equ	0xFFE
 41914                           tosl	equ	0xFFD
 41915                           pclatu	equ	0xFFB
 41916                           pclath	equ	0xFFA
 41917                           tblptru	equ	0xFF8
 41918                           tblptrh	equ	0xFF7
 41919                           tblptrl	equ	0xFF6
 41920                           tablat	equ	0xFF5
 41921                           prodh	equ	0xFF4
 41922                           prodl	equ	0xFF3
 41923                           intcon	equ	0xFF2
 41924                           intcon2	equ	0xFF1
 41925                           intcon3	equ	0xFF0
 41926                           indf0	equ	0xFEF
 41927                           postinc0	equ	0xFEE
 41928                           plusw0	equ	0xFEB
 41929                           fsr0h	equ	0xFEA
 41930                           fsr0l	equ	0xFE9
 41931                           wreg	equ	0xFE8
 41932                           postinc1	equ	0xFE6
 41933                           postdec1	equ	0xFE5
 41934                           plusw1	equ	0xFE3
 41935                           fsr1h	equ	0xFE2
 41936                           fsr1l	equ	0xFE1
 41937                           indf2	equ	0xFDF
 41938                           postinc2	equ	0xFDE
 41939                           postdec2	equ	0xFDD
 41940                           plusw2	equ	0xFDB
 41941                           fsr2h	equ	0xFDA
 41942                           fsr2l	equ	0xFD9
 41943                           status	equ	0xFD8


Data Sizes:
    Strings     59
    Constant    514
    Data        56
    BSS         1187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     59      75
    BANK0           160    155     160
    BANK1           256    112     241
    BANK2           256      0     247
    BANK3           256      0     160
    BANK4           256      0     144
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    RxData@pData	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    S316$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[144]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[144]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), 
		 -> ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), 
		 -> Channels(BANK4[144]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), 
		 -> ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), 
		 -> Channels(BANK4[144]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> STR_4(CODE[5]), applicationKeyNew(BANK2[16]), deviceEuiNew(BANK1[8]), applicationEuiNew(BANK1[8]), 
		 -> RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), DefaultChannels915(CODE[144]), AESCmac@y(BANK1[16]), 
		 -> AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), loRa.devNonce(BANK2[2]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 
		 -> loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), 
		 -> loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), NULL(NULL[0]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[231]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> STR_4(CODE[5]), applicationKeyNew(BANK2[16]), deviceEuiNew(BANK1[8]), applicationEuiNew(BANK1[8]), 
		 -> RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), DefaultChannels915(CODE[144]), AESCmac@y(BANK1[16]), 
		 -> AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), loRa.devNonce(BANK2[2]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 
		 -> loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), 
		 -> loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), NULL(NULL[0]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[231]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_3(CODE[30]), STR_2(CODE[24]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), DIO1_ISR_Lora(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), DIO1_ISR_Lora(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), DIO0_ISR_Lora(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), DIO0_ISR_Lora(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), DIO2_ISR_Lora(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), Absolute function(), DIO2_ISR_Lora(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S2528$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S2528$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> SelectChannelForTransmission@channelIndex(BANK0[1]), LORAWAN_RxDone@channelIndex(BANK0[1]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E7264,)void  size(2) Largest target is 1
		 -> RxData(), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), TransmissionErrorCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    S1631$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), TransmissionErrorCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> Absolute function(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), TransmissionErrorCallback(), UpdateJoinSuccessState(), 
		 -> AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), 
		 -> Absolute function(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), macBuffer(BIGRAM[271]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> STR_4(CODE[5]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 231
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(2) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), 
		 -> Channels(BANK4[144]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_SetApplicationKey@applicationKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> applicationKeyNew(BANK2[16]), 

    LORAWAN_SetApplicationEui@applicationEuiNew	PTR unsigned char  size(2) Largest target is 8
		 -> applicationEuiNew(BANK1[8]), 

    LORAWAN_SetDeviceEui@deviceEuiNew	PTR unsigned char  size(2) Largest target is 8
		 -> deviceEuiNew(BANK1[8]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), 
		 -> ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), 
		 -> Channels(BANK4[144]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 5
		 -> STR_4(CODE[5]), NULL(NULL[0]), 

    S316$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S316$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 

    EncKeySchedule@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), aesBuffer(BANK1[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), loRa(BANK2[231]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_CallBack->_TMR_ISR_lora
    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _printf->___llmod
    _putch->_EUSART1_Write
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCB4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _LORAWAN_SetDeviceEui->_memcpy
    _LORAWAN_SetApplicationKey->_memcpy
    _LORAWAN_SetApplicationEui->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_SelectChannelForTransmission
    _TransmissionErrorCallback->_SelectChannelForTransmission
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _GetRx1Freq->_GenerateUSFrequencyReception
    _GenerateUSFrequencyReception->___lmul
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_SelectChannelForTransmission
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_DIO2->_RADIO_FHSSChangeChannel
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_TxDone->___lmul
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_Retransmissions
    _Retransmissions->_SelectChannelForTransmission
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetChannelFrequency
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ValidateFrequency->___llmod
    _ExecuteNewChannel->_GenerateUSFrequency2
    _LORAWAN_SetDataRange->_ValidateDataRange
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels2
    _EnableChannels2->_UpdateChannelIdStatus
    _UpdateChannelIdStatus->_UpdateMinMaxChDataRate
    _LORAWAN_Send->_AssemblePacket
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _RADIO_FSKPacketSent->___lmul
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_TxDone->_SwTimerStart
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___llmod
    ___llmod->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault915Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate
    _LORAWAN_GetFrequency->_GenerateUSFrequency2
    _GenerateUSFrequency2->___lmul
    _GenerateUSFrequency1->___lmul
    ___lmul->_SwTimerReadValue
    _LORAWAN_GetChannelIdStatus->_ValidateChannelId

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxDone->_AESCmac
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0 4148871
                                            153 BANK0      2     2      0
                                            105 BANK1      7     7      0
         _LORAWAN_GetChannelIdStatus
               _LORAWAN_GetFrequency
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
                      _LORAWAN_Reset
                       _LORAWAN_Send
          _LORAWAN_SetApplicationEui
          _LORAWAN_SetApplicationKey
               _LORAWAN_SetDeviceEui
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    25      8    6282
                                             22 BANK0     24    16      8
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1600
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0     800
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0       0
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2       0
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     200
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     200
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     400
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceEui                                 2     0      2   11490
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationKey                            2     0      2   11490
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationEui                            2     0      2   11490
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 3432737
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 1326519
                                            122 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
          _TransmissionErrorCallback *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  123077
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _TransmissionErrorCallback                            5     4      1  125681
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  160806
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  149968
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow2Callback                       1     0      1  242438
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  121246
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           5     1      4    4228
                                             79 BANK0      5     1      4
       _GenerateUSFrequencyReception
 ---------------------------------------------------------------------------------
 (5) _GenerateUSFrequencyReception                         9     5      4    4205
                                             70 BANK0      9     5      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    6573
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  259627
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  130079
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                             _RxData *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           3     3      0    8478
                                              5 BANK0      3     3      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   30342
                                             35 BANK0      3     3      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  188583
                                            106 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  158220
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   21841
                                             34 BANK0      1     1      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 1861836
                                            149 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    8387
                                              4 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                        12    12      0   37376
                                             70 BANK0     12    12      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0  829569
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              7     6      1     389
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0  957177
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    0     0      0  136385
                    _Retransmissions
                             _RxData *
                   _SetJoinFailState
 ---------------------------------------------------------------------------------
 (5) _Retransmissions                                      4     4      0  132161
                                            102 BANK0      4     4      0
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3  807097
                                            122 BANK0     25    25      0
                                            102 BANK1      3     0      3
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                             _RxData *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _UpdateRetransmissionAckTimeoutState                  4     4      0    6480
                                             58 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    6504
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     199
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                         3     1      2      89
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  125443
     _LORAWAN_EnterContinuousReceive
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_EnterContinuousReceive                       0     0      0  121219
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RADIO_ReceiveStart                                  10     8      2  102528
                                             81 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadioRx                                     5     1      4    1019
                                              9 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadio                                       5     1      4     664
                                              4 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (7) _RADIO_SetModulation                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _RADIO_SetFrequencyHopPeriod                          2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   27207
                                             93 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     716
                                              7 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0     559
                                              6 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     515
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               9     7      2    5972
                                             70 BANK0      9     7      2
     _UpdateReceiveWindow2Parameters
          _ValidateDataRateReception
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateFrequency                                    5     1      4     961
                                             22 BANK0      5     1      4
                            ___llmod
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRateReception                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     400
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                   10     8      2   15441
                                             83 BANK0     10     8      2
               _GenerateUSFrequency1
               _GenerateUSFrequency2
         _LORAWAN_SetChannelIdStatus
               _LORAWAN_SetDataRange
                  _ValidateChannelId
                  _ValidateDataRange
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _LORAWAN_SetDataRange                                 3     2      1     898
                                              7 BANK0      3     2      1
                    _UpdateDataRange
                  _ValidateDataRange
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    5     4      1     580
                                              2 BANK0      5     4      1
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (8) _UpdateDataRange                                      2     1      1     133
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (7) _LORAWAN_SetChannelIdStatus                           3     2      1     854
                                              4 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     157
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                      18    16      2    3912
                                             16 BANK0     18    16      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
            _ValidateChannelMaskCntl
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (8) _ValidateDataRate                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              4     2      2     157
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       5     2      3    2450
                                             11 BANK0      5     2      3
                    _EnableChannels2
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (8) _EnableChannels2                                      7     4      3    1336
                                              4 BANK0      7     4      3
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (8) _UpdateChannelIdStatus                                2     1      1     645
                                              2 BANK0      2     1      1
_UpdateCurrentDataRateAfterDataRange
             _UpdateMinMaxChDataRate
 ---------------------------------------------------------------------------------
 (9) _UpdateCurrentDataRateAfterDataRangeChanges           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     3     1      2     157
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Send                                         7     3      4  259627
                                            115 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReceiveStop                                    0     0      0   13448
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_GetMaxPayloadSize                            3     3      0     184
                                              8 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (2) _AssemblePacket                                      12     7      5  125869
                                            103 BANK0     12     7      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _IncludeMacCommandsResponse                          15    10      5    1870
                                              0 BANK0     15    10      5
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (4) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FindSmallestDataRate                                 4     4      0     315
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _EncryptFRMPayload                                   24    10     14   37271
                                             49 BANK0     24    10     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     478
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _AssembleEncryptionBlock                              9     2      7   16241
                                             11 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _CountfOptsLength                                     8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          12     8      4   11982
                                             11 BANK0     12     8      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   31423
                                             49 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   14925
                                             11 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     221
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     177
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                 13    13      0   29124
                                             70 BANK0     13    13      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _SwTimerReadValue                                     9     5      4     361
                                             49 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      16    14      2   10973
                                             58 BANK0     12    10      2
                    _RADIO_GetStatus
                             _RxData *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RxData                                               4     0      4    4224
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  207716
                                            123 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SelectChannelForTransmission                         9     9      0   15251
                                             93 BANK0      9     9      0
               _GenerateUSFrequency1
               _GenerateUSFrequency2
                 _RADIO_SetBandwidth
                       _RADIO_SetCRC
          _RADIO_SetChannelFrequency
                _RADIO_SetIQInverted
              _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
           _RADIO_SetSpreadingFactor
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (3) _SearchAvailableChannel                              14    11      3    6036
                                             79 BANK0     14    11      3
                             _Random
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetSpreadingFactor                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetOutputPower                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetIQInverted                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetChannelFrequency                            4     0      4     332
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetCRC                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetBandwidth                                   1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Transmit                                      17    14      3  103602
                                             81 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteConfiguration                            11     9      2   73856
                                             70 BANK0     11     9      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _RADIO_WritePower                                     3     3      0    8759
                                              4 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   12445
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKBitRate                                8     4      4   12444
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                             11    11      0   86165
                                            112 BANK0     11    11      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _Random                                               2     0      2    4697
                                             77 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (5) _rand                                                 2     0      2    4160
                                             70 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     337
                                             72 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   66868
                                            103 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _AESCmac                                            116   109      7   54864
                                             89 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _GenerateSubkey                                      40    34      6   21292
                                             49 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (5) _FillSubKey                                           8     3      5    1270
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AESEncodeLoRa                                       20    16      4   16320
                                             29 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _AESEncode                                           24    20      4    3397
                                              6 BANK0     23    19      4
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (6) _EncodeShiftRow                                       3     1      2     709
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _EncKeySchedule                                       6     4      2     839
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  130561
                                             81 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     111
                                             18 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2224
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     6     4      2   22531
                                             12 BANK0      6     4      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Reset                                        0     0      0   66669
             _InitDefault915Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
                   _RADIO_SetPABoost
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (2) _UpdateMinMaxChDataRate                               2     2      0     156
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      22
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (2) _RADIO_SetPABoost                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_SetLoRaSyncWord                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           8     2      6   38671
                                             34 BANK0      8     2      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2224
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteMode                                      7     5      2   13448
                                              5 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterRead                                   2     2      0      90
                                              2 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (4) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFrequency                                12     8      4   13385
                                             22 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     693
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterWrite                                  2     1      1    8365
                                              2 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALSPISend                                           1     1      0      44
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI2_Exchange8bit                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     601
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _SystemBlockingWaitMs                                 5     1      4     557
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_LinkCheckConfigure                          11     9      2   10887
                                             70 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    3900
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _SwTimerStop                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SwTimerStart                                         9     9      0    1201
                                             49 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (4) _TMR_OverrideRemaining                               10     6      4     773
                                             10 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (5) _TMR_SwapTimer                                        2     0      2     572
                                              8 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     329
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SwTimersInterrupt                                   17    13      4     316
                                             32 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (5) _TMR_GetDeltaTime                                    24    20      4      69
                                              8 BANK0     24    20      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_ReadTimer                                       8     6      2      69
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetTimeout                                    9     5      4    1379
                                             13 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _InitDefault915Channels                               0     0      0   14123
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    2766
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6   11357
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     111
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_GetFrequency                                 9     5      4    8545
                                             83 BANK0      9     5      4
               _GenerateUSFrequency1
               _GenerateUSFrequency2
 ---------------------------------------------------------------------------------
 (3) _GenerateUSFrequency2                                13     9      4    4205
                                             70 BANK0     13     9      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _GenerateUSFrequency1                                 9     5      4    4205
                                             70 BANK0      9     5      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    4160
                                             58 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_GetChannelIdStatus                           2     2      0     114
                                              2 BANK0      2     2      0
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     713
                                             51 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     713
                      _TMR1_CallBack
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     573
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        2     2      0     573
                                             49 COMRAM     2     2      0
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     257
                                              8 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) i2_TMR1_WriteTimer                                   2     0      2     140
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     316
                                             32 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 24    20      4      69
                                              8 COMRAM    24    20      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    8     6      2      69
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO0_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_GetChannelIdStatus
     _ValidateChannelId
   _LORAWAN_GetFrequency
     _GenerateUSFrequency1
       ___lmul
         _SwTimerReadValue (ARG)
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
     _GenerateUSFrequency2
       ___lmul
         _SwTimerReadValue (ARG)
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault915Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _RADIO_SetPABoost
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _GenerateUSFrequency1
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _GenerateUSFrequency2
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_SetBandwidth
       _RADIO_SetCRC
       _RADIO_SetChannelFrequency
       _RADIO_SetIQInverted
       _RADIO_SetLoRaSyncWord
       _RADIO_SetOutputPower
       _RADIO_SetSpreadingFactor
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _RADIO_GetStatus
           _RxData *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels2
                   _UpdateChannelIdStatus
                     _UpdateCurrentDataRateAfterDataRangeChanges
                     _UpdateMinMaxChDataRate
                 _UpdateChannelIdStatus
                   _UpdateCurrentDataRateAfterDataRangeChanges
                   _UpdateMinMaxChDataRate
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMaskCntl
               _ValidateDataRate
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                   _UpdateCurrentDataRateAfterDataRangeChanges
                   _UpdateMinMaxChDataRate
                 _ValidateChannelId
               _LORAWAN_SetDataRange
                 _UpdateDataRange
                 _ValidateDataRange
                   _ValidateDataRate
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRateReception
               _ValidateFrequency
                 ___llmod
                   ___lldiv (ARG)
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                       ___lldiv (ARG)
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
           _SwTimerStop *
           _UpdateCfList *
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _Retransmissions
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
             _SelectChannelForTransmission *
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _UpdateRetransmissionAckTimeoutState *
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
           _RxData *
           _SetJoinFailState *
             _RxJoinResponse *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels2
                   _UpdateChannelIdStatus
                     _UpdateCurrentDataRateAfterDataRangeChanges
                     _UpdateMinMaxChDataRate
                 _UpdateChannelIdStatus
                   _UpdateCurrentDataRateAfterDataRangeChanges
                   _UpdateMinMaxChDataRate
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMaskCntl
               _ValidateDataRate
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                   _UpdateCurrentDataRateAfterDataRangeChanges
                   _UpdateMinMaxChDataRate
                 _ValidateChannelId
               _LORAWAN_SetDataRange
                 _UpdateDataRange
                 _ValidateDataRange
                   _ValidateDataRate
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRateReception
               _ValidateFrequency
                 ___llmod
                   ___lldiv (ARG)
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                       ___lldiv (ARG)
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
           _SwTimerStop *
           _UpdateCfList *
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _RADIO_GetStatus
           _RxData *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _Retransmissions
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
             _SelectChannelForTransmission *
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _UpdateRetransmissionAckTimeoutState *
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
           _RxData *
           _SetJoinFailState *
             _RxJoinResponse *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _GenerateUSFrequency1
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _GenerateUSFrequency2
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_SetBandwidth
           _RADIO_SetCRC
           _RADIO_SetChannelFrequency
           _RADIO_SetIQInverted
           _RADIO_SetLoRaSyncWord
           _RADIO_SetOutputPower
           _RADIO_SetSpreadingFactor
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               ___awdiv
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _GenerateUSFrequency1
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _GenerateUSFrequency2
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_SetBandwidth
             _RADIO_SetCRC
             _RADIO_SetChannelFrequency
             _RADIO_SetIQInverted
             _RADIO_SetLoRaSyncWord
             _RADIO_SetOutputPower
             _RADIO_SetSpreadingFactor
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
           _GenerateUSFrequencyReception
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxData *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _Retransmissions
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
             _SelectChannelForTransmission *
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _UpdateRetransmissionAckTimeoutState *
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
           _RxData *
           _SetJoinFailState *
             _RxJoinResponse *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _Retransmissions
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                     ___lldiv (ARG)
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
             _SelectChannelForTransmission *
               _GenerateUSFrequency1
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _GenerateUSFrequency2
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_SetBandwidth
               _RADIO_SetCRC
               _RADIO_SetChannelFrequency
               _RADIO_SetIQInverted
               _RADIO_SetLoRaSyncWord
               _RADIO_SetOutputPower
               _RADIO_SetSpreadingFactor
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _UpdateRetransmissionAckTimeoutState *
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
           _RxData *
           _SetJoinFailState *
             _RxJoinResponse *
         _LORAWAN_TxDone
           _RADIO_GetStatus
           _RxData *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _TransmissionErrorCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _GenerateUSFrequency1
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _GenerateUSFrequency2
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_SetBandwidth
           _RADIO_SetCRC
           _RADIO_SetChannelFrequency
           _RADIO_SetIQInverted
           _RADIO_SetLoRaSyncWord
           _RADIO_SetOutputPower
           _RADIO_SetSpreadingFactor
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _GenerateUSFrequency1
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _GenerateUSFrequency2
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_SetBandwidth
           _RADIO_SetCRC
           _RADIO_SetChannelFrequency
           _RADIO_SetIQInverted
           _RADIO_SetLoRaSyncWord
           _RADIO_SetOutputPower
           _RADIO_SetSpreadingFactor
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_Reset
     _InitDefault915Channels
       _memcpy
       _memset
     _LORAWAN_LinkCheckConfigure
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
       ___lmul
         _SwTimerReadValue (ARG)
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_SetLoRaSyncWord
     _RADIO_SetPABoost
     _StopAllSoftwareTimers
       _SwTimerStop
     _UpdateMinMaxChDataRate
     _memset
   _LORAWAN_Send
     _AssemblePacket
       _AESCmac
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _GenerateSubkey
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _FillSubKey
           _memset
         _memcpy
         _memset
       _AssembleEncryptionBlock
         _memcpy
         _memset
       _CountfOptsLength
       _EncryptFRMPayload
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _AssembleEncryptionBlock
           _memcpy
           _memset
         ___awdiv
       _FindSmallestDataRate
       _IncludeMacCommandsResponse
         _RADIO_GetPacketSnr
       _memcpy
       _memset
     _LORAWAN_GetMaxPayloadSize
       _CountfOptsLength
     _RADIO_ReceiveStop
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _GenerateUSFrequency1
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _GenerateUSFrequency2
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_SetBandwidth
       _RADIO_SetCRC
       _RADIO_SetChannelFrequency
       _RADIO_SetIQInverted
       _RADIO_SetLoRaSyncWord
       _RADIO_SetOutputPower
       _RADIO_SetSpreadingFactor
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
   _LORAWAN_SetApplicationEui
     _memcpy
   _LORAWAN_SetApplicationKey
     _memcpy
   _LORAWAN_SetDeviceEui
     _memcpy
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCB4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCB4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer
     i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     21E      37       13.9%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      90      14       56.3%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      A0      11       62.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F7       9       96.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     70      F1       7       94.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9B      A0       5      100.0%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     3B      4B       1       90.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       1       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     403      12        0.0%
DATA                 0      0     622       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Oct 04 16:22:06 2018

                                   ??_LORAWAN_TxDone 00003C                           __end_of_DIO3_ISR_Lora_Init 000002  
                                 ?_LORAWAN_RxTimeout 000000                     __size_of_RADIO_FHSSChangeChannel 000000  
                          _ValidateDataRateReception 000000                                       HALSPISend@data 000001  
                    __end_of_ValidateChannelMaskCntl 000020                                                   l43 000018  
                                                 l60 0001E0                                                   l52 000188  
                                                 l70 000118                                                   l62 0001EA  
                                                 l54 000192                                                   l46 000052  
                                                 l63 000312                                                   l72 000122  
                                                 l56 0001B4                                                   l49 0000B8  
                                                 l58 0001BE                                         ___awdiv@sign 000005  
                    __size_of_UpdateJoinSuccessState 000000                           ValidateDataRange@channelId 000006  
                                ___wmul@multiplicand 000002                   __size_of_IOCB4_SetInterruptHandler 000000  
                                       _TMR_ISR_lora 000000                                __end_of_AESEncodeLoRa 000036  
                                        ?_RADIO_DIO0 000000                                          ?_RADIO_DIO1 000000  
                                        ?_RADIO_DIO2 000000                                          ?_RADIO_DIO3 000000  
                                        ?_RADIO_DIO4 000000                                          ?_RADIO_DIO5 000000  
                         ?_IOCB4_SetInterruptHandler 000000                                         __CFG_CP0$OFF 000000  
                                       __CFG_CP1$OFF 000000                                         __CFG_CP2$OFF 000000  
                                       __CFG_CP3$OFF 000000                                          __CFG_LVP$ON 000000  
                                ??_LORAWAN_RxTimeout 00006A                                                  l265 00006C  
                                                l610 000112                                                  l540 000092  
                                                l700 00065E                                                  l541 000084  
                                                l293 0000C4                                                  l285 000020  
                                                l542 000050                                                  l710 00088E  
                                                l702 00077A                                                  l543 000080  
                                                l287 000048                                                  l711 0008AA  
                                                l640 0000DC                                                  l800 000056  
                                                l288 000058                                                  l704 00084E  
                                                l641 000012                                                  l721 000AAA  
                                                l713 0008D6                                                  l705 000836  
                                                l561 0000AE                                                  l642 000078  
                                                l802 0000AC                                                  l643 0000D8  
                                                l723 000B7E                                                  l715 0008E8  
                                                l548 0000E6                                                  l812 00040A  
                                                l820 00025E                                                  l724 000B78  
                                                l716 00093E                                                  l564 0000C0  
                                                l821 0002A4                                                  l813 0000AE  
                                                l717 00094C                                                  l573 0000D0  
                                        ?_RADIO_Init 000022                                                  l902 000084  
                                                l830 0003DA                                                  l822 0002A8  
                                                l814 00011C                                                  l718 000AB0  
                                                l807 000448                                                  l831 0003E4  
                                                l823 000304                                                  l815 000162  
                                                l743 000C64                                                  l719 000A1A  
                                                l671 00011A                                                  l559 00002A  
                                                l920 00015A                                                  l840 000092  
                                                l808 000018                                                  l760 0001F8  
                                                l664 000C28                                                  l913 000106  
                                                l841 000020                                                  l817 000446  
                                                l761 00020E                                                  l753 000010  
                                                l737 000C06                                                  l729 000B72  
                                                l681 000618                                                  l665 0001D6  
                                                l914 00002C                                                  l842 000090  
                                                l818 0001AA                                                  l754 000268  
                                                l762 000224                                                  l738 000C0A  
                                                l690 000490                                                  l682 000258  
                                                l915 000072                                                  l827 000324  
                                                l819 000218                                                  l747 000034  
                                                l763 00023A                                                  l755 0001A0  
                                                l683 000368                                                  l667 000036  
                                                l844 0000B4                                                  l828 000392  
                                                l780 00016A                                                  l748 00005A  
                                                l764 0002C4                                                  l756 0002A4  
                                                l852 000066                                                  l692 0004E4  
                                                l684 000420                                                  l676 00012C  
                                                l668 000084                                                  l588 000162  
                                                l781 000122                                                  l757 0001B6  
                                                l685 000408                                                  l669 000088  
                                                l758 0001CC                                                  l678 000C22  
                                                l694 000500                                                  l919 0001C6  
                                                l839 00001A                                                  l783 000166  
                                                l863 000032                                                  l759 0001E2  
                                                l848 0000D0                                                  l792 0001AE  
                                                l696 000512                                                  l961 000156  
                                                l793 00021A                                                  l777 00007C  
                                                l697 0005C0                                                  l689 000450  
                                                l970 00023A                                                  l954 00006A  
                                                l890 00007E                                                  l794 0002A4  
                                                l778 000086                                                  l971 000248  
                                                l963 000188                                                  l883 00003A  
                                                l787 00016C                                                  l956 000118  
                                                l876 000016                                                  l796 00030C  
                                                l788 00017A                                                  l981 00006A  
                                                l965 0001AA                                                  l957 0000DE  
                                                l877 00002C                                                  l893 0000BA  
                                                l789 00019C                                                  l974 00032E  
                                                l966 0001BE                                                  l958 000096  
                                                l878 000042                                                  l894 00000C  
                                                l983 000092                                                  l967 0001CE  
                                                l887 000054                                      ??_UpdateTxPower 000000  
                                                l992 000058                                                  l993 000010  
                                                l985 0000E6                                                  l969 0002E6  
                                                l889 00006A                                                  l897 0000B8  
                                                l987 00010E                                         __CFG_CPB$OFF 000000  
                                       __CFG_CPD$OFF 000000                 __end_of_SelectChannelForTransmission 0001F0  
              __size_of_SelectChannelForTransmission 000000                         _SelectChannelForTransmission 000000  
                             _ExecuteRxParamSetupReq 000000                           ??_INT0_SetInterruptHandler 000000  
                                 _DIO2_ISR_Lora_Init 000000                                   __size_of_AESEncode 000000  
                                    _timer1ReloadVal 00000C                                      ?_EncKeySchedule 000000  
 __end_of_UpdateCurrentDataRateAfterDataRangeChanges 00001A  __size_of_UpdateCurrentDataRateAfterDataRangeChanges 000000  
        ?_UpdateCurrentDataRateAfterDataRangeChanges 000000         ??_UpdateCurrentDataRateAfterDataRangeChanges 000000  
         _UpdateCurrentDataRateAfterDataRangeChanges 000000                                _RADIO_SetLoRaSyncWord 000000  
                                                prod 000FF3                                                  tosl 000FFD  
                                                wreg 000FE8                                           _TXSTA1bits 000FAC  
                                    __end_of_AESCmac 0003AA                              __end_of_SwTimersExecute 0000E6  
                             SystemBlockingWaitMs@ms 000000                              LORAWAN_Join@bufferIndex 00007B  
                           __size_of_RADIO_GetStatus 000000                                ?_SystemBlockingWaitMs 000000  
                               ??i2_TMR_GetDeltaTime 00000C                             ??_SearchAvailableChannel 000052  
                       __end_of_FindSmallestDataRate 0000D6                  __end_of_RADIO_SetFrequencyHopPeriod 00000A  
                        _RADIO_SetFrequencyHopPeriod 000000                                           _CheckFlags 000000  
                             ?_TMR_OverrideRemaining 00000A                                        _INT1_CallBack 000000  
                           ?_AssembleEncryptionBlock 00000B                                  ?_DIO2_ISR_Lora_Init 000000  
                                 __size_of_IOCB4_ISR 000000                                                 l1020 000010  
                                               l1102 0000F4                                                 l1103 000186  
                                               l1112 00000C                                                 l1120 000020  
                                               l2000 00002C                                                 l1121 000002  
                                               l1130 000086                                                 l2002 000032  
                                               l2003 000038                                                 l2012 00007C  
                                               l2020 000028                                                 l2005 000084  
                                               l2021 00002E                                                 l1126 000084  
                                               l2006 000052                                                 l2007 000064  
                                               l2023 000048                                                 l2031 00003E  
                                               l2032 000030                                                 l1160 0000DA  
                                               l1401 000034                                                 l2009 000074  
                                               l2017 000036                                                 l1161 00000A  
                                               l1170 000026                                                 l1146 000060  
                                               l2018 000022                                                 l1403 00005C  
                                               l1172 000082                                                 l1500 000122  
                                               l2036 000036                                                 l1164 0000D6  
                                               l1421 00002C                                                 l1174 0000E6  
                                               l1510 0000CE                                                 l1407 000022  
                                               l1503 000164                                                 l1511 00010E  
                                               l1520 0000AC                                                 l1416 000024  
                                               l1512 00014E                                                 l1169 0000E8  
                                               l1521 000036                                                 l1425 000260  
                                               l1505 0001E0                                                 l1513 00020A  
                                               l1602 00001A                                                 l1522 0000A8  
                                               l1426 000146                                                 l1506 0001EC  
                                               l2082 000032                                                 l2251 000014  
                                               l2067 000044                                                 l1435 00002E  
                                               l3044 000018                                                 l1612 000084  
                                               l1620 000020                                                 l1460 000420  
                                               l1436 00001A                                                 l3045 000010  
                                               l1517 00001A                                                 l1429 000292  
                                               l1621 00002E                                                 l1613 00000A  
                                               l2077 000038                                                 l2085 000044  
                                               l1526 0000E8                                                 l1550 00006E  
                                               l1606 00001C                                                 l1446 000014  
                                               l1462 000254                                                 l1542 000016  
                                               l1438 000024                                                 l1519 000030  
                                               l1623 000052                                                 l1463 0000B8  
                                               l3064 00001C                                                 l3048 000030  
                                               l1528 0000F8                                                 l1560 0001C6  
                                               l1552 00010E                                                 l1456 00001C  
                                               l1624 000060                                                 l1480 0001B0  
                                               l1472 000184                                                 l2600 000104  
                                               l3065 00000A                                                 l1801 00010A  
                                               l3049 00003A                                                 l1553 0000A8  
                                               l3058 00004C                                                 l1810 0001D0  
                                               l1802 000120                                                 l1554 0000E6  
                                               l1490 000406                                                 l1482 0001FC  
                                               l2610 0001E6                                                 l2602 000124  
                                               l3059 000012                                                 l1811 0001C6  
                                               l1387 000018                                                 l1555 0000E0  
                                               l1643 000038                                                 l1483 000242  
                                               l1467 000194                                                 l1651 00001A  
                                               l2611 000216                                                 l2436 00000A  
                                               l1812 0001CE                                                 l1804 000154  
                                               l1388 00001C                                                 l1556 0001EA  
                                               l1644 00000A                                                 l1492 0004AA  
                                               l1476 00028C                                                 l1468 0000DA  
                                               l1900 00002A                                                 l2620 000246  
                                               l2612 0001FC                                                 l2604 00015E  
                                               l1557 00015E                                                 l1645 00001A  
                                               l1485 0002DC                                                 l1477 00019E  
                                               l1469 000132                                                 l2621 0002DA  
                                               l1830 0000B8                                                 l1646 000026  
                                               l1486 00031C                                                 l1582 000014  
                                               l1910 000156                                                 l1662 0000FA  
                                               l2622 000254                RADIO_WriteConfiguration@symbolTimeout 000046  
                                               l1751 000036                                                 l1831 00016C  
                                               l1559 0001C0                                                 l1479 0001A4  
                                               l1911 000226                                                 l1903 000042  
                                               l1663 0000C6                                                 l1760 0000AE  
                                               l1832 0000E0                                                 l2800 000064  
                                               l1488 0003D8                                                 l1592 000080  
                                               l1904 00004E                                                 l1664 000088  
                                               l2608 0001BA                                                 l1753 00007E  
                                               l1841 0001EA                                                 l1833 000108  
                                               l2801 00006E                                                 l1489 0003DC  
                                               l1913 0001B0                                                 l1905 00007C  
                                               l1657 000048                                                 l2609 0001DE  
                                               l1762 0000E6                                                 l1754 000060  
                                               l1850 0003B2                                                 l1834 000140  
                                               l2802 00007C                                                 l1586 00006C  
                                               l1906 0000A8                                                 l1658 000014  
                                               l2650 00001E                                                 l1930 00008A  
                                               l2562 000072                                                 l1755 00006C  
                                               l1747 00001C                                                 l1827 00040E  
                                               l1851 0003BE                                                 l1843 000266  
                                               l1835 000198                                                 l1907 0000CA  
                                               l1931 00006C                                                 l1860 0004E6  
                                               l1852 0003E8                                                 l1836 0001E6  
                                               l1828 000186                                                 l1940 00005A  
                                               l2652 000034                                                 l2564 0000C0  
                                               l2637 000012                                                 l1853 000400  
                                               l1829 000154                                                 l1909 0000E4  
                                               l1941 00003C                                                 l2653 00002E  
                                               l1933 0000C0                                                 l2565 0000F8  
                                               l2638 000026                                                 l1758 0000B8  
                                               l1846 000286                                                 l2582 00000C  
                                               l1759 0000AA                                                 l1855 000484  
                                               l1943 000098                                                 l1927 0000BC  
                                               l2591 000068                                                 l2583 00001C  
                                               l1792 00007C                                                 l1856 0004B6  
                                               l1848 000366                                                 l1944 000092  
                                               l2656 000054                                                 l1793 00008A  
                                               l1857 000496                                                 l1881 0000B2  
                                               l2657 00005C                                                 l2649 000014  
                                               l1961 00008C                                                 l2585 000034  
                                               l1786 00006C                                                 l1882 0000CA  
                                               l1946 00009A                                                 l2594 0000D2  
                                               l2586 00002C                                                 l1795 000098  
                                               l1787 00001C                                                 l1859 0004DA  
                                               l1891 00022E                                                 l1883 0000DC  
                                               l1875 000012                                                 l1947 0000B0  
                                               l1796 0000C4                                                 l1788 00002A  
                                               l1884 000108                                                 l1972 00008C  
                                               l1797 0000CC                                                 l1789 00005C  
                                               l1893 0001B8                                                 l1885 0000EE  
                                               l1877 00002A                                                 l2597 0000CE  
                                               l1878 000044                                                 l2793 000016  
                                               l2794 000026                                                 l1898 000012  
                                               l1994 000032                                                 l2955 00001A  
                                               l2796 000044                                                 l1988 000018  
                                               l2981 000030                                                 l2797 00003C  
                                               l2982 000024                                                 l2991 000020  
                                               l1999 000040                                                 l8200 000012  
                                               l2992 000014                                                 l2985 000064  
                                               l2986 000072                                                 l2995 000048  
                                               l2996 000056                                                 l8116 000010  
                                               l8144 0000B0                                                 l8128 00004A  
                                               l8234 000026                                                 l9202 0001C6  
                                               l8184 00030A                                                 l9218 000240  
                                               l8372 00000A                                                 l9238 000326  
                                               l9182 00014E                                                 l9342 0000C6  
                                               l9262 00006A                                                 l8714 00008A  
                                               l9514 000026                                                 l8732 000106  
                                               l8670 0000A8                                                 l9528 000058  
                       ??_LORAWAN_GetChannelIdStatus 000002                                                 l9780 000122  
                                               l9932 0001A8                                                 STR_1 000015  
                                               l9792 000164                                                 STR_2 000221  
                                               STR_3 000203                                                 l9778 00011E  
                                               STR_4 000239                                     _RADIO_WritePower 000000  
                       ??_LORAWAN_SetChannelIdStatus 000005                              _PrepareJoinRequestFrame 000000  
                                               _LATA 000F89                                                 _LATB 000F8A  
                                               _LATC 000F8B                                                 _LATD 000F8C  
                                               _LATE 000F8D                                                 u7010 0002F8  
                                               u7030 00033E                                  _RADIO_Transmit$2830 00005C  
                                               u7120 000008                                                 u7050 000034  
                                               u7210 000034                                                 u8020 000238  
                                _RADIO_Transmit$2829 000058                                                 u7310 000010  
                                               u7240 000024                                                 u7400 000052  
                                               u8200 000048                                                 u9000 000016  
                                               u7057 00002A                                                 u7420 000078  
                                               u8045 0002A0                                                 u7280 000054  
                                               u9040 000018                                                 u8320 000176  
                                       ?_RADIO_Reset 000000                                                 u8305 000104  
                                               u7290 000056                                                 u7380 00002A  
                                               u9140 0000F4                                                 u9060 00003E  
                                               u7701 000010                                                 u7550 0000DA  
                                               u8430 0000C8                                                 u8335 00019E  
                                               u9400 000190                                                 u9080 000070  
                                               u8345 0001C2                                                 u6930 000044  
                                               u7730 0000BE                                                 u8620 000374  
                                               u7660 00001C                                                 u7820 000052  
                                               u6950 000096                                                 u8550 0001C2  
                                               u9270 00017E                                                 u9158 0000F8  
                                               u8390 00009E                                                 u8480 00007C  
                                               u8800 00007A                                                 u8640 0000E4  
                                               u8465 00004C                                                 u8570 000214  
                                               u8490 00007E                                                 u8810 0000C6  
                                               u8650 000104                                                 u9610 000246  
                                               u9530 000110                                                 u7850 000066  
                                               u7940 000180                           __size_of_RADIO_ReceiveStop 000000  
                                               u9620 00024E                                                 u9285 0001A6  
                                               u8590 0002AE                                                 u8750 0000DA  
                                               u9295 0001CA                                                 u8647 0000DA  
                                               u8680 0001A8                                                 u8920 0002EC  
                                               u8840 0000AC                                                 u9560 000162  
                                               u7880 00007A                                                 u7945 000176  
                                               u7970 0001D0                                                 u8770 0000EE  
                                               u9810 0000C4                                                 u9820 0000E6  
                                               u9485 00001E                                                 u7990 0001E0  
                                               u8950 000454                                                 u9830 0000F2  
                                               u9478 000068                                                 u8687 00019E  
                                               u8980 000068                                                 _TMR1 000FCE  
                                               _WPUB 000F61                               ??_LORAWAN_PlatformInit 000002  
                                      _INT2_CallBack 000000                    __end_of_LORAWAN_SetApplicationEui 00002E  
                  __end_of_LORAWAN_SetApplicationKey 00002E                                        _EUSART1_Write 000000  
                           ExecuteNewChannel@drRange 000057                                   _PrepareSessionKeys 000000  
                                               _loRa 000000                                                 _main 000000  
                                               _rand 000000                       __end_of_UpdateMinMaxChDataRate 0000EA  
                                               fsr0h 000FEA                                                 fsr1h 000FE2  
                                               indf0 000FEF                                                 fsr2h 000FDA  
                                               fsr0l 000FE9                                                 indf2 000FDF  
                                               fsr1l 000FE1                                                 fsr2l 000FD9  
                            __size_of_RADIO_Transmit 000000                                                 btemp 000000  
                                      __CFG_BORV$190 000000                       __size_of_StopAllSoftwareTimers 000000  
                                      ComputeMic@mic 00006C                                        ComputeMic@key 000067  
                          __end_of_LORAWAN_RxTimeout 00005E                            __size_of_ConfigureRadioRx 000000  
                  __size_of_INT2_SetInterruptHandler 000000                        __end_of_StopAllSoftwareTimers 000052  
                          ?_INT2_SetInterruptHandler 000000                                                 prodh 000FF4  
                                               prodl 000FF3                                                 start 000000* 
                                      __CFG_IESO$OFF 000000                             __end_of_CountfOptsLength 0000CA  
                              ExecuteLinkAdr@txPower 00001A                                  __size_of_HALSPISend 000000  
                         ??_TMR1_SetInterruptHandler 000002                                     ??_AssemblePacket 00006C  
                             ?_HALResetPinMakeOutput 000000                                  ?_PrepareSessionKeys 00000B  
                             __size_of_TMR_SwapTimer 000000                           __end_of_RADIO_GetPacketSnr 000006  
                                       ___param_bank 000000                                           _GetRx1Freq 000000  
                         __size_of_RADIO_ReleaseData 000000                                 ??_DIO2_ISR_Lora_Init 000002  
                    __end_of_CreateAllSoftwareTimers 000052                               ??_GenerateUSFrequency1 00004A  
                             ??_GenerateUSFrequency2 00004A               SearchAvailableChannel@transmissionType 00004F  
                    __size_of_HALResetPinOutputValue 000000                                MacExecuteCommands@ptr 000063  
                              _RADIO_WriteFSKBitRate 000000                             __size_of_SystemTimerInit 000000  
                                   __end_of_INT1_ISR 000008                                     __end_of_INT2_ISR 000008  
                     __size_of_OSCILLATOR_Initialize 000000                               ExecuteLinkAdr@dataRate 00001B  
                      __end_of_OSCILLATOR_Initialize 00000E                   __size_of_LORAWAN_LinkCheckCallback 000000  
                                              l10202 000112                                                l10150 000048  
                                              l11122 0000B8                                                l11126 0000C8  
                                              l11118 0000AA                                                l11142 000034  
                                              l11136 000016                                                l11152 000068  
                                              l11208 00010E                                                l11320 000034  
                                              l10602 000450                                                l11218 00003C  
                                              l11330 000062                                                l10348 000250  
                                              l10196 000076                                                l11086 00002C  
                                              l11158 0000C6                                                l10624 0004E4  
                                              l11192 0000A8                                                l12146 000162  
                                    __end_of___abdiv 000066                                                l11188 0000A2  
                                              l11532 000004                                                l11614 00004E  
                                              l11198 0000D0                                                l10736 00088E  
                                              l12194 000254                                                l13162 000062  
                                              l11628 0000A4                                                l10862 000C00  
                                              l10758 0008D6                                                l13178 0000C8  
                                              l11782 00003C                                                ?_main 000000  
                                              ?_rand 000046                                      __end_of___awdiv 000086  
                                         _FillSubKey 000000                    __end_of_IOCB4_SetInterruptHandler 00000A  
                                      ?_RADIO_SetCRC 000000                                      __end_of___lldiv 000084  
                                              u10020 00002E                                      RADIO_Transmit@i 000061  
                                              u10200 00001C                                                u10035 000066  
                                              u10140 000036                                                u10045 000088  
                                              u10320 0002EC                                                u11140 000BCC  
                                              u11108 000BAA                                                u10068 000120  
                                              u11109 000BBC                                                u10069 000134  
                                              u10238 000050                                                u11070 000B3C  
                                              u11038 000B18                                                u10239 000062  
                                              u11039 000B2A                                                u12200 000062  
                                              u10088 00001C                                                u11208 000C7A  
                                              u12210 0000CA                                                u10530 0000F8  
                                              u11410 000042                                                u10611 000230  
                                              u12300 00009A                                                u12060 000044  
                                              u12140 00004A                                                u12028 000084  
                                    ___awdiv@divisor 000002                                                u11245 000066  
                                              u12205 000056                                                u12029 000096  
                                              u11318 0002B0                                                u10438 0000E8  
                                              u12150 000062                                                u13030 00021E  
                                              u11255 0000EA                                                u12215 0000BE  
                                              u12320 0000F0                                                u10640 000358  
                                              u10560 000114                                                u12160 0000CA  
                                              u13040 000234                                                _T1CON 000FCD  
                                    __end_of___llmod 000068                                                u11265 000180  
                                              u11530 0000AC                                                u10810 000642  
                                              u10458 00011C                                                u11275 000204  
                                              u12155 000056                                                u10388 000036  
                                              u13060 0002EC                                                u12165 0000BE  
                                              u12190 00004A                                                u11198 000C52  
                                              u10830 00075E                                                u10590 0001F2  
                                              u10808 0005F6                                                u10728 00046E  
                                              u11545 0000D4                                                u10809 000608  
                                              u10729 000480                                                u11298 000280  
                                              u11378 00004C                                                u11730 00007E  
                                              u11555 0000F8                                                u10780 000552  
                                  ??_EnableChannels2 000007                                                u10758 0004C2  
                                              u11830 00009C                                                u10759 0004D4  
                                              u12455 00000E                                                _LATB3 007C53  
                                              u10688 0003E6                                                u11648 000098  
                                              _LATC2 007C5A                                                u10689 0003F8  
                                              u12385 00000E                                                u11745 0000B6  
                                              u12490 000076                                                u10970 000980  
                                              u11690 000042                                 RxJoinResponse@status 000000  
                                              u11755 0000D8                                                _LATD3 007C63  
                                              u10888 000808                    __end_of_AckRetransmissionCallback 000118  
             SearchAvailableChannel@randomNumberCopy 000057                                                u10889 00081A  
                                              u11938 00005E                                                u11858 0000CA  
                                              u11939 000070                                                u11980 0001D4  
                                              u12950 0001A0                                                u11898 0000FC  
                                     __CFG_DEBUG$OFF 000000                                                u14698 0000C2  
                                              u14970 0000C8                                                u14699 0000D4  
                                              u14987 00001A                                                u14997 00000A  
                                    __end_of___lwmod 000044                                        ?_RADIO_RxDone 000000  
                __size_of_LORAWAN_GetChannelIdStatus 000000                                      ___awdiv@counter 000004  
                        __size_of_RADIO_ReceiveStart 000000                  __size_of_LORAWAN_SetChannelIdStatus 000000  
                                      ?_RADIO_TxDone 000000                                                _TMR1H 000FCF  
                                              _TMR1L 000FCE                                                _TRISA 000F92  
                                              _TRISB 000F93                                                _TRISC 000F94  
                                              _TRISD 000F95                                                _TRISE 000F96  
                                              _WPUB3 007B0B                             __size_of_RADIO_RxTimeout 000000  
                                      __CFG_WRT0$OFF 000000                                        __CFG_WRT1$OFF 000000  
                      ?_SelectChannelForTransmission 000000                                        __CFG_WRT2$OFF 000000  
                                ___lmul@multiplicand 00003E                                        __CFG_WRT3$OFF 000000  
                                     _RxJoinResponse 000000                       ??_GenerateUSFrequencyReception 00004A  
                            ?_SetReceptionNotOkState 000000                                       __CFG_EBTR0$OFF 000000  
                                     __CFG_FCMEN$OFF 000000                                       __CFG_EBTR1$OFF 000000  
                                     __CFG_EBTR2$OFF 000000                                       __CFG_EBTR3$OFF 000000  
                               ??_PrepareSessionKeys 000011                                     __end_of_TMR1_ISR 000014  
                          FindSmallestDataRate@found 000001                                        __CFG_WRTB$OFF 000000  
                                      __CFG_WRTC$OFF 000000                                        __CFG_WRTD$OFF 000000  
                                     ?_INT1_CallBack 000000                          __size_of_RADIO_SetBandwidth 000000  
                                     __CFG_EBTRB$OFF 000000                       __size_of_RADIO_WatchdogTimeout 000000  
                                              __rcon 00000B                              __end_of_PIN_MANAGER_IOC 00000A  
                       ??_IncludeMacCommandsResponse 000005                                      __end_of_dpowers 000129  
                      __end_of_RADIO_WatchdogTimeout 000048   RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 00000D  
                     ??_INT1_DefaultInterruptHandler 000000                            __size_of_ValidateDataRate 000000  
                                    __end_of_isdigit 000022                                                _randx 000010  
                     LORAWAN_RxDone@frmPayloadLength 000090                        ValidateChannelMaskCntl@result 000002  
                                 __CFG_MCLRE$EXTMCLR 000000                                                _srand 000000  
                           LORAWAN_RxDone@joinAccept 00008E                                                _putch 000000  
                             _UpdateJoinSuccessState 000000                                       ?_INT2_CallBack 000000  
                           _INT1_SetInterruptHandler 000000                                       ?_EUSART1_Write 000000  
                                         _ComputeMic 000000                              __end_of_TMR1_Initialize 00002C  
                             UpdateCfList@joinAccept 000000                                                pclath 000FFA  
                                              tablat 000FF5                                                ltemp0 000000  
                            RADIO_WriteFrequency@num 00001E                                                ltemp1 000004  
                                              ltemp2 000008                       __size_of_UpdateCurrentDataRate 000000  
                     __size_of_UpdateChannelIdStatus 000000                           PrepareSessionKeys@appNonce 00000D  
                      __end_of_UpdateCurrentDataRate 00000A                         __size_of_RADIO_FSKPacketSent 000000  
                      __end_of_UpdateChannelIdStatus 000024                                                plusw0 000FEB  
                                              plusw1 000FE3                                                plusw2 000FDB  
                                              ttemp0 000000                                                ttemp1 000003  
                                              ttemp2 000006                                                ttemp3 000009  
                                              status 000FD8                                                wtemp0 000000  
                                              wtemp1 000002                                                wtemp2 000004  
                                              wtemp3 000006                                                wtemp4 000008  
                                              wtemp5 00000A                                                wtemp6 000001  
                                 _MacExecuteCommands 000000                                       __CFG_HFOFST$ON 000000  
                                __size_of_RADIO_DIO0 000000                                  __size_of_RADIO_DIO1 000000  
                                __size_of_RADIO_DIO2 000000                                  __size_of_RADIO_DIO3 000000  
                                __size_of_RADIO_DIO4 000000                                  __size_of_RADIO_DIO5 000000  
                 PrepareJoinRequestFrame@bufferIndex 00007A                                      _TMR1_WriteTimer 000000  
                  TMR_OverrideRemaining@oldReloadVal 000012                                  LORAWAN_RxDone@fPort 00007F  
                           __size_of_RADIO_WriteMode 000000                                    __end_of_AESEncode 00034A  
                           ??_InitDefault915Channels 00000B                                       __CFG_PBADEN$ON 000000  
                                __size_of_RADIO_Init 000000                SelectChannelForTransmission@frequency 00005E  
                   __end_of_RADIO_WriteConfiguration 000500                      ??_IOCB4_DefaultInterruptHandler 000000  
                       __size_of_RADIO_SetIQInverted 000000                            __size_ofi2_TMR1_ReadTimer 000000  
                          RADIO_WriteMode@dioMapping 000008                           EnableChannels2@channelMask 000005  
                                    __initialization 000000                         __size_ofi2_SwTimersInterrupt 000000  
                                   LORAWAN_Send@port 000073                          __size_of_DIO1_ISR_Lora_Init 000000  
                                ?_MacExecuteCommands 00005D                                    _SPI2_Exchange8bit 000000  
                         __end_of_EUSART1_Initialize 000016                                         __end_of_main 000116  
                         AssembleEncryptionBlock@dir 000012                                         __end_of_rand 00005C  
                                  ?_TMR_GetDeltaTime 000008                                        AESCmac@padded 000030  
                           __end_of_RADIO_ReadRandom 0000A8                                     _SetJoinFailState 000000  
                            RADIO_WriteMode@blocking 000006                                 _UpdateJoinInProgress 000000  
                               _ExecuteRxTimingSetup 000000                                    __end_of_IOCB4_ISR 000020  
                          __size_of_UpdateDLSettings 000000                                   ?_SPI2_Exchange8bit 000000  
                          __size_of_ValidateRxOffset 000000                          ?_INTERRUPT_InterruptManager 000000  
                                 ??_TMR_GetDeltaTime 00000C                                        AESCmac@output 00005B  
                         i2TMR1_ReadTimer@readValLow 000007                         __end_of_RADIO_SetOutputPower 00000A  
                                          ??_AESCmac 000060                                       ??_RADIO_SetCRC 000000  
                           __end_of_RADIO_SetPABoost 00000A                               MacExecuteCommands@done 000062  
                                             ??_main 000099                                               ??_rand 000048  
                                     ??_RADIO_RxDone 000093                                       ??_RADIO_TxDone 000046  
                                      __activetblptr 000003                               ?_RADIO_SetLoRaSyncWord 000000  
                             __end_of_RxJoinResponse 000002                    __end_of_LORAWAN_LinkCheckCallback 00016C  
                     __end_of_SetReceptionNotOkState 00007C                          __end_of_UpdateReceiveDelays 000042  
                    __end_of_AssembleEncryptionBlock 0000F4                             __size_of_SPI2_Initialize 000000  
                             ??_SystemBlockingWaitMs 000004                                     ??_StartReTxTimer 000000  
                                ??_SPI2_Exchange8bit 000000                     CountfOptsLength@macCommandLength 000006  
                                 EncodeShiftRow@temp 000002                          __size_of_RADIO_RegisterRead 000000  
                                  ?_HALSPICSDeassert 000000                                     ?_SwTimersExecute 000000  
                                      _TMR_SwapTimer 000000                                       _EnableChannels 000000  
                          ??_PrepareJoinRequestFrame 000070                                       _HALSPICSAssert 000000  
                               ??_MacExecuteCommands 000060                                          ?_CheckFlags 000000  
                            LORAWAN_TxDone@timeOnAir 00003A                                           _ExtractMic 000000  
                    __size_of_SearchAvailableChannel 000000                                   ??_HALSPICSDeassert 000000  
                             _HALResetPinOutputValue 000000                  LORAWAN_GetChannelIdStatus@channelId 000003  
                                   ___llmod@dividend 00000D                                     ___awdiv@dividend 000000  
                                             ?_srand 000012               __end_of_LORAWAN_ReceiveWindow1Callback 0000B8  
            __size_of_LORAWAN_ReceiveWindow1Callback 000000                       _LORAWAN_ReceiveWindow1Callback 000000  
                                             _ANSELA 000F38                                               ?_putch 000000  
                                             _ANSELB 000F39                                               _ANSELC 000F3A  
                                             _ANSELD 000F3B                                               _ANSELE 000F3C  
                           _RADIO_FSKPacketSent$2851 00004E                    ValidateDataRateReception@dataRate 000001  
                                             _T1GCON 000FCC                              SwTimerReadValue@timerId 000039  
                            TMR1_WriteTimer@timerVal 000000                                       _ExecuteLinkAdr 000000  
                                             i2l1102 0000DE                                               i2l1103 00015A  
                                             i2l1112 00000C                                               i2l1170 000022  
                                             i2l1172 00007E                                               i2l1174 0000E2  
                                             i2l1169 0000E4               __end_of_LORAWAN_ReceiveWindow2Callback 0000D4  
            __size_of_LORAWAN_ReceiveWindow2Callback 000000                       _LORAWAN_ReceiveWindow2Callback 000000  
                                             i2l2251 000012                                               i2l1199 000054  
                                             i2l2370 000048                                               i2l2373 000054  
                                             i2l2366 000030                                       __CFG_WDTEN$OFF 000000  
                                             i2l2368 00003C                                               _RCREG1 000FAE  
                                             _RCSTA1 000FAB                                               _OSCCON 000FD3  
                                  ??_RADIO_GetStatus 000000                                               _SPBRG1 000FAF  
                   __size_of_ValidateChannelMaskCntl 000000                                               _TRISB3 007C9B  
                                             _TRISC2 007CA2                             __size_of_Retransmissions 000000  
                                      ?_LORAWAN_Init 000051                                        ?_LORAWAN_Join 000000  
                   AssembleEncryptionBlock@firstByte 000010                                        ?_LORAWAN_Send 000073  
                    __size_of_AutomaticReplyCallback 000000                                               _TXREG1 000FAD  
                         __size_of_LORAWAN_RxTimeout 000000                                               _TXSTA1 000FAC  
                                  ?_ExecuteDevStatus 000000                           __end_of_DIO0_ISR_Lora_Init 000010  
                           __size_ofi2_TMR_SwapTimer 000000                                    ExecuteLinkAdr@ptr 000010  
                      __size_of_RADIO_WriteFrequency 000000                                               _STable 000001  
                        RADIO_WriteFrequency@num_mod 00001A                                  LORAWAN_TxDone@delta 000041  
                                  _EncKeySchedule$86 000004                          __size_of_ComputeSessionKeys 000000  
                                          AESCmac@k1 000010                                            AESCmac@k2 000000  
                          __end_of_SPI2_Exchange8bit 000012                                      _CheckMcastFlags 000000  
                                 ??_ExecuteDevStatus 000002                                               _Random 000000  
                                     __CFG_XINST$OFF 000000                                               _RxData 000000  
                 SearchAvailableChannel@randomNumber 00005B                 __end_of_TMR1_DefaultInterruptHandler 000002  
              __size_of_TMR1_DefaultInterruptHandler 000000                         _TMR1_DefaultInterruptHandler 000000  
                                        ?_GetRx1Freq 00004F                        ValidateDataRange@dataRangeNew 000002  
                            _RADIO_FHSSChangeChannel 000000                                            ??___abdiv 000001  
                                             ___lmul 000000                               ?_RADIO_WriteFSKBitRate 00000D  
                              ?_UpdateJoinInProgress 000000                                               ___wmul 000000  
                        ?_LORAWAN_LinkCheckConfigure 000046                                ?_ExecuteRxTimingSetup 000007  
                                          ??___awdiv 000004                   ValidateChannelMaskCntl@channelMask 000000  
                                     __CFG_STVREN$ON 000000                                 _FindSmallestDataRate 000000  
                                          ??___lldiv 000008                                            ??___llmod 000015  
                        ExecuteLinkAdr@startingIndex 000016                                            ??___lwmod 00004C  
                 RADIO_SetChannelFrequency@frequency 000000                            ExecuteRxParamSetupReq@ptr 000046  
                             __size_of_LORAWAN_Reset 000000                                               _memcpy 000000  
                                             _memset 000000                                               clear_0 000068  
                                             clear_1 00007A                                               clear_2 000086  
                                             clear_3 000092                                               clear_4 00009E  
                                             clear_5 0000B6                                     ___awdiv@quotient 000006  
                                             _printf 000000                                               main@ch 00006E  
                        __size_of_DIO5_ISR_Lora_Init 000000                                          ?_FillSubKey 000000  
                                  ?_ExecuteLinkCheck 000000                    __end_of_TransmissionErrorCallback 00009A  
                                    ?_RxJoinResponse 000000                              __size_of_EncodeShiftRow 000000  
                             __end_of_EnableChannels 0000BA                           ??_RADIO_UnhandledInterrupt 000004  
                                       ??_HALSPISend 000001                 __end_of_INT2_DefaultInterruptHandler 000002  
              __size_of_INT2_DefaultInterruptHandler 000000                         _INT2_DefaultInterruptHandler 000000  
                                       __pdataCOMRAM 000000                                            ??_isdigit 000000  
                                        RxData@pData 000000                               __end_of_HALSPICSAssert 000004  
                  __size_of_RADIO_SetSpreadingFactor 000000                                        ??_SwTimerStop 000000  
                                    ??_INT1_CallBack 000000                                    ??_SystemTimerInit 000000  
                          ?_RADIO_SetSpreadingFactor 000000                                    ?_SwTimerReadValue 000031  
                                     ?_TMR_SwapTimer 000008                      RADIO_FHSSChangeChannel@irqFlags 000022  
                 __size_of_ValidateDataRateReception 000000                                    ?_ExecuteDutyCycle 000000  
                                 ??_ExecuteLinkCheck 000002                                         __mediumconst 000000* 
                                             tblptrh 000FF7                                               tblptrl 000FF6  
                                             tblptru 000FF8                                               srand@x 000012  
                                    ??_INT2_CallBack 000000                                   ??_SwTimerReadValue 000035  
                                    _UpdateDataRange 000000                                      ??_EUSART1_Write 000000  
                             __end_of_ExecuteLinkAdr 0004B4                                   ??_ExecuteDutyCycle 000002  
                                       _AESEncode$81 000012                                         _AESEncode$82 000014  
                                       _AESEncode$83 000016                   __end_of_LORAWAN_GetChannelIdStatus 000032  
                         _LORAWAN_GetChannelIdStatus 000000             INT2_SetInterruptHandler@InterruptHandler 000000  
           INT1_SetInterruptHandler@InterruptHandler 000000            IOCB4_SetInterruptHandler@InterruptHandler 000000  
           TMR1_SetInterruptHandler@InterruptHandler 000000                   __end_of_LORAWAN_SetChannelIdStatus 00002C  
                         _LORAWAN_SetChannelIdStatus 000000                                     ?_PIN_MANAGER_IOC 000000  
                                      AESEncode@aux1 00001A                                        AESEncode@aux2 000019  
                                      AESEncode@aux3 00001B                              __end_of_TMR1_WriteTimer 000020  
                              __end_of_SwTimerCreate 00008C                       ??_SelectChannelForTransmission 00005D  
                                        ?_ComputeMic 000067                        __size_of_INTERRUPT_Initialize 000000  
                              __end_of_TMR1_CallBack 000020                          ??_LORAWAN_SetApplicationEui 00000D  
                        ??_LORAWAN_SetApplicationKey 00000D                            ExecuteDutyCycle@maxDCycle 000002  
                                  ??_RADIO_RxTimeout 00006A                                     ?_TMR1_Initialize 000000  
                       __end_of_LORAWAN_GetFrequency 00006E                                    _SYSTEM_Initialize 000000  
                   __size_of_CreateAllSoftwareTimers 000000                           LORAWAN_SetDataRange@result 000008  
                            __size_of_GenerateSubkey 000000                                       ??_LORAWAN_Init 000055  
                                     ??_LORAWAN_Join 00007B                                       ??_LORAWAN_Send 000077  
                     __size_of_RADIO_FSKPayloadReady 000000                                           __accesstop 000000* 
                            __end_of__initialization 0000BC                        __end_of_RADIO_FSKPayloadReady 0000B6  
                                     _RADIO_Transmit 000000                                            ?_INT1_ISR 000000  
                                          ?_INT2_ISR 000000                                 LORAWAN_RxDone@buffer 000066  
                             RADIO_ReadRandom@retVal 00000F                                     _ConfigureRadioRx 000000  
                               __size_of_RADIO_Reset 000000                                  ExecuteDevStatus@ptr 000000  
                   ??_UpdateReceiveWindow2Parameters 000005                      ?_UpdateReceiveWindow2Parameters 000000  
                                 ?_SYSTEM_Initialize 000000                                 LORAWAN_RxDone@packet 000088  
                                     _maxPayloadSize 000145                        RADIO_SetLoRaSyncWord@syncWord 000000  
                                      ___rparam_used 000001                           ValidateChannelId@channelId 000000  
                    __size_of_InitDefault915Channels 000000                            ExecuteLinkAdr@channelMask 000017  
                             GetRx1Freq@channelIndex 000053                           LORAWAN_GetFrequency@result 000057  
                                 __end_of_HALSPISend 00000E                                       __pcstackCOMRAM 000000  
                                         ___inthi_sp 000000*                              _SearchAvailableChannel 000000  
                            ValidateChannelId@result 000001                                ?_FindSmallestDataRate 000000  
                                       __pidataBANK1 000000                                         __pidataBANK2 000000  
                                ??_SYSTEM_Initialize 000002                           __end_of_DIO4_ISR_Lora_Init 000002  
                                          ?_TMR1_ISR 000000                                  __size_of_CheckFlags 000000  
                      ?_TMR1_DefaultInterruptHandler 000000                             _RADIO_WriteConfiguration 000000  
                                  ??_RADIO_WriteMode 000007                                      _spreadingFactor 000129  
                          __size_of_LORAWAN_Mainloop 000000                                     ??_EncKeySchedule 000002  
              __end_of_IOCB4_DefaultInterruptHandler 000002               __size_of_IOCB4_DefaultInterruptHandler 000000  
                      _IOCB4_DefaultInterruptHandler 000000                             __end_of_RADIO_WritePower 0000F0  
                            ?_ExecuteRxParamSetupReq 000046                                        __end_of_srand 000010  
                                      __end_of_putch 00000E                                    LORAWAN_RxDone@hdr 000091  
                                       ??_RADIO_DIO0 000095                                         ??_RADIO_DIO1 00006A  
                                       ??_RADIO_DIO2 000023                                         ??_RADIO_DIO3 000005  
                                       ??_RADIO_DIO4 000005                                         ??_RADIO_DIO5 000005  
                             _AutomaticReplyCallback 000000                          ??_IOCB4_SetInterruptHandler 000002  
                           ??_INTERRUPT_GetDioStatus 000000                                         ??_RADIO_Init 000028  
                          SwTimerSetCallback@timerId 000003                           LORAWAN_RxDone@channelIndex 000080  
                     AssembleEncryptionBlock@blockId 00000F                          __size_of_EXT_INT_Initialize 000000  
                                    ?_EnableChannels 00000B                              ??_TMR_OverrideRemaining 00000E  
                                    ?_HALSPICSAssert 000000                                   _DIO3_ISR_Lora_Init 000000  
                       __end_of_HALResetPinMakeInput 000004                              __size_of_TMR1_ReadTimer 000000  
                   __end_of_INT2_SetInterruptHandler 00000A                                     RADIO_DIO0@opMode 000098  
                        RADIO_RegisterRead@readValue 000003                   __end_of_IncludeMacCommandsResponse 000462  
                         _IncludeMacCommandsResponse 000000                        ?_INT2_DefaultInterruptHandler 000000  
                           UpdateCfList@bufferLength 000000                                     RADIO_DIO2@opMode 000024  
                              LORAWAN_Send@confirmed 000079                                          ?_ExtractMic 00000B  
                                    ?_ExecuteLinkAdr 000010                                     _ValidateDataRate 000000  
                    LORAWAN_GetMaxPayloadSize@result 00000A                                  __size_of_GetRx1Freq 000000  
                          __end_of_SYSTEM_Initialize 000022                   __size_of_RADIO_SetChannelFrequency 000000  
                                            ??_srand 000014                                              ??_putch 000001  
                             __end_of_RADIO_Transmit 00023A                        __size_of_LORAWAN_SetDataRange 000000  
                                  ??_SPI2_Initialize 000000                                  ?_DIO3_ISR_Lora_Init 000000  
                                      _LORAWAN_Reset 000000                           ?_RADIO_SetChannelFrequency 000000  
                                         __pbssBANK0 000000                                           __pbssBANK1 000000  
                                         __pbssBANK2 000000                                           __pbssBANK3 000000  
                                         __pbssBANK4 000000                                     RxData@dataLength 000002  
                                __end_of_SwTimerStop 000028                           ?_SetCallbackSoftwareTimers 000000  
                            __end_of_CheckMcastFlags 000082                                      __CFG_PLLCFG$OFF 000000  
                             __end_of_maxPayloadSize 000153                                           ??_INT1_ISR 000000  
                                         ??_INT2_ISR 000000                                   SwTimersInterrupt@i 000030  
                               _RADIO_SetOutputPower 000000                                 __end_of_RADIO_SetCRC 00000A  
                             __size_of_DIO0_ISR_Lora 000000                              ??_HALResetPinMakeOutput 000000  
                               __end_of_RADIO_RxDone 0000E6                           __end_of_RADIO_RxFSKTimeout 00003E  
                               __end_of_RADIO_TxDone 000128                                  __size_of_FillSubKey 000000  
                                 __end_of_RADIO_DIO0 000090                                   __end_of_RADIO_DIO1 00004E  
                                 __end_of_RADIO_DIO2 000056                                   __end_of_RADIO_DIO3 000022  
                                 __end_of_RADIO_DIO4 000032                                   __end_of_RADIO_DIO5 000028  
                          ??_RADIO_FHSSChangeChannel 000022                          __size_of_SwTimerSetCallback 000000  
                      __size_of_LORAWAN_SetDeviceEui 000000                            RADIO_SetOutputPower@power 000000  
                         __size_of_SPI2_Exchange8bit 000000                                   __end_of_RADIO_Init 0001EE  
                    ?_LORAWAN_EnterContinuousReceive 000000                     ??_LORAWAN_EnterContinuousReceive 00005B  
                                            ?_Random 00004D                                    ?_CountfOptsLength 000000  
                             __size_of_DIO1_ISR_Lora 000000                                              ?_RxData 000000  
                                   i2_TMR1_ReadTimer 000000                                   __CFG_CCP2MX$PORTC1 000000  
                                     FillSubKey@size 000004                                      _EnableChannels2 000000  
                           __size_of_HALDIO5PinValue 000000                         __size_of_RADIO_RegisterWrite 000000  
                             ??_UpdateJoinInProgress 000000                     __size_of_AssembleEncryptionBlock 000000  
                             ??_ExecuteRxTimingSetup 000009                                     FillSubKey@source 000000  
       SelectChannelForTransmission@transmissionType 000064                                    ??_Retransmissions 000066  
                                            ?___lmul 00003A               AssembleEncryptionBlock@multicastStatus 000011  
                     __end_of_ExecuteRxParamSetupReq 000214                                   ??_CountfOptsLength 000000  
                                            ?___wmul 000000                               __size_of_DIO2_ISR_Lora 000000  
                                 EncryptFRMPayload@i 000047                                   EncryptFRMPayload@j 000048  
                                 EncryptFRMPayload@k 000046                                           ??_TMR1_ISR 000033  
                                 __CFG_CCP3MX$PORTB5 000000                                    ??i2_TMR_SwapTimer 00000A  
                          _LORAWAN_SetApplicationEui 000000                                 ??_DIO3_ISR_Lora_Init 000000  
                          _LORAWAN_SetApplicationKey 000000                                     _UpdateDLSettings 000000  
                                   _ValidateRxOffset 000000                            ExecuteLinkAdr@endingIndex 000014  
                                            ?_memcpy 000000                                              ?_memset 000000  
                                     ___lmul@product 000042                                    _TMR_ISR_Lora_Init 000000  
                             RADIO_RegisterWrite@reg 000003                                  __size_of_ComputeMic 000000  
                             RADIO_Transmit@regValue 000060                         __size_of_RADIO_SetModulation 000000  
                                _RADIO_FSKPacketSent 000000                                              _AESCmac 000000  
                                            ?_printf 000016                               ComputeMic@bufferLength 00006B  
                            __end_of_UpdateDataRange 000024                                      ??_TMR_SwapTimer 00000A  
                           RADIO_WriteFSKBitRate@num 000011                                   ?_TMR_ISR_Lora_Init 000000  
                         ??_INT1_SetInterruptHandler 000002                                              i2l11010 000020  
                             _InitDefault915Channels 000000                                 EncryptFRMPayload@dir 000034  
                                 _RADIO_GetPacketSnr 000000                                 EncryptFRMPayload@key 000039  
                              __end_of_UpdateTxPower 00000A                                  _RADIO_SetIQInverted 000000  
                                            _OSCCON2 000FD2                              __size_of_ConfigureRadio 000000  
                                            _OSCTUNE 000F9B                          __size_ofi2_TMR_GetDeltaTime 000000  
                                            _SPBRGH1 000FB0                                  i2_SwTimersInterrupt 000000  
                                            _SSP2ADD 000F6E                                              _SSP2BUF 000F6F  
                                ??_TMR_ISR_Lora_Init 000002               UpdateReceiveWindow2Parameters@dataRate 000004  
                           __end_of_SetJoinFailState 000030                                       ?_LORAWAN_Reset 000000  
                       RADIO_WriteMode@newModulation 000005                               ValidateDataRate@result 000001  
                                   ?_TMR1_WriteTimer 000000                                  ?_RADIO_GetPacketSnr 000000  
                                    ___abdiv@divisor 000000                                      ?_RADIO_Transmit 000051  
                            _ValidateChannelMaskCntl 000000                                      ___abdiv@counter 000003  
                                       _deviceEuiNew 000014                           AssemblePacket@bufferLength 00006A  
                       PrepareSessionKeys@sessionKey 00000B                     LORAWAN_SetDeviceEui@deviceEuiNew 00000B  
                               ?_RADIO_FSKPacketSent 000000                                TMR_SwapTimer@timerVal 000008  
                  __end_of_RADIO_SetChannelFrequency 00008A                          PrepareJoinRequestFrame@iCtr 000079  
                          _IOCB4_SetInterruptHandler 000000                    __end_of_SetCallbackSoftwareTimers 0000DE  
                              ?_RADIO_SetOutputPower 000000                            _AckRetransmissionCallback 000000  
                        PrepareJoinRequestFrame@mhdr 000078                               __size_of_AESEncodeLoRa 000000  
                      __size_of_LORAWAN_PlatformInit 000000                            ?_INT0_SetInterruptHandler 000000  
                                     _ticksAccounted 000000                                        ?_SwTimerStart 000000  
                                         AESCmac@key 000059                                           AESCmac@ptr 000060  
                            __end_of_spreadingFactor 000137                                      __CFG_PWRTEN$OFF 000000  
                      UpdateCurrentDataRate@valueNew 000000                                              __Hparam 000000  
                               ?_RADIO_SetIQInverted 000000                           PrepareJoinRequestFrame@mic 000074  
                           RADIO_RegisterWrite@value 000002                                              __Lparam 000000  
                             ??_FindSmallestDataRate 000000                             LORAWAN_Send@bufferLength 000076  
                              _StopAllSoftwareTimers 000000                                      __size_of_Random 000000  
                                    __size_of_RxData 000000                                 ?i2_SwTimersInterrupt 000020  
                                AssemblePacket@fCtrl 000070                                              ___abdiv 000000  
                                         AESEncode@i 00001C                                            _AESEncode 000000  
                             ValidateRxOffset@result 000001                 GenerateUSFrequency1@channelFrequency 00004A  
                          __end_of_TMR_ISR_Lora_Init 000010                                              ___awdiv 000000  
                                    __size_of___lmul 000000                          __size_of_DIO2_ISR_Lora_Init 000000  
                                            ___lldiv 000000                                  __size_of_ExtractMic 000000  
                                    __size_of___wmul 000000                                 ??_RADIO_GetPacketSnr 000000  
                                            ___llmod 000000                                    ?_RADIO_ReadRandom 00000C  
                                            ___lwmod 000000                              ??_RADIO_SetLoRaSyncWord 000000  
                                            __pcinit 000000                   __size_of_LORAWAN_GetMaxPayloadSize 000000  
                                    __size_of_memcpy 000000                           __end_of_RADIO_ReceiveStart 000232  
                              RADIO_Init@radioBuffer 000022                                      __size_of_memset 000000  
                      __size_of_GenerateUSFrequency1 000000                                              __ramtop 000000* 
                      __size_of_GenerateUSFrequency2 000000                             TMR1_ReadTimer@readValLow 000007  
                   EncryptFRMPayload@multicastStatus 00003E                                   ??_RADIO_ReadRandom 00000E  
                         ?_LORAWAN_GetMaxPayloadSize 000000                                 _LORAWAN_GetFrequency 000000  
      RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 000000                                              __ptext0 000000  
                                            __ptext1 000000                                              __ptext2 000000  
                                            __ptext3 000000                                              __ptext4 000000  
                                            __ptext5 000000                                              __ptext6 000000  
                                            __ptext7 000000                                              __ptext8 000000  
                                            __ptext9 000000                                 __end_of_LORAWAN_Init 000060  
                               __end_of_LORAWAN_Join 0000A4                                 __end_of_LORAWAN_Send 0000D2  
                                    __size_of_printf 000000                              RADIO_SetPABoost@paBoost 000000  
                                      _DIO0_ISR_Lora 000000                                    ?_RADIO_SetPABoost 000000  
                     ??_TMR1_DefaultInterruptHandler 000000                                       _EncodeShiftRow 000000  
                                          _IOCB4_ISR 000000                           ExecuteNewChannel@frequency 000058  
                          TMR1_ReadTimer@readValHigh 000006                      __size_of_INTERRUPT_GetDioStatus 000000  
                                          _T1CONbits 000FCD                   SelectChannelForTransmission@result 000063  
                                            _dpowers 000101                              __size_of_LORAWAN_RxDone 000000  
                              _OSCILLATOR_Initialize 000000                       __end_of_UpdateJoinSuccessState 00013E  
                            __size_of_LORAWAN_TxDone 000000                                              _isdigit 000000  
                         __end_of_RADIO_SetBandwidth 00000A                                      _RADIO_GetStatus 000000  
                            ?_HALResetPinOutputValue 000000                         __end_of_macEndDevCmdReplyLen 000173  
                  __size_of_TMR1_SetInterruptHandler 000000                                   ??_RADIO_SetPABoost 000000  
                                      _DIO1_ISR_Lora 000000                                   _EUSART1_Initialize 000000  
                                        _SwTimerStop 000000                             ??_PIN_MANAGER_Initialize 000002  
                          ?_TMR1_SetInterruptHandler 000000                          IncludeMacCommandsResponse@i 00000D  
                                      ?_UpdateCfList 000000                                    _ExecuteNewChannel 000000  
                        __size_of_PrepareSessionKeys 000000                                         ??_CheckFlags 000002  
                      RADIO_SetModulation@modulation 000000                              UpdateDLSettings@dlRx2Dr 000001  
                          __size_of_TMR_GetDeltaTime 000000                                        _DIO2_ISR_Lora 000000  
                         __size_of_SYSTEM_Initialize 000000                                   ?_ExecuteNewChannel 000053  
                         RADIO_WriteMode@currentMode 000009                                     ComputeMic@buffer 000069  
                               end_of_initialization 0000BC                              _CreateAllSoftwareTimers 000000  
                                SwTimerCreate@retVal 000000                             _INT2_SetInterruptHandler 000000  
                              ??_RADIO_FSKPacketSent 000046                                  ?_EUSART1_Initialize 000000  
                                     _GenerateSubkey 000000                                _RADIO_WatchdogTimeout 000000  
                     ??_INT2_DefaultInterruptHandler 000000                                     ?_CheckMcastFlags 000000  
                             ExtractMic@bufferLength 00000D                                              memcpy@d 000006  
                                            memcpy@n 000004                                              memcpy@s 000008  
                            __end_of_EnableChannels2 000044                                              memset@c 000002  
                                            memset@n 000004                                              memset@p 000006  
                          _LORAWAN_LinkCheckCallback 000000                                       ??_SwTimerStart 000031  
                                ??_ExecuteNewChannel 000055                     LORAWAN_GetChannelIdStatus@result 000002  
                              _UpdateCurrentDataRate 000000                                            i2u1472_48 00000E  
                              _UpdateChannelIdStatus 000000                                            i2u1474_48 00000E  
                                          i2u1476_48 00000E                                            i2u1478_48 00000E  
                            ??_RADIO_WriteFSKBitRate 000011                                ??_RADIO_SetIQInverted 000000  
                         __end_of_DIO1_ISR_Lora_Init 000010                                      ___lldiv@divisor 000004  
                                         _ticksAdded 000004                          HALResetPinOutputValue@value 000000  
                           EncodeShiftRow@stateTable 000000                            __size_of_HALSPICSDeassert 000000  
                           ValidateDataRate@dataRate 000000                                      ___lldiv@counter 00000C  
                                      _DIO5_ISR_Lora 000000                          TMR_OverrideRemaining@tmrVal 000010  
                              ??i2_SwTimersInterrupt 000024                             ExecuteLinkAdr@redundancy 00001F  
                                  GenerateSubkey@key 000031                                 _HALResetPinMakeInput 000000  
                                       ??_GetRx1Freq 000053           LORAWAN_SetApplicationKey@applicationKeyNew 00000B  
                      UpdateDLSettings@dlRx1DrOffset 000000                           LORAWAN_Init@RxJoinResponse 000053  
                         LORAWAN_RxDone@bufferLength 000068                     __end_of_RADIO_SetSpreadingFactor 00000A  
                                            printf@c 00002D                   AssembleEncryptionBlock@bufferIndex 000013  
                                            printf@f 000016                                         RxData@status 000003  
                                            postdec1 000FE5                                              postdec2 000FDD  
                                         ?_AESEncode 000006                                      _SystemTimerInit 000000  
                                            postinc0 000FEE                                              postinc1 000FE6  
                                            postinc2 000FDE                                     ??_RxJoinResponse 000000  
                                   _LORAWAN_Mainloop 000000                                   LORAWAN_Join@result 00007C  
                                 __end_of_CheckFlags 00005E                                 ??_EUSART1_Initialize 000000  
                                     AESEncode@block 000006                    SearchAvailableChannel@maxChannels 00005A  
                             __end_of_EncodeShiftRow 000164                                ?_LORAWAN_GetFrequency 000053  
                                 _DIO0_ISR_Lora_Init 000000                                    ??_HALDIO5PinValue 000000  
                                     ?_DIO0_ISR_Lora 000000                                _INT1_InterruptHandler 000006  
                                          _PORTBbits 000F81                                         ??_FillSubKey 000005  
                       SwTimersInterrupt@timeElapsed 000028                                        _AESEncodeLoRa 000000  
                          __size_of_ExecuteDevStatus 000000                         __end_of_RADIO_WriteFrequency 0000F0  
                         __end_of_RADIO_RegisterRead 000028                    __end_of_LORAWAN_GetMaxPayloadSize 000060  
                     __end_of_HALResetPinOutputValue 00001A                                           ?_IOCB4_ISR 000000  
                                   ?_UpdateDataRange 000000                             __end_of_ConfigureRadioRx 00002A  
                                    _RADIO_RxTimeout 000000                       UpdateChannelIdStatus@channelId 000003  
                          __end_of_ExecuteNewChannel 0001F6                                     EnableChannels2@i 00000A  
                            __size_of_AssemblePacket 000000                                       ?_DIO1_ISR_Lora 000000  
                                      RADIO_Init@cnt 000029                                    _SwTimerSetTimeout 000000  
                                     _TMR1_ReadTimer 000000                                       ??_UpdateCfList 000002  
                                         _txPower915 000161                                  ?_DIO0_ISR_Lora_Init 000000  
                                    ??_LORAWAN_Reset 000051                                       ?_DIO2_ISR_Lora 000000  
                      __size_of_SystemBlockingWaitMs 000000                            ??_ValidateChannelMaskCntl 000002  
                                 ?_SwTimerSetTimeout 00000D                          __size_of_MacExecuteCommands 000000  
                               ExecuteNewChannel@ptr 000053                             ??_UpdateMinMaxChDataRate 000000  
                             __end_of_GenerateSubkey 00014C                         ExecuteLinkAdr@auxChannelMask 00001D  
                                      RADIO_RxDone@i 000094                          ?_LORAWAN_GetChannelIdStatus 000000  
                                EUSART1_Write@txData 000000                                __size_of_RADIO_SetCRC 000000  
                            AssemblePacket@macCmdIdx 000071                          ?_LORAWAN_SetChannelIdStatus 000004  
                                     _localDioStatus 000014                      ValidateDataRateReception@result 000000  
                                 __end_of_GetRx1Freq 000032                                __size_of_RADIO_RxDone 000000  
                                       ??_ComputeMic 00006C                         __size_of_UpdateReceiveDelays 000000  
                              __size_of_RADIO_TxDone 000000                               ??_RADIO_SetOutputPower 000000  
                    EncryptFRMPayload@macBufferIndex 00003B                              UpdateMinMaxChDataRate@i 000001  
                         __end_of_ComputeSessionKeys 000086                                  ??_SwTimerSetTimeout 000011  
                           ExecuteLinkAdr@txPowerNew 000015                            _TransmissionErrorCallback 000000  
                           __size_of_SwTimersExecute 000000                            __size_of_ExecuteLinkCheck 000000  
                                         main@enable 00006D                               _INTERRUPT_GetDioStatus 000000  
                                    _RADIO_WriteMode 000000                           ??_RADIO_WriteConfiguration 000048  
                                        printf@width 00002B                                SPI2_Exchange8bit@data 000000  
                            ?_SearchAvailableChannel 00004F                            __size_of_SwTimerReadValue 000000  
                        RADIO_FSKPacketSent@irqFlags 000052                            __size_of_ExecuteDutyCycle 000000  
                             ?_StopAllSoftwareTimers 000000                                    _applicationEuiNew 00001C  
                            AssemblePacket@confirmed 00006E                                   __end_of_FillSubKey 000062  
                            _AssembleEncryptionBlock 000000                                    __size_of_INT1_ISR 000000  
                                  _applicationKeyNew 000000                                    __size_of_INT2_ISR 000000  
                               ??_DIO0_ISR_Lora_Init 000002                                ?_HALResetPinMakeInput 000000  
                                     __end_of_STable 000101                                  AESEncodeLoRa@useKey 000021  
                         SwTimerSetCallback@callback 000000                                   LORAWAN_Send@buffer 000074  
                                     __end_of_Random 000022                                       __end_of_RxData 000002  
                         __size_of_TMR_ISR_Lora_Init 000000                             __end_of_ValidateDataRate 000018  
                       __end_of_INTERRUPT_Initialize 000004                  LORAWAN_SetChannelIdStatus@channelId 000006  
       GenerateUSFrequencyReception@channelFrequency 00004A                           __end_of_DIO5_ISR_Lora_Init 000010  
                            __end_of_RADIO_GetStatus 000006                                       __end_of___lmul 000058  
                                 LORAWAN_Send@result 000078                                     ??_EnableChannels 00000E  
                          i2TMR1_WriteTimer@timerVal 000000                                       __end_of___wmul 000028  
                                      ?_TMR_ISR_lora 000000                                     ??_HALSPICSAssert 000000  
                TMR_OverrideRemaining@ticksRemaining 00000A                                    ?_RADIO_WritePower 000000  
                                      __pidataCOMRAM 000000                                      ?_EncodeShiftRow 000000  
                                     ?_AESEncodeLoRa 00001D                                    __size_of_TMR1_ISR 000000  
                                 __end_of_ComputeMic 000062                                            Random@max 00004D  
                                     __end_of_memcpy 000060                               ?_OSCILLATOR_Initialize 000000  
                          __end_of_SwTimerSetTimeout 000044                               __end_of_TMR1_ReadTimer 000022  
                                     __end_of_memset 000030                                      _SPI2_Initialize 000000  
                   LORAWAN_SetChannelIdStatus@result 000005                             ?_PrepareJoinRequestFrame 000000  
                                 ??_RADIO_WritePower 000004                                         _RADIO_SetCRC 000000  
                                   ??_ExecuteLinkAdr 000012                                       __end_of_printf 00030A  
                                       _RADIO_RxDone 000000                                         _RADIO_TxDone 000000  
                                start_initialization 000000                                       _ConfigureRadio 000000  
                                 LORAWAN_RxDone@mhdr 000081                                   LORAWAN_RxDone@temp 000087  
                                 _DIO4_ISR_Lora_Init 000000                             __end_ofi2_TMR1_ReadTimer 000020  
                     __size_of_TMR_OverrideRemaining 000000                                  _RADIO_RegisterWrite 000000  
                                       AESCmac@mLast 000020                            ??_CreateAllSoftwareTimers 000001  
                    __size_of_PIN_MANAGER_Initialize 000000                        __end_of_TMR_OverrideRemaining 000096  
                        ?_IncludeMacCommandsResponse 000000                                __end_of_INT1_CallBack 000020  
                                       ??_ExtractMic 00000F                 EncryptFRMPayload@bufferToBeEncrypted 00003C  
                               _Retransmissions$2475 000066                                         AESCmac@input 00005D  
               GenerateUSFrequency2@channelFrequency 00004E                                      ?_GenerateSubkey 000031  
                       ?_RADIO_SetFrequencyHopPeriod 000000                                      LORAWAN_TxDone@i 000045  
                              LORAWAN_Init@RxPayload 000051                  AssembleEncryptionBlock@frameCounter 00000B  
                            i2TMR_SwapTimer@timerVal 000008                                          putch@txData 000001  
                              __end_of_INT2_CallBack 000020                                        ??_RADIO_Reset 000005  
                           __end_of_UpdateDLSettings 000022                                __end_of_EUSART1_Write 00000E  
                         SwTimerStart@ticksRemaining 000035                               RADIO_WriteMode@newMode 00000A  
                           __end_of_ValidateRxOffset 000018                          ??_RADIO_SetChannelFrequency 000004  
                                    _Retransmissions 000000                          ??_SetCallbackSoftwareTimers 000004  
                                ?_DIO4_ISR_Lora_Init 000000                                  _RADIO_SetModulation 000000  
                      ExecuteNewChannel@channelIndex 00005C                       __end_of_SearchAvailableChannel 000108  
                                   ?_EnableChannels2 000004                                      i2_TMR_SwapTimer 000000  
                            __size_of_StartReTxTimer 000000                               ?_UpdateCurrentDataRate 000000  
                             ?_UpdateChannelIdStatus 000002                                      ___llmod@divisor 000011  
                         MacExecuteCommands@fOptsLen 00005F                              __end_of_SystemTimerInit 000008  
                     UpdateChannelIdStatus@statusNew 000002                    __size_of_RADIO_UnhandledInterrupt 000000  
                                    ___llmod@counter 000015                                  TMR_SwapTimer@oldVal 000010  
                          ?_RADIO_UnhandledInterrupt 000000                             __size_of_PIN_MANAGER_IOC 000000  
                                TMR_SwapTimer@retVal 00000E                                _RADIO_FSKPayloadReady 000000  
                     __size_of_HALResetPinMakeOutput 000000                        __end_of_HALResetPinMakeOutput 000004  
                                           ??_Random 00004F                                             ??_RxData 000004  
                                           AESCmac@i 000065                                             AESCmac@j 000064  
                                           AESCmac@n 000063                                             AESCmac@x 000050  
                                           AESCmac@y 000040                           SwTimerReadValue@ticksCount 000035  
                               ?_RADIO_RegisterWrite 000002                       __end_of_AutomaticReplyCallback 000026  
                                RADIO_Init@frequency 000024                             __size_of_TMR1_Initialize 000000  
                               _macEndDevCmdReplyLen 00016C                                             ??___lmul 000042  
                                        ??_AESEncode 00000A                    RADIO_WriteConfiguration@tempValue 00004C  
                              __size_of_LORAWAN_Init 000000                   __size_of_AckRetransmissionCallback 000000  
                              __size_of_LORAWAN_Join 000000                                             ??___wmul 000004  
                              __size_of_LORAWAN_Send 000000                         __end_of_LORAWAN_SetDataRange 000030  
                            __end_of_RADIO_RxTimeout 000030                             MacExecuteCommands@buffer 00005D  
                           ??_SetReceptionNotOkState 00005B                                       ??_TMR_ISR_lora 000031  
                                    ??_DIO0_ISR_Lora 000000                               ??_LORAWAN_GetFrequency 000057  
                                        __pdataBANK1 000000                                          __pdataBANK2 000000  
                   LORAWAN_SetDataRange@dataRangeNew 000007                                    _ValidateDataRange 000000  
                                 __end_of_ExtractMic 00005A             i2SwTimersInterrupt@ticksToNextTimerEvent 00002C  
             SwTimersInterrupt@ticksToNextTimerEvent 00002C                                             ??_memcpy 000006  
                             __size_of_SwTimerCreate 000000                                             ??_memset 000006  
                               ??_DIO4_ISR_Lora_Init 000000                           __end_of_EXT_INT_Initialize 00002A  
                                  _ValidateChannelId 000000                              ?_InitDefault915Channels 000000  
                               ?_RADIO_SetModulation 000000                         ExecuteLinkAdr@auxMaxDataRate 00001C  
                           _RADIO_SetSpreadingFactor 000000                                   _RADIO_RxFSKTimeout 000000  
                                           ?_AESCmac 000059                               __size_of_TMR1_CallBack 000000  
                                           ??_printf 00001E                                      ??_DIO1_ISR_Lora 000000  
                                 ?_ValidateDataRange 000002                             ValidateRxOffset@rxOffset 000000  
                                       AESEncode@aux 000018                                         AESEncode@key 000008  
                             TMR_GetDeltaTime@retVal 000000                                      ?_TMR1_ReadTimer 000000  
                                        ??_IOCB4_ISR 000000                               __end_of_ConfigureRadio 00005C  
                                     _LORAWAN_RxDone 000000                                   ?_ValidateChannelId 000000  
                             TMR_GetDeltaTime@tmrVal 000012                                       _LORAWAN_TxDone 000000  
                       __end_of_LORAWAN_SetDeviceEui 00002E                           __size_of_ExecuteNewChannel 000000  
         LORAWAN_GetMaxPayloadSize@macCommandsLength 000009                                 __end_of_SwTimerStart 000096  
             __end_of_LORAWAN_EnterContinuousReceive 00007A              __size_of_LORAWAN_EnterContinuousReceive 000000  
                     _LORAWAN_EnterContinuousReceive 000000                                          __pbssBIGRAM 000000  
                                    ??_DIO2_ISR_Lora 000000                            __size_of_CountfOptsLength 000000  
                                  CountfOptsLength@i 000007                                          __pbssCOMRAM 000000  
                SearchAvailableChannel@startingIndex 000059                           __end_of_DefaultChannels915 000203  
                                   ??_RADIO_Transmit 000054                                        __pcstackBANK0 000000  
                                      __pcstackBANK1 000000                                  ??_ValidateDataRange 000003  
                                   _TMR_GetDeltaTime 000000                        EnableChannels@channelMaskCntl 00000D  
                            __end_of_RADIO_WriteMode 0000FE              __end_of_UnconfirmedTransmissionCallback 000074  
           __size_of_UnconfirmedTransmissionCallback 000000                      _UnconfirmedTransmissionCallback 000000  
                            SearchAvailableChannel@i 00005C                                  ??_ValidateChannelId 000000  
                                       _isdigit$4395 000001                                RADIO_RegisterRead@reg 000002  
                    __size_of_UpdateMinMaxChDataRate 000000                         ExecuteLinkAdr@auxMinDataRate 000019  
                LORAWAN_SetChannelIdStatus@statusNew 000004                              _RADIO_ReceiveStart$2833 000057  
                                          _aesBuffer 00004D                           ?_ValidateDataRateReception 000000  
                            INTERRUPT_GetDioStatus@a 000000                                    ?_SetJoinFailState 000000  
                                SwTimerStart@timerId 000039                        ??_RADIO_SetFrequencyHopPeriod 000002  
                        RADIO_SetBandwidth@bandwidth 000000                     GenerateUSFrequency1@channelIndex 00004E  
                         __end_of_SwTimerSetCallback 000044    __end_of_ResetParametersForUnconfirmedTransmission 000014  
 __size_of_ResetParametersForUnconfirmedTransmission 000000           ?_ResetParametersForUnconfirmedTransmission 000000  
        ??_ResetParametersForUnconfirmedTransmission 000000            _ResetParametersForUnconfirmedTransmission 000000  
                          ??_AssembleEncryptionBlock 000012                                _INT2_InterruptHandler 000004  
                                 ??_SetJoinFailState 000000                                         _LORAWAN_Init 000000  
                                       _LORAWAN_Join 000000                                         _LORAWAN_Send 000000  
                             RADIO_FSKPayloadReady@i 000094                                    _ValidateFrequency 000000  
                             ??_HALResetPinMakeInput 000000                                 _RADIO_WriteFrequency 000000  
                                    FillSubKey@carry 000006                                     _HALSPICSDeassert 000000  
                                __end_of_RADIO_Reset 000046                                ??_RADIO_RegisterWrite 000003  
                             _PIN_MANAGER_Initialize 000000                                        FillSubKey@key 000002  
                                 ?_ValidateFrequency 000016                                 __end_of_UpdateCfList 000002  
                RADIO_WriteFSKFrequencyDeviation@num 000011                            EnableChannels@channelMask 00000B  
                                          _macBuffer 00010F                                            _dioStatus 000016  
                          __end_of_ValidateDataRange 000084                        RADIO_FSKPayloadReady@irqFlags 000093  
                                  _SwTimersInterrupt 000000                                    ??_SwTimersExecute 00007A  
                                          __pintcode 000000                                             ?___abdiv 000000  
                   __end_of_TMR1_SetInterruptHandler 00000A                                        __pmediumconst 000000  
                            RADIO_Transmit@bufferLen 000053                              __end_of_SPI2_Initialize 00000E  
                                           ?___awdiv 000000                                            __ptext100 000000  
                                          __ptext101 000000                            __end_of_ValidateChannelId 00001E  
                                          __ptext110 000000                                            __ptext102 000000  
                                          __ptext111 000000                                            __ptext103 000000  
                                          __ptext200 000000                                            __ptext120 000000  
                                          __ptext112 000000                                            __ptext104 000000  
                                          __ptext201 000000                                            __ptext121 000000  
                                          __ptext113 000000                                            __ptext105 000000  
                                          __ptext210 000000                                            __ptext202 000000  
                                          __ptext130 000000                                            __ptext122 000000  
                                          __ptext114 000000                                            __ptext106 000000  
                                          __ptext211 000000                                            __ptext203 000000  
                                          __ptext131 000000                                            __ptext123 000000  
                                          __ptext115 000000                                            __ptext107 000000  
                                          __ptext220 000000                                            __ptext212 000000  
                                          __ptext204 000000                                            __ptext140 000000  
                                          __ptext132 000000                                            __ptext124 000000  
                                          __ptext116 000000                                            __ptext108 000000  
                                          __ptext213 000000                                            __ptext205 000000  
                                          __ptext141 000000                                            __ptext133 000000  
                                          __ptext125 000000                                            __ptext117 000000  
                                          __ptext109 000000                                            __ptext214 000000  
                                          __ptext206 000000                                            __ptext150 000000  
                                          __ptext142 000000                                            __ptext134 000000  
                                          __ptext126 000000                                            __ptext118 000000  
                                          __ptext215 000000                                            __ptext207 000000  
                                          __ptext151 000000                                            __ptext143 000000  
                                          __ptext135 000000                                            __ptext127 000000  
                                          __ptext119 000000                                            __ptext216 000000  
                                          __ptext208 000000                                            __ptext160 000000  
                                          __ptext152 000000                                            __ptext144 000000  
                                          __ptext136 000000                                            __ptext128 000000  
                                          __ptext217 000000                                            __ptext209 000000  
                                          __ptext161 000000                                            __ptext153 000000  
                                          __ptext145 000000                                            __ptext137 000000  
                                          __ptext129 000000                                            __ptext218 000000  
                                          __ptext170 000000                                            __ptext162 000000  
                                          __ptext154 000000                                            __ptext146 000000  
                                          __ptext138 000000                                            __ptext219 000000  
                                          __ptext171 000000                                            __ptext163 000000  
                                          __ptext155 000000                                            __ptext147 000000  
                                          __ptext139 000000                                            __ptext180 000000  
                                          __ptext172 000000                                            __ptext164 000000  
                                          __ptext156 000000                                            __ptext148 000000  
                                          __ptext181 000000                                            __ptext173 000000  
                                          __ptext165 000000                                            __ptext157 000000  
                                          __ptext149 000000                                            __ptext190 000000  
                                          __ptext182 000000                                            __ptext174 000000  
                                          __ptext166 000000                                            __ptext158 000000  
                                          __ptext191 000000                                            __ptext183 000000  
                                          __ptext175 000000                                            __ptext167 000000  
                                          __ptext159 000000                                            __ptext192 000000  
                                          __ptext184 000000                                            __ptext176 000000  
                                          __ptext168 000000                                            __ptext193 000000  
                                          __ptext185 000000                                            __ptext177 000000  
                                          __ptext169 000000                                            __ptext194 000000  
                                          __ptext186 000000                                            __ptext178 000000  
                                          __ptext195 000000                                            __ptext187 000000  
                                          __ptext179 000000                                            __ptext196 000000  
                                          __ptext188 000000                                            __ptext197 000000  
                                          __ptext189 000000                                            __ptext199 000000  
                                  _EncryptFRMPayload 000000                                             ?___lldiv 000000  
                       RADIO_FSKPacketSent@timeOnAir 00004A                        __size_of_UpdateJoinInProgress 000000  
                     __end_of_InitDefault915Channels 000044                                             ?___llmod 00000D  
                      __size_of_ExecuteRxTimingSetup 000000                                      ??_AESEncodeLoRa 000021  
           SelectChannelForTransmission@channelIndex 000065                      __end_of_PrepareJoinRequestFrame 000190  
                                           ?___lwmod 000048                                   ?_SwTimersInterrupt 000020  
                          _RADIO_SetChannelFrequency 000000                          __size_of_DIO3_ISR_Lora_Init 000000  
              IncludeMacCommandsResponse@bufferIndex 00000E                            _SetCallbackSoftwareTimers 000000  
                                 ConfigureRadio@freq 000004                                ??_RADIO_SetModulation 000000  
                                   ?_RADIO_GetStatus 000000                               __end_of_LORAWAN_RxDone 000C8C  
                                ??_ValidateFrequency 00001A                               __end_of_LORAWAN_TxDone 0002C2  
                                 ?_EncryptFRMPayload 000031                        LORAWAN_SetDataRange@channelId 000009  
                       ??_INTERRUPT_InterruptManager 000033                                     __CFG_PRICLKEN$ON 000000  
                       __end_of_LORAWAN_PlatformInit 000022                       __size_of_RADIO_SetLoRaSyncWord 000000  
                                   _ExecuteDevStatus 000000                        __end_of_RADIO_SetLoRaSyncWord 00000A  
             IncludeMacCommandsResponse@pBufferIndex 000002                           __size_of_SwTimerSetTimeout 000000  
                        ??_LORAWAN_GetMaxPayloadSize 000008                       LORAWAN_LinkCheckConfigure@iCtr 000050  
                   ExecuteRxParamSetupReq@dlSettings 00004E                                       _AssemblePacket 000000  
                                    ?_ConfigureRadio 000004                            AssemblePacket@bufferIndex 000072  
                         ??_INT2_SetInterruptHandler 000002                                             _BAUDCON1 000FB8  
                         __end_ofi2_TMR_GetDeltaTime 00016C                                  ??_SwTimersInterrupt 000024  
                                           ?_isdigit 000000                                 RADIO_DIO0@dioMapping 000097  
                              __end_of_TMR_SwapTimer 00004A                                         ?_SwTimerStop 000000  
                            __end_of_Retransmissions 00012E                                  ??_EncryptFRMPayload 00003F  
                            __end_ofi2_TMR_SwapTimer 000044                              __size_of_EncKeySchedule 000000  
                                 AssemblePacket@mhdr 00006F                                   AssemblePacket@port 000067  
                          __size_of_RADIO_ReadRandom 000000                             ConfigureRadioRx@dataRate 00000D  
                                 _RADIO_ReceiveStart 000000                                       __size_of_srand 000000  
                           __end_of_LORAWAN_Mainloop 00003E                                       __size_of_putch 000000  
                               _INTERRUPT_Initialize 000000                                        _SwTimerCreate 000000  
                       __end_of_GenerateUSFrequency1 000050                         __end_of_GenerateUSFrequency2 00006E  
                IncludeMacCommandsResponse@macBuffer 000000                    __end_of_ValidateDataRateReception 00001E  
                           ?_RADIO_FHSSChangeChannel 000000                        ValidateFrequency@frequencyNew 000016  
                                      _TMR1_CallBack 000000                            __end_of_ValidateFrequency 000070  
                          __size_of_RADIO_SetPABoost 000000                                     _ExecuteLinkCheck 000000  
                               i2SwTimersInterrupt@i 000030                                             _INT1_ISR 000000  
                                           _INT2_ISR 000000                                    EncKeySchedule@key 000000  
                                     ___wmul@product 000004                                             _IOCBbits 000F62  
                                 _RADIO_SetBandwidth 000000                               ?_RADIO_FSKPayloadReady 000000  
                  __size_of_INT1_SetInterruptHandler 000000                                 __end_of_rxWindowSize 000161  
                              ?_RADIO_WriteFrequency 000016                            ?_INT1_SetInterruptHandler 000000  
                                   ?_SystemTimerInit 000000                                            _reloadVal 000008  
                                ?_RADIO_ReceiveStart 000051                                     _SwTimerReadValue 000000  
                                           _PIE1bits 000F9D                                     _ExecuteDutyCycle 000000  
                                    _HALDIO5PinValue 000000                                 RADIO_DIO1@dioMapping 00006B  
                          __end_of_SwTimersInterrupt 000102                             __size_of_TMR1_WriteTimer 000000  
                __size_of_INTERRUPT_InterruptManager 000000                           __end_of_DIO2_ISR_Lora_Init 000010  
                                           _PIR1bits 000F9E                                     GenerateSubkey@k1 000033  
                                   GenerateSubkey@k2 000035                                 ConfigureRadioRx@freq 000009  
                          __end_of_EncryptFRMPayload 0001D8                       __size_of_RADIO_WriteFSKBitRate 000000  
                           UpdateReceiveDelays@delay 000006                            LORAWAN_RxDone@bufferIndex 000086  
                             __size_of_UpdateTxPower 000000                        __end_of_RADIO_WriteFSKBitRate 000068  
                        UpdateDataRange@dataRangeNew 000000                                             _RCONbits 000FD0  
                                ?_RADIO_SetBandwidth 000000                   SearchAvailableChannel@channelIndex 000050  
                                          _rxPayload 000000                                     __CFG_WDTPS$32768 000000  
                             _UpdateMinMaxChDataRate 000000                        EncryptFRMPayload@bufferLength 000033  
                            ValidateDataRange@result 000003                                             _SSP2CON1 000F6C  
                 __size_of_TransmissionErrorCallback 000000                        __size_of_FindSmallestDataRate 000000  
                                           _TMR1_ISR 000000                 __size_of_RADIO_SetFrequencyHopPeriod 000000  
                                   ?_RADIO_RxTimeout 000000                  __size_of_IncludeMacCommandsResponse 000000  
                                           _SSP2STAT 000F6D                         ??_LORAWAN_LinkCheckConfigure 000048  
                                  ??_PIN_MANAGER_IOC 000000                          __size_of_RADIO_GetPacketSnr 000000  
                                _UpdateReceiveDelays 000000                      __size_of_SetReceptionNotOkState 000000  
                                    EnableChannels@i 00000F                               __end_of_AssemblePacket 0003B0  
                                    ?_LORAWAN_RxDone 000066                                      ?_LORAWAN_TxDone 00003A  
                                  ??_TMR1_Initialize 000002                                     ___abdiv@dividend 000006  
                                 _DIO1_ISR_Lora_Init 000000                                    ___wmul@multiplier 000000  
                          EnableChannels2@startIndex 000009                                     __size_of_AESCmac 000000  
                               ??_RADIO_ReceiveStart 000053                              ValidateFrequency@result 00001A  
                                         printf@flag 00002A                           __end_of_PrepareSessionKeys 0000AC  
                                  ?_ConfigureRadioRx 000009                                           printf@prec 000022  
                               RADIO_DIO2@dioMapping 000025                                   AESEncodeLoRa@block 00001D  
                                           _Channels 000000                          __end_of_RADIO_FSKPacketSent 000130  
            RADIO_SetSpreadingFactor@spreadingFactor 000000                                   ??_ConfigureRadioRx 00000D  
                               ??_RADIO_SetBandwidth 000000                                  ?_DIO1_ISR_Lora_Init 000000  
                      RADIO_SetIQInverted@iqInverted 000000                                     ?_RADIO_WriteMode 000005  
                          LORAWAN_RxDone@computedMic 00008A                                    ___lmul@multiplier 00003A  
                                        _INTCON2bits 000FF1                                          _INTCON3bits 000FF0  
                                     ?_SwTimerCreate 000000                                            copy_data0 000014  
                                          copy_data1 000034                                            copy_data2 000054  
                              ?_INTERRUPT_Initialize 000000                              ?_INTERRUPT_GetDioStatus 000000  
                               ?_UpdateReceiveDelays 000000                             _INT0_SetInterruptHandler 000000* 
                               _LORAWAN_SetDataRange 000000                          __end_of_RADIO_SetIQInverted 00000A  
                                     ?_TMR1_CallBack 000000                                 __end_of_TMR_ISR_lora 000056  
                                        _RADIO_Reset 000000                                  ExecuteLinkCheck@ptr 000000  
                     i2SwTimersInterrupt@timeElapsed 000028                                   _RADIO_RegisterRead 000000  
                            ??_StopAllSoftwareTimers 000001                                       _StartReTxTimer 000000  
                        __end_ofi2_SwTimersInterrupt 000100                            _LORAWAN_GetMaxPayloadSize 000000  
                         LORAWAN_RxDone@extractedMic 000082                                          AESCmac@flag 000062  
                      EncryptFRMPayload@frameCounter 000035                     GenerateUSFrequency2@channelIndex 000052  
                                 CheckMcastFlags@hdr 000000                                          AESCmac@size 00005F  
                           SwTimerSetTimeout@timerId 000015                             SwTimerSetTimeout@timeout 00000D  
                              RADIO_WriteMode@opMode 00000B                             ??_ExecuteRxParamSetupReq 000048  
                __size_of_LORAWAN_LinkCheckConfigure 000000                                     ___abdiv@quotient 000005  
            UpdateReceiveWindow2Parameters@frequency 000000                                 RADIO_DIO3@dioMapping 000006  
                               _LORAWAN_SetDeviceEui 000000                                             __Hrparam 000000* 
                                ?_RADIO_RegisterRead 000000                                      ExecuteLinkAdr@i 000021  
                       __end_of_SystemBlockingWaitMs 000030               ValidateChannelMaskCntl@channelMaskCntl 000003  
                                  i2_TMR1_WriteTimer 000000                                            memcpy@tmp 00000A  
         LORAWAN_SetApplicationEui@applicationEuiNew 00000B                                             __Lrparam 000000* 
                                   ??_EncodeShiftRow 000002             GenerateUSFrequencyReception@channelIndex 00004E  
                               ??_DIO1_ISR_Lora_Init 000002                             __size_of_CheckMcastFlags 000000  
                                 __CFG_BOREN$SBORDIS 000000                                TMR1_ReadTimer@readVal 000004  
                         __size_of_ValidateDataRange 000000                            _ticksToScheduledInterrupt 000000  
                                  __CFG_P2BMX$PORTD2 000000                         ValidateDataRange@dataRateMax 000004  
                       ValidateDataRange@dataRateMin 000005                           __size_of_ValidateChannelId 000000  
                                   ?_SPI2_Initialize 000000                                   ?i2_TMR1_WriteTimer 000000  
                                   __size_of___abdiv 000000                              ??_OSCILLATOR_Initialize 000000  
                                  ?_ValidateDataRate 000000                                     __size_of___awdiv 000000  
                                 _ComputeSessionKeys 000000                                __size_of_SwTimerStart 000000  
                      LORAWAN_GetFrequency@channelId 00005B                                     __size_of___lldiv 000000  
                                   __size_of___llmod 000000                          __size_of_EUSART1_Initialize 000000  
                                   __size_of___lwmod 000000                                      ?_AssemblePacket 000067  
                               AssemblePacket@buffer 000068                                     SwTimersExecute@i 00007E  
                              EnableChannels@channel 00000E                                   ??_ValidateDataRate 000000  
                           _TMR1_SetInterruptHandler 000000                               _IOCB4_InterruptHandler 000008  
                                        _radioBuffer 000000                                  ??i2_TMR1_WriteTimer 000002  
    __end_of_ResetParametersForConfirmedTransmission 000012     __size_of_ResetParametersForConfirmedTransmission 000000  
           ?_ResetParametersForConfirmedTransmission 000000            ??_ResetParametersForConfirmedTransmission 000000  
            _ResetParametersForConfirmedTransmission 000000                                _TMR1_InterruptHandler 00000A  
                                   ??_GenerateSubkey 000037                                     _CountfOptsLength 000000  
                                         _HALSPISend 000000                                  ?_ComputeSessionKeys 000031  
                                     _rxWindowOffset 000137                   RADIO_UnhandledInterrupt@modulation 000004  
                         __end_of_MacExecuteCommands 0002F6                                 ??_RADIO_RegisterRead 000002  
                               RADIO_DIO4@dioMapping 000007                                     __size_of_isdigit 000000  
                   __end_of_RADIO_UnhandledInterrupt 000032                                     ?_Retransmissions 000000  
                                      _UpdateTxPower 000000                                 RADIO_Transmit@buffer 000051  
                    __end_of_RADIO_FHSSChangeChannel 000040                                      _allocatedTimers 000004  
                     ?_IOCB4_DefaultInterruptHandler 000000                       __end_of_INTERRUPT_GetDioStatus 000014  
                                  ?i2_TMR1_ReadTimer 000000                                   _DIO5_ISR_Lora_Init 000000  
                                           __ptext10 000000                                             __ptext11 000000  
                                           __ptext20 000000                                             __ptext12 000000  
                                           __ptext21 000000                                             __ptext13 000000  
                                         _T1GCONbits 000FCC                                             __ptext30 000000  
                                           __ptext22 000000                                             __ptext14 000000  
                                           __ptext31 000000                                             __ptext23 000000  
                                           __ptext15 000000                                             __ptext40 000000  
                                           __ptext32 000000                                             __ptext24 000000  
                                           __ptext16 000000                                             __ptext41 000000  
                                           __ptext33 000000                                             __ptext25 000000  
                                           __ptext17 000000                                             __ptext50 000000  
                                           __ptext42 000000                                             __ptext34 000000  
                                           __ptext26 000000                                             __ptext18 000000  
                                           __ptext51 000000                                             __ptext43 000000  
                                           __ptext35 000000                                             __ptext27 000000  
                                           __ptext19 000000                                             __ptext60 000000  
                                           __ptext52 000000                                             __ptext44 000000  
                                           __ptext36 000000                                             __ptext28 000000  
                                           __ptext61 000000                                             __ptext53 000000  
                                           __ptext45 000000                                             __ptext37 000000  
                                           __ptext29 000000                                             __ptext70 000000  
                                           __ptext62 000000                                             __ptext54 000000  
                                           __ptext46 000000                                             __ptext38 000000  
                                   ?i2_TMR_SwapTimer 000008                                             __ptext71 000000  
                                           __ptext63 000000                                             __ptext55 000000  
                                           __ptext47 000000                                             __ptext39 000000  
                                           __ptext80 000000                                             __ptext72 000000  
                                           __ptext64 000000                                             __ptext56 000000  
                                           __ptext48 000000                                             __ptext81 000000  
                                           __ptext73 000000                                             __ptext65 000000  
                                           __ptext57 000000                                             __ptext49 000000  
                                           __ptext90 000000                                             __ptext82 000000  
                                           __ptext74 000000                                             __ptext66 000000  
                                           __ptext58 000000                                             __ptext91 000000  
                                           __ptext83 000000                                             __ptext75 000000  
                                           __ptext67 000000                                             __ptext59 000000  
                                           __ptext92 000000                                             __ptext84 000000  
                                           __ptext76 000000                                             __ptext68 000000  
                                           __ptext93 000000                                             __ptext85 000000  
                                           __ptext77 000000                                             __ptext69 000000  
                                           __ptext94 000000                                             __ptext86 000000  
                                           __ptext78 000000                                             __ptext95 000000  
                                           __ptext87 000000                                             __ptext79 000000  
                                           __ptext96 000000                                             __ptext88 000000  
                                           __ptext97 000000                                             __ptext89 000000  
                                           __ptext98 000000                                             __ptext99 000000  
                            ExecuteRxTimingSetup@ptr 000007                                ??_UpdateReceiveDelays 000006  
                              __end_of_LORAWAN_Reset 00017E                               __end_of_StartReTxTimer 000002  
                              ?_LORAWAN_SetDataRange 000007                              ??_UpdateCurrentDataRate 000000  
                            ??_UpdateChannelIdStatus 000003                             __size_of_UpdateDataRange 000000  
                             _SetReceptionNotOkState 000000                                         _SSP2CON1bits 000F6C  
                                GenerateSubkey@F7103 000000                                   ??i2_TMR1_ReadTimer 000002  
                          __size_of_RADIO_WritePower 000000                              __end_of_HALDIO5PinValue 00000C  
                                  ?_UpdateDLSettings 000000                               ConfigureRadio@dataRate 000008  
                                  ?_ValidateRxOffset 000000                           __size_of_ValidateFrequency 000000  
                   __size_of_PrepareJoinRequestFrame 000000                                        CheckFlags@hdr 000000  
                             ??_RADIO_WriteFrequency 00001A                                __size_of_UpdateCfList 000000  
                                ?_DIO5_ISR_Lora_Init 000000                        __size_of_RADIO_SetOutputPower 000000  
                                      __size_of_main 000000                                        __size_of_rand 000000  
                                  _RADIO_ReceiveStop 000000                                   ??_UpdateDLSettings 000001  
                               _LORAWAN_PlatformInit 000000                                   ??_ValidateRxOffset 000000  
                          __end_ofi2_TMR1_WriteTimer 00001C            IncludeMacCommandsResponse@bIncludeInFopts 000004  
                               ??_ComputeSessionKeys 000033                                ?_LORAWAN_SetDeviceEui 00000B  
                                      _timerOverflow 00000A                                         _SwTimerStart 000000  
                         __size_of_SwTimersInterrupt 000000                                   ?_RADIO_ReceiveStop 000000  
                         ??_RADIO_SetSpreadingFactor 000000                                 RADIO_DIO5@dioMapping 000006  
                              RADIO_TxDone@timeOnAir 00004A                          __size_of_DIO0_ISR_Lora_Init 000000  
                         __size_of_EncryptFRMPayload 000000                                      GenerateSubkey@i 000058  
                                    GenerateSubkey@l 000048                              PrepareSessionKeys@index 000011  
                           __end_of_TMR_GetDeltaTime 000198                                   SwTimerStop@timerId 000000  
                                           _swTimers 000000                                     ??_TMR1_ReadTimer 000002  
                               RADIO_RxDone@irqFlags 000093                 __end_of_GenerateUSFrequencyReception 000050  
              __size_of_GenerateUSFrequencyReception 000000                         _GenerateUSFrequencyReception 000000  
                 __end_of_INTERRUPT_InterruptManager 000076                           _INTERRUPT_InterruptManager 000000  
                                ??_RADIO_ReceiveStop 00000C                          PrepareSessionKeys@networkId 00000F  
                                  _RADIO_ReleaseData 000000                                            printf@val 000026  
                                  ??_TMR1_WriteTimer 000002                                             main@freq 000069  
                               _GenerateUSFrequency1 000000                                 _GenerateUSFrequency2 000000  
                                         _RADIO_DIO0 000000                                           _RADIO_DIO1 000000  
                                         _RADIO_DIO2 000000                                           _RADIO_DIO3 000000  
                                         _RADIO_DIO4 000000                                           _RADIO_DIO5 000000  
                                       _SSP2STATbits 000F6D                                 ??_DIO5_ISR_Lora_Init 000000  
               __end_of_INT1_DefaultInterruptHandler 000002                __size_of_INT1_DefaultInterruptHandler 000000  
                       _INT1_DefaultInterruptHandler 000000                    __size_of_RADIO_WriteConfiguration 000000  
                             __end_of_rxWindowOffset 000145                          i2TMR1_ReadTimer@readValHigh 000006  
                            EncryptFRMPayload@buffer 000031                                   ?_RADIO_ReleaseData 000000  
                          ?_RADIO_WriteConfiguration 000046                                           _RADIO_Init 000000  
                    ExecuteRxParamSetupReq@frequency 00004A                             ?_ValidateChannelMaskCntl 000000  
                                      __roundCounter 000015                                           _INTCONbits 000FF2  
                           __end_of_HALSPICSDeassert 000004                                       ?_UpdateTxPower 000000  
                                           memcpy@d1 000000                                             memcpy@s1 000002  
                                     _EncKeySchedule 000000                   __size_of_SetCallbackSoftwareTimers 000000  
                            __size_of_RxJoinResponse 000000                                      ??_SwTimerCreate 000000  
                                ExecuteDutyCycle@ptr 000000                                         _UpdateCfList 000000  
                                ??_RADIO_ReleaseData 000000                                             isdigit@c 000002  
                             ??_INTERRUPT_Initialize 000000                                             memset@p1 000000  
                                    ??_TMR1_CallBack 000033                                 __size_of_SwTimerStop 000000  
                                   _RADIO_ReadRandom 000000                                    _RADIO_TxDone$2846 00004E  
                                 _EXT_INT_Initialize 000000                                      ?_StartReTxTimer 000000  
                              _TMR_OverrideRemaining 000000                          ??_ValidateDataRateReception 000000  
                                           intlevel2 000000*                      RADIO_ReceiveStart@rxWindowSize 000051  
                          __end_of_RADIO_ReceiveStop 000022                                      _SwTimersExecute 000000  
                SwTimerSetCallback@callbackParameter 000002                                          FillSubKey@i 000007  
                      RADIO_WriteFrequency@frequency 000016                                     _RADIO_SetPABoost 000000  
                                   ___lwmod@dividend 000048                                ?_LORAWAN_PlatformInit 000000  
                                   ___lldiv@dividend 000000                             __end_of_ExecuteDevStatus 00000A  
                            ?_PIN_MANAGER_Initialize 000000                                   _DefaultChannels915 000173  
                                ?_EXT_INT_Initialize 000000                                         ___abdiv@sign 000004  
                                         _RCSTA1bits 000FAB                               GenerateSubkey@const_Rb 000038  
                    __size_of_ExecuteRxParamSetupReq 000000                            UpdateJoinInProgress@state 000000  
                 __end_of_LORAWAN_LinkCheckConfigure 00015E                            __end_of_RADIO_ReleaseData 000006  
                         _LORAWAN_LinkCheckConfigure 000000                                   __end_of_txPower915 00016C  
                           __size_of_EnableChannels2 000000                                             printf@ap 000024  
                              _HALResetPinMakeOutput 000000                             ??_HALResetPinOutputValue 000000  
                             __size_of_INT1_CallBack 000000                            RADIO_WriteConfiguration@i 00004B  
                          ExecuteRxTimingSetup@delay 000009                                     AESEncodeLoRa@key 00001F  
                          __size_of_SetJoinFailState 000000                     LORAWAN_LinkCheckConfigure@period 000046  
                                   ??_ConfigureRadio 000008                                   _SwTimerSetCallback 000000  
        __end_of_UpdateRetransmissionAckTimeoutState 000072         __size_of_UpdateRetransmissionAckTimeoutState 000000  
               ?_UpdateRetransmissionAckTimeoutState 000000                ??_UpdateRetransmissionAckTimeoutState 00003A  
                _UpdateRetransmissionAckTimeoutState 000000                                    RADIO_ReadRandom@i 000011  
                       SearchAvailableChannel@result 000058                                ?_GenerateUSFrequency1 000046  
                              ?_GenerateUSFrequency2 000046                                RADIO_WritePower@paDac 000005  
                             __size_of_INT2_CallBack 000000                          __size_of_DIO4_ISR_Lora_Init 000000  
                             __size_of_EUSART1_Write 000000                        ?_GenerateUSFrequencyReception 000046  
                              __end_of_DIO0_ISR_Lora 000006                        __size_of_LORAWAN_GetFrequency 000000  
                                  ??_CheckMcastFlags 000002                             __end_of_ExecuteLinkCheck 000032  
           SelectChannelForTransmission@lastDataRate 000062                                RADIO_WritePower@power 000006  
                           ?_CreateAllSoftwareTimers 000000                     RADIO_WriteMode@currentModulation 000007  
                               ??_EXT_INT_Initialize 000002                                         _rxWindowSize 000153  
                             __end_of_EncKeySchedule 0002A4                        ?_INT1_DefaultInterruptHandler 000000  
                              __end_of_DIO1_ISR_Lora 000006                                  ?_SwTimerSetCallback 000000  
                           __end_of_SwTimerReadValue 000040                                     ___lldiv@quotient 000008  
                                        ?_HALSPISend 000000                             __end_of_ExecuteDutyCycle 000026  
                                    ___lwmod@divisor 00004A               __end_of_UpdateReceiveWindow2Parameters 000016  
            __size_of_UpdateReceiveWindow2Parameters 000000                       _UpdateReceiveWindow2Parameters 000000  
                            UpdateTxPower@txPowerNew 000000                                      ___lwmod@counter 00004C  
                    _LORAWAN_LinkCheckConfigure$1092 00004C                     __end_of_INT1_SetInterruptHandler 00000A  
                       FindSmallestDataRate@dataRate 000003                        LORAWAN_Join@activationTypeNew 00007D  
                              __size_of_TMR_ISR_lora 000000                                    __CFG_T3CMX$PORTC0 000000  
                              __end_of_DIO2_ISR_Lora 000006                                 _SystemBlockingWaitMs 000000  
                              FindSmallestDataRate@i 000002                   ComputeSessionKeys@joinAcceptBuffer 000031  
                            __size_of_EnableChannels 000000                               ??_LORAWAN_SetDataRange 000008  
                       __end_of_UpdateJoinInProgress 00001A                         __end_of_ExecuteRxTimingSetup 000028  
                            __size_of_HALSPICSAssert 000000                   __size_of_LORAWAN_SetApplicationEui 000000  
           __end_of_RADIO_WriteFSKFrequencyDeviation 00006A            __size_of_RADIO_WriteFSKFrequencyDeviation 000000  
                 ??_RADIO_WriteFSKFrequencyDeviation 000011                    ?_RADIO_WriteFSKFrequencyDeviation 00000D  
                   _RADIO_WriteFSKFrequencyDeviation 000000                   __size_of_LORAWAN_SetApplicationKey 000000  
                                   ExtractMic@buffer 00000B                           ?_LORAWAN_SetApplicationEui 00000B  
                            ??_RADIO_FSKPayloadReady 000093                             UpdateDataRange@channelId 000001  
                         ?_LORAWAN_SetApplicationKey 00000B                             _RADIO_UnhandledInterrupt 000000  
                                   ?_HALDIO5PinValue 000000                       __end_of_PIN_MANAGER_Initialize 000056  
                                  ?_LORAWAN_Mainloop 000000                          __end_of_RADIO_RegisterWrite 000020  
                            __size_of_ExecuteLinkAdr 000000                         RADIO_WriteFSKBitRate@bitRate 00000D  
                                 i2_TMR_GetDeltaTime 000000                                      RADIO_SetCRC@crc 000000  
                                  __CFG_FOSC$INTIO67 000000                               ??_LORAWAN_SetDeviceEui 00000D  
                                    _PIN_MANAGER_IOC 000000                                  RADIO_WritePower@ocp 000004  
                                 ??_LORAWAN_Mainloop 000099                           __size_ofi2_TMR1_WriteTimer 000000  
                               ??_SwTimerSetCallback 000003                                    ??_UpdateDataRange 000001  
                            ?_UpdateMinMaxChDataRate 000000                                      _TMR1_Initialize 000000  
                   RADIO_WriteConfiguration@regValue 000050                              i2TMR1_ReadTimer@readVal 000004  
                                 _RadioConfiguration 000017                              EnableChannels2@endIndex 000004  
                                      ExtractMic@mic 000013                                    _LORAWAN_RxTimeout 000000  
                        __end_of_RADIO_SetModulation 00000A                        __size_of_HALResetPinMakeInput 000000  
                        __size_of_RADIO_RxFSKTimeout 000000                                     ??_LORAWAN_RxDone 00007A  
                                ?i2_TMR_GetDeltaTime 000008  
